generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActiveAdminUser {
  id      String  @id @default(cuid()) @db.VarChar(25)
  adminId String? @map("admin") @db.VarChar(25)
  admin   User?   @relation(fields: [adminId], references: [id])
}

model AdminActionLog {
  actionId          Int       @id @default(autoincrement())
  entityId          String
  tableName         String
  triggeredAt       DateTime
  action            String
  rowData           String
  changedFields     String?
  statementOnly     Boolean
  activeAdminUserId String?   @map("activeAdminUser") @db.VarChar(25)
  activeAdminUser   User?     @relation(fields: [activeAdminUserId], references: [id])
  interpretedAt     DateTime?

  // should be a single record. will be fixed by full prisma2 migration
  interpretation AdminActionLogInterpretation[]
}

model AdminActionLogInterpretation {
  id             String          @id @default(cuid()) @db.VarChar(25)
  entityId       String
  tableName      String
  interpretation String?
  data           String?
  logId          Int?            @map("log")
  AdminActionLog AdminActionLog? @relation(fields: [logId], references: [actionId])
}

model BagItem {
  id               String          @id @default(cuid()) @db.VarChar(25)
  createdAt        DateTime
  updatedAt        DateTime        @updatedAt
  position         Int?
  saved            Boolean?
  status           String
  customerId       String?         @map("customer") @db.VarChar(25)
  customer         Customer?       @relation(fields: [customerId], references: [id])
  productVariantId String?         @map("productVariantId") @db.VarChar(25)
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
}

model BillingInfo {
  id               String    @id @default(cuid()) @db.VarChar(25)
  brand            String
  name             String?
  last_digits      String
  expiration_month Int
  expiration_year  Int
  street1          String?
  street2          String?
  city             String?
  state            String?
  country          String?
  postal_code      String?
  createdAt        DateTime
  updatedAt        DateTime  @updatedAt
  customer         Customer?
}

model BlogPost {
  id               String          @id @default(cuid()) @db.VarChar(25)
  webflowId        String
  webflowCreatedAt DateTime
  webflowUpdatedAt DateTime
  slug             String
  name             String?
  body             String?
  summary          String?
  thumbnailURL     String?
  imageURL         String?
  imageAlt         String?
  url              String?
  author           String?
  category         String?
  createdAt        DateTime
  updatedAt        DateTime        @updatedAt
  publishedOn      DateTime
  imageId          String?         @map("image") @db.VarChar(25)
  image            Image?          @relation(fields: [imageId], references: [id])
  tags             BlogPost_tags[]
}

model BlogPost_tags {
  nodeId   String   @db.VarChar(25)
  position Int
  value    String
  BlogPost BlogPost @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model BottomSize {
  id     String   @id @default(cuid()) @db.VarChar(25)
  type   String?
  value  String?
  waist  Decimal?
  rise   Decimal?
  hem    Decimal?
  inseam Decimal?

  // Do not use. Artifact of prisma2 migration
  Sizes Size[]
}

model Brand {
  id                           String                      @id @default(cuid()) @db.VarChar(25)
  slug                         String                      @unique
  brandCode                    String                      @unique
  description                  String?
  isPrimaryBrand               Boolean
  name                         String
  since                        DateTime?
  tier                         String
  websiteUrl                   String?
  createdAt                    DateTime
  updatedAt                    DateTime                    @updatedAt
  basedIn                      String?
  designer                     String?
  published                    Boolean
  featured                     Boolean
  logo                         String?
  logoImageId                  String?                     @map("logoImage") @db.VarChar(25)
  logoImage                    Image?                      @relation(fields: [logoImageId], references: [id])
  externalShopifyIntegrationId String?                     @map("externalShopifyIntegration") @db.VarChar(25)
  externalShopifyIntegration   ExternalShopifyIntegration? @relation(fields: [externalShopifyIntegrationId], references: [id])
  images                       Image[]                     @relation("BrandToBrandImages")
  products                     Product[]
  shopifyProductVariants       ShopifyProductVariant[]


  // Do not use. Artifact of Prisma2 migration
  Launch Launch[]

}

// TODO: Clean up
// Tricky one -- how to handle relations to the same record type?

model Category {
  id                          String                        @id @default(cuid()) @db.VarChar(25)
  slug                        String                        @unique
  name                        String                        @unique
  description                 String?
  image                       String?
  visible                     Boolean
  updatedAt                   DateTime?                     @updatedAt
  products                    Product[]
  ProductMaterialCategory     ProductMaterialCategory[]
  WarehouseLocationConstraint WarehouseLocationConstraint[]
  Category_B                  Category[]                    @relation("CategoryToChildren")
  Category_A                  Category[]                    @relation("CategoryToChildren")
}

model Collection {
  id                 String                    @id @default(cuid()) @db.VarChar(25)
  slug               String                    @unique
  title              String?
  subTitle           String?
  published          Boolean
  createdAt          DateTime
  updatedAt          DateTime?                 @updatedAt
  displayTextOverlay Boolean
  textOverlayColor   String?
  descriptions       Collection_descriptions[]
  placements         Collection_placements[]
  images             Image[]
  products           Product[]

  // Do not use. Artifact of prisma2 migration
  Launch Launch[]
}

model Collection_descriptions {
  nodeId     String     @db.VarChar(25)
  position   Int
  value      String
  Collection Collection @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model Collection_placements {
  nodeId     String     @db.VarChar(25)
  position   Int
  value      String
  Collection Collection @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model Color {
  id              String           @id @default(cuid()) @db.VarChar(25)
  slug            String           @unique
  name            String
  colorCode       String           @unique
  hexCode         String
  productVariants ProductVariant[]


  // Do not use. Artifact of prisma2 migration
  Product_ColorToProduct_color          Product[] @relation("ColorToProduct_color")
  Product_ColorToProduct_secondaryColor Product[] @relation("ColorToProduct_secondaryColor")
}

model Customer {
  id                      String                           @id @default(cuid()) @db.VarChar(25)
  status                  String?
  detailId                String?                          @map("detail") @db.VarChar(25)
  detail                  CustomerDetail?                  @relation(fields: [detailId], references: [id])
  userId                  String?                          @map("user") @db.VarChar(25)
  user                    User?                            @relation(fields: [userId], references: [id])
  plan                    String?
  billingInfoId           String?                          @map("billingInfo") @db.VarChar(25)
  billingInfo             BillingInfo?                     @relation(fields: [billingInfoId], references: [id])
  createdAt               DateTime
  updatedAt               DateTime                         @updatedAt
  authorizedAt            DateTime?
  admissionsId            String?                          @map("admissions") @db.VarChar(25)
  admissions              CustomerAdmissionsData?          @relation(fields: [admissionsId], references: [id])
  referralLink            String?                          @unique
  referrerId              String?                          @db.VarChar(25)
  referrer                Customer?                        @relation("CustomerToCustomer_referrer", fields: [referrerId], references: [id])
  referrees               Customer[]                       @relation("CustomerToCustomer_referrer")
  utmId                   String?                          @map("utm") @db.VarChar(25)
  UTMData                 UTMData?                         @relation(fields: [utmId], references: [id])
  bagItems                BagItem[]
  membership              CustomerMembership? // should be required, need to look into that
  orders                  Order[]
  productNotifications    ProductNotification[]
  recentlyViewedProducts  RecentlyViewedProduct[]
  reservations            Reservation[]
  notificationBarReceipts CustomerNotificationBarReceipt[] @relation("CustomerToCustomerNotificationBarReceipts")
  emailedProducts         Product[]                        @relation("CustomerToEmailedProducts")

}

// TODO: Clean up

model CustomerAdmissionsData {
  id                          String    @id @default(cuid()) @db.VarChar(25)
  inServiceableZipcode        Boolean
  admissable                  Boolean
  inAdmissableReason          String?
  createdAt                   DateTime
  updatedAt                   DateTime  @updatedAt
  authorizationsCount         Int
  allAccessEnabled            Boolean
  authorizationWindowClosesAt DateTime?
  customer                    Customer?
}

// TODO: Clean up

model CustomerDetail {
  id                        String                      @id @default(cuid()) @db.VarChar(25)
  phoneNumber               String?
  birthday                  DateTime?
  height                    Int?
  bodyType                  String?
  averageTopSize            String?
  averageWaistSize          String?
  averagePantLength         String?
  preferredPronouns         String?
  profession                String?
  partyFrequency            String?
  travelFrequency           String?
  shoppingFrequency         String?
  averageSpend              String?
  style                     String?
  commuteStyle              String?
  createdAt                 DateTime
  updatedAt                 DateTime                    @updatedAt
  shippingAddress           String?                     @db.VarChar(25)
  phoneOS                   String?
  insureShipment            Boolean
  stylePreferences          String?                     @db.VarChar(25)
  instagramHandle           String?
  impactId                  String?
  discoveryReference        String?
  Location                  Location?                   @relation(fields: [shippingAddress], references: [id])
  StylePreferences          StylePreferences?           @relation(fields: [stylePreferences], references: [id])
  Customer                  Customer[]
  CustomerDetail_styles     CustomerDetail_styles[]
  CustomerDetail_topSizes   CustomerDetail_topSizes[]
  CustomerDetail_waistSizes CustomerDetail_waistSizes[]
  CustomerDetail_weight     CustomerDetail_weight[]
}

model CustomerDetail_styles {
  nodeId         String         @db.VarChar(25)
  position       Int
  value          String
  CustomerDetail CustomerDetail @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model CustomerDetail_topSizes {
  nodeId         String         @db.VarChar(25)
  position       Int
  value          String
  CustomerDetail CustomerDetail @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model CustomerDetail_waistSizes {
  nodeId         String         @db.VarChar(25)
  position       Int
  value          Int
  CustomerDetail CustomerDetail @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model CustomerDetail_weight {
  nodeId         String         @db.VarChar(25)
  position       Int
  value          Int
  CustomerDetail CustomerDetail @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model CustomerMembership {
  id             String       @id @default(cuid()) @db.VarChar(25)
  subscriptionId String
  customerId     String       @map("customer") @db.VarChar(25)
  customer       Customer     @relation(fields: [customerId], references: [id])
  planId         String?      @map("plan") @db.VarChar(25)
  plan           PaymentPlan? @relation(fields: [planId], references: [id])
  giftId         String?
  subscription   String?      @db.VarChar(25)


  CustomerMembershipSubscriptionData CustomerMembershipSubscriptionData? @relation(fields: [subscription], references: [id])
  PauseRequest                       PauseRequest[]
}

// TODO: Clean up

model CustomerMembershipSubscriptionData {
  id                 String               @id @default(cuid()) @db.VarChar(25)
  planID             String
  subscriptionId     String
  currentTermStart   DateTime
  currentTermEnd     DateTime
  nextBillingAt      DateTime?
  status             String
  planPrice          Int
  createdAt          DateTime
  updatedAt          DateTime             @updatedAt
  CustomerMembership CustomerMembership[]
}

model CustomerNotificationBarReceipt {
  id                String   @id @default(cuid()) @db.VarChar(25)
  notificationBarId String
  viewCount         Int
  clickCount        Int
  createdAt         DateTime
  updatedAt         DateTime @updatedAt

  // Should be a singleton. Will be fixed with full prisma2 migration and a db migration
  customer Customer[] @relation("CustomerToCustomerNotificationBarReceipts")
}

model EmailReceipt {
  id        String   @id @default(cuid()) @db.VarChar(25)
  emailId   String
  createdAt DateTime
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  // Private fields
  userId String? @map("user") @db.VarChar(25)
}

// TODO: Clean up

model FitPic {
  id                     String    @id @default(cuid()) @db.VarChar(25)
  status                 String
  createdAt              DateTime
  updatedAt              DateTime  @updatedAt
  locationId             String?   @map("location") @db.VarChar(25)
  location               Location? @relation(fields: [locationId], references: [id])
  userId                 String?   @map("user") @db.VarChar(25)
  user                   User?     @relation(fields: [userId], references: [id])
  imageId                String?   @map("image") @db.VarChar(25)
  image                  Image?    @relation(fields: [imageId], references: [id])
  includeInstagramHandle Boolean

  //
  FitPicReport FitPicReport[]
  Product      Product[]
}

// TODO: Clean up

model FitPicReport {
  id         String   @id @default(cuid()) @db.VarChar(25)
  status     String
  reportedAt DateTime
  updatedAt  DateTime @updatedAt
  reporterId String?  @map("reporter") @db.VarChar(25)
  reportedId String?  @map("reported") @db.VarChar(25)
  fitPic     FitPic?  @relation(fields: [reportedId], references: [id])
  user       User?    @relation(fields: [reporterId], references: [id])
}

// TODO: Clean up

model Image {
  id                       String                  @id @default(cuid()) @db.VarChar(25)
  caption                  String?
  title                    String?
  createdAt                DateTime
  updatedAt                DateTime                @updatedAt
  url                      String                  @unique
  height                   Int?
  width                    Int?
  alt                      String?
  BlogPost                 BlogPost[]
  Brand_BrandToImage       Brand[]
  FitPic                   FitPic[]
  ShopifyProductVariant    ShopifyProductVariant[]
  Brand_BrandToBrandImages Brand[]                 @relation("BrandToBrandImages")
  Collection               Collection[]
  Product                  Product[]
}

// TODO: Clean up

model InterestedUser {
  id        String   @id @default(cuid()) @db.VarChar(25)
  email     String
  zipcode   String?
  createdAt DateTime
  updatedAt DateTime @updatedAt
}

// TODO: Clean up

model Label {
  id             String    @id @default(cuid()) @db.VarChar(25)
  name           String?
  image          String?
  trackingNumber String?
  trackingURL    String?
  Package        Package[]
}

model Launch {
  id           String      @id @default(cuid()) @db.VarChar(25)
  published    Boolean
  launchAt     DateTime
  createdAt    DateTime
  updatedAt    DateTime    @updatedAt
  collectionId String?     @map("collection") @db.VarChar(25)
  collection   Collection? @relation(fields: [collectionId], references: [id])
  brandId      String?     @map("brand") @db.VarChar(25)
  brand        Brand?      @relation(fields: [brandId], references: [id])
}

// TODO: Clean up

model Location {
  id                                                  String            @id @default(cuid()) @db.VarChar(25)
  slug                                                String?           @unique
  name                                                String?
  company                                             String?
  description                                         String?
  address1                                            String?
  address2                                            String?
  city                                                String?
  state                                               String?
  zipCode                                             String
  locationType                                        String?
  lat                                                 Decimal?
  lng                                                 Decimal?
  createdAt                                           DateTime
  updatedAt                                           DateTime          @updatedAt
  user                                                String?           @db.VarChar(25)
  country                                             String?
  User                                                User?             @relation(fields: [user], references: [id])
  CustomerDetail                                      CustomerDetail[]
  FitPic                                              FitPic[]
  Package_LocationToPackage_fromAddress               Package[]         @relation("LocationToPackage_fromAddress")
  Package_LocationToPackage_toAddress                 Package[]         @relation("LocationToPackage_toAddress")
  PhysicalProduct                                     PhysicalProduct[]
  Reservation                                         Reservation[]
  ShippingOption_LocationToShippingOption_destination ShippingOption[]  @relation("LocationToShippingOption_destination")
  ShippingOption_LocationToShippingOption_origin      ShippingOption[]  @relation("LocationToShippingOption_origin")
}

// TODO: Clean up

model Order {
  id            String          @id @default(cuid()) @db.VarChar(25)
  subTotal      Int?
  total         Int?
  couponID      String?
  note          String?
  createdAt     DateTime
  updatedAt     DateTime        @updatedAt
  type          String
  status        String
  cancelReason  String?
  paymentStatus String
  customerId    String?         @map("customer") @db.VarChar(25)
  customer      Customer?       @relation(fields: [customerId], references: [id])
  sentPackageId String?         @map("sentPackage") @db.VarChar(25)
  sentPackage   Package?        @relation(fields: [sentPackageId], references: [id])
  orderNumber   String          @unique
  externalID    String?         @db.VarChar(25)
  OrderLineItem OrderLineItem[]
}

// TODO: Clean up

model OrderLineItem {
  id            String   @id @default(cuid()) @db.VarChar(25)
  recordID      String   @db.VarChar(25)
  recordType    String
  needShipping  Boolean?
  taxRate       Decimal?
  taxName       String?
  taxPercentage Decimal?
  taxPrice      Int?
  price         Int
  currencyCode  String
  createdAt     DateTime
  updatedAt     DateTime @updatedAt
  Order         Order[]
}

// TODO: Clean up

model Package {
  id                                               String                @id @default(cuid()) @db.VarChar(25)
  weight                                           Decimal?
  createdAt                                        DateTime
  updatedAt                                        DateTime              @updatedAt
  fromAddress                                      String?               @db.VarChar(25)
  toAddress                                        String?               @db.VarChar(25)
  shippingLabel                                    String?               @db.VarChar(25)
  transactionID                                    String
  cost                                             Int?
  status                                           String?
  Location_LocationToPackage_fromAddress           Location?             @relation("LocationToPackage_fromAddress", fields: [fromAddress], references: [id])
  Label                                            Label?                @relation(fields: [shippingLabel], references: [id])
  Location_LocationToPackage_toAddress             Location?             @relation("LocationToPackage_toAddress", fields: [toAddress], references: [id])
  Order                                            Order[]
  PackageTransitEvent                              PackageTransitEvent[]
  Reservation_PackageToReservation_returnedPackage Reservation[]         @relation("PackageToReservation_returnedPackage")
  Reservation_PackageToReservation_sentPackage     Reservation[]         @relation("PackageToReservation_sentPackage")
  PhysicalProduct                                  PhysicalProduct[]
}

// TODO: Clean up

model PackageTransitEvent {
  id          String       @id @default(cuid()) @db.VarChar(25)
  status      String
  subStatus   String
  createdAt   DateTime
  updatedAt   DateTime     @updatedAt
  data        String
  package     String?      @db.VarChar(25)
  reservation String?      @db.VarChar(25)
  Package     Package?     @relation(fields: [package], references: [id])
  Reservation Reservation? @relation(fields: [reservation], references: [id])
}

// TODO: Clean up

model PauseRequest {
  id                 String              @id @default(cuid()) @db.VarChar(25)
  createdAt          DateTime
  updatedAt          DateTime            @updatedAt
  pausePending       Boolean
  pauseDate          DateTime?
  resumeDate         DateTime?
  membership         String?             @db.VarChar(25)
  notified           Boolean
  pauseType          String
  CustomerMembership CustomerMembership? @relation(fields: [membership], references: [id])
}

// TODO: Clean up

model PaymentPlan {
  id                 String               @id @default(cuid()) @db.VarChar(25)
  description        String?
  planID             String               @unique
  status             String?
  name               String?
  price              Int?
  createdAt          DateTime
  updatedAt          DateTime             @updatedAt
  tagline            String?
  itemCount          Int?
  tier               String?
  CustomerMembership CustomerMembership[]
}

// TODO: Clean up

model PhysicalProduct {
  id                                   String                         @id @default(cuid()) @db.VarChar(25)
  seasonsUID                           String                         @unique
  inventoryStatus                      String
  productStatus                        String
  createdAt                            DateTime
  updatedAt                            DateTime                       @updatedAt
  locationId                           String?                        @map("location") @db.VarChar(25)
  location                             Location?                      @relation(fields: [locationId], references: [id])
  offloadMethod                        String?
  offloadNotes                         String?
  sequenceNumber                       Int
  warehouseLocationId                  String?                        @map("warehouseLocation") @db.VarChar(25)
  warehouseLocation                    WarehouseLocation?             @relation(fields: [warehouseLocationId], references: [id])
  dateOrdered                          DateTime?
  dateReceived                         DateTime?
  unitCost                             Decimal?
  barcoded                             Boolean?
  priceId                              String?                        @map("price") @db.VarChar(25)
  price                                PhysicalProductPrice?          @relation(fields: [priceId], references: [id])
  PhysicalProductQualityReport         PhysicalProductQualityReport[]
  ProductNotification                  ProductNotification[]
  ReservationReceiptItem               ReservationReceiptItem[]
  Package                              Package[]
  ProductVariant                       ProductVariant[]
  Reservation_ReservationToAllProducts Reservation[]                  @relation("ReservationToAllProducts")
  Reservation_ReservationToNewProducts Reservation[]                  @relation("ReservationToNewProducts")
}

// TODO: Clean up

model PhysicalProductPrice {
  id              String            @id @default(cuid()) @db.VarChar(25)
  buyUsedEnabled  Boolean
  buyUsedPrice    Decimal?
  PhysicalProduct PhysicalProduct[]
}

// TODO: Clean up

model PhysicalProductQualityReport {
  id                                       String                                     @id @default(cuid()) @db.VarChar(25)
  damageType                               String?
  notes                                    String?
  createdAt                                DateTime
  updatedAt                                DateTime                                   @updatedAt
  physicalProduct                          String?                                    @db.VarChar(25)
  user                                     String?                                    @db.VarChar(25)
  PhysicalProduct                          PhysicalProduct?                           @relation(fields: [physicalProduct], references: [id])
  User                                     User?                                      @relation(fields: [user], references: [id])
  PhysicalProductQualityReport_damageTypes PhysicalProductQualityReport_damageTypes[]
}

model PhysicalProductQualityReport_damageTypes {
  nodeId                       String                       @db.VarChar(25)
  position                     Int
  value                        String
  PhysicalProductQualityReport PhysicalProductQualityReport @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model Product {
  id                          String                   @id @default(cuid()) @db.VarChar(25)
  slug                        String                   @unique
  name                        String
  description                 String?
  externalURL                 String?
  retailPrice                 Int?
  status                      String?
  createdAt                   DateTime
  updatedAt                   DateTime                 @updatedAt
  categoryId                  String?                  @map("category") @db.VarChar(25)
  category                    Category?                @relation(fields: [categoryId], references: [id])
  colorId                     String?                  @map("color") @db.VarChar(25)
  color                       Color?                   @relation("ColorToProduct_color", fields: [colorId], references: [id])
  secondaryColor              Color?                   @relation("ColorToProduct_secondaryColor", fields: [secondaryColorId], references: [id])
  secondaryColorId            String?                  @map("secondaryColor") @db.VarChar(25)
  brandId                     String?                  @map("brand") @db.VarChar(25)
  brand                       Brand?                   @relation(fields: [brandId], references: [id])
  type                        String?
  modelSizeId                 String?                  @map("modelSize") @db.VarChar(25)
  modelSize                   Size?                    @relation(fields: [modelSizeId], references: [id])
  architecture                String?
  publishedAt                 DateTime?
  photographyStatus           String?
  seasonId                    String?                  @map("season") @db.VarChar(25)
  season                      ProductSeason?           @relation(fields: [seasonId], references: [id])
  productFit                  String?
  buyNewEnabled               Boolean
  tier                        String?                  @db.VarChar(25)
  productTier                 ProductTier?             @relation(fields: [tier], references: [id])
  innerMaterials              Product_innerMaterials[]
  outerMaterials              Product_outerMaterials[]
  recentlyViewedProduct       RecentlyViewedProduct[]
  collection                  Collection[]
  customersEmailedWithProduct Customer[]               @relation("CustomerToEmailedProducts")
  fitPics                     FitPic[]
  images                      Image[]
  functions                   ProductFunction[]
  model                       ProductModel[]
  variants                    ProductVariant[]
  tags                        Tag[]
  productMaterialCategoryId   String?                  @map("productMaterialCategory") @db.VarChar(25)
  ProductMaterialCategory     ProductMaterialCategory? @relation(fields: [productMaterialCategoryId], references: [id])
}

// TODO: Clean up

model ProductFunction {
  id      String    @id @default(cuid()) @db.VarChar(25)
  name    String?   @unique
  Product Product[]
}

model Product_innerMaterials {
  nodeId   String  @db.VarChar(25)
  position Int
  value    String
  Product  Product @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model ProductMaterialCategory {
  id             String    @id @default(cuid()) @db.VarChar(25)
  slug           String    @unique
  category       String?   @db.VarChar(25)
  lifeExpectancy Decimal
  Category       Category? @relation(fields: [category], references: [id])
  Product        Product[]
}

// TODO: Clean up

model ProductModel {
  id      String    @id @default(cuid()) @db.VarChar(25)
  name    String    @unique
  height  Decimal
  Product Product[]
}

model ProductNotification {
  id                String           @id @default(cuid()) @db.VarChar(25)
  type              String
  shouldNotify      Boolean
  createdAt         DateTime
  updatedAt         DateTime         @updatedAt
  productVariantId  String?          @map("productVariant") @db.VarChar(25)
  productVariant    ProductVariant?  @relation(fields: [productVariantId], references: [id])
  physicalProductId String?          @map("physicalProduct") @db.VarChar(25)
  physicalProduct   PhysicalProduct? @relation(fields: [physicalProductId], references: [id])
  customerId        String?          @map("customer") @db.VarChar(25)
  customer          Customer?        @relation(fields: [customerId], references: [id])
}

model Product_outerMaterials {
  nodeId   String  @db.VarChar(25)
  position Int
  value    String
  product  Product @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model ProductRequest {
  id                    String                  @id @default(cuid()) @db.VarChar(25)
  sku                   String?
  brand                 String?
  description           String?
  name                  String?
  price                 Int?
  priceCurrency         String?
  productID             String?
  url                   String
  reason                String
  user                  String?                 @db.VarChar(25)
  User                  User?                   @relation(fields: [user], references: [id])
  ProductRequest_images ProductRequest_images[]
}

model ProductRequest_images {
  nodeId         String         @db.VarChar(25)
  position       Int
  value          String
  ProductRequest ProductRequest @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model ProductSeason {
  id               String                          @id @default(cuid()) @db.VarChar(25)
  vendorSeasonId   String?                         @map("vendorSeason") @db.VarChar(25)
  internalSeasonId String?                         @map("internalSeason") @db.VarChar(25)
  internalSeason   Season?                         @relation("ProductSeason_internalSeasonToSeason", fields: [internalSeasonId], references: [id])
  vendorSeason     Season?                         @relation("ProductSeason_vendorSeasonToSeason", fields: [vendorSeasonId], references: [id])
  product          Product[]
  wearableSeasons  ProductSeason_wearableSeasons[]
}

model ProductSeason_wearableSeasons {
  nodeId        String        @db.VarChar(25)
  position      Int
  value         String
  ProductSeason ProductSeason @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model ProductTier {
  id        String    @id @default(cuid()) @db.VarChar(25)
  tier      String
  price     Int
  createdAt DateTime
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

// TODO: Clean up

model ProductVariant {
  id                     String                   @id @default(cuid()) @db.VarChar(25)
  sku                    String?                  @unique
  weight                 Decimal?
  height                 Decimal?
  productID              String
  retailPrice            Decimal?
  total                  Int
  reservable             Int
  reserved               Int
  nonReservable          Int
  createdAt              DateTime
  updatedAt              DateTime                 @updatedAt
  colorId                String?                  @map("color") @db.VarChar(25)
  color                  Color?                   @relation(fields: [colorId], references: [id])
  internalSizeId         String?                  @map("internalSize") @db.VarChar(25)
  internalSize           Size?                    @relation(fields: [internalSizeId], references: [id])
  offloaded              Int
  stored                 Int
  displayShort           String
  priceId                String?                  @map("price") @db.VarChar(25)
  price                  ProductVariantPrice?     @relation(fields: [priceId], references: [id])
  BagItem                BagItem[]
  ProductNotification    ProductNotification[]
  ProductVariantFeedback ProductVariantFeedback[]
  ProductVariantWant     ProductVariantWant[]
  ShopifyProductVariant  ShopifyProductVariant[]
  PhysicalProduct        PhysicalProduct[]
  product                Product[]
  manufacturerSizes      Size[]                   @relation("ProductVariantManufacturerSize")
}

// TODO: Clean up

model ProductVariantFeedback {
  id                             String                           @id @default(cuid()) @db.VarChar(25)
  isCompleted                    Boolean
  variant                        String?                          @db.VarChar(25)
  ProductVariant                 ProductVariant?                  @relation(fields: [variant], references: [id])
  ProductVariantFeedbackQuestion ProductVariantFeedbackQuestion[]
  ReservationFeedback            ReservationFeedback[]
}

// TODO: Clean up

model ProductVariantFeedbackQuestion {
  id                                       String                                     @id @default(cuid()) @db.VarChar(25)
  question                                 String
  type                                     String
  ProductVariantFeedbackQuestion_options   ProductVariantFeedbackQuestion_options[]
  ProductVariantFeedbackQuestion_responses ProductVariantFeedbackQuestion_responses[]
  ProductVariantFeedback                   ProductVariantFeedback[]
}

model ProductVariantFeedbackQuestion_options {
  nodeId                         String                         @db.VarChar(25)
  position                       Int
  value                          String
  ProductVariantFeedbackQuestion ProductVariantFeedbackQuestion @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model ProductVariantFeedbackQuestion_responses {
  nodeId                         String                         @db.VarChar(25)
  position                       Int
  value                          String
  ProductVariantFeedbackQuestion ProductVariantFeedbackQuestion @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model ProductVariantPrice {
  id             String           @id @default(cuid()) @db.VarChar(25)
  retailPrice    Decimal?
  ProductVariant ProductVariant[]
}

// TODO: Clean up

model ProductVariantWant {
  id             String          @id @default(cuid()) @db.VarChar(25)
  isFulfilled    Boolean
  productVariant String?         @db.VarChar(25)
  user           String?         @db.VarChar(25)
  ProductVariant ProductVariant? @relation(fields: [productVariant], references: [id])
  User           User?           @relation(fields: [user], references: [id])
}

// TODO: Clean up

model PushNotificationReceipt {
  id                   String                 @id @default(cuid()) @db.VarChar(25)
  route                String?
  screen               String?
  uri                  String?
  body                 String
  title                String?
  sentAt               DateTime
  createdAt            DateTime
  updatedAt            DateTime               @updatedAt
  interest             String?
  recordID             String?
  recordSlug           String?
  notificationKey      String?
  UserPushNotification UserPushNotification[]
  User                 User[]                 @relation("UserToPushNotificationReceipts")
}

model RecentlyViewedProduct {
  id         String    @id @default(cuid()) @db.VarChar(25)
  viewCount  Int
  createdAt  DateTime
  updatedAt  DateTime  @updatedAt
  productId  String?   @map("product") @db.VarChar(25)
  product    Product?  @relation(fields: [productId], references: [id])
  customerId String?   @map("customer") @db.VarChar(25)
  customer   Customer? @relation(fields: [customerId], references: [id])
}

// TODO: Clean up

model Reservation {
  id                                           String                @id @default(cuid()) @db.VarChar(25)
  shipped                                      Boolean
  createdAt                                    DateTime
  updatedAt                                    DateTime              @updatedAt
  user                                         String?               @db.VarChar(25)
  reservationNumber                            Int                   @unique
  status                                       String
  shippedAt                                    DateTime?
  receivedAt                                   DateTime?
  lastLocation                                 String?               @db.VarChar(25)
  customerId                                   String?               @map("customer") @db.VarChar(25)
  customer                                     Customer?             @relation(fields: [customerId], references: [id])
  sentPackage                                  String?               @db.VarChar(25)
  returnedPackage                              String?               @db.VarChar(25)
  reminderSentAt                               DateTime?
  receipt                                      String?               @db.VarChar(25)
  phase                                        String
  statusUpdatedAt                              DateTime?
  shippingOption                               String?               @db.VarChar(25)
  completedAt                                  DateTime?
  cancelledAt                                  DateTime?
  Location                                     Location?             @relation(fields: [lastLocation], references: [id])
  ReservationReceipt                           ReservationReceipt?   @relation(fields: [receipt], references: [id])
  Package_PackageToReservation_returnedPackage Package?              @relation("PackageToReservation_returnedPackage", fields: [returnedPackage], references: [id])
  Package_PackageToReservation_sentPackage     Package?              @relation("PackageToReservation_sentPackage", fields: [sentPackage], references: [id])
  ShippingOption                               ShippingOption?       @relation(fields: [shippingOption], references: [id])
  User                                         User?                 @relation(fields: [user], references: [id])
  PackageTransitEvent                          PackageTransitEvent[]
  ReservationFeedback                          ReservationFeedback[]
  PhysicalProduct_ReservationToAllProducts     PhysicalProduct[]     @relation("ReservationToAllProducts")
  PhysicalProduct_ReservationToNewProducts     PhysicalProduct[]     @relation("ReservationToNewProducts")
}

// TODO: Clean up

model ReservationFeedback {
  id                     String                   @id @default(cuid()) @db.VarChar(25)
  comment                String?
  rating                 String?
  user                   String?                  @db.VarChar(25)
  createdAt              DateTime
  updatedAt              DateTime                 @updatedAt
  reservation            String?                  @db.VarChar(25)
  respondedAt            DateTime?
  Reservation            Reservation?             @relation(fields: [reservation], references: [id])
  User                   User?                    @relation(fields: [user], references: [id])
  ProductVariantFeedback ProductVariantFeedback[]
}

// TODO: Clean up

model ReservationReceipt {
  id                     String                   @id @default(cuid()) @db.VarChar(25)
  createdAt              DateTime
  updatedAt              DateTime                 @updatedAt
  Reservation            Reservation[]
  ReservationReceiptItem ReservationReceiptItem[]
}

// TODO: Clean up

model ReservationReceiptItem {
  id                 String               @id @default(cuid()) @db.VarChar(25)
  productStatus      String
  notes              String?
  product            String?              @db.VarChar(25)
  PhysicalProduct    PhysicalProduct?     @relation(fields: [product], references: [id])
  ReservationReceipt ReservationReceipt[]
}

// TODO: Clean up

model Season {
  id                                                 String          @id @default(cuid()) @db.VarChar(25)
  year                                               Int?
  seasonCode                                         String?
  ProductSeason_ProductSeason_internalSeasonToSeason ProductSeason[] @relation("ProductSeason_internalSeasonToSeason")
  ProductSeason_ProductSeason_vendorSeasonToSeason   ProductSeason[] @relation("ProductSeason_vendorSeasonToSeason")
}

// TODO: Clean up

model ShippingMethod {
  id             String           @id @default(cuid()) @db.VarChar(25)
  code           String
  displayText    String
  createdAt      DateTime
  updatedAt      DateTime         @updatedAt
  ShippingOption ShippingOption[]
}

// TODO: Clean up

model ShippingOption {
  id                                            String          @id @default(cuid()) @db.VarChar(25)
  externalCost                                  Int?
  averageDuration                               Int?
  createdAt                                     DateTime
  updatedAt                                     DateTime        @updatedAt
  destination                                   String?         @db.VarChar(25)
  origin                                        String?         @db.VarChar(25)
  shippingMethod                                String?         @db.VarChar(25)
  Location_LocationToShippingOption_destination Location?       @relation("LocationToShippingOption_destination", fields: [destination], references: [id])
  Location_LocationToShippingOption_origin      Location?       @relation("LocationToShippingOption_origin", fields: [origin], references: [id])
  ShippingMethod                                ShippingMethod? @relation(fields: [shippingMethod], references: [id])
  Reservation                                   Reservation[]
}

// TODO: Clean up

model ShopifyProductVariant {
  id                                  String                                @id @default(cuid()) @db.VarChar(25)
  externalId                          String?                               @unique
  cachedPrice                         Decimal?
  cachedAvailableForSale              Boolean?
  cacheExpiresAt                      DateTime?
  displayName                         String?
  title                               String?
  image                               String?                               @db.VarChar(25)
  brand                               String?                               @db.VarChar(25)
  productVariant                      String?                               @db.VarChar(25)
  shop                                String?                               @db.VarChar(25)
  Brand                               Brand?                                @relation(fields: [brand], references: [id])
  Image                               Image?                                @relation(fields: [image], references: [id])
  ProductVariant                      ProductVariant?                       @relation(fields: [productVariant], references: [id])
  ExternalShopifyIntegration          ExternalShopifyIntegration?           @relation(fields: [shop], references: [id])
  ShopifyProductVariantSelectedOption ShopifyProductVariantSelectedOption[] @relation("ShopifyProductVariantToVariantSelectedOption")
}

// TODO: Clean up

model ShopifyProductVariantSelectedOption {
  id                    String                  @id @default(cuid()) @db.VarChar(25)
  name                  String
  value                 String
  ShopifyProductVariant ShopifyProductVariant[] @relation("ShopifyProductVariantToVariantSelectedOption")
}

// TODO: Clean up

model Size {
  id                          String           @id @default(cuid()) @db.VarChar(25)
  slug                        String           @unique
  productType                 String?
  display                     String
  topId                       String?          @map("top") @db.VarChar(25)
  top                         TopSize?         @relation(fields: [topId], references: [id])
  bottomId                    String?          @map("bottom") @db.VarChar(25)
  bottom                      BottomSize?      @relation(fields: [bottomId], references: [id])
  type                        String?
  // from product model size
  product                     Product[]
  // from product variant internal size
  productVariantsInternal     ProductVariant[]
  // from product variant manufacturer size
  productVariantsManufacturer ProductVariant[] @relation("ProductVariantManufacturerSize")
}

// TODO: Clean up

model SmsReceipt {
  id                   String                 @id @default(cuid()) @db.VarChar(25)
  externalId           String?
  body                 String
  status               String
  sentAt               DateTime
  updatedAt            DateTime               @updatedAt
  smsId                String?
  SmsReceipt_mediaUrls SmsReceipt_mediaUrls[]
  User                 User[]                 @relation("UserToSmsReceipts")
}

model SmsReceipt_mediaUrls {
  nodeId     String     @db.VarChar(25)
  position   Int
  value      String
  SmsReceipt SmsReceipt @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model StylePreferences {
  id                        String                      @id @default(cuid()) @db.VarChar(25)
  CustomerDetail            CustomerDetail[]
  StylePreferences_brands   StylePreferences_brands[]
  StylePreferences_colors   StylePreferences_colors[]
  StylePreferences_patterns StylePreferences_patterns[]
  StylePreferences_styles   StylePreferences_styles[]
}

model StylePreferences_brands {
  nodeId           String           @db.VarChar(25)
  position         Int
  value            String
  StylePreferences StylePreferences @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model StylePreferences_colors {
  nodeId           String           @db.VarChar(25)
  position         Int
  value            String
  StylePreferences StylePreferences @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model StylePreferences_patterns {
  nodeId           String           @db.VarChar(25)
  position         Int
  value            String
  StylePreferences StylePreferences @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

model StylePreferences_styles {
  nodeId           String           @db.VarChar(25)
  position         Int
  value            String
  StylePreferences StylePreferences @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model SyncTiming {
  id        String   @id @default(cuid()) @db.VarChar(25)
  createdAt DateTime
  updatedAt DateTime @updatedAt
  type      String
  syncedAt  DateTime
}

// TODO: Clean up

model Tag {
  id          String    @id @default(cuid()) @db.VarChar(25)
  name        String    @unique
  description String?
  createdAt   DateTime
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

// TODO: Clean up

model TopSize {
  id       String   @id @default(cuid()) @db.VarChar(25)
  letter   String?
  sleeve   Decimal?
  shoulder Decimal?
  chest    Decimal?
  neck     Decimal?
  length   Decimal?
  Size     Size[]
}

// TODO: Clean up

model User {
  id                           String                         @id @default(cuid()) @db.VarChar(25)
  auth0Id                      String                         @unique
  email                        String                         @unique
  firstName                    String
  lastName                     String
  role                         String
  createdAt                    DateTime
  updatedAt                    DateTime                       @updatedAt
  pushNotificationStatus       String
  verificationStatus           String
  verificationMethod           String
  pushNotification             String?                        @db.VarChar(25)
  sendSystemEmails             Boolean
  deviceData                   String?                        @db.VarChar(25)
  UserDeviceData               UserDeviceData?                @relation(fields: [deviceData], references: [id])
  UserPushNotification         UserPushNotification?          @relation(fields: [pushNotification], references: [id])
  ActiveAdminUser              ActiveAdminUser[]
  AdminActionLog               AdminActionLog[]
  Customer                     Customer[]
  EmailReceipt                 EmailReceipt[]
  FitPic                       FitPic[]
  FitPicReport                 FitPicReport[]
  Location                     Location[]
  PhysicalProductQualityReport PhysicalProductQualityReport[]
  ProductRequest               ProductRequest[]
  ProductVariantWant           ProductVariantWant[]
  Reservation                  Reservation[]
  ReservationFeedback          ReservationFeedback[]
  UserPushNotificationInterest UserPushNotificationInterest[]
  User_roles                   User_roles[]
  PushNotificationReceipt      PushNotificationReceipt[]      @relation("UserToPushNotificationReceipts")
  SmsReceipt                   SmsReceipt[]                   @relation("UserToSmsReceipts")
}

// TODO: Clean up

model UserDeviceData {
  id         String  @id @default(cuid()) @db.VarChar(25)
  iOSVersion String?
  User       User[]
}

// TODO: Clean up

model UserPushNotification {
  id                           String                         @id @default(cuid()) @db.VarChar(25)
  status                       Boolean
  User                         User[]
  PushNotificationReceipt      PushNotificationReceipt[]
  UserPushNotificationInterest UserPushNotificationInterest[]
}

// TODO: Clean up

model UserPushNotificationInterest {
  id                   String                 @id @default(cuid()) @db.VarChar(25)
  type                 String
  value                String
  status               Boolean
  user                 String?                @db.VarChar(25)
  User                 User?                  @relation(fields: [user], references: [id])
  UserPushNotification UserPushNotification[]
}

model User_roles {
  nodeId   String @db.VarChar(25)
  position Int
  value    String
  User     User   @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}

// TODO: Clean up

model UTMData {
  id        String     @id @default(cuid()) @db.VarChar(25)
  source    String?
  medium    String?
  campaign  String?
  term      String?
  content   String?
  createdAt DateTime
  updatedAt DateTime   @updatedAt
  Customer  Customer[]
}

// TODO: Clean up

model WarehouseLocation {
  id                          String                        @id @default(cuid()) @db.VarChar(25)
  type                        String
  barcode                     String                        @unique
  locationCode                String
  itemCode                    String
  createdAt                   DateTime
  updatedAt                   DateTime                      @updatedAt
  PhysicalProduct             PhysicalProduct[]
  WarehouseLocationConstraint WarehouseLocationConstraint[]
}

// TODO: Clean up

model WarehouseLocationConstraint {
  id                String              @id @default(cuid()) @db.VarChar(25)
  limit             Int
  createdAt         DateTime
  updatedAt         DateTime            @updatedAt
  category          String?             @db.VarChar(25)
  Category          Category?           @relation(fields: [category], references: [id])
  WarehouseLocation WarehouseLocation[]
}

// TODO: Clean up

model ExternalShopifyIntegration {
  id                               String                             @id @db.VarChar(25)
  shopName                         String                             @unique
  enabled                          Boolean
  accessToken                      String?
  createdAt                        DateTime
  updatedAt                        DateTime                           @updatedAt
  Brand                            Brand[]
  ExternalShopifyIntegration_scope ExternalShopifyIntegration_scope[]
  ShopifyProductVariant            ShopifyProductVariant[]
}

model ExternalShopifyIntegration_scope {
  nodeId                     String                     @db.VarChar(25)
  position                   Int
  value                      String
  ExternalShopifyIntegration ExternalShopifyIntegration @relation(fields: [nodeId], references: [id])

  @@id([nodeId, position])
}
