generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductTierName {
  Standard
  Luxury
}

enum CollectionPlacement {
  Homepage
}

enum BrandTier {
  Tier0
  Tier1
  Tier2
  Niche
  Upcoming
  Retro
  Boutique
  Local
  Discovery
}

enum Department {
  Clothes
  Bags
  Accessories
  Jewelry
}

enum LocationType {
  Office
  Warehouse
  Cleaner
  Customer
}

enum MeasurementType {
  Inches
  Millimeters
}

enum CustomerStatus {
  Invited
  Created
  Waitlisted
  Authorized
  Active
  Suspended
  PaymentFailed
  Paused
  Deactivated
}

enum UserRole {
  Admin
  Customer
  Partner
  Marketer
}

enum InventoryStatus {
  NonReservable
  Reservable
  Reserved
  Stored
  Offloaded
}

enum PhysicalProductStatus {
  New
  Used
  Dirty
  Damaged
  PermanentlyDamaged
  Clean
  Lost
  Sold
}

enum PhysicalProductOffloadMethod {
  SoldToUser
  SoldToThirdParty
  ReturnedToVendor
  Recycled
  Unknown
}

enum ProductStatus {
  Available
  NotAvailable
  Stored
  Offloaded
}

enum PackageStatus {
  Queued
  Shipped
  Delivered
  Blocked
  Received
  Cancelled
}

enum ReservationStatus {
  Queued
  Picked
  Packed
  Shipped
  Delivered
  Completed
  Cancelled
  Hold // For internal use, when ops needs to delay processing
  Blocked // Used when shippo indicates the delivery is blocked
  Unknown
  Lost
  Received
}

enum BagItemStatus {
  Added
  Reserved
  Received
}

enum Plan {
  AllAccess
  Essential
}

enum ProductType {
  Top
  Bottom
  Accessory
  Shoe
}

// This should be deprecated in favor of using SizeType in the future
enum BottomSizeType {
  WxL
  US
  EU
  JP
  Letter
}

enum SizeType {
  WxL
  US
  EU
  JP
  Letter
  Universal
}

enum QuestionType {
  MultipleChoice
  FreeResponse
}

enum Rating {
  Disliked
  Ok
  Loved
}

enum LetterSize {
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum ProductArchitecture {
  Fashion
  Showstopper
  Staple
}

enum WarehouseLocationType {
  Conveyor
  Rail
  Bin
}

enum PhotographyStatus {
  Done
  InProgress
  ReadyForEditing
  ReadyToShoot
  Steam
}

enum EmailId {
  CompleteAccount
  BuyUsedOrderConfirmation
  DaySevenAuthorizationFollowup
  DaySixAuthorizationFollowup
  DayFiveAuthorizationFollowup
  DayFourAuthorizationFollowup
  DayThreeAuthorizationFollowup
  DayTwoAuthorizationFollowup
  FreeToReserve
  Paused
  PriorityAccess
  ReferralConfirmation
  ReservationConfirmation
  ReservationReturnConfirmation
  ResumeConfirmation
  ResumeReminder
  ReturnReminder
  Rewaitlisted
  SubmittedEmail
  TwentyFourHourAuthorizationFollowup
  Waitlisted
  WelcomeToSeasons
  UnpaidMembership
  ReturnToGoodStanding
  RecommendedItemsNurture
}

enum PackageTransitEventStatus {
  Delivered
  Failure
  PreTransit
  Returned
  Transit
  Unknown
}

enum PackageTransitEventSubStatus {
  AddressIssue
  ContactCarrier
  Delayed
  Delivered
  DeliveryAttempted
  DeliveryRescheduled
  DeliveryScheduled
  InformationReceived
  LocationInaccessible
  NoticeLeft
  Other
  OutForDelivery
  PackageAccepted
  PackageArrived
  PackageDamaged
  PackageDeparted
  PackageDisposed
  PackageForwarded
  PackageHeld
  PackageLost
  PackageProcessed
  PackageProcessing
  PackageUnclaimed
  PackageUndeliverable
  PickupAvailable
  RescheduleDelivery
  ReturnToSender
}

enum ReservationPhase {
  BusinessToCustomer
  CustomerToBusiness
}

enum UserPushNotificationInterestType {
  Bag
  Blog
  Brand
  General
  NewProduct
}

enum InAdmissableReason {
  Untriageable
  UnsupportedPlatform
  AutomaticAdmissionsFlagOff
  UnserviceableZipcode
  InsufficientInventory
  OpsThresholdExceeded
}

enum ShippingCode {
  UPSGround
  UPSSelect
}

enum PhysicalProductDamageType {
  BarcodeMissing
  ButtonMissing
  Stain
  Smell
  Tear
  Other
}

enum ProductFit {
  RunsBig
  TrueToSize
  RunsSmall
}

enum ProductNotificationType {
  Restock
  AvailableForPurchase
}

enum PaymentPlanTier {
  Essential
  AllAccess
  Pause
}

enum SmsStatus {
  Queued
  Sending
  Sent
  Failed
  Delivered
  Undelivered
  Receiving
  Received
  Accepted
  Scheduled
  Read
  PartiallyDelivered
}

enum SeasonCode {
  // For Vendor and Internal Seasons
  FW // Fall winter
  SS // Spring Summer
  // For Vendor Seasons only
  PS // Pre spring
  PF // Pre Fall
  HO // Holiday
  AW // Autumn Winter
}

enum SeasonString {
  Spring
  Summer
  Winter
  Fall
}

enum UserVerificationMethod {
  SMS
  Email
  None
}

enum UserVerificationStatus {
  Approved
  Denied
  Pending
}

enum PushNotificationStatus {
  Blocked
  Granted
  Denied
}

enum FitPicStatus {
  Submitted
  Published
  Unpublished
}

enum FitPicReportStatus {
  Pending
  Reviewed
}

enum CustomerStyle {
  AvantGarde
  Bold
  Classic
  Minimalist
  Streetwear
  Techwear
}

enum NotificationBarID {
  PastDueInvoice
  TestDismissable
  AuthorizedReminder
}

enum OrderType {
  Used
  New
}

enum PauseType {
  WithItems
  WithoutItems
}

enum OrderLineItemRecordType {
  PhysicalProduct
  ProductVariant
  ExternalProduct
  Package
  EarlySwap
  Reservation
}

enum OrderStatus {
  Drafted
  Submitted
  Fulfilled
  Returned
  Cancelled
}

enum OrderCancelReason {
  Customer // The customer wanted to cancel the order
  Declined // Payment was declined
  Fraud // The order was fraudulent
  Inventory // There was insufficient inventory
  Other // Some other reason not listed
}

enum OrderPaymentStatus {
  Paid
  PartiallyPaid
  Refunded
  NotPaid
  Complete
}

enum AdminAction {
  Insert
  Delete
  Update
  Truncate
}

enum SyncTimingType {
  Drip
  Next
  Impact
}

model AccessorySize {
  id     String @id @default(cuid()) @db.VarChar(30)
  bridge Float?
  length Float?
  width  Float?
  size   Size?
}

model ActiveAdminUser {
  id      String  @id @default(cuid()) @db.VarChar(30)
  adminId String? @map("admin") @db.VarChar(30)
  admin   User?   @relation(fields: [adminId], references: [id])
}

model AdminActionLog {
  actionId          Int                           @id @default(autoincrement())
  entityId          String                        @db.VarChar(30)
  tableName         String
  triggeredAt       DateTime
  action            AdminAction
  rowData           Json
  changedFields     Json?
  statementOnly     Boolean
  activeAdminUserId String?                       @map("activeAdminUser") @db.VarChar(30)
  activeAdminUser   User?                         @relation(fields: [activeAdminUserId], references: [id])
  interpretedAt     DateTime?
  interpretation    AdminActionLogInterpretation?
}

model AdminActionLogInterpretation {
  id             String          @id @default(cuid()) @db.VarChar(30)
  entityId       String          @db.VarChar(30)
  tableName      String
  interpretation String?
  data           Json?
  logId          Int?            @map("log")
  log            AdminActionLog? @relation(fields: [logId], references: [actionId])
}

model BagItem {
  id               String          @id @default(cuid()) @db.VarChar(30)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  position         Int?
  saved            Boolean?
  status           BagItemStatus
  customerId       String?         @map("customer") @db.VarChar(30)
  customer         Customer?       @relation(fields: [customerId], references: [id])
  productVariantId String?         @map("productVariant") @db.VarChar(30)
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
}

model BillingInfo {
  id               String    @id @default(cuid()) @db.VarChar(30)
  brand            String
  name             String?
  last_digits      String
  expiration_month Int
  expiration_year  Int
  street1          String?
  street2          String?
  city             String?
  state            String?
  country          String?
  postal_code      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  customer         Customer?
}

model BlogPost {
  id               String   @id @default(cuid()) @db.VarChar(30)
  webflowId        String
  webflowCreatedAt DateTime
  webflowUpdatedAt DateTime
  slug             String   @unique
  name             String?
  body             String?
  summary          String?
  thumbnailURL     String?
  imageURL         String?
  imageAlt         String?
  url              String?
  author           String?
  category         String?
  content          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  publishedOn      DateTime
  published        Boolean  @default(true)
  imageId          String?  @map("image") @db.VarChar(30)
  image            Image?   @relation(fields: [imageId], references: [id])
  tags             String[]
}

model BottomSize {
  id     String          @id @default(cuid()) @db.VarChar(30)
  type   BottomSizeType?
  value  String?
  waist  Float?
  rise   Float?
  hem    Float?
  inseam Float?
  size   Size?
}

model Brand {
  id                     String                  @id @default(cuid()) @db.VarChar(30)
  slug                   String                  @unique
  brandCode              String                  @unique
  description            String?
  isPrimaryBrand         Boolean                 @default(value: false)
  name                   String
  since                  DateTime?
  tier                   BrandTier
  websiteUrl             String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  basedIn                String?
  designer               String?
  published              Boolean                 @default(value: true)
  featured               Boolean                 @default(value: false)
  logo                   Json?
  logoImageId            String?                 @map("logoImage") @db.VarChar(30)
  logoImage              Image?                  @relation(fields: [logoImageId], references: [id])
  shopifyShopId          String?                 @map("shopifyShop") @db.VarChar(30)
  shopifyShop            ShopifyShop?            @relation(fields: [shopifyShopId], references: [id])
  images                 Image[]                 @relation("BrandToBrandImages")
  products               Product[]
  shopifyProductVariants ShopifyProductVariant[]
  styles                 CustomerStyle[]

  // Do not use. Artifact of Prisma2 migration
  Launch Launch[]

}

model Category {
  id                           String                        @id @default(cuid()) @db.VarChar(30)
  slug                         String                        @unique
  name                         String                        @unique
  description                  String?
  image                        Json?
  productType                  ProductType?
  measurementType              MeasurementType?
  visible                      Boolean                       @default(value: false)
  updatedAt                    DateTime?                     @updatedAt
  products                     Product[]
  productMaterialCategories    ProductMaterialCategory[]
  warehouseLocationConstraints WarehouseLocationConstraint[]
  children                     Category[]                    @relation("CategoryToChildren")
  parents                      Category[]                    @relation("CategoryToChildren")
}

model Collection {
  id                 String                @id @default(cuid()) @db.VarChar(30)
  slug               String                @unique
  title              String?
  subTitle           String?
  published          Boolean
  createdAt          DateTime              @default(now())
  updatedAt          DateTime?             @updatedAt
  displayTextOverlay Boolean
  textOverlayColor   String?
  descriptions       String[]
  placements         CollectionPlacement[]
  images             Image[]
  products           Product[]
  launches           Launch[]
}

model Color {
  id                     String           @id @default(cuid()) @db.VarChar(30)
  slug                   String           @unique
  name                   String
  colorCode              String           @unique
  hexCode                String
  productVariants        ProductVariant[]
  primaryColorProducts   Product[]        @relation("ColorToProduct_color")
  secondaryColorProducts Product[]        @relation("ColorToProduct_secondaryColor")
}

model Customer {
  id                      String                           @id @default(cuid()) @db.VarChar(30)
  status                  CustomerStatus?
  detailId                String?                          @map("detail") @db.VarChar(30)
  detail                  CustomerDetail?                  @relation(fields: [detailId], references: [id])
  userId                  String?                          @map("user") @db.VarChar(30)
  user                    User?                            @relation(fields: [userId], references: [id])
  plan                    Plan?
  billingInfoId           String?                          @map("billingInfo") @db.VarChar(30)
  billingInfo             BillingInfo?                     @relation(fields: [billingInfoId], references: [id])
  createdAt               DateTime                         @default(now())
  updatedAt               DateTime                         @updatedAt
  authorizedAt            DateTime?
  admissionsId            String?                          @map("admissions") @db.VarChar(30)
  admissions              CustomerAdmissionsData?          @relation(fields: [admissionsId], references: [id])
  referralLink            String?                          @unique
  referrerId              String?                          @map("referrer") @db.VarChar(30)
  referrer                Customer?                        @relation("CustomerToCustomer_referrer", fields: [referrerId], references: [id])
  referrees               Customer[]                       @relation("CustomerToCustomer_referrer")
  utmId                   String?                          @map("utm") @db.VarChar(30)
  utm                     UTMData?                         @relation(fields: [utmId], references: [id])
  bagItems                BagItem[]
  membership              CustomerMembership? // should be required, need to look into that
  orders                  Order[]
  productNotifications    ProductNotification[]
  recentlyViewedProducts  RecentlyViewedProduct[]
  reservations            Reservation[]
  notificationBarReceipts CustomerNotificationBarReceipt[]
  emailedProducts         Product[]                        @relation("CustomerToEmailedProducts")
  impactSyncTimings       SyncTiming[]
}

model CustomerAdmissionsData {
  id                          String              @id @default(cuid()) @db.VarChar(30)
  inServiceableZipcode        Boolean             @default(false)
  admissable                  Boolean
  inAdmissableReason          InAdmissableReason?
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  subscribedAt                DateTime?
  authorizationsCount         Int                 @default(0)
  allAccessEnabled            Boolean             @default(false)
  authorizationWindowClosesAt DateTime?
  customer                    Customer?
}

model CustomerDetail {
  id                 String            @id @default(cuid()) @db.VarChar(30)
  phoneNumber        String?
  birthday           DateTime?
  height             Int?
  bodyType           String?
  averageTopSize     String?
  averageWaistSize   String?
  averagePantLength  String?
  preferredPronouns  String?
  profession         String?
  partyFrequency     String?
  travelFrequency    String?
  shoppingFrequency  String?
  averageSpend       String?
  style              String?
  commuteStyle       String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  shippingAddressId  String?           @map("shippingAddress") @db.VarChar(30)
  shippingAddress    Location?         @relation(fields: [shippingAddressId], references: [id])
  phoneOS            String?
  insureShipment     Boolean           @default(false)
  stylePreferencesId String?           @map("stylePreferences") @db.VarChar(30)
  stylePreferences   StylePreferences? @relation(fields: [stylePreferencesId], references: [id])
  instagramHandle    String?
  impactId           String?
  discoveryReference String?
  customer           Customer?
  styles             CustomerStyle[]
  topSizes           String[]
  waistSizes         Int[]
  weight             Int[]
}

model CustomerMembership {
  id                       String                              @id @default(cuid()) @db.VarChar(30)
  subscriptionId           String
  customerId               String                              @map("customer") @db.VarChar(30)
  customer                 Customer                            @relation(fields: [customerId], references: [id])
  planId                   String?                             @map("plan") @db.VarChar(30)
  plan                     PaymentPlan?                        @relation(fields: [planId], references: [id])
  giftId                   String?
  membershipSubscriptionId String?                             @map("subscription") @db.VarChar(30)
  subscription             CustomerMembershipSubscriptionData? @relation(fields: [membershipSubscriptionId], references: [id])
  pauseRequests            PauseRequest[]
}

model CustomerMembershipSubscriptionData {
  id               String              @id @default(cuid()) @db.VarChar(30)
  planID           String
  subscriptionId   String
  currentTermStart DateTime
  currentTermEnd   DateTime
  nextBillingAt    DateTime?
  status           String
  planPrice        Int
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  membership       CustomerMembership?
}

model CustomerNotificationBarReceipt {
  id                String            @id @default(cuid()) @db.VarChar(30)
  notificationBarId NotificationBarID
  viewCount         Int               @default(value: 0)
  clickCount        Int               @default(value: 0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  customerId        String            @map("customer") @db.VarChar(30)
  customer          Customer          @relation(fields: [customerId], references: [id])
}

model EmailReceipt {
  id        String   @id @default(cuid()) @db.VarChar(30)
  emailId   EmailId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @map("user") @db.VarChar(30)
  user      User?    @relation(fields: [userId], references: [id])
}

model FitPic {
  id                     String         @id @default(cuid()) @db.VarChar(30)
  status                 FitPicStatus   @default(Submitted)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  locationId             String?        @map("location") @db.VarChar(30)
  location               Location?      @relation(fields: [locationId], references: [id])
  userId                 String?        @map("user") @db.VarChar(30)
  user                   User?          @relation(fields: [userId], references: [id])
  imageId                String?        @map("image") @db.VarChar(30)
  image                  Image?         @relation(fields: [imageId], references: [id])
  includeInstagramHandle Boolean
  reports                FitPicReport[]
  products               Product[]
}

model FitPicReport {
  id         String             @id @default(cuid()) @db.VarChar(30)
  status     FitPicReportStatus @default(Pending)
  reportedAt DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  reporterId String?            @map("reporter") @db.VarChar(30)
  reportedId String?            @map("reported") @db.VarChar(30)
  reported   FitPic?            @relation(fields: [reportedId], references: [id])
  reporter   User?              @relation(fields: [reporterId], references: [id])
}

model Image {
  id        String   @id @default(cuid()) @db.VarChar(30)
  caption   String?
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String   @unique
  height    Int?
  width     Int?
  alt       String?

  // Do not use. Artifacts of prisma2 migration
  BlogPost              BlogPost[]
  Brand_BrandToImage    Brand[]
  FitPic                FitPic[]
  ShopifyProductVariant ShopifyProductVariant[]
  brands                Brand[]                 @relation("BrandToBrandImages")
  Collection            Collection[]
  Product               Product[]
}

model InterestedUser {
  id        String   @id @default(cuid()) @db.VarChar(30)
  email     String
  zipcode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id             String   @id @default(cuid()) @db.VarChar(30)
  name           String?
  image          String?
  trackingNumber String?
  trackingURL    String?
  package        Package?
}

model Launch {
  id           String      @id @default(cuid()) @db.VarChar(30)
  published    Boolean
  launchAt     DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  collectionId String?     @map("collection") @db.VarChar(30)
  collection   Collection? @relation(fields: [collectionId], references: [id])
  brandId      String?     @map("brand") @db.VarChar(30)
  brand        Brand?      @relation(fields: [brandId], references: [id])
}

model Location {
  id               String            @id @default(cuid()) @db.VarChar(30)
  slug             String?           @unique
  name             String?
  company          String?
  description      String?
  address1         String?
  address2         String?
  city             String?
  state            String?
  zipCode          String
  locationType     LocationType?
  lat              Float?
  lng              Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String?           @map("user") @db.VarChar(30)
  user             User?             @relation(fields: [userId], references: [id])
  country          String?
  physicalProducts PhysicalProduct[]
  shippingOptions  ShippingOption[]  @relation("LocationToShippingOption_destination")

  // Do not use. Artifacts of prisma 2 migration
  CustomerDetail                                 CustomerDetail[]
  FitPic                                         FitPic[]
  Package_LocationToPackage_fromAddress          Package[]        @relation("LocationToPackage_fromAddress")
  Package_LocationToPackage_toAddress            Package[]        @relation("LocationToPackage_toAddress")
  Reservation                                    Reservation[]
  ShippingOption_LocationToShippingOption_origin ShippingOption[] @relation("LocationToShippingOption_origin")
}

model Order {
  id            String             @id @default(cuid()) @db.VarChar(30)
  subTotal      Int?
  total         Int?
  couponID      String?
  note          String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  type          OrderType
  status        OrderStatus
  cancelReason  OrderCancelReason?
  paymentStatus OrderPaymentStatus @default(NotPaid)
  customerId    String?            @map("customer") @db.VarChar(30)
  customer      Customer?          @relation(fields: [customerId], references: [id])
  sentPackageId String?            @map("sentPackage") @db.VarChar(30)
  sentPackage   Package?           @relation(fields: [sentPackageId], references: [id])
  orderNumber   String             @unique
  // The ID of the order in an external system (e.g. Shopify )
  externalID    String?            @db.VarChar(25)
  lineItems     OrderLineItem[]
}

model OrderLineItem {
  id            String                  @id @default(cuid()) @db.VarChar(30)
  recordID      String                  @db.VarChar(30)
  recordType    OrderLineItemRecordType // OrderLineItemRecordType
  needShipping  Boolean?
  taxRate       Float?
  name          String? // E.g. "Early swap", or name of product
  taxName       String?
  taxPercentage Float?
  taxPrice      Int?
  price         Int
  currencyCode  String
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  reservationId String?                 @map("reservation") @db.VarChar(30)
  reservation   Reservation?            @relation(fields: [reservationId], references: [id])

  // Do not use. Artifact of prisma2 migration
  Order Order[]
}

model Package {
  id              String                @id @default(cuid()) @db.VarChar(30)
  weight          Float?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  fromAddressId   String?               @map("fromAddress") @db.VarChar(30)
  fromAddress     Location?             @relation("LocationToPackage_fromAddress", fields: [fromAddressId], references: [id])
  toAddressId     String?               @map("toAddress") @db.VarChar(30)
  toAddress       Location?             @relation("LocationToPackage_toAddress", fields: [toAddressId], references: [id])
  shippingLabelId String                @map("shippingLabel") @db.VarChar(30)
  shippingLabel   Label                 @relation(fields: [shippingLabelId], references: [id])
  transactionID   String
  cost            Int?
  status          PackageStatus?
  items           PhysicalProduct[]
  events          PackageTransitEvent[]
  order           Order?

  // Do not use. Artifacts from prisma2 migration
  Reservation_PackageToReservation_returnedPackage Reservation[] @relation("PackageToReservation_returnedPackage")
  Reservation_PackageToReservation_sentPackage     Reservation[] @relation("PackageToReservation_sentPackage")

}

model PackageTransitEvent {
  id            String                       @id @default(cuid()) @db.VarChar(30)
  status        PackageTransitEventStatus
  subStatus     PackageTransitEventSubStatus
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  data          Json
  packageId     String?                      @map("package") @db.VarChar(30)
  reservationId String?                      @map("reservation") @db.VarChar(30)
  package       Package?                     @relation(fields: [packageId], references: [id])
  reservation   Reservation?                 @relation(fields: [reservationId], references: [id])
}

model PauseReason {
  id            String         @id @default(cuid()) @db.VarChar(30)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reason        String
  pauseRequests PauseRequest[]
}

model PauseRequest {
  id           String              @id @default(cuid()) @db.VarChar(30)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  pausePending Boolean
  pauseDate    DateTime?
  resumeDate   DateTime?
  membershipId String?             @map("membership") @db.VarChar(30)
  membership   CustomerMembership? @relation(fields: [membershipId], references: [id])
  notified     Boolean             @default(false)
  pauseType    PauseType           @default(WithoutItems)
  reasonId     String?             @map("reason") @db.VarChar(30)
  reason       PauseReason?        @relation(fields: [reasonId], references: [id])
}

model PaymentPlan {
  id                  String               @id @default(cuid()) @db.VarChar(30)
  description         String?
  planID              String               @unique
  status              String?
  name                String?
  price               Int?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  tagline             String?
  itemCount           Int?
  tier                String?
  customerMemberships CustomerMembership[]
}

model PhysicalProduct {
  id                           String                         @id @default(cuid()) @db.VarChar(30)
  seasonsUID                   String                         @unique
  inventoryStatus              InventoryStatus
  productStatus                PhysicalProductStatus
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  locationId                   String?                        @map("location") @db.VarChar(30)
  location                     Location?                      @relation(fields: [locationId], references: [id])
  offloadMethod                PhysicalProductOffloadMethod?
  offloadNotes                 String?
  sequenceNumber               Int
  warehouseLocationId          String?                        @map("warehouseLocation") @db.VarChar(30)
  warehouseLocation            WarehouseLocation?             @relation(fields: [warehouseLocationId], references: [id])
  dateOrdered                  DateTime?
  dateReceived                 DateTime?
  unitCost                     Float?
  barcoded                     Boolean                        @default(value: false)
  priceId                      String?                        @map("price") @db.VarChar(30)
  packedAt                     DateTime?
  price                        PhysicalProductPrice?          @relation(fields: [priceId], references: [id])
  reports                      PhysicalProductQualityReport[]
  productNotifications         ProductNotification[]
  reservationReceiptItems      ReservationReceiptItem[]
  packages                     Package[]
  reservationsAllProducts      Reservation[]                  @relation("ReservationToAllProducts")
  reservationsNewProducts      Reservation[]                  @relation("ReservationToNewProducts")
  reservationsReturnedProducts Reservation[]                  @relation("ReservationToReturnedProducts")
  productVariantId             String                         @map("productVariant") @db.VarChar(30)
  productVariant               ProductVariant                 @relation(fields: [productVariantId], references: [id])
}

model PhysicalProductPrice {
  id              String           @id @default(cuid()) @db.VarChar(30)
  buyUsedEnabled  Boolean
  buyUsedPrice    Float?
  physicalProduct PhysicalProduct?
}

model PhysicalProductQualityReport {
  id                String                      @id @default(cuid()) @db.VarChar(30)
  damageType        PhysicalProductDamageType?
  notes             String?
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  physicalProductId String?                     @map("physicalProduct") @db.VarChar(30)
  physicalProduct   PhysicalProduct?            @relation(fields: [physicalProductId], references: [id])
  userId            String?                     @map("user") @db.VarChar(30)
  user              User?                       @relation(fields: [userId], references: [id])
  damageTypes       PhysicalProductDamageType[]
  published         Boolean                     @default(value: false)
  score             Int?
}

model Product {
  id                          String                   @id @default(cuid()) @db.VarChar(30)
  slug                        String                   @unique
  name                        String
  description                 String?
  externalURL                 String?
  retailPrice                 Int?
  status                      ProductStatus?
  createdAt                   DateTime                 @default(now())
  updatedAt                   DateTime                 @updatedAt
  categoryId                  String                   @map("category") @db.VarChar(30)
  category                    Category                 @relation(fields: [categoryId], references: [id])
  colorId                     String                   @map("color") @db.VarChar(30)
  color                       Color                    @relation("ColorToProduct_color", fields: [colorId], references: [id])
  secondaryColorId            String?                  @map("secondaryColor") @db.VarChar(30)
  secondaryColor              Color?                   @relation("ColorToProduct_secondaryColor", fields: [secondaryColorId], references: [id])
  brandId                     String                   @map("brand") @db.VarChar(30)
  brand                       Brand                    @relation(fields: [brandId], references: [id])
  type                        ProductType?
  modelSizeId                 String?                  @map("modelSize") @db.VarChar(30)
  modelSize                   Size?                    @relation(fields: [modelSizeId], references: [id])
  architecture                ProductArchitecture?
  publishedAt                 DateTime?
  photographyStatus           PhotographyStatus?
  seasonId                    String?                  @map("season") @db.VarChar(30)
  season                      ProductSeason?           @relation(fields: [seasonId], references: [id])
  productFit                  ProductFit?
  buyNewEnabled               Boolean
  tierId                      String?                  @map("tier") @db.VarChar(30)
  tier                        ProductTier?             @relation(fields: [tierId], references: [id])
  innerMaterials              String[]
  outerMaterials              String[]
  styles                      CustomerStyle[]
  recentlyViewedProducts      RecentlyViewedProduct[]
  collections                 Collection[]
  customersEmailedWithProduct Customer[]               @relation("CustomerToEmailedProducts")
  fitPics                     FitPic[]
  images                      Image[]
  functions                   ProductFunction[]
  variants                    ProductVariant[]
  tags                        Tag[]
  materialCategoryId          String?                  @map("materialCategory") @db.VarChar(30)
  materialCategory            ProductMaterialCategory? @relation(fields: [materialCategoryId], references: [id])
  modelId                     String?                  @map("model") @db.VarChar(30)
  model                       ProductModel?            @relation(fields: [modelId], references: [id])
}

model ProductFunction {
  id       String    @id @default(cuid()) @db.VarChar(30)
  name     String?   @unique
  products Product[]
}

model ProductMaterialCategory {
  id             String    @id @default(cuid()) @db.VarChar(30)
  slug           String    @unique
  categoryId     String?   @map("category") @db.VarChar(30)
  category       Category? @relation(fields: [categoryId], references: [id])
  lifeExpectancy Float
  products       Product[]
}

model ProductModel {
  id       String    @id @default(cuid()) @db.VarChar(30)
  name     String    @unique
  height   Float
  products Product[]
}

model ProductNotification {
  id                String                  @id @default(cuid()) @db.VarChar(30)
  type              ProductNotificationType
  shouldNotify      Boolean
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  productVariantId  String?                 @map("productVariant") @db.VarChar(30)
  productVariant    ProductVariant?         @relation(fields: [productVariantId], references: [id])
  physicalProductId String?                 @map("physicalProduct") @db.VarChar(30)
  physicalProduct   PhysicalProduct?        @relation(fields: [physicalProductId], references: [id])
  customerId        String?                 @map("customer") @db.VarChar(30)
  customer          Customer?               @relation(fields: [customerId], references: [id])
}

model ProductRequest {
  id            String   @id @default(cuid()) @db.VarChar(30)
  sku           String?
  brand         String?
  description   String?
  name          String?
  price         Int?
  priceCurrency String?
  productID     String?
  url           String
  reason        String
  userId        String?  @map("user") @db.VarChar(30)
  user          User?    @relation(fields: [userId], references: [id])
  images        String[]
}

model ProductSeason {
  id               String         @id @default(cuid()) @db.VarChar(30)
  vendorSeasonId   String?        @map("vendorSeason") @db.VarChar(30)
  vendorSeason     Season?        @relation("ProductSeason_vendorSeasonToSeason", fields: [vendorSeasonId], references: [id])
  internalSeasonId String?        @map("internalSeason") @db.VarChar(30)
  internalSeason   Season?        @relation("ProductSeason_internalSeasonToSeason", fields: [internalSeasonId], references: [id])
  wearableSeasons  SeasonString[]
  product          Product?
}

model ProductTier {
  id        String          @id @default(cuid()) @db.VarChar(30)
  tier      ProductTierName
  price     Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product[]
}

model ProductVariant {
  id                      String                   @id @default(cuid()) @db.VarChar(30)
  sku                     String?                  @unique
  weight                  Float?
  height                  Float?
  retailPrice             Float?
  total                   Int
  reservable              Int
  reserved                Int
  nonReservable           Int
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  colorId                 String?                  @map("color") @db.VarChar(30)
  color                   Color?                   @relation(fields: [colorId], references: [id])
  internalSizeId          String?                  @map("internalSize") @db.VarChar(30)
  internalSize            Size?                    @relation(fields: [internalSizeId], references: [id])
  offloaded               Int
  stored                  Int
  displayShort            String
  priceId                 String?                  @map("price") @db.VarChar(30)
  price                   ProductVariantPrice?     @relation(fields: [priceId], references: [id])
  physicalProducts        PhysicalProduct[]
  bagItems                BagItem[]
  productNotifications    ProductNotification[]
  productVariantFeedbacks ProductVariantFeedback[]
  productVariantWant      ProductVariantWant?
  shopifyProductVariant   ShopifyProductVariant?
  manufacturerSizes       Size[]                   @relation("ProductVariantManufacturerSize")
  productId               String                   @map("product") @db.VarChar(30)
  product                 Product                  @relation(fields: [productId], references: [id])
}

model ProductVariantFeedback {
  id                    String                           @id @default(cuid()) @db.VarChar(30)
  isCompleted           Boolean
  variantId             String?                          @map("variant") @db.VarChar(30)
  variant               ProductVariant?                  @relation(fields: [variantId], references: [id])
  questions             ProductVariantFeedbackQuestion[]
  rating                Float?
  review                String?
  reservationFeedbackId String                           @map("reservationFeedback") @db.VarChar(30)
  reservationFeedback   ReservationFeedback              @relation(fields: [reservationFeedbackId], references: [id])
}

model ProductVariantFeedbackQuestion {
  id                String                 @id @default(cuid()) @db.VarChar(30)
  question          String
  type              QuestionType
  options           String[]
  responses         String[]
  variantFeedbackId String                 @map("variantFeedback") @db.VarChar(30)
  variantFeedback   ProductVariantFeedback @relation(fields: [variantFeedbackId], references: [id])
}

model ProductVariantPrice {
  id             String          @id @default(cuid()) @db.VarChar(30)
  retailPrice    Float?
  productVariant ProductVariant?
}

model ProductVariantWant {
  id               String          @id @default(cuid()) @db.VarChar(30)
  isFulfilled      Boolean
  productVariantId String?         @map("productVariant") @db.VarChar(30)
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  userId           String?         @map("user") @db.VarChar(30)
  user             User?           @relation(fields: [userId], references: [id])
}

model PushNotificationReceipt {
  id                     String                @id @default(cuid()) @db.VarChar(30)
  route                  String?
  screen                 String?
  uri                    String?
  body                   String
  title                  String?
  sentAt                 DateTime              @default(now())
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  interest               String?
  recordID               String?
  recordSlug             String?
  notificationKey        String?
  users                  User[]                @relation("UserToPushNotificationReceipts")
  userPushNotificationId String?               @map("userPushNotification") @db.VarChar(30)
  userPushNotification   UserPushNotification? @relation(fields: [userPushNotificationId], references: [id])

}

model RecentlyViewedProduct {
  id         String    @id @default(cuid()) @db.VarChar(30)
  viewCount  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  productId  String?   @map("product") @db.VarChar(30)
  product    Product?  @relation(fields: [productId], references: [id])
  customerId String?   @map("customer") @db.VarChar(30)
  customer   Customer? @relation(fields: [customerId], references: [id])
}

model Reservation {
  id                String                @id @default(cuid()) @db.VarChar(30)
  shipped           Boolean
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  userId            String?               @map("user") @db.VarChar(30)
  user              User?                 @relation(fields: [userId], references: [id])
  reservationNumber Int                   @unique
  status            ReservationStatus
  shippedAt         DateTime?
  receivedAt        DateTime?
  lastLocationId    String?               @map("lastLocation") @db.VarChar(30)
  lastLocation      Location?             @relation(fields: [lastLocationId], references: [id])
  customerId        String?               @map("customer") @db.VarChar(30)
  customer          Customer?             @relation(fields: [customerId], references: [id])
  sentPackageId     String?               @map("sentPackage") @db.VarChar(30)
  sentPackage       Package?              @relation("PackageToReservation_sentPackage", fields: [sentPackageId], references: [id])
  returnedPackageId String?               @map("returnedPackage") @db.VarChar(30)
  returnedPackage   Package?              @relation("PackageToReservation_returnedPackage", fields: [returnedPackageId], references: [id])
  reminderSentAt    DateTime?
  receiptId         String?               @map("receipt") @db.VarChar(30)
  receipt           ReservationReceipt?   @relation(fields: [receiptId], references: [id])
  phase             ReservationPhase
  statusUpdatedAt   DateTime?
  shippingOptionId  String?               @map("shippingOption") @db.VarChar(30)
  shippingOption    ShippingOption?       @relation(fields: [shippingOptionId], references: [id])
  completedAt       DateTime?
  cancelledAt       DateTime?
  returnedAt        DateTime?
  packageEvents     PackageTransitEvent[]
  feedback          ReservationFeedback?
  products          PhysicalProduct[]     @relation("ReservationToAllProducts")
  newProducts       PhysicalProduct[]     @relation("ReservationToNewProducts")
  returnedProducts  PhysicalProduct[]     @relation("ReservationToReturnedProducts")
  lineItems         OrderLineItem[]
}

model ReservationFeedback {
  id            String                   @id @default(cuid()) @db.VarChar(30)
  comment       String?
  rating        Rating?
  userId        String?                  @map("user") @db.VarChar(30)
  user          User?                    @relation(fields: [userId], references: [id])
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  reservationId String?                  @map("reservation") @db.VarChar(30)
  reservation   Reservation?             @relation(fields: [reservationId], references: [id])
  respondedAt   DateTime?
  feedbacks     ProductVariantFeedback[]
}

model ReservationReceipt {
  id          String                   @id @default(cuid()) @db.VarChar(30)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  reservation Reservation?
  items       ReservationReceiptItem[]
}

model ReservationReceiptItem {
  id            String                @id @default(cuid()) @db.VarChar(30)
  productStatus PhysicalProductStatus
  notes         String?
  productId     String?               @map("product") @db.VarChar(30)
  product       PhysicalProduct?      @relation(fields: [productId], references: [id])
  receiptId     String                @map("receipt") @db.VarChar(30)
  receipt       ReservationReceipt    @relation(fields: [receiptId], references: [id])
}

model Season {
  id                     String          @id @default(cuid()) @db.VarChar(30)
  year                   Int?
  seasonCode             SeasonCode?
  productSeasonsInternal ProductSeason[] @relation("ProductSeason_internalSeasonToSeason")
  productSeasonsVendor   ProductSeason[] @relation("ProductSeason_vendorSeasonToSeason")
}

model ShippingMethod {
  id             String          @id @default(cuid()) @db.VarChar(30)
  code           ShippingCode
  displayText    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  shippingOption ShippingOption?
}

model ShippingOption {
  id               String          @id @default(cuid()) @db.VarChar(30)
  externalCost     Int?
  averageDuration  Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  destinationId    String?         @map("destination") @db.VarChar(30)
  destination      Location?       @relation("LocationToShippingOption_destination", fields: [destinationId], references: [id])
  originId         String?         @map("origin") @db.VarChar(30)
  origin           Location?       @relation("LocationToShippingOption_origin", fields: [originId], references: [id])
  shippingMethodId String?         @map("shippingMethod") @db.VarChar(30)
  shippingMethod   ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  reservation      Reservation?
}

model ShopifyProductVariant {
  id                     String                                @id @default(cuid()) @db.VarChar(30)
  externalId             String?                               @unique
  cachedPrice            Float?
  cachedAvailableForSale Boolean?
  cacheExpiresAt         DateTime?
  displayName            String?
  title                  String?
  imageId                String?                               @map("image") @db.VarChar(30)
  image                  Image?                                @relation(fields: [imageId], references: [id])
  brandId                String?                               @map("brand") @db.VarChar(30)
  brand                  Brand?                                @relation(fields: [brandId], references: [id])
  productVariantId       String?                               @map("productVariant") @db.VarChar(30)
  productVariant         ProductVariant?                       @relation(fields: [productVariantId], references: [id])
  shopId                 String?                               @map("shop") @db.VarChar(30)
  shop                   ShopifyShop?                          @relation(fields: [shopId], references: [id])
  selectedOptions        ShopifyProductVariantSelectedOption[]
}

model ShopifyProductVariantSelectedOption {
  id                      String                @id @default(cuid()) @db.VarChar(30)
  name                    String
  value                   String
  shopifyProductVariantId String                @map("shopifyProductVariant") @db.VarChar(30)
  shopifyProductVariant   ShopifyProductVariant @relation(fields: [shopifyProductVariantId], references: [id])
}

model Size {
  id                          String           @id @default(cuid()) @db.VarChar(30)
  slug                        String           @unique
  productType                 ProductType?
  display                     String
  topId                       String?          @map("top") @db.VarChar(30)
  top                         TopSize?         @relation(fields: [topId], references: [id])
  bottomId                    String?          @map("bottom") @db.VarChar(30)
  bottom                      BottomSize?      @relation(fields: [bottomId], references: [id])
  accessoryId                 String?          @map("accessory") @db.VarChar(30)
  accessory                   AccessorySize?   @relation(fields: [accessoryId], references: [id])
  type                        SizeType?
  modelSizeProduct            Product?
  productVariantInternal      ProductVariant?
  productVariantsManufacturer ProductVariant[] @relation("ProductVariantManufacturerSize")
}

model SmsReceipt {
  id         String    @id @default(cuid()) @db.VarChar(30)
  externalId String?
  body       String
  status     SmsStatus
  sentAt     DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  smsId      String?
  mediaUrls  String[]
  userId     String    @map("user") @db.VarChar(30)
  user       User      @relation(fields: [userId], references: [id])
}

model StylePreferences {
  id             String          @id @default(cuid()) @db.VarChar(30)
  brands         String[]
  colors         String[]
  patterns       String[]
  styles         String[]
  customerDetail CustomerDetail?
}

model SyncTiming {
  id         String         @id @default(cuid()) @db.VarChar(30)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  detail     String?
  type       SyncTimingType
  syncedAt   DateTime
  customerId String?        @map("customer") @db.VarChar(30)
  customer   Customer?      @relation(fields: [customerId], references: [id])
}

model Tag {
  id          String    @id @default(cuid()) @db.VarChar(30)
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model TopSize {
  id       String      @id @default(cuid()) @db.VarChar(30)
  letter   LetterSize?
  sleeve   Float?
  shoulder Float?
  chest    Float?
  neck     Float?
  length   Float?
  size     Size?
}

model User {
  id                            String                         @id @default(cuid()) @db.VarChar(30)
  auth0Id                       String                         @unique
  email                         String                         @unique
  firstName                     String
  lastName                      String
  role                          UserRole                       @default(Customer) // Deprecated. Do not use
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  pushNotificationStatus        PushNotificationStatus         @default(Denied)
  verificationStatus            UserVerificationStatus         @default(Pending)
  verificationMethod            UserVerificationMethod         @default(None)
  pushNotificationId            String?                        @map("pushNotification") @db.VarChar(30)
  pushNotification              UserPushNotification?          @relation(fields: [pushNotificationId], references: [id])
  sendSystemEmails              Boolean                        @default(true)
  deviceDataId                  String?                        @map("deviceData") @db.VarChar(30)
  deviceData                    UserDeviceData?                @relation(fields: [deviceDataId], references: [id])
  activeAdminUser               ActiveAdminUser?
  adminActionLogs               AdminActionLog[]
  customer                      Customer?
  emails                        EmailReceipt[]
  fitPics                       FitPic[]
  fitPicsRported                FitPicReport[]
  locations                     Location[]
  physicalProductQualityReportS PhysicalProductQualityReport[]
  productRequests               ProductRequest[]
  productVariantWants           ProductVariantWant[]
  reservations                  Reservation[]
  reservationFeedbacks          ReservationFeedback[]
  userPushNotificationInterests UserPushNotificationInterest[]
  roles                         UserRole[]
  pushNotifications             PushNotificationReceipt[]      @relation("UserToPushNotificationReceipts")
  smsReceipts                   SmsReceipt[]
}

model UserDeviceData {
  id         String  @id @default(cuid()) @db.VarChar(30)
  iOSVersion String?
  user       User?
}

model UserPushNotification {
  id        String                         @id @default(cuid()) @db.VarChar(30)
  status    Boolean
  interests UserPushNotificationInterest[]
  history   PushNotificationReceipt[]
  user      User?
}

model UserPushNotificationInterest {
  id                     String                           @id @default(cuid()) @db.VarChar(30)
  type                   UserPushNotificationInterestType
  value                  String
  status                 Boolean
  userId                 String?                          @map("user") @db.VarChar(30)
  user                   User?                            @relation(fields: [userId], references: [id])
  userPushNotificationId String                           @map("userPushNotification") @db.VarChar(30)
  userPushNotification   UserPushNotification             @relation(fields: [userPushNotificationId], references: [id])
}

model UTMData {
  id        String    @id @default(cuid()) @db.VarChar(30)
  source    String?
  medium    String?
  campaign  String?
  term      String?
  content   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customer  Customer?
}

model WarehouseLocation {
  id               String                        @id @default(cuid()) @db.VarChar(30)
  type             WarehouseLocationType
  barcode          String                        @unique
  locationCode     String
  itemCode         String
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  physicalProducts PhysicalProduct[]
  constraints      WarehouseLocationConstraint[]
}

model WarehouseLocationConstraint {
  id         String              @id @default(cuid()) @db.VarChar(30)
  limit      Int
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  categoryId String?             @map("category") @db.VarChar(30)
  category   Category?           @relation(fields: [categoryId], references: [id])
  locations  WarehouseLocation[]
}

model ShopifyShop {
  id                     String                  @id @default(cuid()) @db.VarChar(30)
  shopName               String                  @unique
  enabled                Boolean
  accessToken            String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  brand                  Brand?
  scope                  String[]
  shopifyProductVariants ShopifyProductVariant[]
}
