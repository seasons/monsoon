yarn run v1.16.0
$ jest
  console.log src/modules/Product/tests/reservation.spec.ts:54
    Client [Promise] {
      _currentInstructions: {},
      _models:
       [ { name: 'BrandTier', embedded: false },
         { name: 'Material', embedded: false },
         { name: 'Department', embedded: false },
         { name: 'LocationType', embedded: false },
         { name: 'CustomerStatus', embedded: false },
         { name: 'UserRole', embedded: false },
         { name: 'InventoryStatus', embedded: false },
         { name: 'PhysicalProductStatus', embedded: false },
         { name: 'ProductStatus', embedded: false },
         { name: 'ReservationStatus', embedded: false },
         { name: 'BagItemStatus', embedded: false },
         { name: 'Plan', embedded: false },
         { name: 'ProductType', embedded: false },
         { name: 'BottomSizeType', embedded: false },
         { name: 'Brand', embedded: false },
         { name: 'Category', embedded: false },
         { name: 'Color', embedded: false },
         { name: 'Collection', embedded: false },
         { name: 'CollectionGroup', embedded: false },
         { name: 'HomepageProductRail', embedded: false },
         { name: 'Image', embedded: false },
         { name: 'Location', embedded: false },
         { name: 'Product', embedded: false },
         { name: 'ProductFunction', embedded: false },
         { name: 'ProductVariant', embedded: false },
         { name: 'PhysicalProduct', embedded: false },
         { name: 'User', embedded: false },
         { name: 'PushNotificationStatus', embedded: false },
         { name: 'CustomerDetail', embedded: false },
         { name: 'BagItem', embedded: false },
         { name: 'Customer', embedded: false },
         { name: 'RecentlyViewedProduct', embedded: false },
         { name: 'Order', embedded: false },
         { name: 'Reservation', embedded: false },
         { name: 'Package', embedded: false },
         { name: 'Label', embedded: false },
         { name: 'BillingInfo', embedded: false },
         { name: 'ProductRequest', embedded: false },
         { name: 'ProductVariantWant', embedded: false },
         { name: 'LetterSize', embedded: false },
         { name: 'TopSize', embedded: false },
         { name: 'BottomSize', embedded: false },
         { name: 'Size', embedded: false } ],
      _promises: {},
      processInstructionsOnce: [Function],
      processInstructions: [Function],
      then: [Function],
      catch: [Function],
      _debug: undefined,
      _schema:
       GraphQLSchema {
         __validationErrors: undefined,
         extensions: undefined,
         astNode: undefined,
         extensionASTNodes: undefined,
         __allowedLegacyNames: [],
         _queryType: Query,
         _mutationType: Mutation,
         _subscriptionType: Subscription,
         _directives: [ @skip, @include, @deprecated ],
         _typeMap:
          [Object: null prototype] {
            Query: Query,
            BagItemWhereUniqueInput: BagItemWhereUniqueInput,
            ID: ID,
            BagItem: BagItem,
            Customer: Customer,
            User: User,
            String: String,
            UserRole: UserRole,
            DateTime: DateTime,
            PushNotificationStatus: PushNotificationStatus,
            CustomerStatus: CustomerStatus,
            CustomerDetail: CustomerDetail,
            Int: Int,
            Location: Location,
            LocationType: LocationType,
            Float: Float,
            PhysicalProductWhereInput: PhysicalProductWhereInput,
            LocationWhereInput: LocationWhereInput,
            UserWhereInput: UserWhereInput,
            ProductVariantWhereInput: ProductVariantWhereInput,
            ColorWhereInput: ColorWhereInput,
            SizeWhereInput: SizeWhereInput,
            ProductType: ProductType,
            TopSizeWhereInput: TopSizeWhereInput,
            LetterSize: LetterSize,
            BottomSizeWhereInput: BottomSizeWhereInput,
            BottomSizeType: BottomSizeType,
            ProductWhereInput: ProductWhereInput,
            BrandWhereInput: BrandWhereInput,
            Boolean: Boolean,
            BrandTier: BrandTier,
            CategoryWhereInput: CategoryWhereInput,
            ProductFunctionWhereInput: ProductFunctionWhereInput,
            ProductStatus: ProductStatus,
            InventoryStatus: InventoryStatus,
            PhysicalProductStatus: PhysicalProductStatus,
            PhysicalProductOrderByInput: PhysicalProductOrderByInput,
            PhysicalProduct: PhysicalProduct,
            ProductVariant: ProductVariant,
            Color: Color,
            ProductVariantOrderByInput: ProductVariantOrderByInput,
            Size: Size,
            TopSize: TopSize,
            BottomSize: BottomSize,
            SizeOrderByInput: SizeOrderByInput,
            Product: Product,
            Brand: Brand,
            Json: Json,
            ProductOrderByInput: ProductOrderByInput,
            Category: Category,
            CategoryOrderByInput: CategoryOrderByInput,
            ProductFunctionOrderByInput: ProductFunctionOrderByInput,
            ProductFunction: ProductFunction,
            Material: Material,
            BillingInfo: BillingInfo,
            Plan: Plan,
            ReservationWhereInput: ReservationWhereInput,
            CustomerWhereInput: CustomerWhereInput,
            CustomerDetailWhereInput: CustomerDetailWhereInput,
            BillingInfoWhereInput: BillingInfoWhereInput,
            PackageWhereInput: PackageWhereInput,
            LabelWhereInput: LabelWhereInput,
            ReservationStatus: ReservationStatus,
            ReservationOrderByInput: ReservationOrderByInput,
            Reservation: Reservation,
            Package: Package,
            Label: Label,
            BagItemStatus: BagItemStatus,
            BagItemWhereInput: BagItemWhereInput,
            BagItemOrderByInput: BagItemOrderByInput,
            BagItemConnection: BagItemConnection,
            PageInfo: PageInfo,
            BagItemEdge: BagItemEdge,
            AggregateBagItem: AggregateBagItem,
            BillingInfoWhereUniqueInput: BillingInfoWhereUniqueInput,
            BillingInfoOrderByInput: BillingInfoOrderByInput,
            BillingInfoConnection: BillingInfoConnection,
            BillingInfoEdge: BillingInfoEdge,
            AggregateBillingInfo: AggregateBillingInfo,
            BottomSizeWhereUniqueInput: BottomSizeWhereUniqueInput,
            BottomSizeOrderByInput: BottomSizeOrderByInput,
            BottomSizeConnection: BottomSizeConnection,
            BottomSizeEdge: BottomSizeEdge,
            AggregateBottomSize: AggregateBottomSize,
            BrandWhereUniqueInput: BrandWhereUniqueInput,
            BrandOrderByInput: BrandOrderByInput,
            BrandConnection: BrandConnection,
            BrandEdge: BrandEdge,
            AggregateBrand: AggregateBrand,
            CategoryWhereUniqueInput: CategoryWhereUniqueInput,
            CategoryConnection: CategoryConnection,
            CategoryEdge: CategoryEdge,
            AggregateCategory: AggregateCategory,
            CollectionWhereUniqueInput: CollectionWhereUniqueInput,
            Collection: Collection,
            CollectionWhereInput: CollectionWhereInput,
            CollectionOrderByInput: CollectionOrderByInput,
            CollectionConnection: CollectionConnection,
            CollectionEdge: CollectionEdge,
            AggregateCollection: AggregateCollection,
            CollectionGroupWhereUniqueInput: CollectionGroupWhereUniqueInput,
            CollectionGroup: CollectionGroup,
            CollectionGroupWhereInput: CollectionGroupWhereInput,
            CollectionGroupOrderByInput: CollectionGroupOrderByInput,
            CollectionGroupConnection: CollectionGroupConnection,
            CollectionGroupEdge: CollectionGroupEdge,
            AggregateCollectionGroup: AggregateCollectionGroup,
            ColorWhereUniqueInput: ColorWhereUniqueInput,
            ColorOrderByInput: ColorOrderByInput,
            ColorConnection: ColorConnection,
            ColorEdge: ColorEdge,
            AggregateColor: AggregateColor,
            CustomerWhereUniqueInput: CustomerWhereUniqueInput,
            CustomerOrderByInput: CustomerOrderByInput,
            CustomerConnection: CustomerConnection,
            CustomerEdge: CustomerEdge,
            AggregateCustomer: AggregateCustomer,
            CustomerDetailWhereUniqueInput: CustomerDetailWhereUniqueInput,
            CustomerDetailOrderByInput: CustomerDetailOrderByInput,
            CustomerDetailConnection: CustomerDetailConnection,
            CustomerDetailEdge: CustomerDetailEdge,
            AggregateCustomerDetail: AggregateCustomerDetail,
            HomepageProductRailWhereUniqueInput: HomepageProductRailWhereUniqueInput,
            HomepageProductRail: HomepageProductRail,
            HomepageProductRailWhereInput: HomepageProductRailWhereInput,
            HomepageProductRailOrderByInput: HomepageProductRailOrderByInput,
            HomepageProductRailConnection: HomepageProductRailConnection,
            HomepageProductRailEdge: HomepageProductRailEdge,
            AggregateHomepageProductRail: AggregateHomepageProductRail,
            ImageWhereUniqueInput: ImageWhereUniqueInput,
            Image: Image,
            ImageWhereInput: ImageWhereInput,
            ImageOrderByInput: ImageOrderByInput,
            ImageConnection: ImageConnection,
            ImageEdge: ImageEdge,
            AggregateImage: AggregateImage,
            LabelWhereUniqueInput: LabelWhereUniqueInput,
            LabelOrderByInput: LabelOrderByInput,
            LabelConnection: LabelConnection,
            LabelEdge: LabelEdge,
            AggregateLabel: AggregateLabel,
            LocationWhereUniqueInput: LocationWhereUniqueInput,
            LocationOrderByInput: LocationOrderByInput,
            LocationConnection: LocationConnection,
            LocationEdge: LocationEdge,
            AggregateLocation: AggregateLocation,
            OrderWhereUniqueInput: OrderWhereUniqueInput,
            Order: Order,
            OrderWhereInput: OrderWhereInput,
            OrderOrderByInput: OrderOrderByInput,
            OrderConnection: OrderConnection,
            OrderEdge: OrderEdge,
            AggregateOrder: AggregateOrder,
            PackageWhereUniqueInput: PackageWhereUniqueInput,
            PackageOrderByInput: PackageOrderByInput,
            PackageConnection: PackageConnection,
            PackageEdge: PackageEdge,
            AggregatePackage: AggregatePackage,
            PhysicalProductWhereUniqueInput: PhysicalProductWhereUniqueInput,
            PhysicalProductConnection: PhysicalProductConnection,
            PhysicalProductEdge: PhysicalProductEdge,
            AggregatePhysicalProduct: AggregatePhysicalProduct,
            ProductWhereUniqueInput: ProductWhereUniqueInput,
            ProductConnection: ProductConnection,
            ProductEdge: ProductEdge,
            AggregateProduct: AggregateProduct,
            ProductFunctionWhereUniqueInput: ProductFunctionWhereUniqueInput,
            ProductFunctionConnection: ProductFunctionConnection,
            ProductFunctionEdge: ProductFunctionEdge,
            AggregateProductFunction: AggregateProductFunction,
            ProductRequestWhereUniqueInput: ProductRequestWhereUniqueInput,
            ProductRequest: ProductRequest,
            ProductRequestWhereInput: ProductRequestWhereInput,
            ProductRequestOrderByInput: ProductRequestOrderByInput,
            ProductRequestConnection: ProductRequestConnection,
            ProductRequestEdge: ProductRequestEdge,
            AggregateProductRequest: AggregateProductRequest,
            ProductVariantWhereUniqueInput: ProductVariantWhereUniqueInput,
            ProductVariantConnection: ProductVariantConnection,
            ProductVariantEdge: ProductVariantEdge,
            AggregateProductVariant: AggregateProductVariant,
            ProductVariantWantWhereUniqueInput: ProductVariantWantWhereUniqueInput,
            ProductVariantWant: ProductVariantWant,
            ProductVariantWantWhereInput: ProductVariantWantWhereInput,
            ProductVariantWantOrderByInput: ProductVariantWantOrderByInput,
            ProductVariantWantConnection: ProductVariantWantConnection,
            ProductVariantWantEdge: ProductVariantWantEdge,
            AggregateProductVariantWant: AggregateProductVariantWant,
            RecentlyViewedProductWhereUniqueInput: RecentlyViewedProductWhereUniqueInput,
            RecentlyViewedProduct: RecentlyViewedProduct,
            RecentlyViewedProductWhereInput: RecentlyViewedProductWhereInput,
            RecentlyViewedProductOrderByInput: RecentlyViewedProductOrderByInput,
            RecentlyViewedProductConnection: RecentlyViewedProductConnection,
            RecentlyViewedProductEdge: RecentlyViewedProductEdge,
            AggregateRecentlyViewedProduct: AggregateRecentlyViewedProduct,
            ReservationWhereUniqueInput: ReservationWhereUniqueInput,
            ReservationConnection: ReservationConnection,
            ReservationEdge: ReservationEdge,
            AggregateReservation: AggregateReservation,
            SizeWhereUniqueInput: SizeWhereUniqueInput,
            SizeConnection: SizeConnection,
            SizeEdge: SizeEdge,
            AggregateSize: AggregateSize,
            TopSizeWhereUniqueInput: TopSizeWhereUniqueInput,
            TopSizeOrderByInput: TopSizeOrderByInput,
            TopSizeConnection: TopSizeConnection,
            TopSizeEdge: TopSizeEdge,
            AggregateTopSize: AggregateTopSize,
            UserWhereUniqueInput: UserWhereUniqueInput,
            UserOrderByInput: UserOrderByInput,
            UserConnection: UserConnection,
            UserEdge: UserEdge,
            AggregateUser: AggregateUser,
            Node: Node,
            Mutation: Mutation,
            BagItemCreateInput: BagItemCreateInput,
            CustomerCreateOneInput: CustomerCreateOneInput,
            CustomerCreateInput: CustomerCreateInput,
            UserCreateOneInput: UserCreateOneInput,
            UserCreateInput: UserCreateInput,
            CustomerDetailCreateOneInput: CustomerDetailCreateOneInput,
            CustomerDetailCreateInput: CustomerDetailCreateInput,
            LocationCreateOneInput: LocationCreateOneInput,
            LocationCreateInput: LocationCreateInput,
            PhysicalProductCreateManyWithoutLocationInput: PhysicalProductCreateManyWithoutLocationInput,
            PhysicalProductCreateWithoutLocationInput: PhysicalProductCreateWithoutLocationInput,
            ProductVariantCreateOneWithoutPhysicalProductsInput: ProductVariantCreateOneWithoutPhysicalProductsInput,
            ProductVariantCreateWithoutPhysicalProductsInput: ProductVariantCreateWithoutPhysicalProductsInput,
            ColorCreateOneWithoutProductVariantsInput: ColorCreateOneWithoutProductVariantsInput,
            ColorCreateWithoutProductVariantsInput: ColorCreateWithoutProductVariantsInput,
            SizeCreateOneInput: SizeCreateOneInput,
            SizeCreateInput: SizeCreateInput,
            TopSizeCreateOneInput: TopSizeCreateOneInput,
            TopSizeCreateInput: TopSizeCreateInput,
            BottomSizeCreateOneInput: BottomSizeCreateOneInput,
            BottomSizeCreateInput: BottomSizeCreateInput,
            SizeCreateManyInput: SizeCreateManyInput,
            ProductCreateOneWithoutVariantsInput: ProductCreateOneWithoutVariantsInput,
            ProductCreateWithoutVariantsInput: ProductCreateWithoutVariantsInput,
            BrandCreateOneWithoutProductsInput: BrandCreateOneWithoutProductsInput,
            BrandCreateWithoutProductsInput: BrandCreateWithoutProductsInput,
            CategoryCreateOneWithoutProductsInput: CategoryCreateOneWithoutProductsInput,
            CategoryCreateWithoutProductsInput: CategoryCreateWithoutProductsInput,
            CategoryCreateManyWithoutChildrenInput: CategoryCreateManyWithoutChildrenInput,
            CategoryCreateWithoutChildrenInput: CategoryCreateWithoutChildrenInput,
            ProductCreateManyWithoutCategoryInput: ProductCreateManyWithoutCategoryInput,
            ProductCreateWithoutCategoryInput: ProductCreateWithoutCategoryInput,
            ColorCreateOneInput: ColorCreateOneInput,
            ColorCreateInput: ColorCreateInput,
            ProductVariantCreateManyWithoutColorInput: ProductVariantCreateManyWithoutColorInput,
            ProductVariantCreateWithoutColorInput: ProductVariantCreateWithoutColorInput,
            PhysicalProductCreateManyWithoutProductVariantInput: PhysicalProductCreateManyWithoutProductVariantInput,
            PhysicalProductCreateWithoutProductVariantInput: PhysicalProductCreateWithoutProductVariantInput,
            LocationCreateOneWithoutPhysicalProductsInput: LocationCreateOneWithoutPhysicalProductsInput,
            LocationCreateWithoutPhysicalProductsInput: LocationCreateWithoutPhysicalProductsInput,
            ProductFunctionCreateManyInput: ProductFunctionCreateManyInput,
            ProductFunctionCreateInput: ProductFunctionCreateInput,
            ProductCreateinnerMaterialsInput: ProductCreateinnerMaterialsInput,
            ProductCreateouterMaterialsInput: ProductCreateouterMaterialsInput,
            ProductVariantCreateManyWithoutProductInput: ProductVariantCreateManyWithoutProductInput,
            ProductVariantCreateWithoutProductInput: ProductVariantCreateWithoutProductInput,
            BillingInfoCreateOneInput: BillingInfoCreateOneInput,
            BillingInfoCreateInput: BillingInfoCreateInput,
            ReservationCreateManyWithoutCustomerInput: ReservationCreateManyWithoutCustomerInput,
            ReservationCreateWithoutCustomerInput: ReservationCreateWithoutCustomerInput,
            PackageCreateOneInput: PackageCreateOneInput,
            PackageCreateInput: PackageCreateInput,
            PhysicalProductCreateManyInput: PhysicalProductCreateManyInput,
            PhysicalProductCreateInput: PhysicalProductCreateInput,
            LabelCreateOneInput: LabelCreateOneInput,
            LabelCreateInput: LabelCreateInput,
            ProductVariantCreateOneInput: ProductVariantCreateOneInput,
            ProductVariantCreateInput: ProductVariantCreateInput,
            BagItemUpdateInput: BagItemUpdateInput,
            CustomerUpdateOneRequiredInput: CustomerUpdateOneRequiredInput,
            CustomerUpdateDataInput: CustomerUpdateDataInput,
            UserUpdateOneRequiredInput: UserUpdateOneRequiredInput,
            UserUpdateDataInput: UserUpdateDataInput,
            UserUpsertNestedInput: UserUpsertNestedInput,
            CustomerDetailUpdateOneInput: CustomerDetailUpdateOneInput,
            CustomerDetailUpdateDataInput: CustomerDetailUpdateDataInput,
            LocationUpdateOneInput: LocationUpdateOneInput,
            LocationUpdateDataInput: LocationUpdateDataInput,
            UserUpdateOneInput: UserUpdateOneInput,
            PhysicalProductUpdateManyWithoutLocationInput: PhysicalProductUpdateManyWithoutLocationInput,
            PhysicalProductUpdateWithWhereUniqueWithoutLocationInput: PhysicalProductUpdateWithWhereUniqueWithoutLocationInput,
            PhysicalProductUpdateWithoutLocationDataInput: PhysicalProductUpdateWithoutLocationDataInput,
            ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput,
            ProductVariantUpdateWithoutPhysicalProductsDataInput: ProductVariantUpdateWithoutPhysicalProductsDataInput,
            ColorUpdateOneRequiredWithoutProductVariantsInput: ColorUpdateOneRequiredWithoutProductVariantsInput,
            ColorUpdateWithoutProductVariantsDataInput: ColorUpdateWithoutProductVariantsDataInput,
            ColorUpsertWithoutProductVariantsInput: ColorUpsertWithoutProductVariantsInput,
            SizeUpdateOneInput: SizeUpdateOneInput,
            SizeUpdateDataInput: SizeUpdateDataInput,
            TopSizeUpdateOneInput: TopSizeUpdateOneInput,
            TopSizeUpdateDataInput: TopSizeUpdateDataInput,
            TopSizeUpsertNestedInput: TopSizeUpsertNestedInput,
            BottomSizeUpdateOneInput: BottomSizeUpdateOneInput,
            BottomSizeUpdateDataInput: BottomSizeUpdateDataInput,
            BottomSizeUpsertNestedInput: BottomSizeUpsertNestedInput,
            SizeUpsertNestedInput: SizeUpsertNestedInput,
            SizeUpdateManyInput: SizeUpdateManyInput,
            SizeUpdateWithWhereUniqueNestedInput: SizeUpdateWithWhereUniqueNestedInput,
            SizeUpsertWithWhereUniqueNestedInput: SizeUpsertWithWhereUniqueNestedInput,
            SizeScalarWhereInput: SizeScalarWhereInput,
            SizeUpdateManyWithWhereNestedInput: SizeUpdateManyWithWhereNestedInput,
            SizeUpdateManyDataInput: SizeUpdateManyDataInput,
            ProductUpdateOneRequiredWithoutVariantsInput: ProductUpdateOneRequiredWithoutVariantsInput,
            ProductUpdateWithoutVariantsDataInput: ProductUpdateWithoutVariantsDataInput,
            BrandUpdateOneRequiredWithoutProductsInput: BrandUpdateOneRequiredWithoutProductsInput,
            BrandUpdateWithoutProductsDataInput: BrandUpdateWithoutProductsDataInput,
            BrandUpsertWithoutProductsInput: BrandUpsertWithoutProductsInput,
            CategoryUpdateOneRequiredWithoutProductsInput: CategoryUpdateOneRequiredWithoutProductsInput,
            CategoryUpdateWithoutProductsDataInput: CategoryUpdateWithoutProductsDataInput,
            CategoryUpdateManyWithoutChildrenInput: CategoryUpdateManyWithoutChildrenInput,
            CategoryUpdateWithWhereUniqueWithoutChildrenInput: CategoryUpdateWithWhereUniqueWithoutChildrenInput,
            CategoryUpdateWithoutChildrenDataInput: CategoryUpdateWithoutChildrenDataInput,
            ProductUpdateManyWithoutCategoryInput: ProductUpdateManyWithoutCategoryInput,
            ProductUpdateWithWhereUniqueWithoutCategoryInput: ProductUpdateWithWhereUniqueWithoutCategoryInput,
            ProductUpdateWithoutCategoryDataInput: ProductUpdateWithoutCategoryDataInput,
            ColorUpdateOneRequiredInput: ColorUpdateOneRequiredInput,
            ColorUpdateDataInput: ColorUpdateDataInput,
            ProductVariantUpdateManyWithoutColorInput: ProductVariantUpdateManyWithoutColorInput,
            ProductVariantUpdateWithWhereUniqueWithoutColorInput: ProductVariantUpdateWithWhereUniqueWithoutColorInput,
            ProductVariantUpdateWithoutColorDataInput: ProductVariantUpdateWithoutColorDataInput,
            PhysicalProductUpdateManyWithoutProductVariantInput: PhysicalProductUpdateManyWithoutProductVariantInput,
            PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput:
             PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput,
            PhysicalProductUpdateWithoutProductVariantDataInput: PhysicalProductUpdateWithoutProductVariantDataInput,
            LocationUpdateOneWithoutPhysicalProductsInput: LocationUpdateOneWithoutPhysicalProductsInput,
            LocationUpdateWithoutPhysicalProductsDataInput: LocationUpdateWithoutPhysicalProductsDataInput,
            LocationUpsertWithoutPhysicalProductsInput: LocationUpsertWithoutPhysicalProductsInput,
            PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput:
             PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput,
            PhysicalProductScalarWhereInput: PhysicalProductScalarWhereInput,
            PhysicalProductUpdateManyWithWhereNestedInput: PhysicalProductUpdateManyWithWhereNestedInput,
            PhysicalProductUpdateManyDataInput: PhysicalProductUpdateManyDataInput,
            ProductVariantUpsertWithWhereUniqueWithoutColorInput: ProductVariantUpsertWithWhereUniqueWithoutColorInput,
            ProductVariantScalarWhereInput: ProductVariantScalarWhereInput,
            ProductVariantUpdateManyWithWhereNestedInput: ProductVariantUpdateManyWithWhereNestedInput,
            ProductVariantUpdateManyDataInput: ProductVariantUpdateManyDataInput,
            ColorUpsertNestedInput: ColorUpsertNestedInput,
            ColorUpdateOneInput: ColorUpdateOneInput,
            ProductFunctionUpdateManyInput: ProductFunctionUpdateManyInput,
            ProductFunctionUpdateWithWhereUniqueNestedInput: ProductFunctionUpdateWithWhereUniqueNestedInput,
            ProductFunctionUpdateDataInput: ProductFunctionUpdateDataInput,
            ProductFunctionUpsertWithWhereUniqueNestedInput: ProductFunctionUpsertWithWhereUniqueNestedInput,
            ProductFunctionScalarWhereInput: ProductFunctionScalarWhereInput,
            ProductFunctionUpdateManyWithWhereNestedInput: ProductFunctionUpdateManyWithWhereNestedInput,
            ProductFunctionUpdateManyDataInput: ProductFunctionUpdateManyDataInput,
            ProductUpdateinnerMaterialsInput: ProductUpdateinnerMaterialsInput,
            ProductUpdateouterMaterialsInput: ProductUpdateouterMaterialsInput,
            ProductVariantUpdateManyWithoutProductInput: ProductVariantUpdateManyWithoutProductInput,
            ProductVariantUpdateWithWhereUniqueWithoutProductInput: ProductVariantUpdateWithWhereUniqueWithoutProductInput,
            ProductVariantUpdateWithoutProductDataInput: ProductVariantUpdateWithoutProductDataInput,
            ProductVariantUpsertWithWhereUniqueWithoutProductInput: ProductVariantUpsertWithWhereUniqueWithoutProductInput,
            ProductUpsertWithWhereUniqueWithoutCategoryInput: ProductUpsertWithWhereUniqueWithoutCategoryInput,
            ProductScalarWhereInput: ProductScalarWhereInput,
            ProductUpdateManyWithWhereNestedInput: ProductUpdateManyWithWhereNestedInput,
            ProductUpdateManyDataInput: ProductUpdateManyDataInput,
            CategoryUpsertWithWhereUniqueWithoutChildrenInput: CategoryUpsertWithWhereUniqueWithoutChildrenInput,
            CategoryScalarWhereInput: CategoryScalarWhereInput,
            CategoryUpdateManyWithWhereNestedInput: CategoryUpdateManyWithWhereNestedInput,
            CategoryUpdateManyDataInput: CategoryUpdateManyDataInput,
            CategoryUpsertWithoutProductsInput: CategoryUpsertWithoutProductsInput,
            ProductUpsertWithoutVariantsInput: ProductUpsertWithoutVariantsInput,
            ProductVariantUpsertWithoutPhysicalProductsInput: ProductVariantUpsertWithoutPhysicalProductsInput,
            PhysicalProductUpsertWithWhereUniqueWithoutLocationInput: PhysicalProductUpsertWithWhereUniqueWithoutLocationInput,
            LocationUpsertNestedInput: LocationUpsertNestedInput,
            CustomerDetailUpsertNestedInput: CustomerDetailUpsertNestedInput,
            BillingInfoUpdateOneInput: BillingInfoUpdateOneInput,
            BillingInfoUpdateDataInput: BillingInfoUpdateDataInput,
            BillingInfoUpsertNestedInput: BillingInfoUpsertNestedInput,
            ReservationUpdateManyWithoutCustomerInput: ReservationUpdateManyWithoutCustomerInput,
            ReservationUpdateWithWhereUniqueWithoutCustomerInput: ReservationUpdateWithWhereUniqueWithoutCustomerInput,
            ReservationUpdateWithoutCustomerDataInput: ReservationUpdateWithoutCustomerDataInput,
            PackageUpdateOneInput: PackageUpdateOneInput,
            PackageUpdateDataInput: PackageUpdateDataInput,
            PhysicalProductUpdateManyInput: PhysicalProductUpdateManyInput,
            PhysicalProductUpdateWithWhereUniqueNestedInput: PhysicalProductUpdateWithWhereUniqueNestedInput,
            PhysicalProductUpdateDataInput: PhysicalProductUpdateDataInput,
            PhysicalProductUpsertWithWhereUniqueNestedInput: PhysicalProductUpsertWithWhereUniqueNestedInput,
            LabelUpdateOneRequiredInput: LabelUpdateOneRequiredInput,
            LabelUpdateDataInput: LabelUpdateDataInput,
            LabelUpsertNestedInput: LabelUpsertNestedInput,
            LocationUpdateOneRequiredInput: LocationUpdateOneRequiredInput,
            PackageUpsertNestedInput: PackageUpsertNestedInput,
            ReservationUpsertWithWhereUniqueWithoutCustomerInput: ReservationUpsertWithWhereUniqueWithoutCustomerInput,
            ReservationScalarWhereInput: ReservationScalarWhereInput,
            ReservationUpdateManyWithWhereNestedInput: ReservationUpdateManyWithWhereNestedInput,
            ReservationUpdateManyDataInput: ReservationUpdateManyDataInput,
            CustomerUpsertNestedInput: CustomerUpsertNestedInput,
            ProductVariantUpdateOneRequiredInput: ProductVariantUpdateOneRequiredInput,
            ProductVariantUpdateDataInput: ProductVariantUpdateDataInput,
            ProductVariantUpsertNestedInput: ProductVariantUpsertNestedInput,
            BagItemUpdateManyMutationInput: BagItemUpdateManyMutationInput,
            BatchPayload: BatchPayload,
            Long: Long,
            BillingInfoUpdateInput: BillingInfoUpdateInput,
            BillingInfoUpdateManyMutationInput: BillingInfoUpdateManyMutationInput,
            BottomSizeUpdateInput: BottomSizeUpdateInput,
            BottomSizeUpdateManyMutationInput: BottomSizeUpdateManyMutationInput,
            BrandCreateInput: BrandCreateInput,
            ProductCreateManyWithoutBrandInput: ProductCreateManyWithoutBrandInput,
            ProductCreateWithoutBrandInput: ProductCreateWithoutBrandInput,
            BrandUpdateInput: BrandUpdateInput,
            ProductUpdateManyWithoutBrandInput: ProductUpdateManyWithoutBrandInput,
            ProductUpdateWithWhereUniqueWithoutBrandInput: ProductUpdateWithWhereUniqueWithoutBrandInput,
            ProductUpdateWithoutBrandDataInput: ProductUpdateWithoutBrandDataInput,
            ProductUpsertWithWhereUniqueWithoutBrandInput: ProductUpsertWithWhereUniqueWithoutBrandInput,
            BrandUpdateManyMutationInput: BrandUpdateManyMutationInput,
            CategoryCreateInput: CategoryCreateInput,
            CategoryUpdateInput: CategoryUpdateInput,
            CategoryUpdateManyMutationInput: CategoryUpdateManyMutationInput,
            CollectionCreateInput: CollectionCreateInput,
            ProductCreateManyInput: ProductCreateManyInput,
            ProductCreateInput: ProductCreateInput,
            CollectionUpdateInput: CollectionUpdateInput,
            ProductUpdateManyInput: ProductUpdateManyInput,
            ProductUpdateWithWhereUniqueNestedInput: ProductUpdateWithWhereUniqueNestedInput,
            ProductUpdateDataInput: ProductUpdateDataInput,
            ProductUpsertWithWhereUniqueNestedInput: ProductUpsertWithWhereUniqueNestedInput,
            CollectionUpdateManyMutationInput: CollectionUpdateManyMutationInput,
            CollectionGroupCreateInput: CollectionGroupCreateInput,
            CollectionCreateManyInput: CollectionCreateManyInput,
            CollectionGroupUpdateInput: CollectionGroupUpdateInput,
            CollectionUpdateManyInput: CollectionUpdateManyInput,
            CollectionUpdateWithWhereUniqueNestedInput: CollectionUpdateWithWhereUniqueNestedInput,
            CollectionUpdateDataInput: CollectionUpdateDataInput,
            CollectionUpsertWithWhereUniqueNestedInput: CollectionUpsertWithWhereUniqueNestedInput,
            CollectionScalarWhereInput: CollectionScalarWhereInput,
            CollectionUpdateManyWithWhereNestedInput: CollectionUpdateManyWithWhereNestedInput,
            CollectionUpdateManyDataInput: CollectionUpdateManyDataInput,
            CollectionGroupUpdateManyMutationInput: CollectionGroupUpdateManyMutationInput,
            ColorUpdateInput: ColorUpdateInput,
            ColorUpdateManyMutationInput: ColorUpdateManyMutationInput,
            CustomerUpdateInput: CustomerUpdateInput,
            CustomerUpdateManyMutationInput: CustomerUpdateManyMutationInput,
            CustomerDetailUpdateInput: CustomerDetailUpdateInput,
            CustomerDetailUpdateManyMutationInput: CustomerDetailUpdateManyMutationInput,
            HomepageProductRailCreateInput: HomepageProductRailCreateInput,
            HomepageProductRailUpdateInput: HomepageProductRailUpdateInput,
            HomepageProductRailUpdateManyMutationInput: HomepageProductRailUpdateManyMutationInput,
            ImageCreateInput: ImageCreateInput,
            ImageUpdateInput: ImageUpdateInput,
            ImageUpdateManyMutationInput: ImageUpdateManyMutationInput,
            LabelUpdateInput: LabelUpdateInput,
            LabelUpdateManyMutationInput: LabelUpdateManyMutationInput,
            LocationUpdateInput: LocationUpdateInput,
            LocationUpdateManyMutationInput: LocationUpdateManyMutationInput,
            OrderCreateInput: OrderCreateInput,
            PackageUpdateInput: PackageUpdateInput,
            PackageUpdateManyMutationInput: PackageUpdateManyMutationInput,
            PhysicalProductUpdateInput: PhysicalProductUpdateInput,
            PhysicalProductUpdateManyMutationInput: PhysicalProductUpdateManyMutationInput,
            ProductUpdateInput: ProductUpdateInput,
            ProductUpdateManyMutationInput: ProductUpdateManyMutationInput,
            ProductFunctionUpdateInput: ProductFunctionUpdateInput,
            ProductFunctionUpdateManyMutationInput: ProductFunctionUpdateManyMutationInput,
            ProductRequestCreateInput: ProductRequestCreateInput,
            ProductRequestCreateimagesInput: ProductRequestCreateimagesInput,
            ProductRequestUpdateInput: ProductRequestUpdateInput,
            ProductRequestUpdateimagesInput: ProductRequestUpdateimagesInput,
            ProductRequestUpdateManyMutationInput: ProductRequestUpdateManyMutationInput,
            ProductVariantUpdateInput: ProductVariantUpdateInput,
            ProductVariantUpdateManyMutationInput: ProductVariantUpdateManyMutationInput,
            ProductVariantWantCreateInput: ProductVariantWantCreateInput,
            ProductVariantWantUpdateInput: ProductVariantWantUpdateInput,
            ProductVariantWantUpdateManyMutationInput: ProductVariantWantUpdateManyMutationInput,
            RecentlyViewedProductCreateInput: RecentlyViewedProductCreateInput,
            ProductCreateOneInput: ProductCreateOneInput,
            RecentlyViewedProductUpdateInput: RecentlyViewedProductUpdateInput,
            ProductUpdateOneRequiredInput: ProductUpdateOneRequiredInput,
            ProductUpsertNestedInput: ProductUpsertNestedInput,
            RecentlyViewedProductUpdateManyMutationInput: RecentlyViewedProductUpdateManyMutationInput,
            ReservationCreateInput: ReservationCreateInput,
            CustomerCreateOneWithoutReservationsInput: CustomerCreateOneWithoutReservationsInput,
            CustomerCreateWithoutReservationsInput: CustomerCreateWithoutReservationsInput,
            ReservationUpdateInput: ReservationUpdateInput,
            CustomerUpdateOneRequiredWithoutReservationsInput: CustomerUpdateOneRequiredWithoutReservationsInput,
            CustomerUpdateWithoutReservationsDataInput: CustomerUpdateWithoutReservationsDataInput,
            CustomerUpsertWithoutReservationsInput: CustomerUpsertWithoutReservationsInput,
            ReservationUpdateManyMutationInput: ReservationUpdateManyMutationInput,
            SizeUpdateInput: SizeUpdateInput,
            SizeUpdateManyMutationInput: SizeUpdateManyMutationInput,
            TopSizeUpdateInput: TopSizeUpdateInput,
            TopSizeUpdateManyMutationInput: TopSizeUpdateManyMutationInput,
            UserUpdateInput: UserUpdateInput,
            UserUpdateManyMutationInput: UserUpdateManyMutationInput,
            Subscription: Subscription,
            BagItemSubscriptionWhereInput: BagItemSubscriptionWhereInput,
            MutationType: MutationType,
            BagItemSubscriptionPayload: BagItemSubscriptionPayload,
            BagItemPreviousValues: BagItemPreviousValues,
            BillingInfoSubscriptionWhereInput: BillingInfoSubscriptionWhereInput,
            BillingInfoSubscriptionPayload: BillingInfoSubscriptionPayload,
            BillingInfoPreviousValues: BillingInfoPreviousValues,
            BottomSizeSubscriptionWhereInput: BottomSizeSubscriptionWhereInput,
            BottomSizeSubscriptionPayload: BottomSizeSubscriptionPayload,
            BottomSizePreviousValues: BottomSizePreviousValues,
            BrandSubscriptionWhereInput: BrandSubscriptionWhereInput,
            BrandSubscriptionPayload: BrandSubscriptionPayload,
            BrandPreviousValues: BrandPreviousValues,
            CategorySubscriptionWhereInput: CategorySubscriptionWhereInput,
            CategorySubscriptionPayload: CategorySubscriptionPayload,
            CategoryPreviousValues: CategoryPreviousValues,
            CollectionSubscriptionWhereInput: CollectionSubscriptionWhereInput,
            CollectionSubscriptionPayload: CollectionSubscriptionPayload,
            CollectionPreviousValues: CollectionPreviousValues,
            CollectionGroupSubscriptionWhereInput: CollectionGroupSubscriptionWhereInput,
            CollectionGroupSubscriptionPayload: CollectionGroupSubscriptionPayload,
            CollectionGroupPreviousValues: CollectionGroupPreviousValues,
            ColorSubscriptionWhereInput: ColorSubscriptionWhereInput,
            ColorSubscriptionPayload: ColorSubscriptionPayload,
            ColorPreviousValues: ColorPreviousValues,
            CustomerSubscriptionWhereInput: CustomerSubscriptionWhereInput,
            CustomerSubscriptionPayload: CustomerSubscriptionPayload,
            CustomerPreviousValues: CustomerPreviousValues,
            CustomerDetailSubscriptionWhereInput: CustomerDetailSubscriptionWhereInput,
            CustomerDetailSubscriptionPayload: CustomerDetailSubscriptionPayload,
            CustomerDetailPreviousValues: CustomerDetailPreviousValues,
            HomepageProductRailSubscriptionWhereInput: HomepageProductRailSubscriptionWhereInput,
            HomepageProductRailSubscriptionPayload: HomepageProductRailSubscriptionPayload,
            HomepageProductRailPreviousValues: HomepageProductRailPreviousValues,
            ImageSubscriptionWhereInput: ImageSubscriptionWhereInput,
            ImageSubscriptionPayload: ImageSubscriptionPayload,
            ImagePreviousValues: ImagePreviousValues,
            LabelSubscriptionWhereInput: LabelSubscriptionWhereInput,
            LabelSubscriptionPayload: LabelSubscriptionPayload,
            LabelPreviousValues: LabelPreviousValues,
            LocationSubscriptionWhereInput: LocationSubscriptionWhereInput,
            LocationSubscriptionPayload: LocationSubscriptionPayload,
            LocationPreviousValues: LocationPreviousValues,
            OrderSubscriptionWhereInput: OrderSubscriptionWhereInput,
            OrderSubscriptionPayload: OrderSubscriptionPayload,
            OrderPreviousValues: OrderPreviousValues,
            PackageSubscriptionWhereInput: PackageSubscriptionWhereInput,
            PackageSubscriptionPayload: PackageSubscriptionPayload,
            PackagePreviousValues: PackagePreviousValues,
            PhysicalProductSubscriptionWhereInput: PhysicalProductSubscriptionWhereInput,
            PhysicalProductSubscriptionPayload: PhysicalProductSubscriptionPayload,
            PhysicalProductPreviousValues: PhysicalProductPreviousValues,
            ProductSubscriptionWhereInput: ProductSubscriptionWhereInput,
            ProductSubscriptionPayload: ProductSubscriptionPayload,
            ProductPreviousValues: ProductPreviousValues,
            ProductFunctionSubscriptionWhereInput: ProductFunctionSubscriptionWhereInput,
            ProductFunctionSubscriptionPayload: ProductFunctionSubscriptionPayload,
            ProductFunctionPreviousValues: ProductFunctionPreviousValues,
            ProductRequestSubscriptionWhereInput: ProductRequestSubscriptionWhereInput,
            ProductRequestSubscriptionPayload: ProductRequestSubscriptionPayload,
            ProductRequestPreviousValues: ProductRequestPreviousValues,
            ProductVariantSubscriptionWhereInput: ProductVariantSubscriptionWhereInput,
            ProductVariantSubscriptionPayload: ProductVariantSubscriptionPayload,
            ProductVariantPreviousValues: ProductVariantPreviousValues,
            ProductVariantWantSubscriptionWhereInput: ProductVariantWantSubscriptionWhereInput,
            ProductVariantWantSubscriptionPayload: ProductVariantWantSubscriptionPayload,
            ProductVariantWantPreviousValues: ProductVariantWantPreviousValues,
            RecentlyViewedProductSubscriptionWhereInput: RecentlyViewedProductSubscriptionWhereInput,
            RecentlyViewedProductSubscriptionPayload: RecentlyViewedProductSubscriptionPayload,
            RecentlyViewedProductPreviousValues: RecentlyViewedProductPreviousValues,
            ReservationSubscriptionWhereInput: ReservationSubscriptionWhereInput,
            ReservationSubscriptionPayload: ReservationSubscriptionPayload,
            ReservationPreviousValues: ReservationPreviousValues,
            SizeSubscriptionWhereInput: SizeSubscriptionWhereInput,
            SizeSubscriptionPayload: SizeSubscriptionPayload,
            SizePreviousValues: SizePreviousValues,
            TopSizeSubscriptionWhereInput: TopSizeSubscriptionWhereInput,
            TopSizeSubscriptionPayload: TopSizeSubscriptionPayload,
            TopSizePreviousValues: TopSizePreviousValues,
            UserSubscriptionWhereInput: UserSubscriptionWhereInput,
            UserSubscriptionPayload: UserSubscriptionPayload,
            UserPreviousValues: UserPreviousValues,
            __Schema: __Schema,
            __Type: __Type,
            __TypeKind: __TypeKind,
            __Field: __Field,
            __InputValue: __InputValue,
            __EnumValue: __EnumValue,
            __Directive: __Directive,
            __DirectiveLocation: __DirectiveLocation },
         _possibleTypeMap: [Object: null prototype] {},
         _implementations: [Object: null prototype] {} },
      _endpoint:
       'https://monsoon-prisma-staging.herokuapp.com/monsoon/staging',
      _secret:
       '6mFrM3ZRzg1q1JNnY5nHuKdFphquSB6w3WLESaYl3B3H8NzFYSVfuarx5pau8eaJT68rI2XxsSF1wHCf6xbFwuxnOeqxU0d3YFnK',
      _types:
       { Query:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            bagItem: [Function: value],
            bagItems: [Function: value],
            bagItemsConnection: [Function: value],
            billingInfo: [Function: value],
            billingInfoes: [Function: value],
            billingInfoesConnection: [Function: value],
            bottomSize: [Function: value],
            bottomSizes: [Function: value],
            bottomSizesConnection: [Function: value],
            brand: [Function: value],
            brands: [Function: value],
            brandsConnection: [Function: value],
            category: [Function: value],
            categories: [Function: value],
            categoriesConnection: [Function: value],
            collection: [Function: value],
            collections: [Function: value],
            collectionsConnection: [Function: value],
            collectionGroup: [Function: value],
            collectionGroups: [Function: value],
            collectionGroupsConnection: [Function: value],
            color: [Function: value],
            colors: [Function: value],
            colorsConnection: [Function: value],
            customer: [Function: value],
            customers: [Function: value],
            customersConnection: [Function: value],
            customerDetail: [Function: value],
            customerDetails: [Function: value],
            customerDetailsConnection: [Function: value],
            homepageProductRail: [Function: value],
            homepageProductRails: [Function: value],
            homepageProductRailsConnection: [Function: value],
            image: [Function: value],
            images: [Function: value],
            imagesConnection: [Function: value],
            label: [Function: value],
            labels: [Function: value],
            labelsConnection: [Function: value],
            location: [Function: value],
            locations: [Function: value],
            locationsConnection: [Function: value],
            order: [Function: value],
            orders: [Function: value],
            ordersConnection: [Function: value],
            package: [Function: value],
            packages: [Function: value],
            packagesConnection: [Function: value],
            physicalProduct: [Function: value],
            physicalProducts: [Function: value],
            physicalProductsConnection: [Function: value],
            product: [Function: value],
            products: [Function: value],
            productsConnection: [Function: value],
            productFunction: [Function: value],
            productFunctions: [Function: value],
            productFunctionsConnection: [Function: value],
            productRequest: [Function: value],
            productRequests: [Function: value],
            productRequestsConnection: [Function: value],
            productVariant: [Function: value],
            productVariants: [Function: value],
            productVariantsConnection: [Function: value],
            productVariantWant: [Function: value],
            productVariantWants: [Function: value],
            productVariantWantsConnection: [Function: value],
            recentlyViewedProduct: [Function: value],
            recentlyViewedProducts: [Function: value],
            recentlyViewedProductsConnection: [Function: value],
            reservation: [Function: value],
            reservations: [Function: value],
            reservationsConnection: [Function: value],
            size: [Function: value],
            sizes: [Function: value],
            sizesConnection: [Function: value],
            topSize: [Function: value],
            topSizes: [Function: value],
            topSizesConnection: [Function: value],
            user: [Function: value],
            users: [Function: value],
            usersConnection: [Function: value],
            node: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ID:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItem:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            customer: [Function: value],
            productVariant: [Function: value],
            position: [Function: value],
            saved: [Function: value],
            status: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Customer:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            user: [Function: value],
            status: [Function: value],
            detail: [Function: value],
            billingInfo: [Function: value],
            plan: [Function: value],
            reservations: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         User:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            auth0Id: [Function: value],
            email: [Function: value],
            firstName: [Function: value],
            lastName: [Function: value],
            role: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            pushNotifications: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         String:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserRole:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         DateTime:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PushNotificationStatus:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerStatus:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetail:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            phoneNumber: [Function: value],
            birthday: [Function: value],
            height: [Function: value],
            weight: [Function: value],
            bodyType: [Function: value],
            averageTopSize: [Function: value],
            averageWaistSize: [Function: value],
            averagePantLength: [Function: value],
            preferredPronouns: [Function: value],
            profession: [Function: value],
            partyFrequency: [Function: value],
            travelFrequency: [Function: value],
            shoppingFrequency: [Function: value],
            averageSpend: [Function: value],
            style: [Function: value],
            commuteStyle: [Function: value],
            shippingAddress: [Function: value],
            phoneOS: [Function: value],
            insureShipment: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Int:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Location:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            company: [Function: value],
            description: [Function: value],
            address1: [Function: value],
            address2: [Function: value],
            city: [Function: value],
            state: [Function: value],
            zipCode: [Function: value],
            locationType: [Function: value],
            user: [Function: value],
            lat: [Function: value],
            lng: [Function: value],
            physicalProducts: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationType:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Float:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductType:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LetterSize:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeType:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Boolean:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandTier:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductStatus:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         InventoryStatus:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductStatus:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProduct:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            seasonsUID: [Function: value],
            location: [Function: value],
            productVariant: [Function: value],
            inventoryStatus: [Function: value],
            productStatus: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariant:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            sku: [Function: value],
            color: [Function: value],
            internalSize: [Function: value],
            manufacturerSizes: [Function: value],
            weight: [Function: value],
            height: [Function: value],
            productID: [Function: value],
            product: [Function: value],
            retailPrice: [Function: value],
            physicalProducts: [Function: value],
            total: [Function: value],
            reservable: [Function: value],
            reserved: [Function: value],
            nonReservable: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Color:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            colorCode: [Function: value],
            hexCode: [Function: value],
            productVariants: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Size:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            productType: [Function: value],
            top: [Function: value],
            bottom: [Function: value],
            display: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSize:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            letter: [Function: value],
            sleeve: [Function: value],
            shoulder: [Function: value],
            chest: [Function: value],
            neck: [Function: value],
            length: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSize:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            type: [Function: value],
            value: [Function: value],
            waist: [Function: value],
            rise: [Function: value],
            hem: [Function: value],
            inseam: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Product:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            brand: [Function: value],
            category: [Function: value],
            type: [Function: value],
            description: [Function: value],
            externalURL: [Function: value],
            images: [Function: value],
            modelHeight: [Function: value],
            retailPrice: [Function: value],
            modelSize: [Function: value],
            color: [Function: value],
            secondaryColor: [Function: value],
            tags: [Function: value],
            functions: [Function: value],
            innerMaterials: [Function: value],
            outerMaterials: [Function: value],
            variants: [Function: value],
            status: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Brand:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            brandCode: [Function: value],
            description: [Function: value],
            isPrimaryBrand: [Function: value],
            logo: [Function: value],
            name: [Function: value],
            basedIn: [Function: value],
            products: [Function: value],
            since: [Function: value],
            tier: [Function: value],
            websiteUrl: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Json:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Category:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            image: [Function: value],
            description: [Function: value],
            visible: [Function: value],
            products: [Function: value],
            children: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunction:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            name: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Material:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfo:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            brand: [Function: value],
            name: [Function: value],
            last_digits: [Function: value],
            expiration_month: [Function: value],
            expiration_year: [Function: value],
            street1: [Function: value],
            street2: [Function: value],
            city: [Function: value],
            state: [Function: value],
            country: [Function: value],
            postal_code: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Plan:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationStatus:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Reservation:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            user: [Function: value],
            customer: [Function: value],
            sentPackage: [Function: value],
            returnedPackage: [Function: value],
            location: [Function: value],
            products: [Function: value],
            reservationNumber: [Function: value],
            shipped: [Function: value],
            status: [Function: value],
            shippedAt: [Function: value],
            receivedAt: [Function: value],
            reminderSentAt: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Package:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            items: [Function: value],
            shippingLabel: [Function: value],
            fromAddress: [Function: value],
            toAddress: [Function: value],
            weight: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Label:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            name: [Function: value],
            image: [Function: value],
            trackingNumber: [Function: value],
            trackingURL: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemStatus:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PageInfo:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            hasNextPage: [Function: value],
            hasPreviousPage: [Function: value],
            startCursor: [Function: value],
            endCursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateBagItem:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateBillingInfo:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateBottomSize:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateBrand:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateCategory:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Collection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            images: [Function: value],
            title: [Function: value],
            subTitle: [Function: value],
            descriptionTop: [Function: value],
            descriptionBottom: [Function: value],
            products: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateCollection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroup:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            title: [Function: value],
            collectionCount: [Function: value],
            collections: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateCollectionGroup:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateColor:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateCustomer:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateCustomerDetail:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRail:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            products: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateHomepageProductRail:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Image:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            caption: [Function: value],
            originalHeight: [Function: value],
            originalUrl: [Function: value],
            originalWidth: [Function: value],
            resizedUrl: [Function: value],
            title: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateImage:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateLabel:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateLocation:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Order:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateOrder:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregatePackage:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregatePhysicalProduct:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateProduct:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateProductFunction:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequest:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            brand: [Function: value],
            description: [Function: value],
            images: [Function: value],
            name: [Function: value],
            price: [Function: value],
            priceCurrency: [Function: value],
            productID: [Function: value],
            reason: [Function: value],
            sku: [Function: value],
            url: [Function: value],
            user: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateProductRequest:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateProductVariant:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWant:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            productVariant: [Function: value],
            user: [Function: value],
            isFulfilled: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateProductVariantWant:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProduct:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            product: [Function: value],
            customer: [Function: value],
            viewCount: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateRecentlyViewedProduct:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateReservation:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateSize:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateTopSize:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserWhereUniqueInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserOrderByInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserConnection:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            pageInfo: [Function: value],
            edges: [Function: value],
            aggregate: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserEdge:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            node: [Function: value],
            cursor: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         AggregateUser:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Node:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Mutation:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            createBagItem: [Function: value],
            updateBagItem: [Function: value],
            updateManyBagItems: [Function: value],
            upsertBagItem: [Function: value],
            deleteBagItem: [Function: value],
            deleteManyBagItems: [Function: value],
            createBillingInfo: [Function: value],
            updateBillingInfo: [Function: value],
            updateManyBillingInfoes: [Function: value],
            upsertBillingInfo: [Function: value],
            deleteBillingInfo: [Function: value],
            deleteManyBillingInfoes: [Function: value],
            createBottomSize: [Function: value],
            updateBottomSize: [Function: value],
            updateManyBottomSizes: [Function: value],
            upsertBottomSize: [Function: value],
            deleteBottomSize: [Function: value],
            deleteManyBottomSizes: [Function: value],
            createBrand: [Function: value],
            updateBrand: [Function: value],
            updateManyBrands: [Function: value],
            upsertBrand: [Function: value],
            deleteBrand: [Function: value],
            deleteManyBrands: [Function: value],
            createCategory: [Function: value],
            updateCategory: [Function: value],
            updateManyCategories: [Function: value],
            upsertCategory: [Function: value],
            deleteCategory: [Function: value],
            deleteManyCategories: [Function: value],
            createCollection: [Function: value],
            updateCollection: [Function: value],
            updateManyCollections: [Function: value],
            upsertCollection: [Function: value],
            deleteCollection: [Function: value],
            deleteManyCollections: [Function: value],
            createCollectionGroup: [Function: value],
            updateCollectionGroup: [Function: value],
            updateManyCollectionGroups: [Function: value],
            upsertCollectionGroup: [Function: value],
            deleteCollectionGroup: [Function: value],
            deleteManyCollectionGroups: [Function: value],
            createColor: [Function: value],
            updateColor: [Function: value],
            updateManyColors: [Function: value],
            upsertColor: [Function: value],
            deleteColor: [Function: value],
            deleteManyColors: [Function: value],
            createCustomer: [Function: value],
            updateCustomer: [Function: value],
            updateManyCustomers: [Function: value],
            upsertCustomer: [Function: value],
            deleteCustomer: [Function: value],
            deleteManyCustomers: [Function: value],
            createCustomerDetail: [Function: value],
            updateCustomerDetail: [Function: value],
            updateManyCustomerDetails: [Function: value],
            upsertCustomerDetail: [Function: value],
            deleteCustomerDetail: [Function: value],
            deleteManyCustomerDetails: [Function: value],
            createHomepageProductRail: [Function: value],
            updateHomepageProductRail: [Function: value],
            updateManyHomepageProductRails: [Function: value],
            upsertHomepageProductRail: [Function: value],
            deleteHomepageProductRail: [Function: value],
            deleteManyHomepageProductRails: [Function: value],
            createImage: [Function: value],
            updateImage: [Function: value],
            updateManyImages: [Function: value],
            upsertImage: [Function: value],
            deleteImage: [Function: value],
            deleteManyImages: [Function: value],
            createLabel: [Function: value],
            updateLabel: [Function: value],
            updateManyLabels: [Function: value],
            upsertLabel: [Function: value],
            deleteLabel: [Function: value],
            deleteManyLabels: [Function: value],
            createLocation: [Function: value],
            updateLocation: [Function: value],
            updateManyLocations: [Function: value],
            upsertLocation: [Function: value],
            deleteLocation: [Function: value],
            deleteManyLocations: [Function: value],
            createOrder: [Function: value],
            deleteOrder: [Function: value],
            deleteManyOrders: [Function: value],
            createPackage: [Function: value],
            updatePackage: [Function: value],
            updateManyPackages: [Function: value],
            upsertPackage: [Function: value],
            deletePackage: [Function: value],
            deleteManyPackages: [Function: value],
            createPhysicalProduct: [Function: value],
            updatePhysicalProduct: [Function: value],
            updateManyPhysicalProducts: [Function: value],
            upsertPhysicalProduct: [Function: value],
            deletePhysicalProduct: [Function: value],
            deleteManyPhysicalProducts: [Function: value],
            createProduct: [Function: value],
            updateProduct: [Function: value],
            updateManyProducts: [Function: value],
            upsertProduct: [Function: value],
            deleteProduct: [Function: value],
            deleteManyProducts: [Function: value],
            createProductFunction: [Function: value],
            updateProductFunction: [Function: value],
            updateManyProductFunctions: [Function: value],
            upsertProductFunction: [Function: value],
            deleteProductFunction: [Function: value],
            deleteManyProductFunctions: [Function: value],
            createProductRequest: [Function: value],
            updateProductRequest: [Function: value],
            updateManyProductRequests: [Function: value],
            upsertProductRequest: [Function: value],
            deleteProductRequest: [Function: value],
            deleteManyProductRequests: [Function: value],
            createProductVariant: [Function: value],
            updateProductVariant: [Function: value],
            updateManyProductVariants: [Function: value],
            upsertProductVariant: [Function: value],
            deleteProductVariant: [Function: value],
            deleteManyProductVariants: [Function: value],
            createProductVariantWant: [Function: value],
            updateProductVariantWant: [Function: value],
            updateManyProductVariantWants: [Function: value],
            upsertProductVariantWant: [Function: value],
            deleteProductVariantWant: [Function: value],
            deleteManyProductVariantWants: [Function: value],
            createRecentlyViewedProduct: [Function: value],
            updateRecentlyViewedProduct: [Function: value],
            updateManyRecentlyViewedProducts: [Function: value],
            upsertRecentlyViewedProduct: [Function: value],
            deleteRecentlyViewedProduct: [Function: value],
            deleteManyRecentlyViewedProducts: [Function: value],
            createReservation: [Function: value],
            updateReservation: [Function: value],
            updateManyReservations: [Function: value],
            upsertReservation: [Function: value],
            deleteReservation: [Function: value],
            deleteManyReservations: [Function: value],
            createSize: [Function: value],
            updateSize: [Function: value],
            updateManySizes: [Function: value],
            upsertSize: [Function: value],
            deleteSize: [Function: value],
            deleteManySizes: [Function: value],
            createTopSize: [Function: value],
            updateTopSize: [Function: value],
            updateManyTopSizes: [Function: value],
            upsertTopSize: [Function: value],
            deleteTopSize: [Function: value],
            deleteManyTopSizes: [Function: value],
            createUser: [Function: value],
            updateUser: [Function: value],
            updateManyUsers: [Function: value],
            upsertUser: [Function: value],
            deleteUser: [Function: value],
            deleteManyUsers: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductCreateManyWithoutLocationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductCreateWithoutLocationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantCreateOneWithoutPhysicalProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantCreateWithoutPhysicalProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorCreateOneWithoutProductVariantsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorCreateWithoutProductVariantsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeCreateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateOneWithoutVariantsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateWithoutVariantsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandCreateOneWithoutProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandCreateWithoutProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryCreateOneWithoutProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryCreateWithoutProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryCreateManyWithoutChildrenInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryCreateWithoutChildrenInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateManyWithoutCategoryInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateWithoutCategoryInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantCreateManyWithoutColorInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantCreateWithoutColorInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductCreateManyWithoutProductVariantInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductCreateWithoutProductVariantInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationCreateOneWithoutPhysicalProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationCreateWithoutPhysicalProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionCreateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateinnerMaterialsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateouterMaterialsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantCreateManyWithoutProductInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantCreateWithoutProductInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationCreateManyWithoutCustomerInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationCreateWithoutCustomerInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductCreateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerUpdateOneRequiredInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserUpdateOneRequiredInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateManyWithoutLocationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateWithWhereUniqueWithoutLocationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateWithoutLocationDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateWithoutPhysicalProductsDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpdateOneRequiredWithoutProductVariantsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpdateWithoutProductVariantsDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpsertWithoutProductVariantsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpdateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpdateWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpsertWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeScalarWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpdateManyWithWhereNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpdateManyDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateOneRequiredWithoutVariantsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateWithoutVariantsDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandUpdateOneRequiredWithoutProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandUpdateWithoutProductsDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandUpsertWithoutProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateOneRequiredWithoutProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateWithoutProductsDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateManyWithoutChildrenInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateWithWhereUniqueWithoutChildrenInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateWithoutChildrenDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateManyWithoutCategoryInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateWithWhereUniqueWithoutCategoryInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateWithoutCategoryDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpdateOneRequiredInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateManyWithoutColorInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateWithWhereUniqueWithoutColorInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateWithoutColorDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateManyWithoutProductVariantInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateWithoutProductVariantDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpdateOneWithoutPhysicalProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpdateWithoutPhysicalProductsDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpsertWithoutPhysicalProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductScalarWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateManyWithWhereNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateManyDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpsertWithWhereUniqueWithoutColorInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantScalarWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateManyWithWhereNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateManyDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionUpdateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionUpdateWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionUpsertWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionScalarWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionUpdateManyWithWhereNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionUpdateManyDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateinnerMaterialsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateouterMaterialsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateManyWithoutProductInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateWithWhereUniqueWithoutProductInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateWithoutProductDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpsertWithWhereUniqueWithoutProductInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpsertWithWhereUniqueWithoutCategoryInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductScalarWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateManyWithWhereNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateManyDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpsertWithWhereUniqueWithoutChildrenInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryScalarWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateManyWithWhereNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateManyDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpsertWithoutProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpsertWithoutVariantsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpsertWithoutPhysicalProductsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpsertWithWhereUniqueWithoutLocationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationUpdateManyWithoutCustomerInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationUpdateWithWhereUniqueWithoutCustomerInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationUpdateWithoutCustomerDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageUpdateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpsertWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelUpdateOneRequiredInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpdateOneRequiredInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationUpsertWithWhereUniqueWithoutCustomerInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationScalarWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationUpdateManyWithWhereNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationUpdateManyDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateOneRequiredInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BatchPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            count: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Long:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateManyWithoutBrandInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateWithoutBrandInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateManyWithoutBrandInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateWithWhereUniqueWithoutBrandInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateWithoutBrandDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpsertWithWhereUniqueWithoutBrandInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpsertWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionCreateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionUpdateManyInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionUpdateWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionUpdateDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionUpsertWithWhereUniqueNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionScalarWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionUpdateManyWithWhereNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionUpdateManyDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestCreateimagesInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestUpdateimagesInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductCreateOneInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpdateOneRequiredInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductUpsertNestedInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationCreateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerCreateOneWithoutReservationsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerCreateWithoutReservationsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerUpdateOneRequiredWithoutReservationsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerUpdateWithoutReservationsDataInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerUpsertWithoutReservationsInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserUpdateInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserUpdateManyMutationInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         Subscription:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            bagItem: [Function: value],
            billingInfo: [Function: value],
            bottomSize: [Function: value],
            brand: [Function: value],
            category: [Function: value],
            collection: [Function: value],
            collectionGroup: [Function: value],
            color: [Function: value],
            customer: [Function: value],
            customerDetail: [Function: value],
            homepageProductRail: [Function: value],
            image: [Function: value],
            label: [Function: value],
            location: [Function: value],
            order: [Function: value],
            package: [Function: value],
            physicalProduct: [Function: value],
            product: [Function: value],
            productFunction: [Function: value],
            productRequest: [Function: value],
            productVariant: [Function: value],
            productVariantWant: [Function: value],
            recentlyViewedProduct: [Function: value],
            reservation: [Function: value],
            size: [Function: value],
            topSize: [Function: value],
            user: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         MutationType:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BagItemPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            position: [Function: value],
            saved: [Function: value],
            status: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BillingInfoPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            brand: [Function: value],
            name: [Function: value],
            last_digits: [Function: value],
            expiration_month: [Function: value],
            expiration_year: [Function: value],
            street1: [Function: value],
            street2: [Function: value],
            city: [Function: value],
            state: [Function: value],
            country: [Function: value],
            postal_code: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizeSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BottomSizePreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            type: [Function: value],
            value: [Function: value],
            waist: [Function: value],
            rise: [Function: value],
            hem: [Function: value],
            inseam: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         BrandPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            brandCode: [Function: value],
            description: [Function: value],
            isPrimaryBrand: [Function: value],
            logo: [Function: value],
            name: [Function: value],
            basedIn: [Function: value],
            since: [Function: value],
            tier: [Function: value],
            websiteUrl: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategorySubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategorySubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CategoryPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            image: [Function: value],
            description: [Function: value],
            visible: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            images: [Function: value],
            title: [Function: value],
            subTitle: [Function: value],
            descriptionTop: [Function: value],
            descriptionBottom: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CollectionGroupPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            title: [Function: value],
            collectionCount: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ColorPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            colorCode: [Function: value],
            hexCode: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            status: [Function: value],
            plan: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         CustomerDetailPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            phoneNumber: [Function: value],
            birthday: [Function: value],
            height: [Function: value],
            weight: [Function: value],
            bodyType: [Function: value],
            averageTopSize: [Function: value],
            averageWaistSize: [Function: value],
            averagePantLength: [Function: value],
            preferredPronouns: [Function: value],
            profession: [Function: value],
            partyFrequency: [Function: value],
            travelFrequency: [Function: value],
            shoppingFrequency: [Function: value],
            averageSpend: [Function: value],
            style: [Function: value],
            commuteStyle: [Function: value],
            phoneOS: [Function: value],
            insureShipment: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         HomepageProductRailPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImageSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ImagePreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            caption: [Function: value],
            originalHeight: [Function: value],
            originalUrl: [Function: value],
            originalWidth: [Function: value],
            resizedUrl: [Function: value],
            title: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LabelPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            name: [Function: value],
            image: [Function: value],
            trackingNumber: [Function: value],
            trackingURL: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         LocationPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            company: [Function: value],
            description: [Function: value],
            address1: [Function: value],
            address2: [Function: value],
            city: [Function: value],
            state: [Function: value],
            zipCode: [Function: value],
            locationType: [Function: value],
            lat: [Function: value],
            lng: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         OrderPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackageSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PackagePreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            weight: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         PhysicalProductPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            seasonsUID: [Function: value],
            inventoryStatus: [Function: value],
            productStatus: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            name: [Function: value],
            type: [Function: value],
            description: [Function: value],
            externalURL: [Function: value],
            images: [Function: value],
            modelHeight: [Function: value],
            retailPrice: [Function: value],
            tags: [Function: value],
            innerMaterials: [Function: value],
            outerMaterials: [Function: value],
            status: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductFunctionPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            name: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductRequestPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            brand: [Function: value],
            description: [Function: value],
            images: [Function: value],
            name: [Function: value],
            price: [Function: value],
            priceCurrency: [Function: value],
            productID: [Function: value],
            reason: [Function: value],
            sku: [Function: value],
            url: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            sku: [Function: value],
            weight: [Function: value],
            height: [Function: value],
            productID: [Function: value],
            retailPrice: [Function: value],
            total: [Function: value],
            reservable: [Function: value],
            reserved: [Function: value],
            nonReservable: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ProductVariantWantPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            isFulfilled: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         RecentlyViewedProductPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            viewCount: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         ReservationPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            reservationNumber: [Function: value],
            shipped: [Function: value],
            status: [Function: value],
            shippedAt: [Function: value],
            receivedAt: [Function: value],
            reminderSentAt: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizeSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         SizePreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            slug: [Function: value],
            productType: [Function: value],
            display: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizeSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         TopSizePreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            letter: [Function: value],
            sleeve: [Function: value],
            shoulder: [Function: value],
            chest: [Function: value],
            neck: [Function: value],
            length: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserSubscriptionWhereInput:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserSubscriptionPayload:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            mutation: [Function: value],
            node: [Function: value],
            updatedFields: [Function: value],
            previousValues: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         UserPreviousValues:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            id: [Function: value],
            auth0Id: [Function: value],
            email: [Function: value],
            firstName: [Function: value],
            lastName: [Function: value],
            role: [Function: value],
            createdAt: [Function: value],
            updatedAt: [Function: value],
            pushNotifications: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         __Schema:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            types: [Function: value],
            queryType: [Function: value],
            mutationType: [Function: value],
            subscriptionType: [Function: value],
            directives: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         __Type:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            kind: [Function: value],
            name: [Function: value],
            description: [Function: value],
            fields: [Function: value],
            interfaces: [Function: value],
            possibleTypes: [Function: value],
            enumValues: [Function: value],
            inputFields: [Function: value],
            ofType: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         __TypeKind:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         __Field:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            name: [Function: value],
            description: [Function: value],
            args: [Function: value],
            type: [Function: value],
            isDeprecated: [Function: value],
            deprecationReason: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         __InputValue:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            name: [Function: value],
            description: [Function: value],
            type: [Function: value],
            defaultValue: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         __EnumValue:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            name: [Function: value],
            description: [Function: value],
            isDeprecated: [Function: value],
            deprecationReason: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         __Directive:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            name: [Function: value],
            description: [Function: value],
            locations: [Function: value],
            args: [Function: value],
            '$fragment': [Function: value],
            [Symbol(Symbol.toStringTag)]: 'Promise' },
         __DirectiveLocation:
          Object [Promise] {
            then: [Function],
            catch: [Function],
            [Symbol(Symbol.toStringTag)]: 'Promise' } },
      bagItem: [Function: value],
      bagItems: [Function: value],
      bagItemsConnection: [Function: value],
      billingInfo: [Function: value],
      billingInfoes: [Function: value],
      billingInfoesConnection: [Function: value],
      bottomSize: [Function: value],
      bottomSizes: [Function: value],
      bottomSizesConnection: [Function: value],
      brand: [Function: value],
      brands: [Function: value],
      brandsConnection: [Function: value],
      category: [Function: value],
      categories: [Function: value],
      categoriesConnection: [Function: value],
      collection: [Function: value],
      collections: [Function: value],
      collectionsConnection: [Function: value],
      collectionGroup: [Function: value],
      collectionGroups: [Function: value],
      collectionGroupsConnection: [Function: value],
      color: [Function: value],
      colors: [Function: value],
      colorsConnection: [Function: value],
      customer: [Function: value],
      customers: [Function: value],
      customersConnection: [Function: value],
      customerDetail: [Function: value],
      customerDetails: [Function: value],
      customerDetailsConnection: [Function: value],
      homepageProductRail: [Function: value],
      homepageProductRails: [Function: value],
      homepageProductRailsConnection: [Function: value],
      image: [Function: value],
      images: [Function: value],
      imagesConnection: [Function: value],
      label: [Function: value],
      labels: [Function: value],
      labelsConnection: [Function: value],
      location: [Function: value],
      locations: [Function: value],
      locationsConnection: [Function: value],
      order: [Function: value],
      orders: [Function: value],
      ordersConnection: [Function: value],
      package: [Function: value],
      packages: [Function: value],
      packagesConnection: [Function: value],
      physicalProduct: [Function: value],
      physicalProducts: [Function: value],
      physicalProductsConnection: [Function: value],
      product: [Function: value],
      products: [Function: value],
      productsConnection: [Function: value],
      productFunction: [Function: value],
      productFunctions: [Function: value],
      productFunctionsConnection: [Function: value],
      productRequest: [Function: value],
      productRequests: [Function: value],
      productRequestsConnection: [Function: value],
      productVariant: [Function: value],
      productVariants: [Function: value],
      productVariantsConnection: [Function: value],
      productVariantWant: [Function: value],
      productVariantWants: [Function: value],
      productVariantWantsConnection: [Function: value],
      recentlyViewedProduct: [Function: value],
      recentlyViewedProducts: [Function: value],
      recentlyViewedProductsConnection: [Function: value],
      reservation: [Function: value],
      reservations: [Function: value],
      reservationsConnection: [Function: value],
      size: [Function: value],
      sizes: [Function: value],
      sizesConnection: [Function: value],
      topSize: [Function: value],
      topSizes: [Function: value],
      topSizesConnection: [Function: value],
      user: [Function: value],
      users: [Function: value],
      usersConnection: [Function: value],
      node: [Function: value],
      '$fragment': [Function: value],
      createBagItem: [Function: value],
      updateBagItem: [Function: value],
      updateManyBagItems: [Function: value],
      upsertBagItem: [Function: value],
      deleteBagItem: [Function: value],
      deleteManyBagItems: [Function: value],
      createBillingInfo: [Function: value],
      updateBillingInfo: [Function: value],
      updateManyBillingInfoes: [Function: value],
      upsertBillingInfo: [Function: value],
      deleteBillingInfo: [Function: value],
      deleteManyBillingInfoes: [Function: value],
      createBottomSize: [Function: value],
      updateBottomSize: [Function: value],
      updateManyBottomSizes: [Function: value],
      upsertBottomSize: [Function: value],
      deleteBottomSize: [Function: value],
      deleteManyBottomSizes: [Function: value],
      createBrand: [Function: value],
      updateBrand: [Function: value],
      updateManyBrands: [Function: value],
      upsertBrand: [Function: value],
      deleteBrand: [Function: value],
      deleteManyBrands: [Function: value],
      createCategory: [Function: value],
      updateCategory: [Function: value],
      updateManyCategories: [Function: value],
      upsertCategory: [Function: value],
      deleteCategory: [Function: value],
      deleteManyCategories: [Function: value],
      createCollection: [Function: value],
      updateCollection: [Function: value],
      updateManyCollections: [Function: value],
      upsertCollection: [Function: value],
      deleteCollection: [Function: value],
      deleteManyCollections: [Function: value],
      createCollectionGroup: [Function: value],
      updateCollectionGroup: [Function: value],
      updateManyCollectionGroups: [Function: value],
      upsertCollectionGroup: [Function: value],
      deleteCollectionGroup: [Function: value],
      deleteManyCollectionGroups: [Function: value],
      createColor: [Function: value],
      updateColor: [Function: value],
      updateManyColors: [Function: value],
      upsertColor: [Function: value],
      deleteColor: [Function: value],
      deleteManyColors: [Function: value],
      createCustomer: [Function: value],
      updateCustomer: [Function: value],
      updateManyCustomers: [Function: value],
      upsertCustomer: [Function: value],
      deleteCustomer: [Function: value],
      deleteManyCustomers: [Function: value],
      createCustomerDetail: [Function: value],
      updateCustomerDetail: [Function: value],
      updateManyCustomerDetails: [Function: value],
      upsertCustomerDetail: [Function: value],
      deleteCustomerDetail: [Function: value],
      deleteManyCustomerDetails: [Function: value],
      createHomepageProductRail: [Function: value],
      updateHomepageProductRail: [Function: value],
      updateManyHomepageProductRails: [Function: value],
      upsertHomepageProductRail: [Function: value],
      deleteHomepageProductRail: [Function: value],
      deleteManyHomepageProductRails: [Function: value],
      createImage: [Function: value],
      updateImage: [Function: value],
      updateManyImages: [Function: value],
      upsertImage: [Function: value],
      deleteImage: [Function: value],
      deleteManyImages: [Function: value],
      createLabel: [Function: value],
      updateLabel: [Function: value],
      updateManyLabels: [Function: value],
      upsertLabel: [Function: value],
      deleteLabel: [Function: value],
      deleteManyLabels: [Function: value],
      createLocation: [Function: value],
      updateLocation: [Function: value],
      updateManyLocations: [Function: value],
      upsertLocation: [Function: value],
      deleteLocation: [Function: value],
      deleteManyLocations: [Function: value],
      createOrder: [Function: value],
      deleteOrder: [Function: value],
      deleteManyOrders: [Function: value],
      createPackage: [Function: value],
      updatePackage: [Function: value],
      updateManyPackages: [Function: value],
      upsertPackage: [Function: value],
      deletePackage: [Function: value],
      deleteManyPackages: [Function: value],
      createPhysicalProduct: [Function: value],
      updatePhysicalProduct: [Function: value],
      updateManyPhysicalProducts: [Function: value],
      upsertPhysicalProduct: [Function: value],
      deletePhysicalProduct: [Function: value],
      deleteManyPhysicalProducts: [Function: value],
      createProduct: [Function: value],
      updateProduct: [Function: value],
      updateManyProducts: [Function: value],
      upsertProduct: [Function: value],
      deleteProduct: [Function: value],
      deleteManyProducts: [Function: value],
      createProductFunction: [Function: value],
      updateProductFunction: [Function: value],
      updateManyProductFunctions: [Function: value],
      upsertProductFunction: [Function: value],
      deleteProductFunction: [Function: value],
      deleteManyProductFunctions: [Function: value],
      createProductRequest: [Function: value],
      updateProductRequest: [Function: value],
      updateManyProductRequests: [Function: value],
      upsertProductRequest: [Function: value],
      deleteProductRequest: [Function: value],
      deleteManyProductRequests: [Function: value],
      createProductVariant: [Function: value],
      updateProductVariant: [Function: value],
      updateManyProductVariants: [Function: value],
      upsertProductVariant: [Function: value],
      deleteProductVariant: [Function: value],
      deleteManyProductVariants: [Function: value],
      createProductVariantWant: [Function: value],
      updateProductVariantWant: [Function: value],
      updateManyProductVariantWants: [Function: value],
      upsertProductVariantWant: [Function: value],
      deleteProductVariantWant: [Function: value],
      deleteManyProductVariantWants: [Function: value],
      createRecentlyViewedProduct: [Function: value],
      updateRecentlyViewedProduct: [Function: value],
      updateManyRecentlyViewedProducts: [Function: value],
      upsertRecentlyViewedProduct: [Function: value],
      deleteRecentlyViewedProduct: [Function: value],
      deleteManyRecentlyViewedProducts: [Function: value],
      createReservation: [Function: value],
      updateReservation: [Function: value],
      updateManyReservations: [Function: value],
      upsertReservation: [Function: value],
      deleteReservation: [Function: value],
      deleteManyReservations: [Function: value],
      createSize: [Function: value],
      updateSize: [Function: value],
      updateManySizes: [Function: value],
      upsertSize: [Function: value],
      deleteSize: [Function: value],
      deleteManySizes: [Function: value],
      createTopSize: [Function: value],
      updateTopSize: [Function: value],
      updateManyTopSizes: [Function: value],
      upsertTopSize: [Function: value],
      deleteTopSize: [Function: value],
      deleteManyTopSizes: [Function: value],
      createUser: [Function: value],
      updateUser: [Function: value],
      updateManyUsers: [Function: value],
      upsertUser: [Function: value],
      deleteUser: [Function: value],
      deleteManyUsers: [Function: value],
      '$subscribe':
       Object [Promise] {
         then: [Function],
         catch: [Function],
         bagItem: [Function: value],
         billingInfo: [Function: value],
         bottomSize: [Function: value],
         brand: [Function: value],
         category: [Function: value],
         collection: [Function: value],
         collectionGroup: [Function: value],
         color: [Function: value],
         customer: [Function: value],
         customerDetail: [Function: value],
         homepageProductRail: [Function: value],
         image: [Function: value],
         label: [Function: value],
         location: [Function: value],
         order: [Function: value],
         package: [Function: value],
         physicalProduct: [Function: value],
         product: [Function: value],
         productFunction: [Function: value],
         productRequest: [Function: value],
         productVariant: [Function: value],
         productVariantWant: [Function: value],
         recentlyViewedProduct: [Function: value],
         reservation: [Function: value],
         size: [Function: value],
         topSize: [Function: value],
         user: [Function: value],
         '$fragment': [Function: value],
         [Symbol(Symbol.toStringTag)]: 'Promise' },
      '$graphql': [Function],
      '$exists':
       { bagItem: [Function],
         billingInfo: [Function],
         bottomSize: [Function],
         brand: [Function],
         category: [Function],
         collection: [Function],
         collectionGroup: [Function],
         color: [Function],
         customer: [Function],
         customerDetail: [Function],
         homepageProductRail: [Function],
         image: [Function],
         label: [Function],
         location: [Function],
         order: [Function],
         package: [Function],
         physicalProduct: [Function],
         product: [Function],
         productFunction: [Function],
         productRequest: [Function],
         productVariant: [Function],
         productVariantWant: [Function],
         recentlyViewedProduct: [Function],
         reservation: [Function],
         size: [Function],
         topSize: [Function],
         user: [Function] },
      _token:
       'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODQxMzY4OTV9.XzoGxzfBr6iTpMWVZVXDWiiQOn5hgb19jn0goIsXRjQ',
      _client:
       BatchedGraphQLClient {
         load: [Function],
         uri:
          'https://monsoon-prisma-staging.herokuapp.com/monsoon/staging',
         options: { headers: [Object] },
         dataloader:
          DataLoader {
            _batchLoadFn: [Function],
            _options: [Object],
            _promiseCache: Map {},
            _queue: [] } },
      _subscriptionClient:
       SubscriptionClient {
         wsImpl:
          { [Function: WebSocket]
            CONNECTING: 0,
            OPEN: 1,
            CLOSING: 2,
            CLOSED: 3,
            Server: [Function: WebSocketServer],
            Receiver: [Function: Receiver],
            Sender: [Function: Sender] },
         wsProtocols: 'graphql-ws',
         connectionCallback: undefined,
         url: 'wss://monsoon-prisma-staging.herokuapp.com/monsoon/staging',
         operations: {},
         nextOperationId: 0,
         wsTimeout: 30000,
         unsentMessagesQueue: [],
         reconnect: true,
         reconnecting: false,
         reconnectionAttempts: Infinity,
         lazy: true,
         inactivityTimeout: 60000,
         closedByUser: false,
         backoff:
          Backoff { ms: 100, max: 10000, factor: 2, jitter: 0.5, attempts: 0 },
         eventEmitter: EventEmitter { _events: {}, _eventsCount: 0 },
         middlewares: [],
         client: null,
         maxConnectTimeGenerator:
          Backoff { ms: 1000, max: 30000, factor: 1.2, jitter: 0, attempts: 0 },
         connectionParams: [Function] },
      [Symbol(Symbol.toStringTag)]: 'Promise' }

  console.log src/modules/Product/tests/reservation.spec.ts:55
    ReservationService {
      db:
       DBService {
         fragmentReplacements: [],
         schema:
          GraphQLSchema {
            __validationErrors: undefined,
            extensions: undefined,
            astNode: undefined,
            extensionASTNodes: undefined,
            __allowedLegacyNames: [],
            _queryType: Query,
            _mutationType: Mutation,
            _subscriptionType: Subscription,
            _directives: [Array],
            _typeMap: [Object],
            _possibleTypeMap: [Object: null prototype] {},
            _implementations: [Object] },
         disableCache: false,
         before: [Function: before],
         query:
          { brands: [Function: value],
            collectionGroups: [Function: value],
            homepageProductRails: [Function: value],
            images: [Function: value],
            bagItems: [Function: value],
            recentlyViewedProducts: [Function: value],
            orders: [Function: value],
            reservations: [Function: value],
            productRequests: [Function: value],
            collections: [Function: value],
            categories: [Function: value],
            customerDetails: [Function: value],
            billingInfoes: [Function: value],
            locations: [Function: value],
            packages: [Function: value],
            productFunctions: [Function: value],
            colors: [Function: value],
            labels: [Function: value],
            physicalProducts: [Function: value],
            customers: [Function: value],
            productVariants: [Function: value],
            products: [Function: value],
            users: [Function: value],
            brand: [Function: value],
            collectionGroup: [Function: value],
            homepageProductRail: [Function: value],
            image: [Function: value],
            bagItem: [Function: value],
            recentlyViewedProduct: [Function: value],
            order: [Function: value],
            reservation: [Function: value],
            productRequest: [Function: value],
            collection: [Function: value],
            category: [Function: value],
            customerDetail: [Function: value],
            billingInfo: [Function: value],
            location: [Function: value],
            package: [Function: value],
            productFunction: [Function: value],
            color: [Function: value],
            label: [Function: value],
            physicalProduct: [Function: value],
            customer: [Function: value],
            productVariant: [Function: value],
            product: [Function: value],
            user: [Function: value],
            brandsConnection: [Function: value],
            collectionGroupsConnection: [Function: value],
            homepageProductRailsConnection: [Function: value],
            imagesConnection: [Function: value],
            bagItemsConnection: [Function: value],
            recentlyViewedProductsConnection: [Function: value],
            ordersConnection: [Function: value],
            reservationsConnection: [Function: value],
            productRequestsConnection: [Function: value],
            collectionsConnection: [Function: value],
            categoriesConnection: [Function: value],
            customerDetailsConnection: [Function: value],
            billingInfoesConnection: [Function: value],
            locationsConnection: [Function: value],
            packagesConnection: [Function: value],
            productFunctionsConnection: [Function: value],
            colorsConnection: [Function: value],
            labelsConnection: [Function: value],
            physicalProductsConnection: [Function: value],
            customersConnection: [Function: value],
            productVariantsConnection: [Function: value],
            productsConnection: [Function: value],
            usersConnection: [Function: value],
            node: [Function: value] },
         mutation:
          { createBrand: [Function: value],
            createCollectionGroup: [Function: value],
            createHomepageProductRail: [Function: value],
            createImage: [Function: value],
            createBagItem: [Function: value],
            createRecentlyViewedProduct: [Function: value],
            createOrder: [Function: value],
            createReservation: [Function: value],
            createProductRequest: [Function: value],
            createCollection: [Function: value],
            createCategory: [Function: value],
            createCustomerDetail: [Function: value],
            createBillingInfo: [Function: value],
            createLocation: [Function: value],
            createPackage: [Function: value],
            createProductFunction: [Function: value],
            createColor: [Function: value],
            createLabel: [Function: value],
            createPhysicalProduct: [Function: value],
            createCustomer: [Function: value],
            createProductVariant: [Function: value],
            createProduct: [Function: value],
            createUser: [Function: value],
            updateBrand: [Function: value],
            updateCollectionGroup: [Function: value],
            updateHomepageProductRail: [Function: value],
            updateImage: [Function: value],
            updateBagItem: [Function: value],
            updateRecentlyViewedProduct: [Function: value],
            updateReservation: [Function: value],
            updateProductRequest: [Function: value],
            updateCollection: [Function: value],
            updateCategory: [Function: value],
            updateCustomerDetail: [Function: value],
            updateBillingInfo: [Function: value],
            updateLocation: [Function: value],
            updatePackage: [Function: value],
            updateProductFunction: [Function: value],
            updateColor: [Function: value],
            updateLabel: [Function: value],
            updatePhysicalProduct: [Function: value],
            updateCustomer: [Function: value],
            updateProductVariant: [Function: value],
            updateProduct: [Function: value],
            updateUser: [Function: value],
            deleteBrand: [Function: value],
            deleteCollectionGroup: [Function: value],
            deleteHomepageProductRail: [Function: value],
            deleteImage: [Function: value],
            deleteBagItem: [Function: value],
            deleteRecentlyViewedProduct: [Function: value],
            deleteOrder: [Function: value],
            deleteReservation: [Function: value],
            deleteProductRequest: [Function: value],
            deleteCollection: [Function: value],
            deleteCategory: [Function: value],
            deleteCustomerDetail: [Function: value],
            deleteBillingInfo: [Function: value],
            deleteLocation: [Function: value],
            deletePackage: [Function: value],
            deleteProductFunction: [Function: value],
            deleteColor: [Function: value],
            deleteLabel: [Function: value],
            deletePhysicalProduct: [Function: value],
            deleteCustomer: [Function: value],
            deleteProductVariant: [Function: value],
            deleteProduct: [Function: value],
            deleteUser: [Function: value],
            upsertBrand: [Function: value],
            upsertCollectionGroup: [Function: value],
            upsertHomepageProductRail: [Function: value],
            upsertImage: [Function: value],
            upsertBagItem: [Function: value],
            upsertRecentlyViewedProduct: [Function: value],
            upsertReservation: [Function: value],
            upsertProductRequest: [Function: value],
            upsertCollection: [Function: value],
            upsertCategory: [Function: value],
            upsertCustomerDetail: [Function: value],
            upsertBillingInfo: [Function: value],
            upsertLocation: [Function: value],
            upsertPackage: [Function: value],
            upsertProductFunction: [Function: value],
            upsertColor: [Function: value],
            upsertLabel: [Function: value],
            upsertPhysicalProduct: [Function: value],
            upsertCustomer: [Function: value],
            upsertProductVariant: [Function: value],
            upsertProduct: [Function: value],
            upsertUser: [Function: value],
            updateManyBrands: [Function: value],
            updateManyCollectionGroups: [Function: value],
            updateManyHomepageProductRails: [Function: value],
            updateManyImages: [Function: value],
            updateManyBagItems: [Function: value],
            updateManyRecentlyViewedProducts: [Function: value],
            updateManyReservations: [Function: value],
            updateManyProductRequests: [Function: value],
            updateManyCollections: [Function: value],
            updateManyCategories: [Function: value],
            updateManyCustomerDetails: [Function: value],
            updateManyBillingInfoes: [Function: value],
            updateManyLocations: [Function: value],
            updateManyPackages: [Function: value],
            updateManyProductFunctions: [Function: value],
            updateManyColors: [Function: value],
            updateManyLabels: [Function: value],
            updateManyPhysicalProducts: [Function: value],
            updateManyCustomers: [Function: value],
            updateManyProductVariants: [Function: value],
            updateManyProducts: [Function: value],
            updateManyUsers: [Function: value],
            deleteManyBrands: [Function: value],
            deleteManyCollectionGroups: [Function: value],
            deleteManyHomepageProductRails: [Function: value],
            deleteManyImages: [Function: value],
            deleteManyBagItems: [Function: value],
            deleteManyRecentlyViewedProducts: [Function: value],
            deleteManyOrders: [Function: value],
            deleteManyReservations: [Function: value],
            deleteManyProductRequests: [Function: value],
            deleteManyCollections: [Function: value],
            deleteManyCategories: [Function: value],
            deleteManyCustomerDetails: [Function: value],
            deleteManyBillingInfoes: [Function: value],
            deleteManyLocations: [Function: value],
            deleteManyPackages: [Function: value],
            deleteManyProductFunctions: [Function: value],
            deleteManyColors: [Function: value],
            deleteManyLabels: [Function: value],
            deleteManyPhysicalProducts: [Function: value],
            deleteManyCustomers: [Function: value],
            deleteManyProductVariants: [Function: value],
            deleteManyProducts: [Function: value],
            deleteManyUsers: [Function: value] },
         subscription:
          { brand: [Function: value],
            collectionGroup: [Function: value],
            homepageProductRail: [Function: value],
            image: [Function: value],
            bagItem: [Function: value],
            recentlyViewedProduct: [Function: value],
            order: [Function: value],
            reservation: [Function: value],
            productRequest: [Function: value],
            collection: [Function: value],
            category: [Function: value],
            customerDetail: [Function: value],
            billingInfo: [Function: value],
            location: [Function: value],
            package: [Function: value],
            productFunction: [Function: value],
            color: [Function: value],
            label: [Function: value],
            physicalProduct: [Function: value],
            customer: [Function: value],
            productVariant: [Function: value],
            product: [Function: value],
            user: [Function: value] },
         exists:
          { Brand: [Function],
            CollectionGroup: [Function],
            HomepageProductRail: [Function],
            Image: [Function],
            BagItem: [Function],
            RecentlyViewedProduct: [Function],
            Order: [Function],
            Reservation: [Function],
            ProductRequest: [Function],
            Collection: [Function],
            Category: [Function],
            CustomerDetail: [Function],
            BillingInfo: [Function],
            Location: [Function],
            Package: [Function],
            ProductFunction: [Function],
            Color: [Function],
            Label: [Function],
            PhysicalProduct: [Function],
            Customer: [Function],
            ProductVariant: [Function],
            Product: [Function],
            User: [Function] } },
      prisma:
       PrismaClientService {
         client:
          Client [Promise] {
            _currentInstructions: {},
            _models: [Array],
            _promises: {},
            processInstructionsOnce: [Function],
            processInstructions: [Function],
            then: [Function],
            catch: [Function],
            _debug: undefined,
            _schema: [GraphQLSchema],
            _endpoint:
             'https://monsoon-prisma-staging.herokuapp.com/monsoon/staging',
            _secret:
             '6mFrM3ZRzg1q1JNnY5nHuKdFphquSB6w3WLESaYl3B3H8NzFYSVfuarx5pau8eaJT68rI2XxsSF1wHCf6xbFwuxnOeqxU0d3YFnK',
            _types: [Object],
            bagItem: [Function: value],
            bagItems: [Function: value],
            bagItemsConnection: [Function: value],
            billingInfo: [Function: value],
            billingInfoes: [Function: value],
            billingInfoesConnection: [Function: value],
            bottomSize: [Function: value],
            bottomSizes: [Function: value],
            bottomSizesConnection: [Function: value],
            brand: [Function: value],
            brands: [Function: value],
            brandsConnection: [Function: value],
            category: [Function: value],
            categories: [Function: value],
            categoriesConnection: [Function: value],
            collection: [Function: value],
            collections: [Function: value],
            collectionsConnection: [Function: value],
            collectionGroup: [Function: value],
            collectionGroups: [Function: value],
            collectionGroupsConnection: [Function: value],
            color: [Function: value],
            colors: [Function: value],
            colorsConnection: [Function: value],
            customer: [Function: value],
            customers: [Function: value],
            customersConnection: [Function: value],
            customerDetail: [Function: value],
            customerDetails: [Function: value],
            customerDetailsConnection: [Function: value],
            homepageProductRail: [Function: value],
            homepageProductRails: [Function: value],
            homepageProductRailsConnection: [Function: value],
            image: [Function: value],
            images: [Function: value],
            imagesConnection: [Function: value],
            label: [Function: value],
            labels: [Function: value],
            labelsConnection: [Function: value],
            location: [Function: value],
            locations: [Function: value],
            locationsConnection: [Function: value],
            order: [Function: value],
            orders: [Function: value],
            ordersConnection: [Function: value],
            package: [Function: value],
            packages: [Function: value],
            packagesConnection: [Function: value],
            physicalProduct: [Function: value],
            physicalProducts: [Function: value],
            physicalProductsConnection: [Function: value],
            product: [Function: value],
            products: [Function: value],
            productsConnection: [Function: value],
            productFunction: [Function: value],
            productFunctions: [Function: value],
            productFunctionsConnection: [Function: value],
            productRequest: [Function: value],
            productRequests: [Function: value],
            productRequestsConnection: [Function: value],
            productVariant: [Function: value],
            productVariants: [Function: value],
            productVariantsConnection: [Function: value],
            productVariantWant: [Function: value],
            productVariantWants: [Function: value],
            productVariantWantsConnection: [Function: value],
            recentlyViewedProduct: [Function: value],
            recentlyViewedProducts: [Function: value],
            recentlyViewedProductsConnection: [Function: value],
            reservation: [Function: value],
            reservations: [Function: value],
            reservationsConnection: [Function: value],
            size: [Function: value],
            sizes: [Function: value],
            sizesConnection: [Function: value],
            topSize: [Function: value],
            topSizes: [Function: value],
            topSizesConnection: [Function: value],
            user: [Function: value],
            users: [Function: value],
            usersConnection: [Function: value],
            node: [Function: value],
            '$fragment': [Function: value],
            createBagItem: [Function: value],
            updateBagItem: [Function: value],
            updateManyBagItems: [Function: value],
            upsertBagItem: [Function: value],
            deleteBagItem: [Function: value],
            deleteManyBagItems: [Function: value],
            createBillingInfo: [Function: value],
            updateBillingInfo: [Function: value],
            updateManyBillingInfoes: [Function: value],
            upsertBillingInfo: [Function: value],
            deleteBillingInfo: [Function: value],
            deleteManyBillingInfoes: [Function: value],
            createBottomSize: [Function: value],
            updateBottomSize: [Function: value],
            updateManyBottomSizes: [Function: value],
            upsertBottomSize: [Function: value],
            deleteBottomSize: [Function: value],
            deleteManyBottomSizes: [Function: value],
            createBrand: [Function: value],
            updateBrand: [Function: value],
            updateManyBrands: [Function: value],
            upsertBrand: [Function: value],
            deleteBrand: [Function: value],
            deleteManyBrands: [Function: value],
            createCategory: [Function: value],
            updateCategory: [Function: value],
            updateManyCategories: [Function: value],
            upsertCategory: [Function: value],
            deleteCategory: [Function: value],
            deleteManyCategories: [Function: value],
            createCollection: [Function: value],
            updateCollection: [Function: value],
            updateManyCollections: [Function: value],
            upsertCollection: [Function: value],
            deleteCollection: [Function: value],
            deleteManyCollections: [Function: value],
            createCollectionGroup: [Function: value],
            updateCollectionGroup: [Function: value],
            updateManyCollectionGroups: [Function: value],
            upsertCollectionGroup: [Function: value],
            deleteCollectionGroup: [Function: value],
            deleteManyCollectionGroups: [Function: value],
            createColor: [Function: value],
            updateColor: [Function: value],
            updateManyColors: [Function: value],
            upsertColor: [Function: value],
            deleteColor: [Function: value],
            deleteManyColors: [Function: value],
            createCustomer: [Function: value],
            updateCustomer: [Function: value],
            updateManyCustomers: [Function: value],
            upsertCustomer: [Function: value],
            deleteCustomer: [Function: value],
            deleteManyCustomers: [Function: value],
            createCustomerDetail: [Function: value],
            updateCustomerDetail: [Function: value],
            updateManyCustomerDetails: [Function: value],
            upsertCustomerDetail: [Function: value],
            deleteCustomerDetail: [Function: value],
            deleteManyCustomerDetails: [Function: value],
            createHomepageProductRail: [Function: value],
            updateHomepageProductRail: [Function: value],
            updateManyHomepageProductRails: [Function: value],
            upsertHomepageProductRail: [Function: value],
            deleteHomepageProductRail: [Function: value],
            deleteManyHomepageProductRails: [Function: value],
            createImage: [Function: value],
            updateImage: [Function: value],
            updateManyImages: [Function: value],
            upsertImage: [Function: value],
            deleteImage: [Function: value],
            deleteManyImages: [Function: value],
            createLabel: [Function: value],
            updateLabel: [Function: value],
            updateManyLabels: [Function: value],
            upsertLabel: [Function: value],
            deleteLabel: [Function: value],
            deleteManyLabels: [Function: value],
            createLocation: [Function: value],
            updateLocation: [Function: value],
            updateManyLocations: [Function: value],
            upsertLocation: [Function: value],
            deleteLocation: [Function: value],
            deleteManyLocations: [Function: value],
            createOrder: [Function: value],
            deleteOrder: [Function: value],
            deleteManyOrders: [Function: value],
            createPackage: [Function: value],
            updatePackage: [Function: value],
            updateManyPackages: [Function: value],
            upsertPackage: [Function: value],
            deletePackage: [Function: value],
            deleteManyPackages: [Function: value],
            createPhysicalProduct: [Function: value],
            updatePhysicalProduct: [Function: value],
            updateManyPhysicalProducts: [Function: value],
            upsertPhysicalProduct: [Function: value],
            deletePhysicalProduct: [Function: value],
            deleteManyPhysicalProducts: [Function: value],
            createProduct: [Function: value],
            updateProduct: [Function: value],
            updateManyProducts: [Function: value],
            upsertProduct: [Function: value],
            deleteProduct: [Function: value],
            deleteManyProducts: [Function: value],
            createProductFunction: [Function: value],
            updateProductFunction: [Function: value],
            updateManyProductFunctions: [Function: value],
            upsertProductFunction: [Function: value],
            deleteProductFunction: [Function: value],
            deleteManyProductFunctions: [Function: value],
            createProductRequest: [Function: value],
            updateProductRequest: [Function: value],
            updateManyProductRequests: [Function: value],
            upsertProductRequest: [Function: value],
            deleteProductRequest: [Function: value],
            deleteManyProductRequests: [Function: value],
            createProductVariant: [Function: value],
            updateProductVariant: [Function: value],
            updateManyProductVariants: [Function: value],
            upsertProductVariant: [Function: value],
            deleteProductVariant: [Function: value],
            deleteManyProductVariants: [Function: value],
            createProductVariantWant: [Function: value],
            updateProductVariantWant: [Function: value],
            updateManyProductVariantWants: [Function: value],
            upsertProductVariantWant: [Function: value],
            deleteProductVariantWant: [Function: value],
            deleteManyProductVariantWants: [Function: value],
            createRecentlyViewedProduct: [Function: value],
            updateRecentlyViewedProduct: [Function: value],
            updateManyRecentlyViewedProducts: [Function: value],
            upsertRecentlyViewedProduct: [Function: value],
            deleteRecentlyViewedProduct: [Function: value],
            deleteManyRecentlyViewedProducts: [Function: value],
            createReservation: [Function: value],
            updateReservation: [Function: value],
            updateManyReservations: [Function: value],
            upsertReservation: [Function: value],
            deleteReservation: [Function: value],
            deleteManyReservations: [Function: value],
            createSize: [Function: value],
            updateSize: [Function: value],
            updateManySizes: [Function: value],
            upsertSize: [Function: value],
            deleteSize: [Function: value],
            deleteManySizes: [Function: value],
            createTopSize: [Function: value],
            updateTopSize: [Function: value],
            updateManyTopSizes: [Function: value],
            upsertTopSize: [Function: value],
            deleteTopSize: [Function: value],
            deleteManyTopSizes: [Function: value],
            createUser: [Function: value],
            updateUser: [Function: value],
            updateManyUsers: [Function: value],
            upsertUser: [Function: value],
            deleteUser: [Function: value],
            deleteManyUsers: [Function: value],
            '$subscribe': [Object],
            '$graphql': [Function],
            '$exists': [Object],
            _token:
             'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODQxMzY4OTV9.XzoGxzfBr6iTpMWVZVXDWiiQOn5hgb19jn0goIsXRjQ',
            _client: [BatchedGraphQLClient],
            _subscriptionClient: [SubscriptionClient],
            [Symbol(Symbol.toStringTag)]: 'Promise' } },
      productUtils:
       ProductUtilsService {
         db:
          DBService {
            fragmentReplacements: [],
            schema: [GraphQLSchema],
            disableCache: false,
            before: [Function: before],
            query: [Object],
            mutation: [Object],
            subscription: [Object],
            exists: [Object] },
         prisma: undefined },
      productVariantService:
       ProductVariantService {
         prisma: PrismaClientService { client: [Client] },
         physicalProductService:
          PhysicalProductService { db: [DBService], prisma: [PrismaClientService] },
         airtableService:
          AirtableService {
            airtableBase: [AirtableUtilsService],
            utils: undefined,
            getAll: [AsyncFunction] } },
      physicalProductService:
       PhysicalProductService {
         db:
          DBService {
            fragmentReplacements: [],
            schema: [GraphQLSchema],
            disableCache: false,
            before: [Function: before],
            query: [Object],
            mutation: [Object],
            subscription: [Object],
            exists: [Object] },
         prisma: PrismaClientService { client: [Client] } },
      airtableService:
       AirtableService {
         airtableBase:
          AirtableUtilsService { airtableBase: undefined, keyMap: [Object] },
         utils: undefined,
         getAll: [AsyncFunction] },
      shippingService:
       ShippingService {
         prisma: PrismaClientService { client: [Client] },
         utilsService: UtilsService { prisma: [PrismaClientService] },
         shippo:
          { _api: [Object],
            address: [Object],
            shipment: [Object],
            parcel: [Object],
            transaction: [Object],
            customsitem: [Object],
            customsdeclaration: [Object],
            carrieraccount: [Object],
            manifest: [Object],
            refund: [Object],
            rate: [Object],
            batch: [Object],
            track: [Object] } },
      emails:
       EmailService {
         prisma: PrismaClientService { client: [Client] },
         utils: UtilsService { prisma: [PrismaClientService] },
         data: EmailDataProvider {},
         getReservationConfirmationDataForProduct: [AsyncFunction] },
      reservationUtils: ReservationUtilsService { inventoryStatusOf: [Function] } }

  console.log src/modules/Product/tests/reservation.spec.ts:69
    about to create new customer

  console.log src/modules/Product/tests/reservation.spec.ts:98
    new customer created

  console.log src/modules/Product/services/reservation.service.ts:53
    this.prisma at start of reserveItems resolver: [object Object]

  console.log src/modules/Product/services/reservation.service.ts:176
    this.prisma in getLatestReservation: [object Object]

info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
