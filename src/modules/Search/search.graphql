type Query {
  search(query: String!, options: SearchOptions): [SearchResult]!
    @hasRole(roles: [Admin])
    @cacheControl(maxAge: 0)
}

input SearchOptions {
  filters: String
  includeTypes: [SearchResultType]
  suggestions: Boolean
}

enum SearchResultType {
  Product
  Brand
  PhysicalProduct
  Customer
  ShopifyProductVariant
}

union SearchResultData =
    BrandSearchResultData
  | CustomerSearchResultData
  | ProductSearchResultData
  | PhysicalProductSearchResultData
  | ShopifyProductVariantSearchResultData

type SearchResult {
  kindOf: SearchResultType!
  data: SearchResultData!
}

type ProductSearchResultData {
  id: ID!
  slug: String!
  name: String!
  brandName: String!
  image: String
  description: String
  variantsCount: Int!
  physicalProductsCount: Int!
}

type PhysicalProductSearchResultData {
  id: ID!
  productName: String!
  seasonsUID: String!
  inventoryStatus: InventoryStatus
  barcode: String!
}

type BrandSearchResultData {
  id: ID!
  name: String!
  brandCode: String!
  description: String
  designer: String
  websiteUrl: String
  isPrimaryBrand: Boolean
  productsCount: Int
  popularity: Int
  tier: String
  published: Boolean
}

type CustomerSearchResultData {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  bagItemsCount: Int
  popularity: Int
  status: CustomerStatus
}

type ShopifyProductVariantSearchResultData {
  id: ID!
  brandID: ID!
  brandName: String!
  externalID: String!
  displayName: String
  selectedOptions: [ShopifyProductVariantSelectedOption!]
  title: String
  image: String
}
