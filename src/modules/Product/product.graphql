# import ProductVariant, Query, Mutation, CreateVariantInput from "./productVariant.graphql"
# import PhysicalProduct, Query, Mutation from "./physicalProduct.graphql"

type Query {
  brand(where: BrandWhereUniqueInput!, published: Boolean): Brand
    @cacheControl(maxAge: 600)
  brands(
    where: BrandWhereInput
    orderBy: BrandOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Brand]! @cacheControl(maxAge: 600)
  brandsConnection(
    where: BrandWhereInput
    orderBy: BrandOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BrandConnection! @cacheControl(maxAge: 600)
  category(where: CategoryWhereUniqueInput!): Category
    @cacheControl(maxAge: 600)
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]! @cacheControl(maxAge: 600)
  categoriesConnection(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CategoryConnection! @cacheControl(maxAge: 0)
  colors(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Color]! @cacheControl(maxAge: 0)
  launch(where: LaunchWhereUniqueInput!): Launch @cacheControl(maxAge: 0)
  launches(
    upcoming: Boolean
    where: LaunchWhereInput
    orderBy: LaunchOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Launch]! @cacheControl(maxAge: 0)
  launchesConnection(
    where: LaunchWhereInput
    orderBy: LaunchOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): LaunchConnection! @cacheControl(maxAge: 0)
  product(where: ProductWhereUniqueInput!): Product @cacheControl(maxAge: 0)
  products(
    category: String
    brand: String
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    sizes: [String!]
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product]! @cacheControl(maxAge: 600)
  productsConnection(
    tops: [String]
    bottoms: [String]
    colors: [String]
    availableOnly: Boolean
    forSaleOnly: Boolean
    sizes: [String!]
    category: String
    brand: String
    brands: [String]
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    sizes: [String!]
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection! @cacheControl(maxAge: 600)
  productFunctions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction]! @cacheControl(maxAge: 0)
  productMaterialCategories(
    where: ProductMaterialCategoryWhereInput
    orderBy: ProductMaterialCategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductMaterialCategory]! @cacheControl(maxAge: 0)
  productModels(
    where: ProductModelWhereInput
    orderBy: ProductModelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductModel]! @cacheControl(maxAge: 0)
  productNotifications(
    where: ProductNotificationWhereInput
    orderBy: ProductNotificationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductNotification]! @cacheControl(maxAge: 0)
  productRequests(
    where: ProductRequestWhereInput
    orderBy: ProductRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductRequest]! @cacheControl(maxAge: 0)
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag]! @cacheControl(maxAge: 0)
}

type Mutation {
  saveProduct(item: ID!, save: Boolean!): BagItem @hasRole(roles: [Customer])
  updateProduct(
    where: ProductWhereUniqueInput!
    data: CustomProductUpdateInput!
  ): Product! @hasRole(roles: [Admin])
  addViewedProduct(item: ID!): RecentlyViewedProduct!
  createProduct(input: ProductCreateInput!): Product @hasRole(roles: [Admin])
  addProductRequest(reason: String!, url: String!): ProductRequest!
  createBrand(input: CustomBrandCreateInput!): Brand @hasRole(roles: [Admin])
  updateBrand(
    where: BrandWhereUniqueInput!
    data: CustomBrandUpdateInput!
  ): Brand @hasRole(roles: [Admin])
  upsertLaunch(
    where: LaunchWhereUniqueInput!
    data: CustomLaunchUpsertInput!
  ): Launch @hasRole(roles: [Admin])
  publishProducts(productIDs: [ID!]): PublishProductsResponse!
    @hasRole(roles: [Admin])
  updatePhysicalProductByBarcode(
    barcode: String
    status: PhysicalProductStatus
  ): PhysicalProduct
  createUsedOrder(physicalProductID: ID!): Order!
}

type AccessorySize {
  id: ID!
  bridge: Float
  length: Float
  width: Float
}

type PublishProductsResponse {
  message: String!
  unvalidatedIDs: [String]!
  validatedIDs: [String]!
  status: String!
}

type Product @cacheControl(maxAge: 200) {
  id: ID!
  slug: String!
  name: String!
  architecture: ProductArchitecture
  brand: Brand!
  category: Category!
  type: ProductType
  description: String
  externalURL: String
  buyNewEnabled: Boolean!
  buyUsedEnabled: Boolean!
  styles: [CustomerStyle!]
  buyUsedPrice: Int
  materialCategory: ProductMaterialCategory
  model: ProductModel
  modelHeight: Float
  modelSize: Size
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  retailPrice: Int
  color: Color!
  season: ProductSeason
  secondaryColor: Color
  tags: [Tag!]!
  images(
    width: Int
    height: Int
    size: ImageSize
    options: ImageOptionsInput
  ): [Image!]!
  resizedImages(
    width: Int
    height: Int
    size: ImageSize
    options: ImageOptionsInput
  ): [Image!]!
  functions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction!]
  innerMaterials: [String!]!
  outerMaterials: [String!]!
  variants(
    where: ProductVariantWhereInput
    orderBy: ProductVariantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariant!]
  status: ProductStatus
  isSaved: Boolean @cacheControl(maxAge: 200, scope: PRIVATE)
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  tier: ProductTier!
  relatedProducts(take: Int): [Product]!
  rentalPrice: Int
  wholesalePrice: Int
  recoupment: Int
}

type Brand @cacheControl(maxAge: 1000) {
  id: ID!
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean!
  logo: JSON @deprecated(reason: "replaced with logoImage")
  logoImage: Image
  name: String!
  basedIn: String
  published: Boolean!
  featured: Boolean!
  designer: String
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  # productsConnection is an added field
  productsConnection(
    sizes: [String!]
    category: String
    brand: String
    brands: [String]
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    sizes: [String!]
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection!
  images(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Image!]
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
  styles: [CustomerStyle!]
  shopifyShop: ShopifyShop
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductCreateInput {
  architecture: String
  internalSizeType: SizeType
  brandID: String!
  buyNewEnabled: Boolean
  buyUsedEnabled: Boolean!
  buyUsedPrice: Int!
  categoryID: String!
  colorCode: String!
  description: String!
  functions: [String!]!
  images: [Upload!]!
  innerMaterials: [String!]!
  materialCategorySlug: String
  modelID: String
  modelSizeDisplay: String
  modelSizeName: String
  modelSizeType: SizeType
  externalURL: String
  name: String!
  outerMaterials: [String!]!
  productFit: ProductFit
  retailPrice: Int!
  wholesalePrice: Int!
  recoupment: Int!
  season: UpsertSeasonInput
  photographyStatus: PhotographyStatus
  secondaryColorCode: String
  status: ProductStatus!
  tags: [String!]!
  type: ProductType!
  variants: [CreateVariantInput!]!
  styles: [CustomerStyle!]
}

input CustomProductUpdateInput {
  # Fields from ProductUpdateInput
  architecture: ProductArchitecture
  category: CategoryUpdateOneRequiredWithoutProductsInput
  description: String
  externalURL: String
  productFit: ProductFit
  innerMaterials: ProductUpdateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelHeight: Int
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  retailPrice: Int
  wholesalePrice: Int
  recoupment: Int
  season: UpsertSeasonInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  type: ProductType
  variants: ProductVariantUpdateManyWithoutProductInput
  publishedAt: DateTime
  photographyStatus: PhotographyStatus
  styles: [CustomerStyle!]
  # Custom fields
  bottomSizeType: BottomSizeType
  functions: [String!]
  images: [Upload!]
  modelSizeDisplay: String
  modelSizeName: String
  modelSizeType: SizeType
  tags: [String!]
  buyNewEnabled: Boolean
  buyUsedEnabled: Boolean
  buyUsedPrice: Int
}

input UpsertSeasonInput {
  wearableSeasons: [String!]
  internalSeasonSeasonCode: String
  internalSeasonYear: Int
  vendorSeasonSeasonCode: String
  vendorSeasonYear: Int
}

input ShopifyShopInput {
  shopName: String!
  enabled: Boolean!
  accessToken: String
}

input CustomBrandCreateInput {
  id: ID
  slug: String!
  designer: String
  published: Boolean
  featured: Boolean
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean
  name: String!
  basedIn: String
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
  styles: [CustomerStyle!]
  products: ProductCreateManyWithoutBrandInput
  # Custom fields
  logoImage: Upload
  images: [Upload!]
  shopifyShop: ShopifyShopInput
}

input CustomBrandUpdateInput {
  slug: String
  designer: String
  published: Boolean
  featured: Boolean
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  name: String
  basedIn: String
  products: ProductUpdateManyWithoutBrandInput
  since: DateTime
  tier: BrandTier
  websiteUrl: String
  # Custom fields
  logoImage: Upload
  styles: [CustomerStyle!]
  images: [Upload!]
  shopifyShop: ShopifyShopInput
}

input CustomLaunchUpsertInput {
  id: ID
  launchAt: DateTime
  published: Boolean
  # Custom fields
  collectionID: ID
  brandID: ID
}
