type Mutation {
  upsertCollection(data: CollectionUpsertInput!): Collection!
    @hasRole(roles: [Admin])
}

type Collection {
  id: ID!
  slug: String!
  displayTextOverlay: Boolean!
  textOverlayColor: String
  images(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Image!]
  title: String
  subTitle: String
  descriptions: [String!]!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  published: Boolean!
  placements: [CollectionPlacement!]!
  createdAt: DateTime!
  updatedAt: DateTime
  # productsConnection is an added field
  productsConnection(
    sizes: [String!]
    category: String
    brand: String
    brands: [String]
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    sizes: [String!]
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection!
}

input CollectionUpsertInput {
  id: ID
  slug: String
  images: [Upload!]
  title: String
  subTitle: String
  descriptions: CollectionCreatedescriptionsInput
  productIDs: [String]
  published: Boolean
  placements: [CollectionPlacement]
  displayTextOverlay: Boolean
  textOverlayColor: String
}

type Query {
  collection(where: CollectionWhereUniqueInput!): Collection
  collections(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    placements: [CollectionPlacement!]
  ): [Collection]!
  collectionsConnection(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CollectionConnection!
}
