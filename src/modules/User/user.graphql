# import Reservation from "../Reservation/reservation.graphql"
# import Coupon from "../Payment/payment.graphql"
# import AppRoute from "../PushNotification/pushNotification.graphql"

type Query {
  me: Me
  user(where: UserWhereUniqueInput!): User @hasRole(roles: [Admin])
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]! @hasRole(roles: [Admin])
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection! @hasRole(roles: [Admin])
  zipcodeServiced(zipcode: String!): Boolean!
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    details: CustomerDetailCreateInput
    referrerId: String
    utm: UTMInput
    giftId: String
  ): SignupPayload!
  login(email: String!, password: String!): AuthPayload!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    @hasRole(roles: [Admin])
  updateUserPushNotificationStatus(newStatus: Boolean!): UserPushNotification!
    @isAuthenticated
  resetPassword(email: String!): ResetPasswordPayload! # Do not put @isAuthenticated guard here because only users who can't login need to reset passwords!
  refreshToken(refreshToken: String!): String!
  createInterestedUser(email: String!, zipcode: String): InterestedUser!
  unsubscribeUserFromEmails(id: String!): Boolean
}

input UTMInput {
  source: String
  medium: String
  term: String
  content: String
  campaign: String
}

type AuthPayload {
  token: String!
  refreshToken: String!
  expiresIn: Int!
  user: User!
  customer: Customer!
  beamsToken: String!
}

type SignupPayload {
  token: String!
  refreshToken: String!
  expiresIn: Int!
  user: User!
  customer: Customer!
  beamsToken: String!
}

type ResetPasswordPayload {
  message: String!
}

type Me {
  id: ID!
  user: User
  customer: Customer
  activeReservation: Reservation
  bag: [BagItem!]
  savedItems: [BagItem!]
  notificationBar: NotificationBar
}

type NotificationBar {
  web: WebNotificationBar!
  mobile: MobileNotificationBar!
  palette: NotificationBarPalette
  icon: NotificationBarIcon
  viewCount: Int
  clickCount: Int
  id: NotificationBarID
}

enum NotificationBarIcon {
  Chevron
  CloseX
}

type NotificationBarPalette {
  default: NotificationBarColorPalette!
  pressed: NotificationBarColorPalette!
}

type NotificationBarColorPalette {
  backgroundColor: String!
  titleFontColor: String!
  detailFontColor: String!
  iconStrokeColor: String!
}
type WebNotificationBar {
  title: String!
  detail: String!
  route: WebRoute
}

type MobileNotificationBar {
  title: String!
  detail: String!
  route: MobileRoute
}

type WebRoute {
  url: String
  drawerView: String
  dismissable: Boolean
}

type MobileRoute {
  route: AppRoute
  screen: String
  params: Json
  dismissable: Boolean
}

type UserLinks {
  mixpanel: String!
  sendgrid: String!
  intercom: String!
}

type User {
  id: ID!
  auth0Id: String!
  email: String!
  emails: [EmailReceipt!]!
  firstName: String!
  lastName: String!
  fullName: String!
  role: UserRole!
  roles: [UserRole!]!
  links: UserLinks
  customer: Customer
  createdAt: DateTime!
  updatedAt: DateTime!
  completeAccountURL: String!
  pushNotifications: [PushNotificationReceipt!]
  pushNotificationStatus: PushNotificationStatus!
  pushNotification: UserPushNotification
  beamsToken: String!
}
