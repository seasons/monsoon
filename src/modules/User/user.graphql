# import Reservation from "../Reservation/reservation.graphql"

type Query {
  me: Me
  user(where: UserWhereUniqueInput!): User @hasRole(roles: [Admin])
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]! @hasRole(roles: [Admin])
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection! @hasRole(roles: [Admin])
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    zipCode: String!
    details: CustomerDetailCreateInput
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    @hasRole(roles: [Admin])
  updateUserPushNotificationStatus(newStatus: Boolean!): UserPushNotification!
    @isAuthenticated
  resetPassword(email: String!): ResetPasswordPayload! # Do not put @isAuthenticated guard here because only users who can't login need to reset passwords!
  refreshToken(refreshToken: String!): String!
}

type AuthPayload {
  token: String!
  refreshToken: String!
  expiresIn: Int!
  user: User!
  customer: Customer!
}

type ResetPasswordPayload {
  message: String!
}

type Me {
  user: User
  customer: Customer
  activeReservation: Reservation
  bag: [BagItem!]
  savedItems: [BagItem!]
}

type User {
  id: ID!
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  fullName: String!
  role: UserRole!
  roles: [UserRole!]!
  customer: Customer
  createdAt: DateTime!
  updatedAt: DateTime!
  completeAccountURL: String!
  pushNotifications: [PushNotificationReceipt!]
  pushNotificationStatus: PushNotificationStatus!
  pushNotification: UserPushNotification
  beamsToken: String!
}
