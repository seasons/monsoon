type Query {
  chargebeeCheckout(
    planID: String!
    userIDHash: String
    email: String
    couponID: String
  ): ChargebeeHostedPagePayload @cacheControl(maxAge: 0)
  chargebeeGiftCheckout(planID: String!): ChargebeeHostedPagePayload
    @cacheControl(maxAge: 0)
  chargebeeUpdatePaymentPage: ChargebeeHostedPagePayload
    @hasRole(roles: [Customer])
    @cacheControl(maxAge: 0)
  hostedChargebeeCheckout(planID: String!): ChargebeeHostedPagePayload
    @deprecated(reason: "replaced with processPayment")
  paymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
    @cacheControl(maxAge: 0)
  paymentPlans(
    where: PaymentPlanWhereInput
    orderBy: PaymentPlanOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PaymentPlan] @cacheControl(maxAge: 0)
  gift(id: String!): ChargebeeGift @cacheControl(maxAge: 0)
}

type Mutation {
  processPayment(
    paymentMethodID: String!
    planID: String!
    couponID: String
    billing: JSON
    shipping: JSON
  ): JSON
  confirmPayment(
    paymentIntentID: String!
    planID: String!
    couponID: String
    billing: JSON
    shipping: JSON
  ): JSON
  updatePaymentMethod(
    paymentMethodID: String!
    planID: String
    billing: JSON
  ): JSON @hasRole(roles: [Customer])
  confirmPaymentMethodUpdate(paymentIntentID: String!, billing: JSON): JSON

  applePayCheckout(
    planID: String!
    token: StripeToken!
    tokenType: String
    couponID: String
    shipping: JSON
  ): Boolean @hasRole(roles: [Customer])
  applePayUpdatePaymentMethod(
    planID: String!
    token: StripeToken!
    tokenType: String
  ): Boolean @hasRole(roles: [Customer])
  changeCustomerPlan(planID: String!): Boolean @hasRole(roles: [Customer])
  updateResumeDate(date: DateTime): Boolean @hasRole(roles: [Customer])
  removeScheduledPause(subscriptionID: String!): Boolean
    @hasRole(roles: [Customer])
    @deprecated(reason: "Moved to pause-less plan structure")
  pauseSubscription(
    subscriptionID: String!
    pauseType: PauseType
    reasonID: ID
  ): Boolean
    @hasRole(roles: [Customer])
    @deprecated(reason: "Moved to pause-less plan structure")
  resumeSubscription(subscriptionID: String!, date: DateTime): Boolean
    @hasRole(roles: [Customer])
    @deprecated(reason: "Moved to pause-less plan structure")
  refundInvoice(input: RefundInvoiceInput): Boolean! @hasRole(roles: [Admin])
  checkCoupon(couponID: String!): Coupon
}

enum PaymentPlanTier {
  Essential
  AllAccess
  Pause
  Access
  Guest
}

type PaymentPlanFeatureList {
  included: [String!]
  excluded: [String!]
}

type PaymentPlan {
  id: ID!
  description: String
  planID: String!
  status: String
  name: String
  price: Int
  itemCount: Int
  tagline: String
  tier: PaymentPlanTier
  billingDate: DateTime!
  caption: String
  createdAt: DateTime!
  updatedAt: DateTime!

  # Computed fields
  features: PaymentPlanFeatureList
  estimate(couponID: String): JSON
  pauseWithItemsPrice: Int
}

enum CreditNoteReasonCodeInput {
  ProductUnsatisfactory
  ServiceUnsatisfactory
  OrderChange
  OrderCancellation
  Waiver
  Other
}

enum CreditNoteReasonCode {
  WriteOff
  SubscriptionChange
  SubscriptionCancellation
  SubscriptionPause
  Chargeback
  ProductUnsatisfactory
  ServiceUnsatisfactory
  OrderChange
  OrderCancellation
  Waiver
  Other
  Fraudulent
}

enum CreditNoteStatus {
  Adjusted
  Refunded
  RefundDue
  Voided
}

enum TransactionStatus {
  InProgress
  Success
  Voided
  Failure
  Timeout
  NeedsAttention
}

enum InvoiceStatus {
  Paid
  Posted
  PaymentDue
  NotPaid
  Voided
  Pending
}

enum TransactionType {
  Authorization
  Payment
  Refund
  PaymentReversal
}

enum PlanID {
  AllAccess
  Essential
}

enum CouponType {
  FixedAmount
  Percentage
}

type Coupon {
  id: String!
  amount: Int
  percentage: Int
  type: CouponType!
}

enum RentalInvoiceStatus {
  Draft
  Billed
  ChargeFailed
}

enum LineItemIdentityType {
  PlanSetup
  Plan
  Addon
  Adhoc
}
enum RentalInvoiceLineItemType {
  PhysicalProduct
  Package
}

type RentalInvoiceLineItem {
  id: ID!
  physicalProduct: PhysicalProduct
  name: String
  rentalInvoice: RentalInvoice
  daysRented: Int
  rentalStartedAt: DateTime
  rentalEndedAt: DateTime
  type: RentalInvoiceLineItemType
  comment: String
  taxRate: Float
  taxName: String
  taxPercentage: Float
  taxPrice: Int
  price: Int
  currencyCode: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RentalInvoice {
  id: ID!
  estimatedTotal: Int
  lineItems: [RentalInvoiceLineItem!]
  products: [PhysicalProduct!]
  billingStartAt: DateTime!
  billingEndAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  membership: CustomerMembership
  status: RentalInvoiceStatus
  reservations: [Reservation!]
}

type ChargebeeLineItem implements LineItemInterface {
  id: ID!
  dateFrom: DateTime
  dateTo: DateTime
  isTaxed: Boolean
  taxAmount: Int
  taxRate: Float
  discountAmount: Int
  description: String!
  entityDescription: String
  recordType: LineItemIdentityType!
  recordID: String
  price: Int!
  name: String
  amount: Int @deprecated(reason: "Use price")
  entityType: LineItemIdentityType! @deprecated(reason: "Use recordType")
  entityId: String @deprecated(reason: "Use recordID")
}

type Invoice {
  id: ID!
  subscriptionId: String
  recurring: Boolean
  status: InvoiceStatus
  closingDate: DateTime
  dueDate: DateTime
  price: Int
  amount: Int @deprecated(reason: "Use price")
  transactions: [Transaction]
  lineItems: [ChargebeeLineItem!]
  creditNotes: [CreditNote]
  billingAddress: ChargebeeAddress
  discounts: [Discount]
}

type Discount {
  amount: Int!
  description: String
}

type ChargebeeAddress {
  firstName: String
  lastName: String
  line1: String
  line2: String
  line3: String
  city: String
  state: String
  zip: String
}

type Transaction {
  id: String!
  amount: Int
  lastFour: String
  date: DateTime
  status: TransactionStatus
  type: TransactionType!
  settledAt: DateTime
}

type CreditNote {
  id: String!
  reasonCode: CreditNoteReasonCode
  date: DateTime
  total: Int
  status: CreditNoteStatus
}

type ChargebeeHostedPagePayload {
  created_at: DateTime!
  embed: Boolean!
  expires_at: Int!
  id: String!
  object: String!
  resource_version: DateTime!
  state: String!
  type: String!
  updated_at: DateTime!
  url: String!
}

type ChargebeeGift {
  gift: JSON
  subscription: JSON
}

input RefundInvoiceInput {
  invoiceId: String!
  refundAmount: Int
  comment: String
  customerNotes: String
  reasonCode: CreditNoteReasonCodeInput
}

input StripeToken {
  card: StripeTokenCard!
  created: Int!
  extra: StripeTokenExtra
  livemode: Boolean!
  tokenId: String!
}

input StripeTokenCard {
  addressCity: String # "Brooklyn"
  addressCountry: String # "US"
  addressLine1: String # "34 Havemeyer St"
  addressLine2: String # "Apt 5A"
  addressState: String # "NY"
  addressZip: String # "11211"
  brand: String # "Visa"
  cardId: String # "card_1HKsSHKj0L34HDecsPacg32I"
  country: String # "US"
  dynamicLast4: String # "4242"
  expMonth: Int # 12
  expYear: Int # 2020
  funding: String # "credit"
  isApplePayCard: Boolean
  last4: String # "4242"
  name: String # "Kieran Gillen"
}

input StripeTokenExtra {
  billingContact: StripeContact
  shippingContact: StripeContact
  shippingMethod: String
}

input StripeContact {
  ISOCountryCode: String! # "US"
  city: String! # "Brooklyn"
  country: String! # "United States"
  name: String! # "Kieran Gillen"
  postalCode: String # "11211"
  state: String # "NY"
  street: String # "35 Havemeyer Stâ†µApt 5A"
  supplementarySubLocality: String # ""
}
