# import NotificationBar from "../User/user.graphql"

type Query {
  customer(where: CustomerWhereUniqueInput!): Customer
    @hasRole(roles: [Admin])
    @cacheControl(maxAge: 0)
  customers(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Customer]! @hasRole(roles: [Admin]) @cacheControl(maxAge: 0)
  customersConnection(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerConnection! @hasRole(roles: [Admin]) @cacheControl(maxAge: 0)
  pauseReason(where: PauseReasonWhereUniqueInput!): PauseReason
    @cacheControl(maxAge: 0)
  pauseReasons(
    where: PauseReasonWhereInput
    orderBy: PauseReasonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PauseReason] @cacheControl(maxAge: 0)
}

enum DeleteBagItemType {
  Delete
  Return
}

type Mutation {
  swapBagItem(oldItemID: ID!, seasonsUID: String!): BagItem!
    @hasRole(roles: [Admin])
  addToBag(
    item: ID!
    customerID: ID
    status: BagItemStatus
    saved: Boolean
  ): BagItem! @hasRole(roles: [Customer, Admin])
  # removeFromBag has been deprecated use deleteBagItem
  removeFromBag(item: ID!, saved: Boolean, customer: ID): BagItem!
    @hasRole(roles: [Customer])
  deleteBagItem(itemID: ID!, type: DeleteBagItemType): Boolean!
    @hasRole(roles: [Customer])
  updateCustomer(
    data: CustomerUpdateInput!
    where: CustomerWhereUniqueInput!
    # True if we want to notify the user upon salient changes. Defaults to true
    withContact: Boolean
  ): Customer @hasRole(roles: [Admin])
  addCustomerDetails(
    details: CustomerDetailCreateInput!
    status: CustomerStatus
    event: CustomerAnalyticsEvent
  ): Customer! @hasRole(roles: [Customer])
  updatePaymentAndShipping(
    # Billing address here has been deprecated, we only update billing on payment update
    billingAddress: AddressInput
    shippingAddress: AddressInput!
    phoneNumber: String!
  ): Boolean @hasRole(roles: [Customer])
  triageCustomer: TriageCustomerStatus @hasRole(roles: [Customer])
  updateNotificationBarReceipt(
    notification: NotificationBarReceiptUpdateInput
  ): CustomerNotificationBarReceipt @hasRole(roles: [Customer])
}

input AddressInput {
  city: String!
  postalCode: String!
  state: String!
  street1: String!
  street2: String
}

enum CustomerAnalyticsEvent {
  CompletedWaitlistForm
}

enum TriageCustomerStatus {
  Waitlisted
  Authorized
}

# Do not include "CreatedAccount" because the fact that this is being returned
# on a user object means they have created an account.
enum OnboardingStep {
  VerifiedPhone
  SetMeasurements
  SetStylePreferences
  SetShippingAddress
}

# isSwapped nowhere in sight
type Customer {
  id: ID!
  user: User!
  shouldRequestFeedback: Boolean
  shouldPayForNextReservation: Boolean
  status: CustomerStatus
  detail: CustomerDetail
  billingInfo: BillingInfo
  referralLink: String
  referrerId: String
  referrer: Customer
  referrees: [Customer]
  coupon: Coupon # id of any coupon to be applied to the customer
  # FIXME: When everyone is on iOS app version > 1.3, remove these two.
  plan: Plan @deprecated(reason: "replaced with customer.membership.plan")
  paymentPlan: PaymentPlan
    @deprecated(reason: "replaced with customer.membership.plan")

  bagItems(
    where: BagItemWhereInput
    orderBy: BagItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BagItem!]
  reservations(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Reservation!]
  invoices: [Invoice]
  transactions: [Transaction]
  membership: CustomerMembership
  onboardingSteps: [OnboardingStep!]!
  admissions: CustomerAdmissionsData
  utm: UTMData
  nextFreeSwapDateAt: DateTime
  authorizedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  grandfathered: Boolean!
}

input NotificationBarReceiptUpdateInput {
  notificationBarId: NotificationBarID!
  viewCount: Int
  clickCount: Int
}

type CustomerMembership {
  id: ID!
  subscriptionId: String!
  plan: PaymentPlan
  creditBalance: Int
  adjustedCreditBalance: Int
  currentRentalInvoice: RentalInvoice
  rentalInvoices: [RentalInvoice!]
  pauseRequests(
    where: PauseRequestWhereInput
    orderBy: PauseRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PauseRequest!]
  subscription: CustomerMembershipSubscriptionData
}
