type Query {
  customer(where: CustomerWhereUniqueInput!): Customer @hasRole(roles: [Admin])
  customers(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Customer]! @hasRole(roles: [Admin])
  customersConnection(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerConnection! @hasRole(roles: [Admin])
}

type Mutation {
  addToBag(item: ID!): BagItem! @hasRole(roles: [Customer])
  removeFromBag(item: ID!, saved: Boolean): BagItem! @hasRole(roles: [Customer])
  updateCustomer(
    data: CustomerUpdateInput!
    where: CustomerWhereUniqueInput!
    # True if you wish to notify the customer upon salient changes. False otherwise. Defaults true
    withContact: Boolean
  ): Customer @hasRole(roles: [Admin])
  addCustomerDetails(
    details: CustomerDetailCreateInput!
    status: CustomerStatus
    event: CustomerAnalyticsEvent
  ): Customer! @hasRole(roles: [Customer])
  updatePaymentAndShipping(
    billingAddress: AddressInput!
    shippingAddress: AddressInput!
    phoneNumber: String!
  ): Boolean @hasRole(roles: [Customer])
  triageCustomer: TriageCustomerStatus @hasRole(roles: [Customer])
}

input AddressInput {
  city: String!
  postalCode: String!
  state: String!
  street1: String!
  street2: String
}

enum CustomerAnalyticsEvent {
  CompletedWaitlistForm
}

enum TriageCustomerStatus {
  Waitlisted
  Authorized
}

# Do not include "CreatedAccount" because the fact that this is being returned
# on a user object means they have created an account.
enum OnboardingStep {
  VerifiedPhone
  SetMeasurements
  SetStylePreferences
  SetShippingAddress
}

type Customer {
  id: ID!
  user: User!
  shouldRequestFeedback: Boolean
  status: CustomerStatus
  detail: CustomerDetail
  billingInfo: BillingInfo

  # FIXME: When everyone is on iOS app version > 1.3, remove these two.
  plan: Plan @deprecated(reason: "replaced with customer.membership.plan")
  paymentPlan: PaymentPlan
    @deprecated(reason: "replaced with customer.membership.plan")

  bagItems(
    where: BagItemWhereInput
    orderBy: BagItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BagItem!]
  reservations(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Reservation!]
  invoices: [Invoice]
  transactions: [Transaction]
  membership: CustomerMembership
  onboardingSteps: [OnboardingStep!]!
}

type CustomerMembership {
  id: ID!
  subscriptionId: String!
  pauseRequests(
    where: PauseRequestWhereInput
    orderBy: PauseRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PauseRequest!]
}
