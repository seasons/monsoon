type Query {
  customer(where: CustomerWhereUniqueInput!): Customer
    @hasRole(roles: ["Admin"])
  customers(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Customer]! @hasRole(roles: ["Admin"])
  customersConnection(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerConnection! @hasRole(roles: ["Admin"])
}

type Mutation {
  addToBag(item: ID!): BagItem! @hasRole(roles: ["Customer"])
  removeFromBag(item: ID!, saved: Boolean): BagItem!
    @hasRole(roles: ["Customer"])
  updateCustomer(
    data: CustomerUpdateInput!
    where: CustomerWhereUniqueInput!
  ): Customer @hasRole(roles: ["Admin"])
  addCustomerDetails(
    details: CustomerDetailCreateInput!
    status: CustomerStatus
    event: CustomerAnalyticsEvent
  ): Customer! @hasRole(roles: ["Customer"])
  updatePaymentAndShipping(
    billingAddress: AddressInput!
    shippingAddress: AddressInput!
    phoneNumber: String!
  ): Boolean @hasRole(roles: ["Customer"])
}

input AddressInput {
  city: String!
  postalCode: String!
  state: String!
  street1: String!
  street2: String
}

enum CustomerAnalyticsEvent {
  CompletedWaitlistForm
}
