type Mutation {
  submitFitPic(
    image: Upload!
    location: LocationCreateOneInput
    options: FitPicSubmissionOptionsInput
  ): ID! @hasRole(roles: [Admin, Customer])
  reportFitPic(id: ID!): Boolean! @hasRole(roles: [Admin, Customer])
  updateFitPic(id: ID!, data: FitPicUpdateInput!): Boolean!
    @hasRole(roles: [Admin])
  deleteFitPic(id: ID!): Boolean! @hasRole(roles: [Admin])
  updateFitPicReport(id: ID!, data: FitPicReportUpdateInput!): Boolean!
    @hasRole(roles: [Admin])
}

type Query {
  fitPic(where: FitPicWhereUniqueInput!): FitPic @cacheControl(maxAge: 0)
  fitPics(
    where: FitPicWhereInput
    orderBy: FitPicOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [FitPic!]! @cacheControl(maxAge: 0)
  fitPicsConnection(
    where: FitPicWhereInput
    orderBy: FitPicOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): FitPicConnection! @cacheControl(maxAge: 0)
}

input FitPicSubmissionOptionsInput {
  instagramHandle: String
  includeInstagramHandle: Boolean
}

type FitPic {
  id: ID!
  author: String!
  image(
    width: Int
    height: Int
    size: ImageSize
    options: ImageOptionsInput
  ): Image!
  includeInstagramHandle: Boolean!
  location: Location
  products: [Product!]
  reports: [FitPicReport!]! @hasRole(roles: [Admin])
  status: FitPicStatus!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}
