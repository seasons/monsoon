type Query {
  reservation(where: ReservationWhereUniqueInput!): Reservation
    @hasRole(roles: [Customer, Admin, Partner])
    @cacheControl(maxAge: 0)
  reservations(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Reservation]!
    @hasRole(roles: [Customer, Admin, Partner])
    @cacheControl(maxAge: 0)
  reservationsConnection(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ReservationConnection!
    @hasRole(roles: [Customer, Admin, Partner])
    @cacheControl(maxAge: 0)
  reservationFeedback: ReservationFeedback @cacheControl(maxAge: 0)
  inboundReservations(
    skip: Int!
    take: Int!
  ): ReservationPhysicalProductConnection!
    @hasRole(roles: [Admin])
    @cacheControl(maxAge: 0)
  outboundReservations(
    skip: Int!
    take: Int!
  ): ReservationPhysicalProductConnection!
    @hasRole(roles: [Admin])
    @cacheControl(maxAge: 0)
  reservationProcessingStats: ReservationProcessingStats!
}

enum ReturnReason {
  DoneWearing
  FitTooSmall
  FitTooBig
  WasDamaged
  Other
}

input ReturnReasonInput {
  reservationPhysicalProductId: ID!
  reason: ReturnReason!
}

type Mutation {
  reserveItems(
    items: [ID!]
    options: ReserveItemsOptions
    shippingCode: ShippingCode
  ): Reservation @hasRole(roles: [Customer])
  reserveItemsForCustomer(
    customerID: ID!
    shippingCode: ShippingCode
  ): Reservation @hasRole(roles: [Admin])
  draftReservationLineItems(hasFreeSwap: Boolean): [OrderLineItem!]
  checkItemsAvailability(items: [ID!]!): Boolean! @hasRole(roles: [Customer])
  updateReservationPhysicalProduct(
    data: ReservationPhysicalProductUpdateInput!
    where: ReservationPhysicalProductWhereUniqueInput!
  ): ReservationPhysicalProduct!
  updateReservationFeedback(
    feedbackID: ID!
    input: ReservationFeedbackUpdateInput!
  ): ReservationFeedback! @hasRole(roles: [Customer, Admin])
  updateProductReservationFeedback(
    reservationFeedbackID: ID!
    productReservationID: ID!
    input: ProductVariantFeedbackUpdateInput!
    responses: JSON
  ): ProductVariantFeedback! @hasRole(roles: [Customer])
  updateReservation(
    data: ReservationUpdateInput!
    where: ReservationWhereUniqueInput!
  ): Reservation @hasRole(roles: [Admin])
  returnItems(
    items: [ID!]!
    returnReasons: [ReturnReasonInput!]
  ): [ReservationPhysicalProduct!] @hasRole(roles: [Customer])
  cancelReturn(bagItemId: ID): [ReservationPhysicalProduct!]
    @hasRole(roles: [Customer])
  processReturn(
    trackingNumber: String
    productStates: [ProductStateInput!]!
    droppedOffBy: ReservationDropOffAgent!
    customerId: String
  ): Boolean @hasRole(roles: [Admin])
  pickItems(bagItemIds: [ID!]!): [ReservationPhysicalProduct!]
    @hasRole(roles: [Admin])
  packItems(bagItemIds: [ID!]!): [ReservationPhysicalProduct!]
    @hasRole(roles: [Admin])
  generateShippingLabels(
    bagItemIds: [ID!]!
    options: GenerateShippingLabelOptionsInput
  ): [Package!] @hasRole(roles: [Admin])
  markAsLost(lostBagItemId: ID!): Boolean @hasRole(roles: [Admin])
  markAsPickedUp(bagItemIds: [ID]!): Boolean @hasRole(roles: [Admin])
  markNotReturned(bagItemIds: [ID]!): Boolean @hasRole(roles: [Admin])
  markAsCancelled(bagItemIds: [ID]!): Boolean @hasRole(roles: [Admin])
}

input GenerateShippingLabelOptionsInput {
  includeLabelForPickups: Boolean
}

type ReservationFeedback {
  id: ID!
  comment: String
    @deprecated(reason: "replaced with ProductVariantFeedback.review")
  feedbacks(
    where: ProductVariantFeedbackWhereInput
    orderBy: ProductVariantFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantFeedback!]
  rating: Rating
    @deprecated(reason: "replaced with ProductVariantFeedback.rating")
  user: User!
  reservation: Reservation!
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
}

enum ShippingCode {
  UPSGround
  UPSSelect
  Pickup
}

enum ReservationLineItemRecordType {
  Credit
  ProductVariant
  Reservation
  Fee
  Total
}

type ReservationLineItem implements LineItemInterface {
  id: ID!
  name: String
  price: Int!
  recordType: ReservationLineItemRecordType!
  taxPrice: Int
}

input ReservationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  customer: CustomerWhereInput
  sentPackage: PackageWhereInput
  returnedPackage: PackageWhereInput
  returnPackages_some: PackageWhereInput
  returnPackages_every: PackageWhereInput
  returnPackages_none: PackageWhereInput
  products_every: PhysicalProductWhereInput
  products_some: PhysicalProductWhereInput
  products_none: PhysicalProductWhereInput
  packageEvents_every: PackageTransitEventWhereInput
  packageEvents_some: PackageTransitEventWhereInput
  packageEvents_none: PackageTransitEventWhereInput
  reservationNumber: Int
  reservationNumber_not: Int
  reservationNumber_in: [Int!]
  reservationNumber_not_in: [Int!]
  reservationNumber_lt: Int
  reservationNumber_lte: Int
  reservationNumber_gt: Int
  reservationNumber_gte: Int
  phase: ReservationPhase
  phase_not: ReservationPhase
  phase_in: [ReservationPhase!]
  phase_not_in: [ReservationPhase!]
  shipped: Boolean
  shipped_not: Boolean
  status: ReservationStatus
  status_not: ReservationStatus
  status_in: [ReservationStatus!]
  status_not_in: [ReservationStatus!]
  shippedAt: DateTime
  shippedAt_not: DateTime
  shippedAt_in: [DateTime!]
  shippedAt_not_in: [DateTime!]
  shippedAt_lt: DateTime
  shippedAt_lte: DateTime
  shippedAt_gt: DateTime
  shippedAt_gte: DateTime
  receivedAt: DateTime
  receivedAt_not: DateTime
  receivedAt_in: [DateTime!]
  receivedAt_not_in: [DateTime!]
  receivedAt_lt: DateTime
  receivedAt_lte: DateTime
  receivedAt_gt: DateTime
  receivedAt_gte: DateTime
  reminderSentAt: DateTime
  reminderSentAt_not: DateTime
  reminderSentAt_in: [DateTime!]
  reminderSentAt_not_in: [DateTime!]
  reminderSentAt_lt: DateTime
  reminderSentAt_lte: DateTime
  reminderSentAt_gt: DateTime
  reminderSentAt_gte: DateTime
  statusUpdatedAt: DateTime
  statusUpdatedAt_not: DateTime
  statusUpdatedAt_in: [DateTime!]
  statusUpdatedAt_not_in: [DateTime!]
  statusUpdatedAt_lt: DateTime
  statusUpdatedAt_lte: DateTime
  statusUpdatedAt_gt: DateTime
  statusUpdatedAt_gte: DateTime
  receipt: ReservationReceiptWhereInput
  lastLocation: LocationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
  # Global search query which will be handled by algolia
  q: String
}

input ReservationProcessReturnInput {
  reservationNumber: Int!
  productStates: [ProductStateInput!]!
  trackingNumber: String
}

enum ReservationDropOffAgent {
  UPS
  Customer
}

input ProductStateInput {
  productUID: String!
  returned: Boolean!
  productStatus: PhysicalProductStatus!
  notes: String
}

input ReserveItemsOptions {
  dryRun: Boolean
  timeWindowID: ID
  pickupDate: DateTime
}

enum ReservationAdminMessage {
  PreviousReservationOnHold
  PartiallyPacked
  None
}

type Reservation @cacheControl(maxAge: 0) {
  id: ID!
  user: User!
  customer: Customer!
  sentPackage: Package
  returnedPackage: Package
  feedback: ReservationFeedback
  lastLocation: Location
  lineItems(filterBy: ReservationLineItemsFilter): [ReservationLineItem]
  products: [PhysicalProduct!]!
  newProducts: [PhysicalProduct!]!
  returnedProducts: [PhysicalProduct!]!
  reservationPhysicalProducts: [ReservationPhysicalProduct!]!
  packageEvents(
    where: PackageTransitEventWhereInput
    orderBy: PackageTransitEventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PackageTransitEvent!]
  images(width: Int, height: Int, size: ImageSize): [Image!]!
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  returnAt: DateTime
  returnedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  pickupDate: DateTime
  pickupWindowId: String
  pickupWindow: TimeWindow
  adminLogs: [AdminActionLog!]! @hasRole(roles: [Admin])
  shippingOption: ShippingOption
    @deprecated(reason: "Use shippingMethod instead")
  shippingMethod: ShippingMethod
  adminMessage: ReservationAdminMessage! @hasRole(roles: [Admin])
}

enum ReservationPhysicalProductStatus {
  Queued
  Picked
  Packed
  ScannedOnInbound
  InTransitInbound
  ScannedOnOutbound
  InTransitOutbound
  AtHome
  DeliveredToCustomer
  DeliveredToBusiness
  ReturnPending
  ReturnProcessed
  ResetEarly
  Lost
  Cancelled
}

enum ReservationDropOffAgent {
  Customer
  UPS
}

type ReservationPhysicalProductEdge {
  node: ReservationPhysicalProduct!
  cursor: String!
}

type AggregateReservationPhysicalProduct {
  count: Int!
}

type ReservationPhysicalProductConnection @cacheControl(maxAge: 0) {
  pageInfo: PageInfo!
  edges: [ReservationPhysicalProductEdge]!
  totalCount: Int!
}

type ReservationPhysicalProduct @cacheControl(maxAge: 0) {
  id: ID!

  physicalProduct: PhysicalProduct
  reservation: Reservation
  bagItem: BagItem
  isOnHold: Boolean
  shippingMethod: ShippingMethod

  isNew: Boolean!
  isPurchased: Boolean!
  purchasedAt: DateTime

  droppedOffBy: ReservationDropOffAgent
  droppedOffAt: DateTime

  hasReturnProcessed: Boolean!
  returnProcessedAt: DateTime

  isResetEarlyByAdmin: Boolean!
  resetEarlyByAdminAt: DateTime

  hasCustomerReturnIntent: Boolean!
  customerReturnIntentAt: DateTime

  customer: Customer!

  isLost: Boolean
  lostAt: DateTime
  lostInPhase: ReservationPhase

  isDeliveredToCustomer: Boolean!
  deliveredToCustomerAt: DateTime

  isDeliveredToBusiness: Boolean!
  deliveredToBusinessAt: DateTime

  hasBeenScannedOnInbound: Boolean!
  scannedOnInboundAt: DateTime

  hasBeenScannedOnOutbound: Boolean!
  scannedOnOutboundAt: DateTime

  outboundPackage: Package
  potentialInboundPackage: Package
  utilizedInboundPackage: Package

  status: ReservationPhysicalProductStatus!

  createdAt: DateTime
  updatedAt: DateTime
}

type ReservationProcessingStats @cacheControl(maxAge: 0) {
  id: ID!
  initialNumQueuedItems: Int!
  initialNumQueuedReservations: Int!
  currentNumQueuedItems: Int!
  currentNumQueuedReservations: Int!
  initialNumDeliveredToBusinessItems: Int!
  currentNumDeliveredToBusinessItems: Int!
  day: DateTime
  updatedAt: DateTime
}

type AdminActionLog {
  actionId: Int!
  entityId: String!
  tableName: String!
  activeAdminUser: User!
  triggeredAt: DateTime!
  action: AdminAction!
  rowData: Json!
  changedFields: Json
  statementOnly: Boolean!
  interpretation: AdminActionLogInterpretation
}

input ReservationPhysicalProductUpdateInput {
  physicalProduct: PhysicalProductUpdateInput
  reservation: ReservationUpdateInput
  bagItem: BagItemUpdateInput
  isOnHold: Boolean
  returnReason: ReturnReason

  shippingMethod: ShippingMethodUpdateInput
  isNew: Boolean
  isPurchased: Boolean
  purchasedAt: DateTime
  droppedOffBy: ReservationDropOffAgent
  droppedOffAt: DateTime
  hasReturnProcessed: Boolean
  returnProcessedAt: DateTime
  isResetEarlyByAdmin: Boolean
  resetEarlyByAdminAt: DateTime
  hasCustomerReturnIntent: Boolean
  customerReturnIntentAt: DateTime
  isLost: Boolean
  lostAt: DateTime
  lostInPhase: ReservationPhase
  isDeliveredToCustomer: Boolean
  deliveredToCustomerAt: DateTime
  isDeliveredToBusiness: Boolean
  deliveredToBusinessAt: DateTime
  hasBeenScannedOnInbound: Boolean
  scannedOnInboundAt: DateTime
  hasBeenScannedOnOutbound: Boolean
  scannedOnOutboundAt: DateTime
  status: ReservationPhysicalProductStatus
}

input ReservationPhysicalProductWhereUniqueInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID

  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
}
