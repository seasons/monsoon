# source: http://localhost:4466/monsoon/dev
<<<<<<< HEAD
# timestamp: Mon Aug 10 2020 14:13:28 GMT+0200 (Central European Summer Time)
=======
<<<<<<< HEAD
# timestamp: Wed Aug 05 2020 14:28:25 GMT-0400 (Eastern Daylight Time)
>>>>>>> Rebase

type AggregateBagItem {
  count: Int!
}

type AggregateBillingInfo {
  count: Int!
}

type AggregateBottomSize {
  count: Int!
}

type AggregateBrand {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateCollection {
  count: Int!
}

type AggregateCollectionGroup {
  count: Int!
}
=======
# timestamp: Mon Aug 03 2020 11:14:52 GMT-0600 (Mountain Daylight Time)
>>>>>>> Rebase

type AggregateBagItem {
  count: Int!
}

type AggregateBillingInfo {
  count: Int!
}

type AggregateBottomSize {
  count: Int!
}

type AggregateBrand {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateCollection {
  count: Int!
}

type AggregateCollectionGroup {
  count: Int!
}

type AggregateColor {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateCustomerDetail {
  count: Int!
}

type AggregateCustomerMembership {
  count: Int!
}

type AggregateEmailReceipt {
  count: Int!
}

type AggregateHomepageProductRail {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateLabel {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregatePackage {
  count: Int!
}

type AggregatePackageTransitEvent {
  count: Int!
}

type AggregatePauseRequest {
  count: Int!
}

type AggregatePaymentPlan {
  count: Int!
}

type AggregatePhysicalProduct {
  count: Int!
}

type AggregatePhysicalProductInventoryStatusChange {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductFunction {
  count: Int!
}

type AggregateProductMaterialCategory {
  count: Int!
}

type AggregateProductModel {
  count: Int!
}

type AggregateProductRequest {
  count: Int!
}

type AggregateProductStatusChange {
  count: Int!
}

type AggregateProductVariant {
  count: Int!
}

type AggregateProductVariantFeedback {
  count: Int!
}

type AggregateProductVariantFeedbackQuestion {
  count: Int!
}

type AggregateProductVariantWant {
  count: Int!
}

type AggregatePushNotificationReceipt {
  count: Int!
}

type AggregateRecentlyViewedProduct {
  count: Int!
}

type AggregateReservation {
  count: Int!
}

type AggregateReservationFeedback {
  count: Int!
}

type AggregateReservationReceipt {
  count: Int!
}

type AggregateReservationReceiptItem {
  count: Int!
}

type AggregateSize {
  count: Int!
}

type AggregateSmsReceipt {
  count: Int!
}

type AggregateStylePreferences {
  count: Int!
}

type AggregateStyleSubmission {
  count: Int!
}

type AggregateStyleSubmissionReport {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTopSize {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserPushNotification {
  count: Int!
}

type AggregateUserPushNotificationInterest {
  count: Int!
}

type AggregateWarehouseLocation {
  count: Int!
}

type AggregateWarehouseLocationConstraint {
  count: Int!
}

type BagItem implements Node {
  id: ID!
  customer: Customer!
  productVariant: ProductVariant!
  position: Int
  saved: Boolean
  status: BagItemStatus!
}

"""
A connection to a list of items.
"""
type BagItemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BagItemEdge]!
  aggregate: AggregateBagItem!
}

input BagItemCreateInput {
  id: ID
  position: Int
  saved: Boolean
  status: BagItemStatus!
  customer: CustomerCreateOneWithoutBagItemsInput!
  productVariant: ProductVariantCreateOneInput!
}

input BagItemCreateManyWithoutCustomerInput {
  create: [BagItemCreateWithoutCustomerInput!]
  connect: [BagItemWhereUniqueInput!]
}

input BagItemCreateWithoutCustomerInput {
  id: ID
  position: Int
  saved: Boolean
  status: BagItemStatus!
  productVariant: ProductVariantCreateOneInput!
}

"""
An edge in a connection.
"""
type BagItemEdge {
  """
  The item at the end of the edge.
  """
  node: BagItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BagItemOrderByInput {
  id_ASC
  id_DESC
  position_ASC
  position_DESC
  saved_ASC
  saved_DESC
  status_ASC
  status_DESC
}

type BagItemPreviousValues {
  id: ID!
  position: Int
  saved: Boolean
  status: BagItemStatus!
}

input BagItemScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BagItemScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BagItemScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BagItemScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
<<<<<<< HEAD

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  position: Int

  """
  All values that are not equal to given value.
  """
  position_not: Int

  """
  All values that are contained in given list.
  """
  position_in: [Int!]

  """
  All values that are not contained in given list.
  """
  position_not_in: [Int!]

  """
  All values less than the given value.
  """
  position_lt: Int

  """
  All values less than or equal the given value.
  """
  position_lte: Int

  """
  All values greater than the given value.
  """
  position_gt: Int

  """
  All values greater than or equal the given value.
  """
  position_gte: Int
  saved: Boolean

  """
  All values that are not equal to given value.
  """
  saved_not: Boolean
  status: BagItemStatus

  """
  All values that are not equal to given value.
  """
  status_not: BagItemStatus

  """
  All values that are contained in given list.
  """
  status_in: [BagItemStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [BagItemStatus!]
}
=======
>>>>>>> Rebase

  """
  All values less than the given value.
  """
  id_lt: ID

<<<<<<< HEAD
type BagItemSubscriptionPayload {
  mutation: MutationType!
  node: BagItem
  updatedFields: [String!]
  previousValues: BagItemPreviousValues
}

input BagItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BagItemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BagItemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BagItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BagItemWhereInput
}

input BagItemUpdateInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
  customer: CustomerUpdateOneRequiredWithoutBagItemsInput
  productVariant: ProductVariantUpdateOneRequiredInput
}

input BagItemUpdateManyDataInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
}

input BagItemUpdateManyMutationInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
}

input BagItemUpdateManyWithoutCustomerInput {
  create: [BagItemCreateWithoutCustomerInput!]
  connect: [BagItemWhereUniqueInput!]
  set: [BagItemWhereUniqueInput!]
  disconnect: [BagItemWhereUniqueInput!]
  delete: [BagItemWhereUniqueInput!]
  update: [BagItemUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [BagItemUpdateManyWithWhereNestedInput!]
  deleteMany: [BagItemScalarWhereInput!]
  upsert: [BagItemUpsertWithWhereUniqueWithoutCustomerInput!]
}

input BagItemUpdateManyWithWhereNestedInput {
  where: BagItemScalarWhereInput!
  data: BagItemUpdateManyDataInput!
}

input BagItemUpdateWithoutCustomerDataInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
  productVariant: ProductVariantUpdateOneRequiredInput
}

input BagItemUpdateWithWhereUniqueWithoutCustomerInput {
  where: BagItemWhereUniqueInput!
  data: BagItemUpdateWithoutCustomerDataInput!
}

input BagItemUpsertWithWhereUniqueWithoutCustomerInput {
  where: BagItemWhereUniqueInput!
  update: BagItemUpdateWithoutCustomerDataInput!
  create: BagItemCreateWithoutCustomerInput!
}

input BagItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BagItemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BagItemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BagItemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  position: Int

  """
  All values that are not equal to given value.
  """
  position_not: Int

  """
  All values that are contained in given list.
  """
  position_in: [Int!]

  """
  All values that are not contained in given list.
  """
  position_not_in: [Int!]

  """
  All values less than the given value.
  """
  position_lt: Int

  """
  All values less than or equal the given value.
  """
  position_lte: Int

  """
  All values greater than the given value.
  """
  position_gt: Int

  """
  All values greater than or equal the given value.
  """
  position_gte: Int
  saved: Boolean

  """
  All values that are not equal to given value.
  """
  saved_not: Boolean
  status: BagItemStatus

  """
  All values that are not equal to given value.
  """
  status_not: BagItemStatus

  """
  All values that are contained in given list.
  """
  status_in: [BagItemStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [BagItemStatus!]
  customer: CustomerWhereInput
  productVariant: ProductVariantWhereInput
}

input BagItemWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type BillingInfo implements Node {
  id: ID!
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type BillingInfoConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BillingInfoEdge]!
  aggregate: AggregateBillingInfo!
}

input BillingInfoCreateInput {
  id: ID
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoCreateOneInput {
  create: BillingInfoCreateInput
  connect: BillingInfoWhereUniqueInput
}

"""
An edge in a connection.
"""
type BillingInfoEdge {
  """
  The item at the end of the edge.
  """
  node: BillingInfo!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BillingInfoOrderByInput {
  id_ASC
  id_DESC
  brand_ASC
  brand_DESC
  name_ASC
  name_DESC
  last_digits_ASC
  last_digits_DESC
  expiration_month_ASC
  expiration_month_DESC
  expiration_year_ASC
  expiration_year_DESC
  street1_ASC
  street1_DESC
  street2_ASC
  street2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  country_ASC
  country_DESC
  postal_code_ASC
  postal_code_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BillingInfoPreviousValues {
  id: ID!
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BillingInfoSubscriptionPayload {
  mutation: MutationType!
  node: BillingInfo
  updatedFields: [String!]
  previousValues: BillingInfoPreviousValues
}

input BillingInfoSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BillingInfoSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BillingInfoSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BillingInfoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BillingInfoWhereInput
}

input BillingInfoUpdateDataInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoUpdateInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
=======
  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  position: Int

  """
  All values that are not equal to given value.
  """
  position_not: Int

  """
  All values that are contained in given list.
  """
  position_in: [Int!]

  """
  All values that are not contained in given list.
  """
  position_not_in: [Int!]

  """
  All values less than the given value.
  """
  position_lt: Int

  """
  All values less than or equal the given value.
  """
  position_lte: Int

  """
  All values greater than the given value.
  """
  position_gt: Int

  """
  All values greater than or equal the given value.
  """
  position_gte: Int
  saved: Boolean

  """
  All values that are not equal to given value.
  """
  saved_not: Boolean
  status: BagItemStatus

  """
  All values that are not equal to given value.
  """
  status_not: BagItemStatus

  """
  All values that are contained in given list.
  """
  status_in: [BagItemStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [BagItemStatus!]
}

enum BagItemStatus {
  Added
  Reserved
  Received
}

type BagItemSubscriptionPayload {
  mutation: MutationType!
  node: BagItem
  updatedFields: [String!]
  previousValues: BagItemPreviousValues
}

input BagItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BagItemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BagItemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BagItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BagItemWhereInput
}

input BagItemUpdateInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
  customer: CustomerUpdateOneRequiredWithoutBagItemsInput
  productVariant: ProductVariantUpdateOneRequiredInput
}

input BagItemUpdateManyDataInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
}

input BagItemUpdateManyMutationInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
}

input BagItemUpdateManyWithoutCustomerInput {
  create: [BagItemCreateWithoutCustomerInput!]
  connect: [BagItemWhereUniqueInput!]
  set: [BagItemWhereUniqueInput!]
  disconnect: [BagItemWhereUniqueInput!]
  delete: [BagItemWhereUniqueInput!]
  update: [BagItemUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [BagItemUpdateManyWithWhereNestedInput!]
  deleteMany: [BagItemScalarWhereInput!]
  upsert: [BagItemUpsertWithWhereUniqueWithoutCustomerInput!]
}

input BagItemUpdateManyWithWhereNestedInput {
  where: BagItemScalarWhereInput!
  data: BagItemUpdateManyDataInput!
}

input BagItemUpdateWithoutCustomerDataInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
  productVariant: ProductVariantUpdateOneRequiredInput
}

input BagItemUpdateWithWhereUniqueWithoutCustomerInput {
  where: BagItemWhereUniqueInput!
  data: BagItemUpdateWithoutCustomerDataInput!
}

input BagItemUpsertWithWhereUniqueWithoutCustomerInput {
  where: BagItemWhereUniqueInput!
  update: BagItemUpdateWithoutCustomerDataInput!
  create: BagItemCreateWithoutCustomerInput!
}

input BagItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BagItemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BagItemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BagItemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  position: Int

  """
  All values that are not equal to given value.
  """
  position_not: Int

  """
  All values that are contained in given list.
  """
  position_in: [Int!]

  """
  All values that are not contained in given list.
  """
  position_not_in: [Int!]

  """
  All values less than the given value.
  """
  position_lt: Int

  """
  All values less than or equal the given value.
  """
  position_lte: Int

  """
  All values greater than the given value.
  """
  position_gt: Int

  """
  All values greater than or equal the given value.
  """
  position_gte: Int
  saved: Boolean

  """
  All values that are not equal to given value.
  """
  saved_not: Boolean
  status: BagItemStatus

  """
  All values that are not equal to given value.
  """
  status_not: BagItemStatus

  """
  All values that are contained in given list.
  """
  status_in: [BagItemStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [BagItemStatus!]
  customer: CustomerWhereInput
  productVariant: ProductVariantWhereInput
}

input BagItemWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type BillingInfo implements Node {
  id: ID!
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

"""
A connection to a list of items.
"""
type BillingInfoConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BillingInfoEdge]!
  aggregate: AggregateBillingInfo!
}

input BillingInfoCreateInput {
  id: ID
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
>>>>>>> Rebase
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

<<<<<<< HEAD
input BillingInfoUpdateManyMutationInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoUpdateOneInput {
  create: BillingInfoCreateInput
  connect: BillingInfoWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BillingInfoUpdateDataInput
  upsert: BillingInfoUpsertNestedInput
}

input BillingInfoUpsertNestedInput {
  update: BillingInfoUpdateDataInput!
  create: BillingInfoCreateInput!
}

input BillingInfoWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BillingInfoWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BillingInfoWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BillingInfoWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  brand: String

  """
  All values that are not equal to given value.
  """
  brand_not: String

  """
  All values that are contained in given list.
  """
  brand_in: [String!]

  """
  All values that are not contained in given list.
  """
  brand_not_in: [String!]

  """
  All values less than the given value.
  """
  brand_lt: String

  """
  All values less than or equal the given value.
  """
  brand_lte: String

  """
  All values greater than the given value.
  """
  brand_gt: String

  """
  All values greater than or equal the given value.
  """
  brand_gte: String

  """
  All values containing the given string.
  """
  brand_contains: String

  """
  All values not containing the given string.
  """
  brand_not_contains: String

  """
  All values starting with the given string.
  """
  brand_starts_with: String

  """
  All values not starting with the given string.
  """
  brand_not_starts_with: String

  """
  All values ending with the given string.
  """
  brand_ends_with: String

  """
  All values not ending with the given string.
  """
  brand_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  last_digits: String

  """
  All values that are not equal to given value.
  """
  last_digits_not: String

  """
  All values that are contained in given list.
  """
  last_digits_in: [String!]

  """
  All values that are not contained in given list.
  """
  last_digits_not_in: [String!]

  """
  All values less than the given value.
  """
  last_digits_lt: String

  """
  All values less than or equal the given value.
  """
  last_digits_lte: String

  """
  All values greater than the given value.
  """
  last_digits_gt: String

  """
  All values greater than or equal the given value.
  """
  last_digits_gte: String

  """
  All values containing the given string.
  """
  last_digits_contains: String

  """
  All values not containing the given string.
  """
  last_digits_not_contains: String

  """
  All values starting with the given string.
  """
  last_digits_starts_with: String

  """
  All values not starting with the given string.
  """
  last_digits_not_starts_with: String

  """
  All values ending with the given string.
  """
  last_digits_ends_with: String

  """
  All values not ending with the given string.
  """
  last_digits_not_ends_with: String
  expiration_month: Int

  """
  All values that are not equal to given value.
  """
  expiration_month_not: Int

  """
  All values that are contained in given list.
  """
  expiration_month_in: [Int!]

  """
  All values that are not contained in given list.
  """
  expiration_month_not_in: [Int!]

  """
  All values less than the given value.
  """
  expiration_month_lt: Int

  """
  All values less than or equal the given value.
  """
  expiration_month_lte: Int

  """
  All values greater than the given value.
  """
  expiration_month_gt: Int

  """
  All values greater than or equal the given value.
  """
  expiration_month_gte: Int
  expiration_year: Int

  """
  All values that are not equal to given value.
  """
  expiration_year_not: Int

  """
  All values that are contained in given list.
  """
  expiration_year_in: [Int!]

  """
  All values that are not contained in given list.
  """
  expiration_year_not_in: [Int!]

  """
  All values less than the given value.
  """
  expiration_year_lt: Int

  """
  All values less than or equal the given value.
  """
  expiration_year_lte: Int

  """
  All values greater than the given value.
  """
  expiration_year_gt: Int

  """
  All values greater than or equal the given value.
  """
  expiration_year_gte: Int
  street1: String

  """
  All values that are not equal to given value.
  """
  street1_not: String

  """
  All values that are contained in given list.
  """
  street1_in: [String!]

  """
  All values that are not contained in given list.
  """
  street1_not_in: [String!]

  """
  All values less than the given value.
  """
  street1_lt: String

  """
  All values less than or equal the given value.
  """
  street1_lte: String

  """
  All values greater than the given value.
  """
  street1_gt: String

  """
  All values greater than or equal the given value.
  """
  street1_gte: String

  """
  All values containing the given string.
  """
  street1_contains: String

  """
  All values not containing the given string.
  """
  street1_not_contains: String

  """
  All values starting with the given string.
  """
  street1_starts_with: String

  """
  All values not starting with the given string.
  """
  street1_not_starts_with: String

  """
  All values ending with the given string.
  """
  street1_ends_with: String

  """
  All values not ending with the given string.
  """
  street1_not_ends_with: String
  street2: String

  """
  All values that are not equal to given value.
  """
  street2_not: String

  """
  All values that are contained in given list.
  """
  street2_in: [String!]

  """
  All values that are not contained in given list.
  """
  street2_not_in: [String!]

  """
  All values less than the given value.
  """
  street2_lt: String

  """
  All values less than or equal the given value.
  """
  street2_lte: String

  """
  All values greater than the given value.
  """
  street2_gt: String

  """
  All values greater than or equal the given value.
  """
  street2_gte: String

  """
  All values containing the given string.
  """
  street2_contains: String

  """
  All values not containing the given string.
  """
  street2_not_contains: String

  """
  All values starting with the given string.
  """
  street2_starts_with: String

  """
  All values not starting with the given string.
  """
  street2_not_starts_with: String

  """
  All values ending with the given string.
  """
  street2_ends_with: String

  """
  All values not ending with the given string.
  """
  street2_not_ends_with: String
  city: String

  """
  All values that are not equal to given value.
  """
  city_not: String

  """
  All values that are contained in given list.
  """
  city_in: [String!]

  """
  All values that are not contained in given list.
  """
  city_not_in: [String!]

  """
  All values less than the given value.
  """
  city_lt: String

  """
  All values less than or equal the given value.
  """
  city_lte: String

  """
  All values greater than the given value.
  """
  city_gt: String

  """
  All values greater than or equal the given value.
  """
  city_gte: String

  """
  All values containing the given string.
  """
  city_contains: String

  """
  All values not containing the given string.
  """
  city_not_contains: String

  """
  All values starting with the given string.
  """
  city_starts_with: String

  """
  All values not starting with the given string.
  """
  city_not_starts_with: String

  """
  All values ending with the given string.
  """
  city_ends_with: String

  """
  All values not ending with the given string.
  """
  city_not_ends_with: String
  state: String

  """
  All values that are not equal to given value.
  """
  state_not: String

  """
  All values that are contained in given list.
  """
  state_in: [String!]

  """
  All values that are not contained in given list.
  """
  state_not_in: [String!]

  """
  All values less than the given value.
  """
  state_lt: String

  """
  All values less than or equal the given value.
  """
  state_lte: String

  """
  All values greater than the given value.
  """
  state_gt: String

  """
  All values greater than or equal the given value.
  """
  state_gte: String

  """
  All values containing the given string.
  """
  state_contains: String

  """
  All values not containing the given string.
  """
  state_not_contains: String

  """
  All values starting with the given string.
  """
  state_starts_with: String

  """
  All values not starting with the given string.
  """
  state_not_starts_with: String

  """
  All values ending with the given string.
  """
  state_ends_with: String

  """
  All values not ending with the given string.
  """
  state_not_ends_with: String
  country: String

  """
  All values that are not equal to given value.
  """
  country_not: String

  """
  All values that are contained in given list.
  """
  country_in: [String!]

  """
  All values that are not contained in given list.
  """
  country_not_in: [String!]

  """
  All values less than the given value.
  """
  country_lt: String

  """
  All values less than or equal the given value.
  """
  country_lte: String

  """
  All values greater than the given value.
  """
  country_gt: String

  """
  All values greater than or equal the given value.
  """
  country_gte: String

  """
  All values containing the given string.
  """
  country_contains: String

  """
  All values not containing the given string.
  """
  country_not_contains: String

  """
  All values starting with the given string.
  """
  country_starts_with: String

  """
  All values not starting with the given string.
  """
  country_not_starts_with: String

  """
  All values ending with the given string.
  """
  country_ends_with: String

  """
  All values not ending with the given string.
  """
  country_not_ends_with: String
  postal_code: String

  """
  All values that are not equal to given value.
  """
  postal_code_not: String

  """
  All values that are contained in given list.
  """
  postal_code_in: [String!]

  """
  All values that are not contained in given list.
  """
  postal_code_not_in: [String!]

  """
  All values less than the given value.
  """
  postal_code_lt: String

  """
  All values less than or equal the given value.
  """
  postal_code_lte: String

  """
  All values greater than the given value.
  """
  postal_code_gt: String

  """
  All values greater than or equal the given value.
  """
  postal_code_gte: String

  """
  All values containing the given string.
  """
  postal_code_contains: String

  """
  All values not containing the given string.
  """
  postal_code_not_contains: String

  """
  All values starting with the given string.
  """
  postal_code_starts_with: String

  """
  All values not starting with the given string.
  """
  postal_code_not_starts_with: String

  """
  All values ending with the given string.
  """
  postal_code_ends_with: String

  """
  All values not ending with the given string.
  """
  postal_code_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input BillingInfoWhereUniqueInput {
  id: ID
}

type BottomSize implements Node {
  id: ID!
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

"""
A connection to a list of items.
"""
type BottomSizeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BottomSizeEdge]!
g}

input BottomSizeCreateInput {
  id: ID
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeCreateOneInput {
  create: BottomSizeCreateInput
  connect: BottomSizeWhereUniqueInput
}

"""
An edge in a connection.
"""
type BottomSizeEdge {
  """
  The item at the end of the edge.
  """
  node: BottomSize!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BottomSizeOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  value_ASC
  value_DESC
  waist_ASC
  waist_DESC
  rise_ASC
  rise_DESC
  hem_ASC
E  iseam_ASC
  inseam_DESC
}

type BottomSizePreviousValues {
  id: ID!
=======
input BillingInfoCreateOneInput {
  create: BillingInfoCreateInput
  connect: BillingInfoWhereUniqueInput
}

"""
An edge in a connection.
"""
type BillingInfoEdge {
  """
  The item at the end of the edge.
  """
  node: BillingInfo!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BillingInfoOrderByInput {
  id_ASC
  id_DESC
  brand_ASC
  brand_DESC
  name_ASC
  name_DESC
  last_digits_ASC
  last_digits_DESC
  expiration_month_ASC
  expiration_month_DESC
  expiration_year_ASC
  expiration_year_DESC
  street1_ASC
  street1_DESC
  street2_ASC
  street2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  country_ASC
  country_DESC
  postal_code_ASC
  postal_code_DESC
}

type BillingInfoPreviousValues {
  id: ID!
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

type BillingInfoSubscriptionPayload {
  mutation: MutationType!
  node: BillingInfo
  updatedFields: [String!]
  previousValues: BillingInfoPreviousValues
}

input BillingInfoSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BillingInfoSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BillingInfoSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BillingInfoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BillingInfoWhereInput
}

input BillingInfoUpdateDataInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoUpdateInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoUpdateManyMutationInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoUpdateOneInput {
  create: BillingInfoCreateInput
  connect: BillingInfoWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BillingInfoUpdateDataInput
  upsert: BillingInfoUpsertNestedInput
}

input BillingInfoUpsertNestedInput {
  update: BillingInfoUpdateDataInput!
  create: BillingInfoCreateInput!
}

input BillingInfoWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BillingInfoWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BillingInfoWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BillingInfoWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  brand: String

  """
  All values that are not equal to given value.
  """
  brand_not: String

  """
  All values that are contained in given list.
  """
  brand_in: [String!]

  """
  All values that are not contained in given list.
  """
  brand_not_in: [String!]

  """
  All values less than the given value.
  """
  brand_lt: String

  """
  All values less than or equal the given value.
  """
  brand_lte: String

  """
  All values greater than the given value.
  """
  brand_gt: String

  """
  All values greater than or equal the given value.
  """
  brand_gte: String

  """
  All values containing the given string.
  """
  brand_contains: String

  """
  All values not containing the given string.
  """
  brand_not_contains: String

  """
  All values starting with the given string.
  """
  brand_starts_with: String

  """
  All values not starting with the given string.
  """
  brand_not_starts_with: String

  """
  All values ending with the given string.
  """
  brand_ends_with: String

  """
  All values not ending with the given string.
  """
  brand_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  last_digits: String

  """
  All values that are not equal to given value.
  """
  last_digits_not: String

  """
  All values that are contained in given list.
  """
  last_digits_in: [String!]

  """
  All values that are not contained in given list.
  """
  last_digits_not_in: [String!]

  """
  All values less than the given value.
  """
  last_digits_lt: String

  """
  All values less than or equal the given value.
  """
  last_digits_lte: String

  """
  All values greater than the given value.
  """
  last_digits_gt: String

  """
  All values greater than or equal the given value.
  """
  last_digits_gte: String

  """
  All values containing the given string.
  """
  last_digits_contains: String

  """
  All values not containing the given string.
  """
  last_digits_not_contains: String

  """
  All values starting with the given string.
  """
  last_digits_starts_with: String

  """
  All values not starting with the given string.
  """
  last_digits_not_starts_with: String

  """
  All values ending with the given string.
  """
  last_digits_ends_with: String

  """
  All values not ending with the given string.
  """
  last_digits_not_ends_with: String
  expiration_month: Int

  """
  All values that are not equal to given value.
  """
  expiration_month_not: Int

  """
  All values that are contained in given list.
  """
  expiration_month_in: [Int!]

  """
  All values that are not contained in given list.
  """
  expiration_month_not_in: [Int!]

  """
  All values less than the given value.
  """
  expiration_month_lt: Int

  """
  All values less than or equal the given value.
  """
  expiration_month_lte: Int

  """
  All values greater than the given value.
  """
  expiration_month_gt: Int

  """
  All values greater than or equal the given value.
  """
  expiration_month_gte: Int
  expiration_year: Int

  """
  All values that are not equal to given value.
  """
  expiration_year_not: Int

  """
  All values that are contained in given list.
  """
  expiration_year_in: [Int!]

  """
  All values that are not contained in given list.
  """
  expiration_year_not_in: [Int!]

  """
  All values less than the given value.
  """
  expiration_year_lt: Int

  """
  All values less than or equal the given value.
  """
  expiration_year_lte: Int

  """
  All values greater than the given value.
  """
  expiration_year_gt: Int

  """
  All values greater than or equal the given value.
  """
  expiration_year_gte: Int
  street1: String

  """
  All values that are not equal to given value.
  """
  street1_not: String

  """
  All values that are contained in given list.
  """
  street1_in: [String!]

  """
  All values that are not contained in given list.
  """
  street1_not_in: [String!]

  """
  All values less than the given value.
  """
  street1_lt: String

  """
  All values less than or equal the given value.
  """
  street1_lte: String

  """
  All values greater than the given value.
  """
  street1_gt: String

  """
  All values greater than or equal the given value.
  """
  street1_gte: String

  """
  All values containing the given string.
  """
  street1_contains: String

  """
  All values not containing the given string.
  """
  street1_not_contains: String

  """
  All values starting with the given string.
  """
  street1_starts_with: String

  """
  All values not starting with the given string.
  """
  street1_not_starts_with: String

  """
  All values ending with the given string.
  """
  street1_ends_with: String

  """
  All values not ending with the given string.
  """
  street1_not_ends_with: String
  street2: String

  """
  All values that are not equal to given value.
  """
  street2_not: String

  """
  All values that are contained in given list.
  """
  street2_in: [String!]

  """
  All values that are not contained in given list.
  """
  street2_not_in: [String!]

  """
  All values less than the given value.
  """
  street2_lt: String

  """
  All values less than or equal the given value.
  """
  street2_lte: String

  """
  All values greater than the given value.
  """
  street2_gt: String

  """
  All values greater than or equal the given value.
  """
  street2_gte: String

  """
  All values containing the given string.
  """
  street2_contains: String

  """
  All values not containing the given string.
  """
  street2_not_contains: String

  """
  All values starting with the given string.
  """
  street2_starts_with: String

  """
  All values not starting with the given string.
  """
  street2_not_starts_with: String

  """
  All values ending with the given string.
  """
  street2_ends_with: String

  """
  All values not ending with the given string.
  """
  street2_not_ends_with: String
  city: String

  """
  All values that are not equal to given value.
  """
  city_not: String

  """
  All values that are contained in given list.
  """
  city_in: [String!]

  """
  All values that are not contained in given list.
  """
  city_not_in: [String!]

  """
  All values less than the given value.
  """
  city_lt: String

  """
  All values less than or equal the given value.
  """
  city_lte: String

  """
  All values greater than the given value.
  """
  city_gt: String

  """
  All values greater than or equal the given value.
  """
  city_gte: String

  """
  All values containing the given string.
  """
  city_contains: String

  """
  All values not containing the given string.
  """
  city_not_contains: String

  """
  All values starting with the given string.
  """
  city_starts_with: String

  """
  All values not starting with the given string.
  """
  city_not_starts_with: String

  """
  All values ending with the given string.
  """
  city_ends_with: String

  """
  All values not ending with the given string.
  """
  city_not_ends_with: String
  state: String

  """
  All values that are not equal to given value.
  """
  state_not: String

  """
  All values that are contained in given list.
  """
  state_in: [String!]

  """
  All values that are not contained in given list.
  """
  state_not_in: [String!]

  """
  All values less than the given value.
  """
  state_lt: String

  """
  All values less than or equal the given value.
  """
  state_lte: String

  """
  All values greater than the given value.
  """
  state_gt: String

  """
  All values greater than or equal the given value.
  """
  state_gte: String

  """
  All values containing the given string.
  """
  state_contains: String

  """
  All values not containing the given string.
  """
  state_not_contains: String

  """
  All values starting with the given string.
  """
  state_starts_with: String

  """
  All values not starting with the given string.
  """
  state_not_starts_with: String

  """
  All values ending with the given string.
  """
  state_ends_with: String

  """
  All values not ending with the given string.
  """
  state_not_ends_with: String
  country: String

  """
  All values that are not equal to given value.
  """
  country_not: String

  """
  All values that are contained in given list.
  """
  country_in: [String!]

  """
  All values that are not contained in given list.
  """
  country_not_in: [String!]

  """
  All values less than the given value.
  """
  country_lt: String

  """
  All values less than or equal the given value.
  """
  country_lte: String

  """
  All values greater than the given value.
  """
  country_gt: String

  """
  All values greater than or equal the given value.
  """
  country_gte: String

  """
  All values containing the given string.
  """
  country_contains: String

  """
  All values not containing the given string.
  """
  country_not_contains: String

  """
  All values starting with the given string.
  """
  country_starts_with: String

  """
  All values not starting with the given string.
  """
  country_not_starts_with: String

  """
  All values ending with the given string.
  """
  country_ends_with: String

  """
  All values not ending with the given string.
  """
  country_not_ends_with: String
  postal_code: String

  """
  All values that are not equal to given value.
  """
  postal_code_not: String

  """
  All values that are contained in given list.
  """
  postal_code_in: [String!]

  """
  All values that are not contained in given list.
  """
  postal_code_not_in: [String!]

  """
  All values less than the given value.
  """
  postal_code_lt: String

  """
  All values less than or equal the given value.
  """
  postal_code_lte: String

  """
  All values greater than the given value.
  """
  postal_code_gt: String

  """
  All values greater than or equal the given value.
  """
  postal_code_gte: String

  """
  All values containing the given string.
  """
  postal_code_contains: String

  """
  All values not containing the given string.
  """
  postal_code_not_contains: String

  """
  All values starting with the given string.
  """
  postal_code_starts_with: String

  """
  All values not starting with the given string.
  """
  postal_code_not_starts_with: String

  """
  All values ending with the given string.
  """
  postal_code_ends_with: String

  """
  All values not ending with the given string.
  """
  postal_code_not_ends_with: String
}

input BillingInfoWhereUniqueInput {
  id: ID
}

type BottomSize implements Node {
  id: ID!
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

"""
A connection to a list of items.
"""
type BottomSizeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BottomSizeEdge]!
  aggregate: AggregateBottomSize!
}

input BottomSizeCreateInput {
  id: ID
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeCreateOneInput {
  create: BottomSizeCreateInput
  connect: BottomSizeWhereUniqueInput
}

"""
An edge in a connection.
"""
type BottomSizeEdge {
  """
  The item at the end of the edge.
  """
  node: BottomSize!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BottomSizeOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  value_ASC
  value_DESC
  waist_ASC
  waist_DESC
  rise_ASC
  rise_DESC
  hem_ASC
  hem_DESC
  inseam_ASC
  inseam_DESC
}

type BottomSizePreviousValues {
  id: ID!
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

type BottomSizeSubscriptionPayload {
  mutation: MutationType!
  node: BottomSize
  updatedFields: [String!]
  previousValues: BottomSizePreviousValues
}

input BottomSizeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BottomSizeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BottomSizeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BottomSizeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BottomSizeWhereInput
}

enum BottomSizeType {
  WxL
  US
  EU
  JP
  Letter
}

input BottomSizeUpdateDataInput {
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeUpdateInput {
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeUpdateManyMutationInput {
>>>>>>> Rebase
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

<<<<<<< HEAD
type BottomSizeSubscriptionPayload {
  mutation: MutationType!
  node: BottomSize
  updatedFields: [String!]
  previousValues: BottomSizePreviousValues
}

input BottomSizeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BottomSizeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BottomSizeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BottomSizeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BottomSizeWhereInput
}

enum BottomSizeType {
  WxL
  US
  EU
  JP
  Letter
}

input BottomSizeUpdateDataInput {
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeUpdateInput {
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeUpdateManyMutationInput {
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeUpdateOneInput {
  create: BottomSizeCreateInput
  connect: BottomSizeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BottomSizeUpdateDataInput
  upsert: BottomSizeUpsertNestedInput
}

input BottomSizeUpsertNestedInput {
  update: BottomSizeUpdateDataInput!
  create: BottomSizeCreateInput!
}

input BottomSizeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BottomSizeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BottomSizeWhereInput!]

=======
input BottomSizeUpdateOneInput {
  create: BottomSizeCreateInput
  connect: BottomSizeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BottomSizeUpdateDataInput
  upsert: BottomSizeUpsertNestedInput
}

input BottomSizeUpsertNestedInput {
  update: BottomSizeUpdateDataInput!
  create: BottomSizeCreateInput!
}

input BottomSizeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BottomSizeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BottomSizeWhereInput!]

>>>>>>> Rebase
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BottomSizeWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID
<<<<<<< HEAD

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  type: BottomSizeType

  """
  All values that are not equal to given value.
  """
  type_not: BottomSizeType

  """
  All values that are contained in given list.
  """
  type_in: [BottomSizeType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [BottomSizeType!]
  value: String
=======

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  type: BottomSizeType
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  value_not: String
=======
  type_not: BottomSizeType
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  value_in: [String!]
=======
  type_in: [BottomSizeType!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  value_not_in: [String!]

  """
  All values less than the given value.
  """
  value_lt: String

  """
  All values less than or equal the given value.
  """
  value_lte: String

  """
  All values greater than the given value.
  """
  value_gt: String

  """
  All values greater than or equal the given value.
  """
  value_gte: String

  """
  All values containing the given string.
  """
  value_contains: String

  """
  All values not containing the given string.
  """
  value_not_contains: String

  """
  All values starting with the given string.
  """
  value_starts_with: String

  """
  All values not starting with the given string.
  """
  value_not_starts_with: String

  """
  All values ending with the given string.
  """
  value_ends_with: String

  """
  All values not ending with the given string.
  """
  value_not_ends_with: String
  waist: Float

  """
  All values that are not equal to given value.
  """
  waist_not: Float

  """
  All values that are contained in given list.
  """
  waist_in: [Float!]

  """
  All values that are not contained in given list.
  """
  waist_not_in: [Float!]

  """
  All values less than the given value.
  """
  waist_lt: Float

  """
  All values less than or equal the given value.
  """
  waist_lte: Float

  """
  All values greater than the given value.
  """
  waist_gt: Float

  """
  All values greater than or equal the given value.
  """
  waist_gte: Float
  rise: Float

  """
  All values that are not equal to given value.
  """
  rise_not: Float

  """
  All values that are contained in given list.
  """
  rise_in: [Float!]

  """
  All values that are not contained in given list.
  """
  rise_not_in: [Float!]

  """
  All values less than the given value.
  """
  rise_lt: Float

  """
  All values less than or equal the given value.
  """
  rise_lte: Float

  """
  All values greater than the given value.
  """
  rise_gt: Float

  """
  All values greater than or equal the given value.
  """
  rise_gte: Float
  hem: Float

  """
  All values that are not equal to given value.
  """
  hem_not: Float

  """
  All values that are contained in given list.
  """
  hem_in: [Float!]

  """
  All values that are not contained in given list.
  """
  hem_not_in: [Float!]

  """
  All values less than the given value.
  """
  hem_lt: Float

  """
  All values less than or equal the given value.
  """
  hem_lte: Float

  """
  All values greater than the given value.
  """
  hem_gt: Float

  """
  All values greater than or equal the given value.
  """
  hem_gte: Float
  inseam: Float

  """
  All values that are not equal to given value.
  """
  inseam_not: Float

  """
  All values that are contained in given list.
  """
  inseam_in: [Float!]

  """
  All values that are not contained in given list.
  """
  inseam_not_in: [Float!]

  """
  All values less than the given value.
  """
  inseam_lt: Float

  """
=======
  type_not_in: [BottomSizeType!]
  value: String

  """
  All values that are not equal to given value.
  """
  value_not: String

  """
  All values that are contained in given list.
  """
  value_in: [String!]

  """
  All values that are not contained in given list.
  """
  value_not_in: [String!]

  """
  All values less than the given value.
  """
  value_lt: String

  """
  All values less than or equal the given value.
  """
  value_lte: String

  """
  All values greater than the given value.
  """
  value_gt: String

  """
  All values greater than or equal the given value.
  """
  value_gte: String

  """
  All values containing the given string.
  """
  value_contains: String

  """
  All values not containing the given string.
  """
  value_not_contains: String

  """
  All values starting with the given string.
  """
  value_starts_with: String

  """
  All values not starting with the given string.
  """
  value_not_starts_with: String

  """
  All values ending with the given string.
  """
  value_ends_with: String

  """
  All values not ending with the given string.
  """
  value_not_ends_with: String
  waist: Float

  """
  All values that are not equal to given value.
  """
  waist_not: Float

  """
  All values that are contained in given list.
  """
  waist_in: [Float!]

  """
  All values that are not contained in given list.
  """
  waist_not_in: [Float!]

  """
  All values less than the given value.
  """
  waist_lt: Float

  """
  All values less than or equal the given value.
  """
  waist_lte: Float

  """
  All values greater than the given value.
  """
  waist_gt: Float

  """
  All values greater than or equal the given value.
  """
  waist_gte: Float
  rise: Float

  """
  All values that are not equal to given value.
  """
  rise_not: Float

  """
  All values that are contained in given list.
  """
  rise_in: [Float!]

  """
  All values that are not contained in given list.
  """
  rise_not_in: [Float!]

  """
  All values less than the given value.
  """
  rise_lt: Float

  """
  All values less than or equal the given value.
  """
  rise_lte: Float

  """
  All values greater than the given value.
  """
  rise_gt: Float

  """
  All values greater than or equal the given value.
  """
  rise_gte: Float
  hem: Float

  """
  All values that are not equal to given value.
  """
  hem_not: Float

  """
  All values that are contained in given list.
  """
  hem_in: [Float!]

  """
  All values that are not contained in given list.
  """
  hem_not_in: [Float!]

  """
  All values less than the given value.
  """
  hem_lt: Float

  """
  All values less than or equal the given value.
  """
  hem_lte: Float

  """
  All values greater than the given value.
  """
  hem_gt: Float

  """
  All values greater than or equal the given value.
  """
  hem_gte: Float
  inseam: Float

  """
  All values that are not equal to given value.
  """
  inseam_not: Float

  """
  All values that are contained in given list.
  """
  inseam_in: [Float!]

  """
  All values that are not contained in given list.
  """
  inseam_not_in: [Float!]

  """
  All values less than the given value.
  """
  inseam_lt: Float

  """
>>>>>>> Rebase
  All values less than or equal the given value.
  """
  inseam_lte: Float

  """
  All values greater than the given value.
  """
  inseam_gt: Float

  """
  All values greater than or equal the given value.
  """
  inseam_gte: Float
}

input BottomSizeWhereUniqueInput {
  id: ID
}

type Brand implements Node {
  id: ID!
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean!
  logo: Json
  name: String!
  basedIn: String
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type BrandConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  id: ID
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  name: String!
  basedIn: String
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
  products: ProductCreateManyWithoutBrandInput
}

input BrandCreateOneWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  connect: BrandWhereUniqueInput
}

input BrandCreateWithoutProductsInput {
  id: ID
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  name: String!
  basedIn: String
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
}

"""
An edge in a connection.
"""
type BrandEdge {
  """
  The item at the end of the edge.
  """
  node: Brand!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  brandCode_ASC
  brandCode_DESC
  description_ASC
  description_DESC
  isPrimaryBrand_ASC
  isPrimaryBrand_DESC
  logo_ASC
  logo_DESC
  name_ASC
  name_DESC
  basedIn_ASC
  basedIn_DESC
  since_ASC
  since_DESC
  tier_ASC
  tier_DESC
  websiteUrl_ASC
  websiteUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BrandPreviousValues {
  id: ID!
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean!
  logo: Json
  name: String!
  basedIn: String
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
<<<<<<< HEAD
=======
}
>>>>>>> Rebase

input BrandSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BrandSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BrandSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BrandSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
}

enum BrandTier {
  Tier0
  Tier1
  Tier2
  Niche
  Upcoming
  Retro
  Boutique
  Local
  Discovery
}

input BrandUpdateInput {
  slug: String
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  name: String
  basedIn: String
  since: DateTime
  tier: BrandTier
  websiteUrl: String
  products: ProductUpdateManyWithoutBrandInput
}

input BrandUpdateManyMutationInput {
  slug: String
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  name: String
  basedIn: String
  since: DateTime
  tier: BrandTier
  websiteUrl: String
<<<<<<< HEAD
}

input BrandUpdateOneRequiredWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  connect: BrandWhereUniqueInput
  update: BrandUpdateWithoutProductsDataInput
  upsert: BrandUpsertWithoutProductsInput
}

input BrandUpdateWithoutProductsDataInput {
  slug: String
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  name: String
  basedIn: String
  since: DateTime
  tier: BrandTier
  websiteUrl: String
}

input BrandUpsertWithoutProductsInput {
  update: BrandUpdateWithoutProductsDataInput!
  create: BrandCreateWithoutProductsInput!
}

input BrandWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BrandWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BrandWhereInput!]

  """
=======
}

input BrandUpdateOneRequiredWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  connect: BrandWhereUniqueInput
  update: BrandUpdateWithoutProductsDataInput
  upsert: BrandUpsertWithoutProductsInput
}

input BrandUpdateWithoutProductsDataInput {
  slug: String
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  name: String
  basedIn: String
  since: DateTime
  tier: BrandTier
  websiteUrl: String
}

input BrandUpsertWithoutProductsInput {
  update: BrandUpdateWithoutProductsDataInput!
  create: BrandCreateWithoutProductsInput!
}

input BrandWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BrandWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BrandWhereInput!]

  """
>>>>>>> Rebase
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BrandWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  brandCode: String

  """
  All values that are not equal to given value.
  """
  brandCode_not: String

  """
  All values that are contained in given list.
  """
  brandCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  brandCode_not_in: [String!]

  """
  All values less than the given value.
  """
  brandCode_lt: String

  """
  All values less than or equal the given value.
  """
  brandCode_lte: String

  """
  All values greater than the given value.
  """
  brandCode_gt: String

  """
  All values greater than or equal the given value.
  """
  brandCode_gte: String

  """
  All values containing the given string.
  """
  brandCode_contains: String

  """
  All values not containing the given string.
  """
  brandCode_not_contains: String

  """
  All values starting with the given string.
  """
  brandCode_starts_with: String

  """
  All values not starting with the given string.
  """
  brandCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  brandCode_ends_with: String

  """
  All values not ending with the given string.
  """
  brandCode_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  isPrimaryBrand: Boolean

  """
  All values that are not equal to given value.
  """
  isPrimaryBrand_not: Boolean
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  basedIn: String

  """
  All values that are not equal to given value.
  """
  basedIn_not: String

  """
  All values that are contained in given list.
  """
  basedIn_in: [String!]

  """
  All values that are not contained in given list.
  """
  basedIn_not_in: [String!]

  """
  All values less than the given value.
  """
  basedIn_lt: String

  """
  All values less than or equal the given value.
  """
  basedIn_lte: String

  """
  All values greater than the given value.
  """
  basedIn_gt: String

  """
  All values greater than or equal the given value.
  """
  basedIn_gte: String

  """
  All values containing the given string.
  """
  basedIn_contains: String

  """
  All values not containing the given string.
  """
  basedIn_not_contains: String

  """
  All values starting with the given string.
  """
  basedIn_starts_with: String

  """
  All values not starting with the given string.
  """
  basedIn_not_starts_with: String

  """
  All values ending with the given string.
  """
  basedIn_ends_with: String

  """
  All values not ending with the given string.
  """
  basedIn_not_ends_with: String
  since: DateTime

  """
  All values that are not equal to given value.
  """
  since_not: DateTime

  """
  All values that are contained in given list.
  """
  since_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  since_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  since_lt: DateTime

  """
  All values less than or equal the given value.
  """
  since_lte: DateTime

  """
  All values greater than the given value.
  """
  since_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  since_gte: DateTime
  tier: BrandTier

  """
  All values that are not equal to given value.
  """
  tier_not: BrandTier

  """
  All values that are contained in given list.
  """
  tier_in: [BrandTier!]

  """
  All values that are not contained in given list.
  """
  tier_not_in: [BrandTier!]
  websiteUrl: String

  """
  All values that are not equal to given value.
  """
  websiteUrl_not: String

  """
  All values that are contained in given list.
  """
  websiteUrl_in: [String!]

  """
  All values that are not contained in given list.
  """
  websiteUrl_not_in: [String!]

  """
  All values less than the given value.
  """
  websiteUrl_lt: String

  """
  All values less than or equal the given value.
  """
  websiteUrl_lte: String

  """
  All values greater than the given value.
  """
  websiteUrl_gt: String

  """
  All values greater than or equal the given value.
  """
  websiteUrl_gte: String

  """
  All values containing the given string.
  """
  websiteUrl_contains: String

  """
  All values not containing the given string.
  """
  websiteUrl_not_contains: String

  """
  All values starting with the given string.
  """
  websiteUrl_starts_with: String

  """
  All values not starting with the given string.
  """
  websiteUrl_not_starts_with: String

  """
  All values ending with the given string.
  """
  websiteUrl_ends_with: String

  """
  All values not ending with the given string.
  """
  websiteUrl_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input BrandWhereUniqueInput {
  id: ID
  slug: String
  brandCode: String
}

type Category implements Node {
  id: ID!
  slug: String!
  name: String!
  image: Json
  description: String
  visible: Boolean!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  children(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category!]
  updatedAt: DateTime
}

"""
A connection to a list of items.
"""
type CategoryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  slug: String!
  name: String!
  image: Json
  description: String
  visible: Boolean
  products: ProductCreateManyWithoutCategoryInput
  children: CategoryCreateManyInput
}

input CategoryCreateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutProductsInput {
<<<<<<< HEAD
=======
  create: CategoryCreateWithoutProductsInput
>>>>>>> Rebase
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutProductsInput {
  id: ID
  slug: String!
<<<<<<< HEAD
   iage: Json
=======
  name: String!
  image: Json
>>>>>>> Rebase
  description: String
  visible: Boolean
  children: CategoryCreateManyInput
}

"""
An edge in a connection.
"""
type CategoryEdge {
  """
  The item at the end of the edge.
  """
  node: Category!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  description_ASC
  description_DESC
  visible_ASC
  visible_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  slug: String!
  name: String!
  image: Json
  description: String
  visible: Boolean!
  updatedAt: DateTime
}

input CategoryScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategoryScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CategoryScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CategoryScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  visible: Boolean

  """
  All values that are not equal to given value.
  """
  visible_not: Boolean
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategorySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CategorySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateDataInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
  products: ProductUpdateManyWithoutCategoryInput
  children: CategoryUpdateManyInput
}

input CategoryUpdateInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
  products: ProductUpdateManyWithoutCategoryInput
  children: CategoryUpdateManyInput
}

input CategoryUpdateManyDataInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
}

input CategoryUpdateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueNestedInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [CategoryScalarWhereInput!]
  upsert: [CategoryUpsertWithWhereUniqueNestedInput!]
}

input CategoryUpdateManyMutationInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateOneRequiredInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
}

input CategoryUpdateOneRequiredWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutProductsDataInput
  upsert: CategoryUpsertWithoutProductsInput
}

input CategoryUpdateWithoutProductsDataInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
  children: CategoryUpdateManyInput
}

input CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateDataInput!
}

input CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryUpsertWithoutProductsInput {
  update: CategoryUpdateWithoutProductsDataInput!
  create: CategoryCreateWithoutProductsInput!
}

input CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategoryWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CategoryWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CategoryWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  visible: Boolean

  """
  All values that are not equal to given value.
  """
  visible_not: Boolean
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  children_every: CategoryWhereInput
  children_some: CategoryWhereInput
  children_none: CategoryWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
  name: String
}

type Collection implements Node {
  id: ID!
  slug: String!
  images: Json!
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
}

"""
A connection to a list of items.
"""
type CollectionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CollectionEdge]!
  aggregate: AggregateCollection!
}

input CollectionCreateInput {
  id: ID
  slug: String!
  images: Json!
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
  products: ProductCreateManyInput
}

input CollectionCreateManyInput {
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type CollectionEdge {
  """
  The item at the end of the edge.
  """
  node: Collection!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type CollectionGroup implements Node {
  id: ID!
  slug: String!
  title: String
  collectionCount: Int
  collections(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Collection!]
}

"""
A connection to a list of items.
"""
type CollectionGroupConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CollectionGroupEdge]!
  aggregate: AggregateCollectionGroup!
}

input CollectionGroupCreateInput {
  id: ID
  slug: String!
  title: String
  collectionCount: Int
  collections: CollectionCreateManyInput
}

"""
An edge in a connection.
"""
type CollectionGroupEdge {
  """
  The item at the end of the edge.
  """
  node: CollectionGroup!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CollectionGroupOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  collectionCount_ASC
  collectionCount_DESC
}

type CollectionGroupPreviousValues {
  id: ID!
  slug: String!
  title: String
  collectionCount: Int
}

type CollectionGroupSubscriptionPayload {
  mutation: MutationType!
  node: CollectionGroup
  updatedFields: [String!]
  previousValues: CollectionGroupPreviousValues
}

input CollectionGroupSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionGroupSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CollectionGroupSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CollectionGroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CollectionGroupWhereInput
}

input CollectionGroupUpdateInput {
  slug: String
  title: String
  collectionCount: Int
  collections: CollectionUpdateManyInput
}

input CollectionGroupUpdateManyMutationInput {
  slug: String
  title: String
  collectionCount: Int
}

input CollectionGroupWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionGroupWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CollectionGroupWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CollectionGroupWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  collectionCount: Int

  """
  All values that are not equal to given value.
  """
  collectionCount_not: Int

  """
  All values that are contained in given list.
  """
  collectionCount_in: [Int!]

  """
  All values that are not contained in given list.
  """
  collectionCount_not_in: [Int!]

  """
  All values less than the given value.
  """
  collectionCount_lt: Int

  """
  All values less than or equal the given value.
  """
  collectionCount_lte: Int

  """
  All values greater than the given value.
  """
  collectionCount_gt: Int

  """
  All values greater than or equal the given value.
  """
  collectionCount_gte: Int
  collections_every: CollectionWhereInput
  collections_some: CollectionWhereInput
  collections_none: CollectionWhereInput
}

input CollectionGroupWhereUniqueInput {
  id: ID
  slug: String
}

enum CollectionOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  images_ASC
  images_DESC
  title_ASC
  title_DESC
  subTitle_ASC
  subTitle_DESC
  descriptionTop_ASC
  descriptionTop_DESC
  descriptionBottom_ASC
  descriptionBottom_DESC
}

type CollectionPreviousValues {
  id: ID!
  slug: String!
  images: Json!
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
}

input CollectionScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CollectionScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CollectionScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  subTitle: String

  """
  All values that are not equal to given value.
  """
  subTitle_not: String

  """
  All values that are contained in given list.
  """
  subTitle_in: [String!]

  """
  All values that are not contained in given list.
  """
  subTitle_not_in: [String!]

  """
  All values less than the given value.
  """
  subTitle_lt: String

  """
  All values less than or equal the given value.
  """
  subTitle_lte: String

  """
  All values greater than the given value.
  """
  subTitle_gt: String

  """
  All values greater than or equal the given value.
  """
  subTitle_gte: String

  """
  All values containing the given string.
  """
  subTitle_contains: String

  """
  All values not containing the given string.
  """
  subTitle_not_contains: String

  """
  All values starting with the given string.
  """
  subTitle_starts_with: String

  """
  All values not starting with the given string.
  """
  subTitle_not_starts_with: String

  """
  All values ending with the given string.
  """
  subTitle_ends_with: String

  """
  All values not ending with the given string.
  """
  subTitle_not_ends_with: String
  descriptionTop: String

  """
  All values that are not equal to given value.
  """
  descriptionTop_not: String

  """
  All values that are contained in given list.
  """
  descriptionTop_in: [String!]

  """
  All values that are not contained in given list.
  """
  descriptionTop_not_in: [String!]

  """
  All values less than the given value.
  """
  descriptionTop_lt: String

  """
  All values less than or equal the given value.
  """
  descriptionTop_lte: String

  """
  All values greater than the given value.
  """
  descriptionTop_gt: String

  """
  All values greater than or equal the given value.
  """
  descriptionTop_gte: String

  """
  All values containing the given string.
  """
  descriptionTop_contains: String

  """
  All values not containing the given string.
  """
  descriptionTop_not_contains: String

  """
  All values starting with the given string.
  """
  descriptionTop_starts_with: String

  """
  All values not starting with the given string.
  """
  descriptionTop_not_starts_with: String

  """
  All values ending with the given string.
  """
  descriptionTop_ends_with: String

  """
  All values not ending with the given string.
  """
  descriptionTop_not_ends_with: String
  descriptionBottom: String

  """
  All values that are not equal to given value.
  """
  descriptionBottom_not: String

  """
  All values that are contained in given list.
  """
  descriptionBottom_in: [String!]

  """
  All values that are not contained in given list.
  """
  descriptionBottom_not_in: [String!]

  """
  All values less than the given value.
  """
  descriptionBottom_lt: String

  """
  All values less than or equal the given value.
  """
  descriptionBottom_lte: String

  """
  All values greater than the given value.
  """
  descriptionBottom_gt: String

  """
  All values greater than or equal the given value.
  """
  descriptionBottom_gte: String

  """
  All values containing the given string.
  """
  descriptionBottom_contains: String

  """
  All values not containing the given string.
  """
  descriptionBottom_not_contains: String

  """
  All values starting with the given string.
  """
  descriptionBottom_starts_with: String

  """
  All values not starting with the given string.
  """
  descriptionBottom_not_starts_with: String

  """
  All values ending with the given string.
  """
  descriptionBottom_ends_with: String

  """
  All values not ending with the given string.
  """
  descriptionBottom_not_ends_with: String
}

type CollectionSubscriptionPayload {
  mutation: MutationType!
  node: Collection
  updatedFields: [String!]
  previousValues: CollectionPreviousValues
}

input CollectionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CollectionSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CollectionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CollectionWhereInput
}

input CollectionUpdateDataInput {
  slug: String
  images: Json
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
  products: ProductUpdateManyInput
}

input CollectionUpdateInput {
  slug: String
  images: Json
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
  products: ProductUpdateManyInput
}

input CollectionUpdateManyDataInput {
  slug: String
  images: Json
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
}

input CollectionUpdateManyInput {
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  disconnect: [CollectionWhereUniqueInput!]
  delete: [CollectionWhereUniqueInput!]
  update: [CollectionUpdateWithWhereUniqueNestedInput!]
  updateMany: [CollectionUpdateManyWithWhereNestedInput!]
  deleteMany: [CollectionScalarWhereInput!]
  upsert: [CollectionUpsertWithWhereUniqueNestedInput!]
}

input CollectionUpdateManyMutationInput {
  slug: String
  images: Json
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
}

input CollectionUpdateManyWithWhereNestedInput {
  where: CollectionScalarWhereInput!
  data: CollectionUpdateManyDataInput!
}

input CollectionUpdateWithWhereUniqueNestedInput {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateDataInput!
}

input CollectionUpsertWithWhereUniqueNestedInput {
  where: CollectionWhereUniqueInput!
  update: CollectionUpdateDataInput!
  create: CollectionCreateInput!
}

input CollectionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CollectionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CollectionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CollectionWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  subTitle: String

  """
  All values that are not equal to given value.
  """
  subTitle_not: String

  """
  All values that are contained in given list.
  """
  subTitle_in: [String!]

  """
  All values that are not contained in given list.
  """
  subTitle_not_in: [String!]

  """
  All values less than the given value.
  """
  subTitle_lt: String

  """
  All values less than or equal the given value.
  """
  subTitle_lte: String

  """
  All values greater than the given value.
  """
  subTitle_gt: String

  """
  All values greater than or equal the given value.
  """
  subTitle_gte: String

  """
  All values containing the given string.
  """
  subTitle_contains: String

  """
  All values not containing the given string.
  """
  subTitle_not_contains: String

  """
  All values starting with the given string.
  """
  subTitle_starts_with: String

  """
  All values not starting with the given string.
  """
  subTitle_not_starts_with: String

  """
  All values ending with the given string.
  """
  subTitle_ends_with: String

  """
  All values not ending with the given string.
  """
  subTitle_not_ends_with: String
  descriptionTop: String

  """
  All values that are not equal to given value.
  """
  descriptionTop_not: String

  """
  All values that are contained in given list.
  """
  descriptionTop_in: [String!]

  """
  All values that are not contained in given list.
  """
  descriptionTop_not_in: [String!]

  """
  All values less than the given value.
  """
  descriptionTop_lt: String

  """
  All values less than or equal the given value.
  """
  descriptionTop_lte: String

  """
  All values greater than the given value.
  """
  descriptionTop_gt: String

  """
  All values greater than or equal the given value.
  """
  descriptionTop_gte: String

  """
  All values containing the given string.
  """
  descriptionTop_contains: String

  """
  All values not containing the given string.
  """
  descriptionTop_not_contains: String

  """
  All values starting with the given string.
  """
  descriptionTop_starts_with: String

  """
  All values not starting with the given string.
  """
  descriptionTop_not_starts_with: String

  """
  All values ending with the given string.
  """
  descriptionTop_ends_with: String

  """
  All values not ending with the given string.
  """
  descriptionTop_not_ends_with: String
  descriptionBottom: String

  """
  All values that are not equal to given value.
  """
  descriptionBottom_not: String

  """
  All values that are contained in given list.
  """
  descriptionBottom_in: [String!]

  """
  All values that are not contained in given list.
  """
  descriptionBottom_not_in: [String!]

  """
  All values less than the given value.
  """
  descriptionBottom_lt: String

  """
  All values less than or equal the given value.
  """
  descriptionBottom_lte: String

  """
  All values greater than the given value.
  """
  descriptionBottom_gt: String

  """
  All values greater than or equal the given value.
  """
  descriptionBottom_gte: String

  """
  All values containing the given string.
  """
  descriptionBottom_contains: String

  """
  All values not containing the given string.
  """
  descriptionBottom_not_contains: String

  """
  All values starting with the given string.
  """
  descriptionBottom_starts_with: String

  """
  All values not starting with the given string.
  """
  descriptionBottom_not_starts_with: String

  """
  All values ending with the given string.
  """
  descriptionBottom_ends_with: String

  """
  All values not ending with the given string.
  """
  descriptionBottom_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input CollectionWhereUniqueInput {
  id: ID
  slug: String
}

type Color implements Node {
  id: ID!
  slug: String!
  name: String!
  colorCode: String!
  hexCode: String!
  productVariants(
    where: ProductVariantWhereInput
    orderBy: ProductVariantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariant!]
}

"""
A connection to a list of items.
"""
type ColorConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ColorEdge]!
  aggregate: AggregateColor!
}

input ColorCreateInput {
  id: ID
  slug: String!
  name: String!
  colorCode: String!
  hexCode: String!
  productVariants: ProductVariantCreateManyWithoutColorInput
}

input ColorCreateOneInput {
  create: ColorCreateInput
  connect: ColorWhereUniqueInput
}

input ColorCreateOneWithoutProductVariantsInput {
  create: ColorCreateWithoutProductVariantsInput
  connect: ColorWhereUniqueInput
}

input ColorCreateWithoutProductVariantsInput {
  id: ID
  slug: String!
  name: String!
  colorCode: String!
  hexCode: String!
}

"""
An edge in a connection.
"""
type ColorEdge {
  """
  The item at the end of the edge.
  """
  node: Color!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ColorOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  colorCode_ASC
  colorCode_DESC
  hexCode_ASC
  hexCode_DESC
}

type ColorPreviousValues {
  id: ID!
  slug: String!
  name: String!
  colorCode: String!
  hexCode: String!
}

type ColorSubscriptionPayload {
  mutation: MutationType!
  node: Color
  updatedFields: [String!]
  previousValues: ColorPreviousValues
}

input ColorSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ColorSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ColorSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ColorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ColorWhereInput
}

input ColorUpdateDataInput {
  slug: String
  name: String
  colorCode: String
  hexCode: String
  productVariants: ProductVariantUpdateManyWithoutColorInput
}

input ColorUpdateInput {
  slug: String
  name: String
  colorCode: String
  hexCode: String
  productVariants: ProductVariantUpdateManyWithoutColorInput
}

input ColorUpdateManyMutationInput {
  slug: String
  name: String
  colorCode: String
  hexCode: String
}

input ColorUpdateOneInput {
  create: ColorCreateInput
  connect: ColorWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ColorUpdateDataInput
  upsert: ColorUpsertNestedInput
}

input ColorUpdateOneRequiredInput {
  create: ColorCreateInput
  connect: ColorWhereUniqueInput
  update: ColorUpdateDataInput
  upsert: ColorUpsertNestedInput
}

input ColorUpdateOneRequiredWithoutProductVariantsInput {
  create: ColorCreateWithoutProductVariantsInput
  connect: ColorWhereUniqueInput
  update: ColorUpdateWithoutProductVariantsDataInput
  upsert: ColorUpsertWithoutProductVariantsInput
}

input ColorUpdateWithoutProductVariantsDataInput {
  slug: String
  name: String
  colorCode: String
  hexCode: String
}

input ColorUpsertNestedInput {
  update: ColorUpdateDataInput!
  create: ColorCreateInput!
}

input ColorUpsertWithoutProductVariantsInput {
  update: ColorUpdateWithoutProductVariantsDataInput!
  create: ColorCreateWithoutProductVariantsInput!
}

input ColorWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ColorWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ColorWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ColorWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  colorCode: String

  """
  All values that are not equal to given value.
  """
  colorCode_not: String

  """
  All values that are contained in given list.
  """
  colorCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  colorCode_not_in: [String!]

  """
  All values less than the given value.
  """
  colorCode_lt: String

  """
  All values less than or equal the given value.
  """
  colorCode_lte: String

  """
  All values greater than the given value.
  """
  colorCode_gt: String

  """
  All values greater than or equal the given value.
  """
  colorCode_gte: String

  """
  All values containing the given string.
  """
  colorCode_contains: String

  """
  All values not containing the given string.
  """
  colorCode_not_contains: String

  """
  All values starting with the given string.
  """
  colorCode_starts_with: String

  """
  All values not starting with the given string.
  """
  colorCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  colorCode_ends_with: String

  """
  All values not ending with the given string.
  """
  colorCode_not_ends_with: String
  hexCode: String

  """
  All values that are not equal to given value.
  """
  hexCode_not: String

  """
  All values that are contained in given list.
  """
  hexCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  hexCode_not_in: [String!]

  """
  All values less than the given value.
  """
  hexCode_lt: String

  """
  All values less than or equal the given value.
  """
  hexCode_lte: String

  """
  All values greater than the given value.
  """
  hexCode_gt: String

  """
  All values greater than or equal the given value.
  """
  hexCode_gte: String

  """
  All values containing the given string.
  """
  hexCode_contains: String

  """
  All values not containing the given string.
  """
  hexCode_not_contains: String

  """
  All values starting with the given string.
  """
  hexCode_starts_with: String

  """
  All values not starting with the given string.
  """
  hexCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  hexCode_ends_with: String

  """
  All values not ending with the given string.
  """
  hexCode_not_ends_with: String
  productVariants_every: ProductVariantWhereInput
  productVariants_some: ProductVariantWhereInput
  productVariants_none: ProductVariantWhereInput
}

input ColorWhereUniqueInput {
  id: ID
  slug: String
  colorCode: String
}

type Customer implements Node {
  id: ID!
  user: User!
  status: CustomerStatus
  detail: CustomerDetail
  billingInfo: BillingInfo
  plan: Plan
  membership: CustomerMembership
  bagItems(
    where: BagItemWhereInput
    orderBy: BagItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BagItem!]
  reservations(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Reservation!]
}

"""
A connection to a list of items.
"""
type CustomerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  id: ID
  status: CustomerStatus
  plan: Plan
  user: UserCreateOneInput!
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
}

input CustomerCreateOneInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutBagItemsInput {
  create: CustomerCreateWithoutBagItemsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutMembershipInput {
  create: CustomerCreateWithoutMembershipInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutReservationsInput {
  create: CustomerCreateWithoutReservationsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutBagItemsInput {
  id: ID
  status: CustomerStatus
  plan: Plan
  user: UserCreateOneInput!
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
}

input CustomerCreateWithoutMembershipInput {
  id: ID
  status: CustomerStatus
  plan: Plan
  user: UserCreateOneInput!
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
}

input CustomerCreateWithoutReservationsInput {
  id: ID
  status: CustomerStatus
  plan: Plan
  user: UserCreateOneInput!
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
}

type CustomerDetail implements Node {
  id: ID!
  phoneNumber: String
  birthday: DateTime
  height: Int
  weight: [Int!]!
  bodyType: String
  averageTopSize: String
  topSizes: [String!]!
  averageWaistSize: String
  waistSizes: [Int!]!
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  commuteStyle: String
  stylePreferences: StylePreferences
  shippingAddress: Location
  phoneOS: String
  insureShipment: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type CustomerDetailConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CustomerDetailEdge]!
  aggregate: AggregateCustomerDetail!
}

input CustomerDetailCreateInput {
  id: ID
  phoneNumber: String
  birthday: DateTime
  height: Int
  bodyType: String
  averageTopSize: String
  averageWaistSize: String
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  commuteStyle: String
  phoneOS: String
  insureShipment: Boolean
  weight: CustomerDetailCreateweightInput
  topSizes: CustomerDetailCreatetopSizesInput
  waistSizes: CustomerDetailCreatewaistSizesInput
  stylePreferences: StylePreferencesCreateOneInput
  shippingAddress: LocationCreateOneInput
}

input CustomerDetailCreateOneInput {
  create: CustomerDetailCreateInput
  connect: CustomerDetailWhereUniqueInput
}

input CustomerDetailCreatetopSizesInput {
  set: [String!]
}

input CustomerDetailCreatewaistSizesInput {
  set: [Int!]
}

input CustomerDetailCreateweightInput {
  set: [Int!]
}

"""
An edge in a connection.
"""
type CustomerDetailEdge {
  """
  The item at the end of the edge.
  """
  node: CustomerDetail!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CustomerDetailOrderByInput {
  id_ASC
  id_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  birthday_ASC
  birthday_DESC
  height_ASC
  height_DESC
  bodyType_ASC
  bodyType_DESC
  averageTopSize_ASC
  averageTopSize_DESC
  averageWaistSize_ASC
  averageWaistSize_DESC
  averagePantLength_ASC
  averagePantLength_DESC
  preferredPronouns_ASC
  preferredPronouns_DESC
  profession_ASC
  profession_DESC
  partyFrequency_ASC
  partyFrequency_DESC
  travelFrequency_ASC
  travelFrequency_DESC
  shoppingFrequency_ASC
  shoppingFrequency_DESC
  averageSpend_ASC
  averageSpend_DESC
  style_ASC
  style_DESC
  commuteStyle_ASC
  commuteStyle_DESC
  phoneOS_ASC
  phoneOS_DESC
  insureShipment_ASC
  insureShipment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerDetailPreviousValues {
  id: ID!
  phoneNumber: String
  birthday: DateTime
  height: Int
  weight: [Int!]!
  bodyType: String
  averageTopSize: String
  topSizes: [String!]!
  averageWaistSize: String
  waistSizes: [Int!]!
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  commuteStyle: String
  phoneOS: String
  insureShipment: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerDetailSubscriptionPayload {
  mutation: MutationType!
  node: CustomerDetail
  updatedFields: [String!]
  previousValues: CustomerDetailPreviousValues
}

input CustomerDetailSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CustomerDetailSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CustomerDetailSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CustomerDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerDetailWhereInput
}

input CustomerDetailUpdateDataInput {
  phoneNumber: String
  birthday: DateTime
  height: Int
  bodyType: String
  averageTopSize: String
  averageWaistSize: String
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  commuteStyle: String
  phoneOS: String
  insureShipment: Boolean
  weight: CustomerDetailUpdateweightInput
  topSizes: CustomerDetailUpdatetopSizesInput
  waistSizes: CustomerDetailUpdatewaistSizesInput
  stylePreferences: StylePreferencesUpdateOneInput
  shippingAddress: LocationUpdateOneInput
}

input CustomerDetailUpdateInput {
  phoneNumber: String
  birthday: DateTime
  height: Int
  bodyType: String
  averageTopSize: String
  averageWaistSize: String
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  commuteStyle: String
  phoneOS: String
  insureShipment: Boolean
  weight: CustomerDetailUpdateweightInput
  topSizes: CustomerDetailUpdatetopSizesInput
  waistSizes: CustomerDetailUpdatewaistSizesInput
  stylePreferences: StylePreferencesUpdateOneInput
  shippingAddress: LocationUpdateOneInput
}

input CustomerDetailUpdateManyMutationInput {
  phoneNumber: String
  birthday: DateTime
  height: Int
  bodyType: String
  averageTopSize: String
  averageWaistSize: String
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  commuteStyle: String
  phoneOS: String
  insureShipment: Boolean
  weight: CustomerDetailUpdateweightInput
  topSizes: CustomerDetailUpdatetopSizesInput
  waistSizes: CustomerDetailUpdatewaistSizesInput
}

input CustomerDetailUpdateOneInput {
  create: CustomerDetailCreateInput
  connect: CustomerDetailWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CustomerDetailUpdateDataInput
  upsert: CustomerDetailUpsertNestedInput
}

input CustomerDetailUpdatetopSizesInput {
  set: [String!]
}

input CustomerDetailUpdatewaistSizesInput {
  set: [Int!]
}

input CustomerDetailUpdateweightInput {
  set: [Int!]
}

input CustomerDetailUpsertNestedInput {
  update: CustomerDetailUpdateDataInput!
  create: CustomerDetailCreateInput!
}

input CustomerDetailWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CustomerDetailWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CustomerDetailWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CustomerDetailWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  phoneNumber: String

  """
  All values that are not equal to given value.
  """
  phoneNumber_not: String

  """
  All values that are contained in given list.
  """
  phoneNumber_in: [String!]

  """
  All values that are not contained in given list.
  """
  phoneNumber_not_in: [String!]

  """
  All values less than the given value.
  """
  phoneNumber_lt: String

  """
  All values less than or equal the given value.
  """
  phoneNumber_lte: String

  """
  All values greater than the given value.
  """
  phoneNumber_gt: String

  """
  All values greater than or equal the given value.
  """
  phoneNumber_gte: String

  """
  All values containing the given string.
  """
  phoneNumber_contains: String

  """
  All values not containing the given string.
  """
  phoneNumber_not_contains: String

  """
  All values starting with the given string.
  """
  phoneNumber_starts_with: String

  """
  All values not starting with the given string.
  """
  phoneNumber_not_starts_with: String

  """
  All values ending with the given string.
  """
  phoneNumber_ends_with: String

  """
  All values not ending with the given string.
  """
  phoneNumber_not_ends_with: String
  birthday: DateTime

  """
  All values that are not equal to given value.
  """
  birthday_not: DateTime

  """
  All values that are contained in given list.
  """
  birthday_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  birthday_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  birthday_lt: DateTime

  """
  All values less than or equal the given value.
  """
  birthday_lte: DateTime

  """
  All values greater than the given value.
  """
  birthday_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  birthday_gte: DateTime
  height: Int

  """
  All values that are not equal to given value.
  """
  height_not: Int

  """
  All values that are contained in given list.
  """
  height_in: [Int!]

  """
  All values that are not contained in given list.
  """
  height_not_in: [Int!]

  """
  All values less than the given value.
  """
  height_lt: Int

  """
  All values less than or equal the given value.
  """
  height_lte: Int

  """
  All values greater than the given value.
  """
  height_gt: Int

  """
  All values greater than or equal the given value.
  """
  height_gte: Int
  bodyType: String

  """
  All values that are not equal to given value.
  """
  bodyType_not: String

  """
  All values that are contained in given list.
  """
  bodyType_in: [String!]

  """
  All values that are not contained in given list.
  """
  bodyType_not_in: [String!]

  """
  All values less than the given value.
  """
  bodyType_lt: String

  """
  All values less than or equal the given value.
  """
  bodyType_lte: String

  """
  All values greater than the given value.
  """
  bodyType_gt: String

  """
  All values greater than or equal the given value.
  """
  bodyType_gte: String

  """
  All values containing the given string.
  """
  bodyType_contains: String

  """
  All values not containing the given string.
  """
  bodyType_not_contains: String

  """
  All values starting with the given string.
  """
  bodyType_starts_with: String

  """
  All values not starting with the given string.
  """
  bodyType_not_starts_with: String

  """
  All values ending with the given string.
  """
  bodyType_ends_with: String

  """
  All values not ending with the given string.
  """
  bodyType_not_ends_with: String
  averageTopSize: String

  """
  All values that are not equal to given value.
  """
  averageTopSize_not: String

  """
  All values that are contained in given list.
  """
  averageTopSize_in: [String!]

  """
  All values that are not contained in given list.
  """
  averageTopSize_not_in: [String!]

  """
  All values less than the given value.
  """
  averageTopSize_lt: String

  """
  All values less than or equal the given value.
  """
  averageTopSize_lte: String

  """
  All values greater than the given value.
  """
  averageTopSize_gt: String

  """
  All values greater than or equal the given value.
  """
  averageTopSize_gte: String

  """
  All values containing the given string.
  """
  averageTopSize_contains: String

  """
  All values not containing the given string.
  """
  averageTopSize_not_contains: String

  """
  All values starting with the given string.
  """
  averageTopSize_starts_with: String

  """
  All values not starting with the given string.
  """
  averageTopSize_not_starts_with: String

  """
  All values ending with the given string.
  """
  averageTopSize_ends_with: String

  """
  All values not ending with the given string.
  """
  averageTopSize_not_ends_with: String
  averageWaistSize: String

  """
  All values that are not equal to given value.
  """
  averageWaistSize_not: String

  """
  All values that are contained in given list.
  """
  averageWaistSize_in: [String!]

  """
  All values that are not contained in given list.
  """
  averageWaistSize_not_in: [String!]

  """
  All values less than the given value.
  """
  averageWaistSize_lt: String

  """
  All values less than or equal the given value.
  """
  averageWaistSize_lte: String

  """
  All values greater than the given value.
  """
  averageWaistSize_gt: String

  """
  All values greater than or equal the given value.
  """
  averageWaistSize_gte: String

  """
  All values containing the given string.
  """
  averageWaistSize_contains: String

  """
  All values not containing the given string.
  """
  averageWaistSize_not_contains: String

  """
  All values starting with the given string.
  """
  averageWaistSize_starts_with: String

  """
  All values not starting with the given string.
  """
  averageWaistSize_not_starts_with: String

  """
  All values ending with the given string.
  """
  averageWaistSize_ends_with: String

  """
  All values not ending with the given string.
  """
  averageWaistSize_not_ends_with: String
  averagePantLength: String

  """
  All values that are not equal to given value.
  """
  averagePantLength_not: String

  """
  All values that are contained in given list.
  """
  averagePantLength_in: [String!]

  """
  All values that are not contained in given list.
  """
  averagePantLength_not_in: [String!]

  """
  All values less than the given value.
  """
  averagePantLength_lt: String

  """
  All values less than or equal the given value.
  """
  averagePantLength_lte: String

  """
  All values greater than the given value.
  """
  averagePantLength_gt: String

  """
  All values greater than or equal the given value.
  """
  averagePantLength_gte: String

  """
  All values containing the given string.
  """
  averagePantLength_contains: String

  """
  All values not containing the given string.
  """
  averagePantLength_not_contains: String

  """
  All values starting with the given string.
  """
  averagePantLength_starts_with: String

  """
  All values not starting with the given string.
  """
  averagePantLength_not_starts_with: String

  """
  All values ending with the given string.
  """
  averagePantLength_ends_with: String

  """
  All values not ending with the given string.
  """
  averagePantLength_not_ends_with: String
  preferredPronouns: String

  """
  All values that are not equal to given value.
  """
  preferredPronouns_not: String

  """
  All values that are contained in given list.
  """
  preferredPronouns_in: [String!]

  """
  All values that are not contained in given list.
  """
  preferredPronouns_not_in: [String!]

  """
  All values less than the given value.
  """
  preferredPronouns_lt: String

  """
  All values less than or equal the given value.
  """
  preferredPronouns_lte: String

  """
  All values greater than the given value.
  """
  preferredPronouns_gt: String

  """
  All values greater than or equal the given value.
  """
  preferredPronouns_gte: String

  """
  All values containing the given string.
  """
  preferredPronouns_contains: String

  """
  All values not containing the given string.
  """
  preferredPronouns_not_contains: String

  """
  All values starting with the given string.
  """
  preferredPronouns_starts_with: String

  """
  All values not starting with the given string.
  """
  preferredPronouns_not_starts_with: String

  """
  All values ending with the given string.
  """
  preferredPronouns_ends_with: String

  """
  All values not ending with the given string.
  """
  preferredPronouns_not_ends_with: String
  profession: String

  """
  All values that are not equal to given value.
  """
  profession_not: String

  """
  All values that are contained in given list.
  """
  profession_in: [String!]

  """
  All values that are not contained in given list.
  """
  profession_not_in: [String!]

  """
  All values less than the given value.
  """
  profession_lt: String

  """
  All values less than or equal the given value.
  """
  profession_lte: String

  """
  All values greater than the given value.
  """
  profession_gt: String

  """
  All values greater than or equal the given value.
  """
  profession_gte: String

  """
  All values containing the given string.
  """
  profession_contains: String

  """
  All values not containing the given string.
  """
  profession_not_contains: String

  """
  All values starting with the given string.
  """
  profession_starts_with: String

  """
  All values not starting with the given string.
  """
  profession_not_starts_with: String

  """
  All values ending with the given string.
  """
  profession_ends_with: String

  """
  All values not ending with the given string.
  """
  profession_not_ends_with: String
  partyFrequency: String

  """
  All values that are not equal to given value.
  """
  partyFrequency_not: String

  """
  All values that are contained in given list.
  """
  partyFrequency_in: [String!]

  """
  All values that are not contained in given list.
  """
  partyFrequency_not_in: [String!]

  """
  All values less than the given value.
  """
  partyFrequency_lt: String

  """
  All values less than or equal the given value.
  """
  partyFrequency_lte: String

  """
  All values greater than the given value.
  """
  partyFrequency_gt: String

  """
  All values greater than or equal the given value.
  """
  partyFrequency_gte: String

  """
  All values containing the given string.
  """
  partyFrequency_contains: String

  """
  All values not containing the given string.
  """
  partyFrequency_not_contains: String

  """
  All values starting with the given string.
  """
  partyFrequency_starts_with: String

  """
  All values not starting with the given string.
  """
  partyFrequency_not_starts_with: String

  """
  All values ending with the given string.
  """
  partyFrequency_ends_with: String

  """
  All values not ending with the given string.
  """
  partyFrequency_not_ends_with: String
  travelFrequency: String

  """
  All values that are not equal to given value.
  """
  travelFrequency_not: String

  """
  All values that are contained in given list.
  """
  travelFrequency_in: [String!]

  """
  All values that are not contained in given list.
  """
  travelFrequency_not_in: [String!]

  """
  All values less than the given value.
  """
  travelFrequency_lt: String

  """
  All values less than or equal the given value.
  """
  travelFrequency_lte: String

  """
  All values greater than the given value.
  """
  travelFrequency_gt: String

  """
  All values greater than or equal the given value.
  """
  travelFrequency_gte: String

  """
  All values containing the given string.
  """
  travelFrequency_contains: String

  """
  All values not containing the given string.
  """
  travelFrequency_not_contains: String

  """
  All values starting with the given string.
  """
  travelFrequency_starts_with: String

  """
  All values not starting with the given string.
  """
  travelFrequency_not_starts_with: String

  """
  All values ending with the given string.
  """
  travelFrequency_ends_with: String

  """
  All values not ending with the given string.
  """
  travelFrequency_not_ends_with: String
  shoppingFrequency: String

  """
  All values that are not equal to given value.
  """
  shoppingFrequency_not: String

  """
  All values that are contained in given list.
  """
  shoppingFrequency_in: [String!]

  """
  All values that are not contained in given list.
  """
  shoppingFrequency_not_in: [String!]

  """
  All values less than the given value.
  """
  shoppingFrequency_lt: String

  """
  All values less than or equal the given value.
  """
  shoppingFrequency_lte: String

  """
  All values greater than the given value.
  """
  shoppingFrequency_gt: String

  """
  All values greater than or equal the given value.
  """
  shoppingFrequency_gte: String

  """
  All values containing the given string.
  """
  shoppingFrequency_contains: String

  """
  All values not containing the given string.
  """
  shoppingFrequency_not_contains: String

  """
  All values starting with the given string.
  """
  shoppingFrequency_starts_with: String

  """
  All values not starting with the given string.
  """
  shoppingFrequency_not_starts_with: String

  """
  All values ending with the given string.
  """
  shoppingFrequency_ends_with: String

  """
  All values not ending with the given string.
  """
  shoppingFrequency_not_ends_with: String
  averageSpend: String

  """
  All values that are not equal to given value.
  """
  averageSpend_not: String

  """
  All values that are contained in given list.
  """
  averageSpend_in: [String!]

  """
  All values that are not contained in given list.
  """
  averageSpend_not_in: [String!]

  """
  All values less than the given value.
  """
  averageSpend_lt: String

  """
  All values less than or equal the given value.
  """
  averageSpend_lte: String

  """
  All values greater than the given value.
  """
  averageSpend_gt: String

  """
  All values greater than or equal the given value.
  """
  averageSpend_gte: String

  """
  All values containing the given string.
  """
  averageSpend_contains: String

  """
  All values not containing the given string.
  """
  averageSpend_not_contains: String

  """
  All values starting with the given string.
  """
  averageSpend_starts_with: String

  """
  All values not starting with the given string.
  """
  averageSpend_not_starts_with: String

  """
  All values ending with the given string.
  """
  averageSpend_ends_with: String

  """
  All values not ending with the given string.
  """
  averageSpend_not_ends_with: String
  style: String

  """
  All values that are not equal to given value.
  """
  style_not: String

  """
  All values that are contained in given list.
  """
  style_in: [String!]

  """
  All values that are not contained in given list.
  """
  style_not_in: [String!]

  """
  All values less than the given value.
  """
  style_lt: String

  """
  All values less than or equal the given value.
  """
  style_lte: String

  """
  All values greater than the given value.
  """
  style_gt: String

  """
  All values greater than or equal the given value.
  """
  style_gte: String

  """
  All values containing the given string.
  """
  style_contains: String

  """
  All values not containing the given string.
  """
  style_not_contains: String

  """
  All values starting with the given string.
  """
  style_starts_with: String

  """
  All values not starting with the given string.
  """
  style_not_starts_with: String

  """
  All values ending with the given string.
  """
  style_ends_with: String

  """
  All values not ending with the given string.
  """
  style_not_ends_with: String
  commuteStyle: String

  """
  All values that are not equal to given value.
  """
  commuteStyle_not: String

  """
  All values that are contained in given list.
  """
  commuteStyle_in: [String!]

  """
  All values that are not contained in given list.
  """
  commuteStyle_not_in: [String!]

  """
  All values less than the given value.
  """
  commuteStyle_lt: String

  """
  All values less than or equal the given value.
  """
  commuteStyle_lte: String

  """
  All values greater than the given value.
  """
  commuteStyle_gt: String

  """
  All values greater than or equal the given value.
  """
  commuteStyle_gte: String

  """
  All values containing the given string.
  """
  commuteStyle_contains: String

  """
  All values not containing the given string.
  """
  commuteStyle_not_contains: String

  """
  All values starting with the given string.
  """
  commuteStyle_starts_with: String

  """
  All values not starting with the given string.
  """
  commuteStyle_not_starts_with: String

  """
  All values ending with the given string.
  """
  commuteStyle_ends_with: String

  """
  All values not ending with the given string.
  """
  commuteStyle_not_ends_with: String
  phoneOS: String

  """
  All values that are not equal to given value.
  """
  phoneOS_not: String

  """
  All values that are contained in given list.
  """
  phoneOS_in: [String!]

  """
  All values that are not contained in given list.
  """
  phoneOS_not_in: [String!]

  """
  All values less than the given value.
  """
  phoneOS_lt: String

  """
  All values less than or equal the given value.
  """
  phoneOS_lte: String

  """
  All values greater than the given value.
  """
  phoneOS_gt: String

  """
  All values greater than or equal the given value.
  """
  phoneOS_gte: String

  """
  All values containing the given string.
  """
  phoneOS_contains: String

  """
  All values not containing the given string.
  """
  phoneOS_not_contains: String

  """
  All values starting with the given string.
  """
  phoneOS_starts_with: String

  """
  All values not starting with the given string.
  """
  phoneOS_not_starts_with: String

  """
  All values ending with the given string.
  """
  phoneOS_ends_with: String

  """
  All values not ending with the given string.
  """
  phoneOS_not_ends_with: String
  insureShipment: Boolean

  """
  All values that are not equal to given value.
  """
  insureShipment_not: Boolean
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  stylePreferences: StylePreferencesWhereInput
  shippingAddress: LocationWhereInput
}

input CustomerDetailWhereUniqueInput {
  id: ID
}

"""
An edge in a connection.
"""
type CustomerEdge {
  """
  The item at the end of the edge.
  """
  node: Customer!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type CustomerMembership implements Node {
  id: ID!
  subscriptionId: String!
  customer: Customer!
  pauseRequests(
    where: PauseRequestWhereInput
    orderBy: PauseRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PauseRequest!]
}

"""
A connection to a list of items.
"""
type CustomerMembershipConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CustomerMembershipEdge]!
  aggregate: AggregateCustomerMembership!
}

input CustomerMembershipCreateInput {
  id: ID
  subscriptionId: String!
  customer: CustomerCreateOneWithoutMembershipInput!
  pauseRequests: PauseRequestCreateManyWithoutMembershipInput
}

input CustomerMembershipCreateOneWithoutCustomerInput {
  create: CustomerMembershipCreateWithoutCustomerInput
  connect: CustomerMembershipWhereUniqueInput
}

input CustomerMembershipCreateOneWithoutPauseRequestsInput {
  create: CustomerMembershipCreateWithoutPauseRequestsInput
  connect: CustomerMembershipWhereUniqueInput
}

input CustomerMembershipCreateWithoutCustomerInput {
  id: ID
  subscriptionId: String!
  pauseRequests: PauseRequestCreateManyWithoutMembershipInput
}

input CustomerMembershipCreateWithoutPauseRequestsInput {
  id: ID
  subscriptionId: String!
  customer: CustomerCreateOneWithoutMembershipInput!
}

"""
An edge in a connection.
"""
type CustomerMembershipEdge {
  """
  The item at the end of the edge.
  """
  node: CustomerMembership!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CustomerMembershipOrderByInput {
  id_ASC
  id_DESC
  subscriptionId_ASC
  subscriptionId_DESC
}

type CustomerMembershipPreviousValues {
  id: ID!
  subscriptionId: String!
}

type CustomerMembershipSubscriptionPayload {
  mutation: MutationType!
  node: CustomerMembership
  updatedFields: [String!]
  previousValues: CustomerMembershipPreviousValues
}

input CustomerMembershipSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CustomerMembershipSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CustomerMembershipSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CustomerMembershipSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerMembershipWhereInput
}

input CustomerMembershipUpdateInput {
  subscriptionId: String
  customer: CustomerUpdateOneRequiredWithoutMembershipInput
  pauseRequests: PauseRequestUpdateManyWithoutMembershipInput
}

input CustomerMembershipUpdateManyMutationInput {
  subscriptionId: String
}

input CustomerMembershipUpdateOneRequiredWithoutPauseRequestsInput {
  create: CustomerMembershipCreateWithoutPauseRequestsInput
  connect: CustomerMembershipWhereUniqueInput
  update: CustomerMembershipUpdateWithoutPauseRequestsDataInput
  upsert: CustomerMembershipUpsertWithoutPauseRequestsInput
}

input CustomerMembershipUpdateOneWithoutCustomerInput {
  create: CustomerMembershipCreateWithoutCustomerInput
  connect: CustomerMembershipWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CustomerMembershipUpdateWithoutCustomerDataInput
  upsert: CustomerMembershipUpsertWithoutCustomerInput
}

input CustomerMembershipUpdateWithoutCustomerDataInput {
  subscriptionId: String
  pauseRequests: PauseRequestUpdateManyWithoutMembershipInput
}

input CustomerMembershipUpdateWithoutPauseRequestsDataInput {
  subscriptionId: String
  customer: CustomerUpdateOneRequiredWithoutMembershipInput
}

input CustomerMembershipUpsertWithoutCustomerInput {
  update: CustomerMembershipUpdateWithoutCustomerDataInput!
  create: CustomerMembershipCreateWithoutCustomerInput!
}

input CustomerMembershipUpsertWithoutPauseRequestsInput {
  update: CustomerMembershipUpdateWithoutPauseRequestsDataInput!
  create: CustomerMembershipCreateWithoutPauseRequestsInput!
}

input CustomerMembershipWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CustomerMembershipWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CustomerMembershipWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CustomerMembershipWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  subscriptionId: String

  """
  All values that are not equal to given value.
  """
  subscriptionId_not: String

  """
  All values that are contained in given list.
  """
  subscriptionId_in: [String!]

  """
  All values that are not contained in given list.
  """
  subscriptionId_not_in: [String!]

  """
  All values less than the given value.
  """
  subscriptionId_lt: String

  """
  All values less than or equal the given value.
  """
  subscriptionId_lte: String

  """
  All values greater than the given value.
  """
  subscriptionId_gt: String

  """
  All values greater than or equal the given value.
  """
  subscriptionId_gte: String

  """
  All values containing the given string.
  """
  subscriptionId_contains: String

  """
  All values not containing the given string.
  """
  subscriptionId_not_contains: String

  """
  All values starting with the given string.
  """
  subscriptionId_starts_with: String

  """
  All values not starting with the given string.
  """
  subscriptionId_not_starts_with: String

  """
  All values ending with the given string.
  """
  subscriptionId_ends_with: String

  """
  All values not ending with the given string.
  """
  subscriptionId_not_ends_with: String
  customer: CustomerWhereInput
  pauseRequests_every: PauseRequestWhereInput
  pauseRequests_some: PauseRequestWhereInput
  pauseRequests_none: PauseRequestWhereInput
}

input CustomerMembershipWhereUniqueInput {
  id: ID
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  plan_ASC
  plan_DESC
}

type CustomerPreviousValues {
  id: ID!
  status: CustomerStatus
  plan: Plan
}

enum CustomerStatus {
  Invited
  Created
  Waitlisted
  Authorized
  Active
  Suspended
  Paused
  Deactivated
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CustomerSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CustomerSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CustomerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
}

input CustomerUpdateDataInput {
  status: CustomerStatus
  plan: Plan
  user: UserUpdateOneRequiredInput
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
}

input CustomerUpdateInput {
  status: CustomerStatus
  plan: Plan
  user: UserUpdateOneRequiredInput
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
}

input CustomerUpdateManyMutationInput {
  status: CustomerStatus
  plan: Plan
}

input CustomerUpdateOneRequiredInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateDataInput
  upsert: CustomerUpsertNestedInput
}

input CustomerUpdateOneRequiredWithoutBagItemsInput {
  create: CustomerCreateWithoutBagItemsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutBagItemsDataInput
  upsert: CustomerUpsertWithoutBagItemsInput
}

input CustomerUpdateOneRequiredWithoutMembershipInput {
  create: CustomerCreateWithoutMembershipInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutMembershipDataInput
  upsert: CustomerUpsertWithoutMembershipInput
}

input CustomerUpdateOneRequiredWithoutReservationsInput {
  create: CustomerCreateWithoutReservationsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutReservationsDataInput
  upsert: CustomerUpsertWithoutReservationsInput
}

input CustomerUpdateWithoutBagItemsDataInput {
  status: CustomerStatus
  plan: Plan
  user: UserUpdateOneRequiredInput
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithoutMembershipDataInput {
  status: CustomerStatus
  plan: Plan
  user: UserUpdateOneRequiredInput
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithoutReservationsDataInput {
  status: CustomerStatus
  plan: Plan
  user: UserUpdateOneRequiredInput
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
}

input CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput!
  create: CustomerCreateInput!
}

input CustomerUpsertWithoutBagItemsInput {
  update: CustomerUpdateWithoutBagItemsDataInput!
  create: CustomerCreateWithoutBagItemsInput!
}

input CustomerUpsertWithoutMembershipInput {
  update: CustomerUpdateWithoutMembershipDataInput!
  create: CustomerCreateWithoutMembershipInput!
}

input CustomerUpsertWithoutReservationsInput {
  update: CustomerUpdateWithoutReservationsDataInput!
  create: CustomerCreateWithoutReservationsInput!
}

input CustomerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CustomerWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CustomerWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CustomerWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  status: CustomerStatus

  """
  All values that are not equal to given value.
  """
  status_not: CustomerStatus

  """
  All values that are contained in given list.
  """
  status_in: [CustomerStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [CustomerStatus!]
  plan: Plan

  """
  All values that are not equal to given value.
  """
  plan_not: Plan

  """
  All values that are contained in given list.
  """
  plan_in: [Plan!]

  """
  All values that are not contained in given list.
  """
  plan_not_in: [Plan!]
  user: UserWhereInput
  detail: CustomerDetailWhereInput
  billingInfo: BillingInfoWhereInput
  membership: CustomerMembershipWhereInput
  bagItems_every: BagItemWhereInput
  bagItems_some: BagItemWhereInput
  bagItems_none: BagItemWhereInput
  reservations_every: ReservationWhereInput
  reservations_some: ReservationWhereInput
  reservations_none: ReservationWhereInput
}

input CustomerWhereUniqueInput {
  id: ID
}

scalar DateTime

enum EmailId {
  ReservationReturnConfirmation
  ReservationConfirmation
  CompleteAccount
  FreeToReserve
  WelcomeToSeasons
  ReturnReminder
  PriorityAccess
}

type EmailReceipt implements Node {
  id: ID!
  emailId: EmailId!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type EmailReceiptConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [EmailReceiptEdge]!
  aggregate: AggregateEmailReceipt!
}

input EmailReceiptCreateInput {
  id: ID
  emailId: EmailId!
  user: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type EmailReceiptEdge {
  """
  The item at the end of the edge.
  """
  node: EmailReceipt!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum EmailReceiptOrderByInput {
  id_ASC
  id_DESC
  emailId_ASC
  emailId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmailReceiptPreviousValues {
  id: ID!
  emailId: EmailId!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmailReceiptSubscriptionPayload {
  mutation: MutationType!
  node: EmailReceipt
  updatedFields: [String!]
  previousValues: EmailReceiptPreviousValues
}

input EmailReceiptSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EmailReceiptSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [EmailReceiptSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [EmailReceiptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmailReceiptWhereInput
}

input EmailReceiptUpdateInput {
  emailId: EmailId
  user: UserUpdateOneRequiredInput
}

input EmailReceiptUpdateManyMutationInput {
  emailId: EmailId
}

input EmailReceiptWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EmailReceiptWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [EmailReceiptWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [EmailReceiptWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  emailId: EmailId

  """
  All values that are not equal to given value.
  """
  emailId_not: EmailId

  """
  All values that are contained in given list.
  """
  emailId_in: [EmailId!]

  """
  All values that are not contained in given list.
  """
  emailId_not_in: [EmailId!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input EmailReceiptWhereUniqueInput {
  id: ID
}

type HomepageProductRail implements Node {
  id: ID!
  slug: String!
  name: String!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
}

"""
A connection to a list of items.
"""
type HomepageProductRailConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [HomepageProductRailEdge]!
  aggregate: AggregateHomepageProductRail!
}

input HomepageProductRailCreateInput {
  id: ID
  slug: String!
  name: String!
  products: ProductCreateManyInput
}

"""
An edge in a connection.
"""
type HomepageProductRailEdge {
  """
  The item at the end of the edge.
  """
  node: HomepageProductRail!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum HomepageProductRailOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
}

type HomepageProductRailPreviousValues {
  id: ID!
  slug: String!
  name: String!
}

type HomepageProductRailSubscriptionPayload {
  mutation: MutationType!
  node: HomepageProductRail
  updatedFields: [String!]
  previousValues: HomepageProductRailPreviousValues
}

input HomepageProductRailSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HomepageProductRailSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [HomepageProductRailSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [HomepageProductRailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HomepageProductRailWhereInput
}

input HomepageProductRailUpdateInput {
  slug: String
  name: String
  products: ProductUpdateManyInput
}

input HomepageProductRailUpdateManyMutationInput {
  slug: String
  name: String
}

input HomepageProductRailWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HomepageProductRailWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [HomepageProductRailWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [HomepageProductRailWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input HomepageProductRailWhereUniqueInput {
  id: ID
  slug: String
}

type Image implements Node {
  id: ID!
  caption: String
  url: String!
  height: Int
  width: Int
  title: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type ImageConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  caption: String
  url: String!
  height: Int
  width: Int
  title: String
}

input ImageCreateManyInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

<<<<<<< HEAD
=======
input ImageCreateOneInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

>>>>>>> Rebase
"""
An edge in a connection.
"""
type ImageEdge {
  """
  The item at the end of the edge.
  """
  node: Image!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  caption_ASC
  caption_DESC
  url_ASC
  url_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImagePreviousValues {
  id: ID!
  caption: String
  url: String!
  height: Int
  width: Int
  title: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ImageScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ImageScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ImageScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ImageScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  caption: String

  """
  All values that are not equal to given value.
  """
  caption_not: String

  """
  All values that are contained in given list.
  """
  caption_in: [String!]

  """
  All values that are not contained in given list.
  """
  caption_not_in: [String!]

  """
  All values less than the given value.
  """
  caption_lt: String

  """
  All values less than or equal the given value.
  """
  caption_lte: String

  """
  All values greater than the given value.
  """
  caption_gt: String

  """
  All values greater than or equal the given value.
  """
  caption_gte: String

  """
  All values containing the given string.
  """
  caption_contains: String

  """
  All values not containing the given string.
  """
  caption_not_contains: String

  """
  All values starting with the given string.
  """
  caption_starts_with: String

  """
  All values not starting with the given string.
  """
  caption_not_starts_with: String

  """
  All values ending with the given string.
  """
  caption_ends_with: String

  """
  All values not ending with the given string.
  """
  caption_not_ends_with: String
  url: String

  """
  All values that are not equal to given value.
  """
  url_not: String

  """
  All values that are contained in given list.
  """
  url_in: [String!]

  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]

  """
  All values less than the given value.
  """
  url_lt: String

  """
  All values less than or equal the given value.
  """
  url_lte: String

  """
  All values greater than the given value.
  """
  url_gt: String

  """
  All values greater than or equal the given value.
  """
  url_gte: String

  """
  All values containing the given string.
  """
  url_contains: String

  """
  All values not containing the given string.
  """
  url_not_contains: String

  """
  All values starting with the given string.
  """
  url_starts_with: String

  """
  All values not starting with the given string.
  """
  url_not_starts_with: String

  """
  All values ending with the given string.
  """
  url_ends_with: String

  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  height: Int

  """
  All values that are not equal to given value.
  """
  height_not: Int

  """
  All values that are contained in given list.
  """
  height_in: [Int!]

  """
  All values that are not contained in given list.
  """
  height_not_in: [Int!]

  """
  All values less than the given value.
  """
  height_lt: Int

  """
  All values less than or equal the given value.
  """
  height_lte: Int

  """
  All values greater than the given value.
  """
  height_gt: Int

  """
  All values greater than or equal the given value.
  """
  height_gte: Int
  width: Int

  """
  All values that are not equal to given value.
  """
  width_not: Int

  """
  All values that are contained in given list.
  """
  width_in: [Int!]

  """
  All values that are not contained in given list.
  """
  width_not_in: [Int!]

  """
  All values less than the given value.
  """
  width_lt: Int

  """
  All values less than or equal the given value.
  """
  width_lte: Int

  """
  All values greater than the given value.
  """
  width_gt: Int

  """
  All values greater than or equal the given value.
  """
  width_gte: Int
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ImageSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ImageSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateDataInput {
  caption: String
  url: String
  height: Int
  width: Int
  title: String
}

input ImageUpdateInput {
  caption: String
  url: String
  height: Int
  width: Int
  title: String
}

input ImageUpdateManyDataInput {
  caption: String
  url: String
  height: Int
  width: Int
  title: String
}

input ImageUpdateManyInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  delete: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueNestedInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
  deleteMany: [ImageScalarWhereInput!]
  upsert: [ImageUpsertWithWhereUniqueNestedInput!]
}

input ImageUpdateManyMutationInput {
  caption: String
  url: String
  height: Int
  width: Int
  title: String
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateOneRequiredInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  update: ImageUpdateDataInput
  upsert: ImageUpsertNestedInput
}

input ImageUpdateWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateDataInput!
}

input ImageUpsertNestedInput {
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageUpsertWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ImageWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ImageWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ImageWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  caption: String

  """
  All values that are not equal to given value.
  """
  caption_not: String

  """
  All values that are contained in given list.
  """
  caption_in: [String!]

  """
  All values that are not contained in given list.
  """
  caption_not_in: [String!]

  """
  All values less than the given value.
  """
  caption_lt: String

  """
  All values less than or equal the given value.
  """
  caption_lte: String

  """
  All values greater than the given value.
  """
  caption_gt: String

  """
  All values greater than or equal the given value.
  """
  caption_gte: String

  """
  All values containing the given string.
  """
  caption_contains: String

  """
  All values not containing the given string.
  """
  caption_not_contains: String

  """
  All values starting with the given string.
  """
  caption_starts_with: String

  """
  All values not starting with the given string.
  """
  caption_not_starts_with: String

  """
  All values ending with the given string.
  """
  caption_ends_with: String

  """
  All values not ending with the given string.
  """
  caption_not_ends_with: String
  url: String

  """
  All values that are not equal to given value.
  """
  url_not: String

  """
  All values that are contained in given list.
  """
  url_in: [String!]

  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]

  """
  All values less than the given value.
  """
  url_lt: String

  """
  All values less than or equal the given value.
  """
  url_lte: String

  """
  All values greater than the given value.
  """
  url_gt: String

  """
  All values greater than or equal the given value.
  """
  url_gte: String

  """
  All values containing the given string.
  """
  url_contains: String

  """
  All values not containing the given string.
  """
  url_not_contains: String

  """
  All values starting with the given string.
  """
  url_starts_with: String

  """
  All values not starting with the given string.
  """
  url_not_starts_with: String

  """
  All values ending with the given string.
  """
  url_ends_with: String

  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  height: Int

  """
  All values that are not equal to given value.
  """
  height_not: Int

  """
  All values that are contained in given list.
  """
  height_in: [Int!]

  """
  All values that are not contained in given list.
  """
  height_not_in: [Int!]

  """
  All values less than the given value.
  """
  height_lt: Int

  """
  All values less than or equal the given value.
  """
  height_lte: Int

  """
  All values greater than the given value.
  """
  height_gt: Int

  """
  All values greater than or equal the given value.
  """
  height_gte: Int
  width: Int

  """
  All values that are not equal to given value.
  """
  width_not: Int

  """
  All values that are contained in given list.
  """
  width_in: [Int!]

  """
  All values that are not contained in given list.
  """
  width_not_in: [Int!]

  """
  All values less than the given value.
  """
  width_lt: Int

  """
  All values less than or equal the given value.
  """
  width_lte: Int

  """
  All values greater than the given value.
  """
  width_gt: Int

  """
  All values greater than or equal the given value.
  """
  width_gte: Int
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input ImageWhereUniqueInput {
  id: ID
  url: String
}

enum InventoryStatus {
  NonReservable
  Reservable
  Reserved
  Stored
  Offloaded
}

"""
Raw JSON value
"""
scalar Json

type Label implements Node {
  id: ID!
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

"""
A connection to a list of items.
"""
type LabelConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [LabelEdge]!
  aggregate: AggregateLabel!
}

input LabelCreateInput {
  id: ID
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

input LabelCreateOneInput {
  create: LabelCreateInput
  connect: LabelWhereUniqueInput
}

"""
An edge in a connection.
"""
type LabelEdge {
  """
  The item at the end of the edge.
  """
  node: Label!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum LabelOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  trackingNumber_ASC
  trackingNumber_DESC
  trackingURL_ASC
  trackingURL_DESC
}

type LabelPreviousValues {
  id: ID!
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

type LabelSubscriptionPayload {
  mutation: MutationType!
  node: Label
  updatedFields: [String!]
  previousValues: LabelPreviousValues
}

input LabelSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LabelSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [LabelSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LabelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LabelWhereInput
}

input LabelUpdateDataInput {
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

input LabelUpdateInput {
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

input LabelUpdateManyMutationInput {
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

input LabelUpdateOneRequiredInput {
  create: LabelCreateInput
  connect: LabelWhereUniqueInput
  update: LabelUpdateDataInput
  upsert: LabelUpsertNestedInput
}

input LabelUpsertNestedInput {
  update: LabelUpdateDataInput!
  create: LabelCreateInput!
}

input LabelWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LabelWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [LabelWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LabelWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  image: String

  """
  All values that are not equal to given value.
  """
  image_not: String

  """
  All values that are contained in given list.
  """
  image_in: [String!]

  """
  All values that are not contained in given list.
  """
  image_not_in: [String!]

  """
  All values less than the given value.
  """
  image_lt: String

  """
  All values less than or equal the given value.
  """
  image_lte: String

  """
  All values greater than the given value.
  """
  image_gt: String

  """
  All values greater than or equal the given value.
  """
  image_gte: String

  """
  All values containing the given string.
  """
  image_contains: String

  """
  All values not containing the given string.
  """
  image_not_contains: String

  """
  All values starting with the given string.
  """
  image_starts_with: String

  """
  All values not starting with the given string.
  """
  image_not_starts_with: String

  """
  All values ending with the given string.
  """
  image_ends_with: String

  """
  All values not ending with the given string.
  """
  image_not_ends_with: String
  trackingNumber: String

  """
  All values that are not equal to given value.
  """
  trackingNumber_not: String

  """
  All values that are contained in given list.
  """
  trackingNumber_in: [String!]

  """
  All values that are not contained in given list.
  """
  trackingNumber_not_in: [String!]

  """
  All values less than the given value.
  """
  trackingNumber_lt: String

  """
  All values less than or equal the given value.
  """
  trackingNumber_lte: String

  """
  All values greater than the given value.
  """
  trackingNumber_gt: String

  """
  All values greater than or equal the given value.
  """
  trackingNumber_gte: String

  """
  All values containing the given string.
  """
  trackingNumber_contains: String

  """
  All values not containing the given string.
  """
  trackingNumber_not_contains: String

  """
  All values starting with the given string.
  """
  trackingNumber_starts_with: String

  """
  All values not starting with the given string.
  """
  trackingNumber_not_starts_with: String

  """
  All values ending with the given string.
  """
  trackingNumber_ends_with: String

  """
  All values not ending with the given string.
  """
  trackingNumber_not_ends_with: String
  trackingURL: String

  """
  All values that are not equal to given value.
  """
  trackingURL_not: String

  """
  All values that are contained in given list.
  """
  trackingURL_in: [String!]

  """
  All values that are not contained in given list.
  """
  trackingURL_not_in: [String!]

  """
  All values less than the given value.
  """
  trackingURL_lt: String

  """
  All values less than or equal the given value.
  """
  trackingURL_lte: String

  """
  All values greater than the given value.
  """
  trackingURL_gt: String

  """
  All values greater than or equal the given value.
  """
  trackingURL_gte: String

  """
  All values containing the given string.
  """
  trackingURL_contains: String

  """
  All values not containing the given string.
  """
  trackingURL_not_contains: String

  """
  All values starting with the given string.
  """
  trackingURL_starts_with: String

  """
  All values not starting with the given string.
  """
  trackingURL_not_starts_with: String

  """
  All values ending with the given string.
  """
  trackingURL_ends_with: String

  """
  All values not ending with the given string.
  """
  trackingURL_not_ends_with: String
}

input LabelWhereUniqueInput {
  id: ID
}

enum LetterSize {
  XS
  S
  M
  L
  XL
  XXL
}

type Location implements Node {
  id: ID!
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String!
  locationType: LocationType
  user: User
  lat: Float
  lng: Float
  physicalProducts(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type LocationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  id: ID
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String!
  locationType: LocationType
  lat: Float
  lng: Float
  user: UserCreateOneInput
  physicalProducts: PhysicalProductCreateManyWithoutLocationInput
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOneWithoutPhysicalProductsInput {
  create: LocationCreateWithoutPhysicalProductsInput
  connect: LocationWhereUniqueInput
}

input LocationCreateWithoutPhysicalProductsInput {
  id: ID
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String!
  locationType: LocationType
  lat: Float
  lng: Float
  user: UserCreateOneInput
}

"""
An edge in a connection.
"""
type LocationEdge {
  """
  The item at the end of the edge.
  """
  node: Location!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  company_ASC
  company_DESC
  description_ASC
  description_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zipCode_ASC
  zipCode_DESC
  locationType_ASC
  locationType_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LocationPreviousValues {
  id: ID!
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String!
  locationType: LocationType
  lat: Float
  lng: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LocationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [LocationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

enum LocationType {
  Office
  Warehouse
  Cleaner
  Customer
}

input LocationUpdateDataInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String
  locationType: LocationType
  lat: Float
  lng: Float
  user: UserUpdateOneInput
  physicalProducts: PhysicalProductUpdateManyWithoutLocationInput
}

input LocationUpdateInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String
  locationType: LocationType
  lat: Float
  lng: Float
  user: UserUpdateOneInput
  physicalProducts: PhysicalProductUpdateManyWithoutLocationInput
}

input LocationUpdateManyMutationInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String
  locationType: LocationType
  lat: Float
  lng: Float
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpdateOneRequiredInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpdateOneWithoutPhysicalProductsInput {
  create: LocationCreateWithoutPhysicalProductsInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocationUpdateWithoutPhysicalProductsDataInput
  upsert: LocationUpsertWithoutPhysicalProductsInput
}

input LocationUpdateWithoutPhysicalProductsDataInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String
  locationType: LocationType
  lat: Float
  lng: Float
  user: UserUpdateOneInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationUpsertWithoutPhysicalProductsInput {
  update: LocationUpdateWithoutPhysicalProductsDataInput!
  create: LocationCreateWithoutPhysicalProductsInput!
}

input LocationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LocationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [LocationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [LocationWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  company: String

  """
  All values that are not equal to given value.
  """
  company_not: String

  """
  All values that are contained in given list.
  """
  company_in: [String!]

  """
  All values that are not contained in given list.
  """
  company_not_in: [String!]

  """
  All values less than the given value.
  """
  company_lt: String

  """
  All values less than or equal the given value.
  """
  company_lte: String

  """
  All values greater than the given value.
  """
  company_gt: String

  """
  All values greater than or equal the given value.
  """
  company_gte: String

  """
  All values containing the given string.
  """
  company_contains: String

  """
  All values not containing the given string.
  """
  company_not_contains: String

  """
  All values starting with the given string.
  """
  company_starts_with: String

  """
  All values not starting with the given string.
  """
  company_not_starts_with: String

  """
  All values ending with the given string.
  """
  company_ends_with: String

  """
  All values not ending with the given string.
  """
  company_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  address1: String

  """
  All values that are not equal to given value.
  """
  address1_not: String

  """
  All values that are contained in given list.
  """
  address1_in: [String!]

  """
  All values that are not contained in given list.
  """
  address1_not_in: [String!]

  """
  All values less than the given value.
  """
  address1_lt: String

  """
  All values less than or equal the given value.
  """
  address1_lte: String

  """
  All values greater than the given value.
  """
  address1_gt: String

  """
  All values greater than or equal the given value.
  """
  address1_gte: String

  """
  All values containing the given string.
  """
  address1_contains: String

  """
  All values not containing the given string.
  """
  address1_not_contains: String

  """
  All values starting with the given string.
  """
  address1_starts_with: String

  """
  All values not starting with the given string.
  """
  address1_not_starts_with: String

  """
  All values ending with the given string.
  """
  address1_ends_with: String

  """
  All values not ending with the given string.
  """
  address1_not_ends_with: String
  address2: String

  """
  All values that are not equal to given value.
  """
  address2_not: String

  """
  All values that are contained in given list.
  """
  address2_in: [String!]

  """
  All values that are not contained in given list.
  """
  address2_not_in: [String!]

  """
  All values less than the given value.
  """
  address2_lt: String

  """
  All values less than or equal the given value.
  """
  address2_lte: String

  """
  All values greater than the given value.
  """
  address2_gt: String

  """
  All values greater than or equal the given value.
  """
  address2_gte: String

  """
  All values containing the given string.
  """
  address2_contains: String

  """
  All values not containing the given string.
  """
  address2_not_contains: String

  """
  All values starting with the given string.
  """
  address2_starts_with: String

  """
  All values not starting with the given string.
  """
  address2_not_starts_with: String

  """
  All values ending with the given string.
  """
  address2_ends_with: String

  """
  All values not ending with the given string.
  """
  address2_not_ends_with: String
  city: String

  """
  All values that are not equal to given value.
  """
  city_not: String

  """
  All values that are contained in given list.
  """
  city_in: [String!]

  """
  All values that are not contained in given list.
  """
  city_not_in: [String!]

  """
  All values less than the given value.
  """
  city_lt: String

  """
  All values less than or equal the given value.
  """
  city_lte: String

  """
  All values greater than the given value.
  """
  city_gt: String

  """
  All values greater than or equal the given value.
  """
  city_gte: String

  """
  All values containing the given string.
  """
  city_contains: String

  """
  All values not containing the given string.
  """
  city_not_contains: String

  """
  All values starting with the given string.
  """
  city_starts_with: String

  """
  All values not starting with the given string.
  """
  city_not_starts_with: String

  """
  All values ending with the given string.
  """
  city_ends_with: String

  """
  All values not ending with the given string.
  """
  city_not_ends_with: String
  state: String

  """
  All values that are not equal to given value.
  """
  state_not: String

  """
  All values that are contained in given list.
  """
  state_in: [String!]

  """
  All values that are not contained in given list.
  """
  state_not_in: [String!]

  """
  All values less than the given value.
  """
  state_lt: String

  """
  All values less than or equal the given value.
  """
  state_lte: String

  """
  All values greater than the given value.
  """
  state_gt: String

  """
  All values greater than or equal the given value.
  """
  state_gte: String

  """
  All values containing the given string.
  """
  state_contains: String

  """
  All values not containing the given string.
  """
  state_not_contains: String

  """
  All values starting with the given string.
  """
  state_starts_with: String

  """
  All values not starting with the given string.
  """
  state_not_starts_with: String

  """
  All values ending with the given string.
  """
  state_ends_with: String

  """
  All values not ending with the given string.
  """
  state_not_ends_with: String
  zipCode: String

  """
  All values that are not equal to given value.
  """
  zipCode_not: String

  """
  All values that are contained in given list.
  """
  zipCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  zipCode_not_in: [String!]

  """
  All values less than the given value.
  """
  zipCode_lt: String

  """
  All values less than or equal the given value.
  """
  zipCode_lte: String

  """
  All values greater than the given value.
  """
  zipCode_gt: String

  """
  All values greater than or equal the given value.
  """
  zipCode_gte: String

  """
  All values containing the given string.
  """
  zipCode_contains: String

  """
  All values not containing the given string.
  """
  zipCode_not_contains: String

  """
  All values starting with the given string.
  """
  zipCode_starts_with: String

  """
  All values not starting with the given string.
  """
  zipCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  zipCode_ends_with: String

  """
  All values not ending with the given string.
  """
  zipCode_not_ends_with: String
  locationType: LocationType

  """
  All values that are not equal to given value.
  """
  locationType_not: LocationType

  """
  All values that are contained in given list.
  """
  locationType_in: [LocationType!]

  """
  All values that are not contained in given list.
  """
  locationType_not_in: [LocationType!]
  lat: Float

  """
  All values that are not equal to given value.
  """
  lat_not: Float

  """
  All values that are contained in given list.
  """
  lat_in: [Float!]

  """
  All values that are not contained in given list.
  """
  lat_not_in: [Float!]

  """
  All values less than the given value.
  """
  lat_lt: Float

  """
  All values less than or equal the given value.
  """
  lat_lte: Float

  """
  All values greater than the given value.
  """
  lat_gt: Float

  """
  All values greater than or equal the given value.
  """
  lat_gte: Float
  lng: Float

  """
  All values that are not equal to given value.
  """
  lng_not: Float

  """
  All values that are contained in given list.
  """
  lng_in: [Float!]

  """
  All values that are not contained in given list.
  """
  lng_not_in: [Float!]

  """
  All values less than the given value.
  """
  lng_lt: Float

  """
  All values less than or equal the given value.
  """
  lng_lte: Float

  """
  All values greater than the given value.
  """
  lng_gt: Float

  """
  All values greater than or equal the given value.
  """
  lng_gte: Float
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  user: UserWhereInput
  physicalProducts_every: PhysicalProductWhereInput
  physicalProducts_some: PhysicalProductWhereInput
  physicalProducts_none: PhysicalProductWhereInput
}

input LocationWhereUniqueInput {
  id: ID
  slug: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBrand(data: BrandCreateInput!): Brand!
  createCollectionGroup(data: CollectionGroupCreateInput!): CollectionGroup!
  createHomepageProductRail(
    data: HomepageProductRailCreateInput!
  ): HomepageProductRail!
  createTag(data: TagCreateInput!): Tag!
  createProductStatusChange(
    data: ProductStatusChangeCreateInput!
  ): ProductStatusChange!
  createProductMaterialCategory(
    data: ProductMaterialCategoryCreateInput!
  ): ProductMaterialCategory!
  createProductModel(data: ProductModelCreateInput!): ProductModel!
  createPhysicalProductInventoryStatusChange(
    data: PhysicalProductInventoryStatusChangeCreateInput!
  ): PhysicalProductInventoryStatusChange!
  createWarehouseLocationConstraint(
    data: WarehouseLocationConstraintCreateInput!
  ): WarehouseLocationConstraint!
  createWarehouseLocation(
    data: WarehouseLocationCreateInput!
  ): WarehouseLocation!
  createPaymentPlan(data: PaymentPlanCreateInput!): PaymentPlan!
  createEmailReceipt(data: EmailReceiptCreateInput!): EmailReceipt!
<<<<<<< HEAD
=======
  createStyleSubmissionReport(
    data: StyleSubmissionReportCreateInput!
  ): StyleSubmissionReport!
>>>>>>> Rebase
  createBagItem(data: BagItemCreateInput!): BagItem!
  createCustomerMembership(
    data: CustomerMembershipCreateInput!
  ): CustomerMembership!
  createPauseRequest(data: PauseRequestCreateInput!): PauseRequest!
  createRecentlyViewedProduct(
    data: RecentlyViewedProductCreateInput!
  ): RecentlyViewedProduct!
  createReservationFeedback(
    data: ReservationFeedbackCreateInput!
  ): ReservationFeedback!
  createProductVariantFeedback(
    data: ProductVariantFeedbackCreateInput!
  ): ProductVariantFeedback!
  createProductVariantFeedbackQuestion(
    data: ProductVariantFeedbackQuestionCreateInput!
  ): ProductVariantFeedbackQuestion!
  createReservationReceipt(
    data: ReservationReceiptCreateInput!
  ): ReservationReceipt!
  createProductRequest(data: ProductRequestCreateInput!): ProductRequest!
  createProductVariantWant(
    data: ProductVariantWantCreateInput!
  ): ProductVariantWant!
  createCollection(data: CollectionCreateInput!): Collection!
  createPushNotificationReceipt(
    data: PushNotificationReceiptCreateInput!
  ): PushNotificationReceipt!
  createCustomerDetail(data: CustomerDetailCreateInput!): CustomerDetail!
  createUserPushNotificationInterest(
    data: UserPushNotificationInterestCreateInput!
  ): UserPushNotificationInterest!
  createBillingInfo(data: BillingInfoCreateInput!): BillingInfo!
  createReservationReceiptItem(
    data: ReservationReceiptItemCreateInput!
  ): ReservationReceiptItem!
<<<<<<< HEAD
  createSmsReceipt(data: SmsReceiptCreateInput!): SmsReceipt!
  createStylePreferences(data: StylePreferencesCreateInput!): StylePreferences!
  createImage(data: ImageCreateInput!): Image!
  createPackage(data: PackageCreateInput!): Package!
  createSize(data: SizeCreateInput!): Size!
  createProductFunction(data: ProductFunctionCreateInput!): ProductFunction!
=======
  createStylePreferences(data: StylePreferencesCreateInput!): StylePreferences!
  createPackage(data: PackageCreateInput!): Package!
  createSize(data: SizeCreateInput!): Size!
  createProductFunction(data: ProductFunctionCreateInput!): ProductFunction!
  createStyleSubmission(data: StyleSubmissionCreateInput!): StyleSubmission!
  createImage(data: ImageCreateInput!): Image!
>>>>>>> Rebase
  createColor(data: ColorCreateInput!): Color!
  createTopSize(data: TopSizeCreateInput!): TopSize!
  createCustomer(data: CustomerCreateInput!): Customer!
  createUserPushNotification(
    data: UserPushNotificationCreateInput!
  ): UserPushNotification!
  createCategory(data: CategoryCreateInput!): Category!
  createBottomSize(data: BottomSizeCreateInput!): BottomSize!
  createPackageTransitEvent(
    data: PackageTransitEventCreateInput!
  ): PackageTransitEvent!
  createLabel(data: LabelCreateInput!): Label!
<<<<<<< HEAD
=======
  createSmsReceipt(data: SmsReceiptCreateInput!): SmsReceipt!
>>>>>>> Rebase
  createLocation(data: LocationCreateInput!): Location!
  createPhysicalProduct(data: PhysicalProductCreateInput!): PhysicalProduct!
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant!
  createProduct(data: ProductCreateInput!): Product!
  createReservation(data: ReservationCreateInput!): Reservation!
  createUser(data: UserCreateInput!): User!
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateCollectionGroup(
    data: CollectionGroupUpdateInput!
    where: CollectionGroupWhereUniqueInput!
  ): CollectionGroup
  updateHomepageProductRail(
    data: HomepageProductRailUpdateInput!
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateProductStatusChange(
    data: ProductStatusChangeUpdateInput!
    where: ProductStatusChangeWhereUniqueInput!
  ): ProductStatusChange
  updateProductMaterialCategory(
    data: ProductMaterialCategoryUpdateInput!
    where: ProductMaterialCategoryWhereUniqueInput!
  ): ProductMaterialCategory
  updateProductModel(
    data: ProductModelUpdateInput!
    where: ProductModelWhereUniqueInput!
  ): ProductModel
  updatePhysicalProductInventoryStatusChange(
    data: PhysicalProductInventoryStatusChangeUpdateInput!
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  ): PhysicalProductInventoryStatusChange
  updateWarehouseLocationConstraint(
    data: WarehouseLocationConstraintUpdateInput!
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
  updateWarehouseLocation(
    data: WarehouseLocationUpdateInput!
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  updatePaymentPlan(
    data: PaymentPlanUpdateInput!
    where: PaymentPlanWhereUniqueInput!
  ): PaymentPlan
  updateEmailReceipt(
    data: EmailReceiptUpdateInput!
    where: EmailReceiptWhereUniqueInput!
  ): EmailReceipt
<<<<<<< HEAD
  updateBagItem(
    data: BagItemUpdateInput!
    where: BagItemWhereUniqueInput!
  ): BagItem
  updateCustomerMembership(
    data: CustomerMembershipUpdateInput!
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  updatePauseRequest(
    data: PauseRequestUpdateInput!
    where: PauseRequestWhereUniqueInput!
  ): PauseRequest
  updateRecentlyViewedProduct(
    data: RecentlyViewedProductUpdateInput!
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  updateReservationFeedback(
    data: ReservationFeedbackUpdateInput!
    where: ReservationFeedbackWhereUniqueInput!
  ): ReservationFeedback
  updateProductVariantFeedback(
    data: ProductVariantFeedbackUpdateInput!
    where: ProductVariantFeedbackWhereUniqueInput!
  ): ProductVariantFeedback
  updateProductVariantFeedbackQuestion(
    data: ProductVariantFeedbackQuestionUpdateInput!
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
  ): ProductVariantFeedbackQuestion
  updateReservationReceipt(
    data: ReservationReceiptUpdateInput!
    where: ReservationReceiptWhereUniqueInput!
  ): ReservationReceipt
  updateProductRequest(
    data: ProductRequestUpdateInput!
    where: ProductRequestWhereUniqueInput!
  ): ProductRequest
  updateProductVariantWant(
    data: ProductVariantWantUpdateInput!
    where: ProductVariantWantWhereUniqueInput!
  ): ProductVariantWant
  updateCollection(
    data: CollectionUpdateInput!
    where: CollectionWhereUniqueInput!
  ): Collection
  updatePushNotificationReceipt(
    data: PushNotificationReceiptUpdateInput!
    where: PushNotificationReceiptWhereUniqueInput!
  ): PushNotificationReceipt
  updateCustomerDetail(
    data: CustomerDetailUpdateInput!
    where: CustomerDetailWhereUniqueInput!
  ): CustomerDetail
  updateUserPushNotificationInterest(
    data: UserPushNotificationInterestUpdateInput!
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  updateBillingInfo(
    data: BillingInfoUpdateInput!
    where: BillingInfoWhereUniqueInput!
  ): BillingInfo
  updateReservationReceiptItem(
    data: ReservationReceiptItemUpdateInput!
    where: ReservationReceiptItemWhereUniqueInput!
  ): ReservationReceiptItem
  updateSmsReceipt(
    data: SmsReceiptUpdateInput!
    where: SmsReceiptWhereUniqueInput!
  ): SmsReceipt
  updateStylePreferences(
    data: StylePreferencesUpdateInput!
    where: StylePreferencesWhereUniqueInput!
  ): StylePreferences
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updatePackage(
    data: PackageUpdateInput!
    where: PackageWhereUniqueInput!
  ): Package
  updateSize(data: SizeUpdateInput!, where: SizeWhereUniqueInput!): Size
  updateProductFunction(
    data: ProductFunctionUpdateInput!
    where: ProductFunctionWhereUniqueInput!
  ): ProductFunction
  updateColor(data: ColorUpdateInput!, where: ColorWhereUniqueInput!): Color
  updateTopSize(
    data: TopSizeUpdateInput!
    where: TopSizeWhereUniqueInput!
  ): TopSize
  updateCustomer(
    data: CustomerUpdateInput!
    where: CustomerWhereUniqueInput!
  ): Customer
  updateUserPushNotification(
    data: UserPushNotificationUpdateInput!
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  updateCategory(
    data: CategoryUpdateInput!
    where: CategoryWhereUniqueInput!
  ): Category
  updateBottomSize(
    data: BottomSizeUpdateInput!
    where: BottomSizeWhereUniqueInput!
  ): BottomSize
  updatePackageTransitEvent(
    data: PackageTransitEventUpdateInput!
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  updateLabel(data: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label
  updateLocation(
    data: LocationUpdateInput!
    where: LocationWhereUniqueInput!
  ): Location
  updatePhysicalProduct(
    data: PhysicalProductUpdateInput!
    where: PhysicalProductWhereUniqueInput!
  ): PhysicalProduct
  updateProductVariant(
    data: ProductVariantUpdateInput!
    where: ProductVariantWhereUniqueInput!
  ): ProductVariant
  updateProduct(
    data: ProductUpdateInput!
    where: ProductWhereUniqueInput!
  ): Product
  updateReservation(
    data: ReservationUpdateInput!
    where: ReservationWhereUniqueInput!
  ): Reservation
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteCollectionGroup(
    where: CollectionGroupWhereUniqueInput!
  ): CollectionGroup
  deleteHomepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteProductStatusChange(
    where: ProductStatusChangeWhereUniqueInput!
  ): ProductStatusChange
  deleteProductMaterialCategory(
    where: ProductMaterialCategoryWhereUniqueInput!
  ): ProductMaterialCategory
  deleteProductModel(where: ProductModelWhereUniqueInput!): ProductModel
  deletePhysicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  ): PhysicalProductInventoryStatusChange
  deleteWarehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
  deleteWarehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  deletePaymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  deleteEmailReceipt(where: EmailReceiptWhereUniqueInput!): EmailReceipt
  deleteBagItem(where: BagItemWhereUniqueInput!): BagItem
  deleteCustomerMembership(
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  deletePauseRequest(where: PauseRequestWhereUniqueInput!): PauseRequest
  deleteRecentlyViewedProduct(
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  deleteReservationFeedback(
    where: ReservationFeedbackWhereUniqueInput!
  ): ReservationFeedback
  deleteProductVariantFeedback(
    where: ProductVariantFeedbackWhereUniqueInput!
  ): ProductVariantFeedback
  deleteProductVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
  ): ProductVariantFeedbackQuestion
  deleteReservationReceipt(
    where: ReservationReceiptWhereUniqueInput!
  ): ReservationReceipt
  deleteProductRequest(where: ProductRequestWhereUniqueInput!): ProductRequest
  deleteProductVariantWant(
    where: ProductVariantWantWhereUniqueInput!
  ): ProductVariantWant
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deletePushNotificationReceipt(
    where: PushNotificationReceiptWhereUniqueInput!
  ): PushNotificationReceipt
  deleteCustomerDetail(where: CustomerDetailWhereUniqueInput!): CustomerDetail
  deleteUserPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  deleteBillingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  deleteReservationReceiptItem(
    where: ReservationReceiptItemWhereUniqueInput!
  ): ReservationReceiptItem
  deleteSmsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  deleteStylePreferences(
    where: StylePreferencesWhereUniqueInput!
  ): StylePreferences
  deleteImage(where: ImageWhereUniqueInput!): Image
  deletePackage(where: PackageWhereUniqueInput!): Package
  deleteSize(where: SizeWhereUniqueInput!): Size
  deleteProductFunction(
    where: ProductFunctionWhereUniqueInput!
  ): ProductFunction
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteTopSize(where: TopSizeWhereUniqueInput!): TopSize
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteUserPushNotification(
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteBottomSize(where: BottomSizeWhereUniqueInput!): BottomSize
  deletePackageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deletePhysicalProduct(
    where: PhysicalProductWhereUniqueInput!
  ): PhysicalProduct
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteUser(where: UserWhereUniqueInput!): User
  upsertBrand(
    where: BrandWhereUniqueInput!
    create: BrandCreateInput!
    update: BrandUpdateInput!
  ): Brand!
<<<<<<< HEAD
=======
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(
    data: CategoryUpdateInput!
    where: CategoryWhereUniqueInput!
  ): Category
  updateManyCategories(
    data: CategoryUpdateManyMutationInput!
    where: CategoryWhereInput
  ): BatchPayload!
  upsertCategory(
    where: CategoryWhereUniqueInput!
    create: CategoryCreateInput!
    update: CategoryUpdateInput!
  ): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createCollection(data: CollectionCreateInput!): Collection!
  updateCollection(
    data: CollectionUpdateInput!
    where: CollectionWhereUniqueInput!
  ): Collection
  updateManyCollections(
    data: CollectionUpdateManyMutationInput!
    where: CollectionWhereInput
  ): BatchPayload!
  upsertCollection(
    where: CollectionWhereUniqueInput!
    create: CollectionCreateInput!
    update: CollectionUpdateInput!
  ): Collection!
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteManyCollections(where: CollectionWhereInput): BatchPayload!
  createCollectionGroup(data: CollectionGroupCreateInput!): CollectionGroup!
  updateCollectionGroup(
    data: CollectionGroupUpdateInput!
    where: CollectionGroupWhereUniqueInput!
  ): CollectionGroup
<<<<<<< HEAD
  updateManyCollectionGroups(
    data: CollectionGroupUpdateManyMutationInput!
    where: CollectionGroupWhereInput
  ): BatchPayload!
=======
  updateHomepageProductRail(
    data: HomepageProductRailUpdateInput!
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateProductStatusChange(
    data: ProductStatusChangeUpdateInput!
    where: ProductStatusChangeWhereUniqueInput!
  ): ProductStatusChange
  updateProductMaterialCategory(
    data: ProductMaterialCategoryUpdateInput!
    where: ProductMaterialCategoryWhereUniqueInput!
  ): ProductMaterialCategory
  updateProductModel(
    data: ProductModelUpdateInput!
    where: ProductModelWhereUniqueInput!
  ): ProductModel
  updatePhysicalProductInventoryStatusChange(
    data: PhysicalProductInventoryStatusChangeUpdateInput!
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  ): PhysicalProductInventoryStatusChange
  updateWarehouseLocationConstraint(
    data: WarehouseLocationConstraintUpdateInput!
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
  updateWarehouseLocation(
    data: WarehouseLocationUpdateInput!
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  updatePaymentPlan(
    data: PaymentPlanUpdateInput!
    where: PaymentPlanWhereUniqueInput!
  ): PaymentPlan
  updateEmailReceipt(
    data: EmailReceiptUpdateInput!
    where: EmailReceiptWhereUniqueInput!
  ): EmailReceipt
=======
>>>>>>> Rebase
  updateStyleSubmissionReport(
    data: StyleSubmissionReportUpdateInput!
    where: StyleSubmissionReportWhereUniqueInput!
  ): StyleSubmissionReport
  updateBagItem(
    data: BagItemUpdateInput!
    where: BagItemWhereUniqueInput!
  ): BagItem
  updateCustomerMembership(
    data: CustomerMembershipUpdateInput!
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  updatePauseRequest(
    data: PauseRequestUpdateInput!
    where: PauseRequestWhereUniqueInput!
  ): PauseRequest
  updateRecentlyViewedProduct(
    data: RecentlyViewedProductUpdateInput!
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  updateReservationFeedback(
    data: ReservationFeedbackUpdateInput!
    where: ReservationFeedbackWhereUniqueInput!
  ): ReservationFeedback
  updateProductVariantFeedback(
    data: ProductVariantFeedbackUpdateInput!
    where: ProductVariantFeedbackWhereUniqueInput!
  ): ProductVariantFeedback
  updateProductVariantFeedbackQuestion(
    data: ProductVariantFeedbackQuestionUpdateInput!
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
  ): ProductVariantFeedbackQuestion
  updateReservationReceipt(
    data: ReservationReceiptUpdateInput!
    where: ReservationReceiptWhereUniqueInput!
  ): ReservationReceipt
  updateProductRequest(
    data: ProductRequestUpdateInput!
    where: ProductRequestWhereUniqueInput!
<<<<<<< HEAD
  ): ProductRequest
  updateProductVariantWant(
    data: ProductVariantWantUpdateInput!
    where: ProductVariantWantWhereUniqueInput!
  ): ProductVariantWant
  updateCollection(
    data: CollectionUpdateInput!
    where: CollectionWhereUniqueInput!
  ): Collection
  updatePushNotificationReceipt(
    data: PushNotificationReceiptUpdateInput!
    where: PushNotificationReceiptWhereUniqueInput!
  ): PushNotificationReceipt
  updateCustomerDetail(
    data: CustomerDetailUpdateInput!
    where: CustomerDetailWhereUniqueInput!
  ): CustomerDetail
  updateUserPushNotificationInterest(
    data: UserPushNotificationInterestUpdateInput!
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  updateBillingInfo(
    data: BillingInfoUpdateInput!
    where: BillingInfoWhereUniqueInput!
  ): BillingInfo
  updateReservationReceiptItem(
    data: ReservationReceiptItemUpdateInput!
    where: ReservationReceiptItemWhereUniqueInput!
  ): ReservationReceiptItem
  updateStylePreferences(
    data: StylePreferencesUpdateInput!
    where: StylePreferencesWhereUniqueInput!
  ): StylePreferences
  updatePackage(
    data: PackageUpdateInput!
    where: PackageWhereUniqueInput!
  ): Package
  updateSize(data: SizeUpdateInput!, where: SizeWhereUniqueInput!): Size
  updateProductFunction(
    data: ProductFunctionUpdateInput!
    where: ProductFunctionWhereUniqueInput!
  ): ProductFunction
  updateStyleSubmission(
    data: StyleSubmissionUpdateInput!
    where: StyleSubmissionWhereUniqueInput!
  ): StyleSubmission
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateColor(data: ColorUpdateInput!, where: ColorWhereUniqueInput!): Color
  updateTopSize(
    data: TopSizeUpdateInput!
    where: TopSizeWhereUniqueInput!
  ): TopSize
  updateCustomer(
    data: CustomerUpdateInput!
    where: CustomerWhereUniqueInput!
  ): Customer
  updateUserPushNotification(
    data: UserPushNotificationUpdateInput!
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  updateCategory(
    data: CategoryUpdateInput!
    where: CategoryWhereUniqueInput!
  ): Category
  updateBottomSize(
    data: BottomSizeUpdateInput!
    where: BottomSizeWhereUniqueInput!
  ): BottomSize
  updatePackageTransitEvent(
    data: PackageTransitEventUpdateInput!
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  updateLabel(data: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label
  updateSmsReceipt(
    data: SmsReceiptUpdateInput!
    where: SmsReceiptWhereUniqueInput!
  ): SmsReceipt
  updateLocation(
    data: LocationUpdateInput!
    where: LocationWhereUniqueInput!
  ): Location
  updatePhysicalProduct(
    data: PhysicalProductUpdateInput!
    where: PhysicalProductWhereUniqueInput!
  ): PhysicalProduct
  updateProductVariant(
    data: ProductVariantUpdateInput!
    where: ProductVariantWhereUniqueInput!
  ): ProductVariant
  updateProduct(
    data: ProductUpdateInput!
    where: ProductWhereUniqueInput!
  ): Product
  updateReservation(
    data: ReservationUpdateInput!
    where: ReservationWhereUniqueInput!
  ): Reservation
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteCollectionGroup(
    where: CollectionGroupWhereUniqueInput!
  ): CollectionGroup
  deleteHomepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteProductStatusChange(
    where: ProductStatusChangeWhereUniqueInput!
  ): ProductStatusChange
  deleteProductMaterialCategory(
    where: ProductMaterialCategoryWhereUniqueInput!
  ): ProductMaterialCategory
  deleteProductModel(where: ProductModelWhereUniqueInput!): ProductModel
  deletePhysicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  ): PhysicalProductInventoryStatusChange
  deleteWarehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
  deleteWarehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  deletePaymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  deleteEmailReceipt(where: EmailReceiptWhereUniqueInput!): EmailReceipt
  deleteStyleSubmissionReport(
    where: StyleSubmissionReportWhereUniqueInput!
  ): StyleSubmissionReport
  deleteBagItem(where: BagItemWhereUniqueInput!): BagItem
  deleteCustomerMembership(
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  deletePauseRequest(where: PauseRequestWhereUniqueInput!): PauseRequest
  deleteRecentlyViewedProduct(
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  deleteReservationFeedback(
    where: ReservationFeedbackWhereUniqueInput!
  ): ReservationFeedback
  deleteProductVariantFeedback(
    where: ProductVariantFeedbackWhereUniqueInput!
  ): ProductVariantFeedback
  deleteProductVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
  ): ProductVariantFeedbackQuestion
  deleteReservationReceipt(
    where: ReservationReceiptWhereUniqueInput!
  ): ReservationReceipt
  deleteProductRequest(where: ProductRequestWhereUniqueInput!): ProductRequest
  deleteProductVariantWant(
    where: ProductVariantWantWhereUniqueInput!
  ): ProductVariantWant
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deletePushNotificationReceipt(
    where: PushNotificationReceiptWhereUniqueInput!
  ): PushNotificationReceipt
  deleteCustomerDetail(where: CustomerDetailWhereUniqueInput!): CustomerDetail
  deleteUserPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  deleteBillingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  deleteReservationReceiptItem(
    where: ReservationReceiptItemWhereUniqueInput!
  ): ReservationReceiptItem
  deleteStylePreferences(
    where: StylePreferencesWhereUniqueInput!
  ): StylePreferences
  deletePackage(where: PackageWhereUniqueInput!): Package
  deleteSize(where: SizeWhereUniqueInput!): Size
  deleteProductFunction(
    where: ProductFunctionWhereUniqueInput!
  ): ProductFunction
  deleteStyleSubmission(
    where: StyleSubmissionWhereUniqueInput!
  ): StyleSubmission
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteTopSize(where: TopSizeWhereUniqueInput!): TopSize
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteUserPushNotification(
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteBottomSize(where: BottomSizeWhereUniqueInput!): BottomSize
  deletePackageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteSmsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deletePhysicalProduct(
    where: PhysicalProductWhereUniqueInput!
  ): PhysicalProduct
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  upsertCollectionGroup(
    where: CollectionGroupWhereUniqueInput!
    create: CollectionGroupCreateInput!
    update: CollectionGroupUpdateInput!
  ): CollectionGroup!
<<<<<<< HEAD
=======
<<<<<<< HEAD
  deleteCollectionGroup(
    where: CollectionGroupWhereUniqueInput!
  ): CollectionGroup
  deleteManyCollectionGroups(where: CollectionGroupWhereInput): BatchPayload!
  createColor(data: ColorCreateInput!): Color!
  updateColor(data: ColorUpdateInput!, where: ColorWhereUniqueInput!): Color
  updateManyColors(
    data: ColorUpdateManyMutationInput!
    where: ColorWhereInput
  ): BatchPayload!
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  upsertHomepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
    create: HomepageProductRailCreateInput!
    update: HomepageProductRailUpdateInput!
  ): HomepageProductRail!
  upsertTag(
    where: TagWhereUniqueInput!
    create: TagCreateInput!
    update: TagUpdateInput!
  ): Tag!
  upsertProductStatusChange(
    where: ProductStatusChangeWhereUniqueInput!
    create: ProductStatusChangeCreateInput!
    update: ProductStatusChangeUpdateInput!
  ): ProductStatusChange!
  upsertProductMaterialCategory(
    where: ProductMaterialCategoryWhereUniqueInput!
    create: ProductMaterialCategoryCreateInput!
    update: ProductMaterialCategoryUpdateInput!
  ): ProductMaterialCategory!
  upsertProductModel(
    where: ProductModelWhereUniqueInput!
    create: ProductModelCreateInput!
    update: ProductModelUpdateInput!
  ): ProductModel!
  upsertPhysicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
    create: PhysicalProductInventoryStatusChangeCreateInput!
    update: PhysicalProductInventoryStatusChangeUpdateInput!
  ): PhysicalProductInventoryStatusChange!
  upsertWarehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
    create: WarehouseLocationConstraintCreateInput!
    update: WarehouseLocationConstraintUpdateInput!
  ): WarehouseLocationConstraint!
  upsertWarehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
    create: WarehouseLocationCreateInput!
    update: WarehouseLocationUpdateInput!
  ): WarehouseLocation!
  upsertPaymentPlan(
    where: PaymentPlanWhereUniqueInput!
    create: PaymentPlanCreateInput!
    update: PaymentPlanUpdateInput!
  ): PaymentPlan!
  upsertEmailReceipt(
    where: EmailReceiptWhereUniqueInput!
    create: EmailReceiptCreateInput!
    update: EmailReceiptUpdateInput!
  ): EmailReceipt!
<<<<<<< HEAD
=======
  upsertStyleSubmissionReport(
    where: StyleSubmissionReportWhereUniqueInput!
    create: StyleSubmissionReportCreateInput!
    update: StyleSubmissionReportUpdateInput!
  ): StyleSubmissionReport!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  upsertBagItem(
    where: BagItemWhereUniqueInput!
    create: BagItemCreateInput!
    update: BagItemUpdateInput!
  ): BagItem!
  upsertCustomerMembership(
    where: CustomerMembershipWhereUniqueInput!
    create: CustomerMembershipCreateInput!
    update: CustomerMembershipUpdateInput!
  ): CustomerMembership!
  upsertPauseRequest(
    where: PauseRequestWhereUniqueInput!
    create: PauseRequestCreateInput!
    update: PauseRequestUpdateInput!
  ): PauseRequest!
  upsertRecentlyViewedProduct(
    where: RecentlyViewedProductWhereUniqueInput!
    create: RecentlyViewedProductCreateInput!
    update: RecentlyViewedProductUpdateInput!
  ): RecentlyViewedProduct!
  upsertReservationFeedback(
    where: ReservationFeedbackWhereUniqueInput!
    create: ReservationFeedbackCreateInput!
    update: ReservationFeedbackUpdateInput!
  ): ReservationFeedback!
  upsertProductVariantFeedback(
    where: ProductVariantFeedbackWhereUniqueInput!
    create: ProductVariantFeedbackCreateInput!
    update: ProductVariantFeedbackUpdateInput!
  ): ProductVariantFeedback!
  upsertProductVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
    create: ProductVariantFeedbackQuestionCreateInput!
    update: ProductVariantFeedbackQuestionUpdateInput!
  ): ProductVariantFeedbackQuestion!
  upsertReservationReceipt(
    where: ReservationReceiptWhereUniqueInput!
    create: ReservationReceiptCreateInput!
    update: ReservationReceiptUpdateInput!
  ): ReservationReceipt!
  upsertProductRequest(
    where: ProductRequestWhereUniqueInput!
    create: ProductRequestCreateInput!
    update: ProductRequestUpdateInput!
  ): ProductRequest!
  upsertProductVariantWant(
    where: ProductVariantWantWhereUniqueInput!
    create: ProductVariantWantCreateInput!
    update: ProductVariantWantUpdateInput!
  ): ProductVariantWant!
  upsertCollection(
    where: CollectionWhereUniqueInput!
    create: CollectionCreateInput!
    update: CollectionUpdateInput!
  ): Collection!
  upsertPushNotificationReceipt(
    where: PushNotificationReceiptWhereUniqueInput!
    create: PushNotificationReceiptCreateInput!
    update: PushNotificationReceiptUpdateInput!
  ): PushNotificationReceipt!
  upsertCustomerDetail(
    where: CustomerDetailWhereUniqueInput!
    create: CustomerDetailCreateInput!
    update: CustomerDetailUpdateInput!
  ): CustomerDetail!
  upsertUserPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
    create: UserPushNotificationInterestCreateInput!
    update: UserPushNotificationInterestUpdateInput!
  ): UserPushNotificationInterest!
  upsertBillingInfo(
    where: BillingInfoWhereUniqueInput!
    create: BillingInfoCreateInput!
    update: BillingInfoUpdateInput!
  ): BillingInfo!
  upsertReservationReceiptItem(
    where: ReservationReceiptItemWhereUniqueInput!
    create: ReservationReceiptItemCreateInput!
    update: ReservationReceiptItemUpdateInput!
  ): ReservationReceiptItem!
<<<<<<< HEAD
  upsertSmsReceipt(
    where: SmsReceiptWhereUniqueInput!
    create: SmsReceiptCreateInput!
    update: SmsReceiptUpdateInput!
  ): SmsReceipt!
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  upsertStylePreferences(
    where: StylePreferencesWhereUniqueInput!
    create: StylePreferencesCreateInput!
    update: StylePreferencesUpdateInput!
  ): StylePreferences!
<<<<<<< HEAD
  upsertImage(
    where: ImageWhereUniqueInput!
    create: ImageCreateInput!
    update: ImageUpdateInput!
  ): Image!
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  upsertPackage(
    where: PackageWhereUniqueInput!
    create: PackageCreateInput!
    update: PackageUpdateInput!
  ): Package!
  upsertSize(
    where: SizeWhereUniqueInput!
    create: SizeCreateInput!
    update: SizeUpdateInput!
  ): Size!
  upsertProductFunction(
    where: ProductFunctionWhereUniqueInput!
    create: ProductFunctionCreateInput!
    update: ProductFunctionUpdateInput!
  ): ProductFunction!
<<<<<<< HEAD
=======
  upsertStyleSubmission(
    where: StyleSubmissionWhereUniqueInput!
    create: StyleSubmissionCreateInput!
    update: StyleSubmissionUpdateInput!
  ): StyleSubmission!
  upsertImage(
    where: ImageWhereUniqueInput!
    create: ImageCreateInput!
    update: ImageUpdateInput!
  ): Image!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  upsertColor(
    where: ColorWhereUniqueInput!
    create: ColorCreateInput!
    update: ColorUpdateInput!
  ): Color!
<<<<<<< HEAD
  upsertTopSize(
    where: TopSizeWhereUniqueInput!
    create: TopSizeCreateInput!
    update: TopSizeUpdateInput!
  ): TopSize!
  upsertCustomer(
    where: CustomerWhereUniqueInput!
    create: CustomerCreateInput!
    update: CustomerUpdateInput!
  ): Customer!
  upsertUserPushNotification(
    where: UserPushNotificationWhereUniqueInput!
    create: UserPushNotificationCreateInput!
    update: UserPushNotificationUpdateInput!
  ): UserPushNotification!
  upsertCategory(
    where: CategoryWhereUniqueInput!
    create: CategoryCreateInput!
    update: CategoryUpdateInput!
  ): Category!
  upsertBottomSize(
    where: BottomSizeWhereUniqueInput!
    create: BottomSizeCreateInput!
    update: BottomSizeUpdateInput!
  ): BottomSize!
  upsertPackageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
    create: PackageTransitEventCreateInput!
    update: PackageTransitEventUpdateInput!
  ): PackageTransitEvent!
  upsertLabel(
    where: LabelWhereUniqueInput!
    create: LabelCreateInput!
    update: LabelUpdateInput!
  ): Label!
  upsertLocation(
    where: LocationWhereUniqueInput!
    create: LocationCreateInput!
    update: LocationUpdateInput!
  ): Location!
  upsertPhysicalProduct(
    where: PhysicalProductWhereUniqueInput!
    create: PhysicalProductCreateInput!
    update: PhysicalProductUpdateInput!
  ): PhysicalProduct!
  upsertProductVariant(
    where: ProductVariantWhereUniqueInput!
    create: ProductVariantCreateInput!
    update: ProductVariantUpdateInput!
  ): ProductVariant!
  upsertProduct(
    where: ProductWhereUniqueInput!
    create: ProductCreateInput!
    update: ProductUpdateInput!
  ): Product!
  upsertReservation(
    where: ReservationWhereUniqueInput!
    create: ReservationCreateInput!
    update: ReservationUpdateInput!
  ): Reservation!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  updateManyBrands(
    data: BrandUpdateManyMutationInput!
    where: BrandWhereInput
  ): BatchPayload!
  updateManyCollectionGroups(
    data: CollectionGroupUpdateManyMutationInput!
    where: CollectionGroupWhereInput
  ): BatchPayload!
  updateManyHomepageProductRails(
    data: HomepageProductRailUpdateManyMutationInput!
    where: HomepageProductRailWhereInput
  ): BatchPayload!
  updateManyTags(
    data: TagUpdateManyMutationInput!
    where: TagWhereInput
  ): BatchPayload!
  updateManyProductStatusChanges(
    data: ProductStatusChangeUpdateManyMutationInput!
    where: ProductStatusChangeWhereInput
  ): BatchPayload!
  updateManyProductMaterialCategories(
    data: ProductMaterialCategoryUpdateManyMutationInput!
    where: ProductMaterialCategoryWhereInput
  ): BatchPayload!
  updateManyProductModels(
    data: ProductModelUpdateManyMutationInput!
    where: ProductModelWhereInput
  ): BatchPayload!
  updateManyPhysicalProductInventoryStatusChanges(
    data: PhysicalProductInventoryStatusChangeUpdateManyMutationInput!
    where: PhysicalProductInventoryStatusChangeWhereInput
  ): BatchPayload!
  updateManyWarehouseLocationConstraints(
    data: WarehouseLocationConstraintUpdateManyMutationInput!
    where: WarehouseLocationConstraintWhereInput
  ): BatchPayload!
  updateManyWarehouseLocations(
    data: WarehouseLocationUpdateManyMutationInput!
    where: WarehouseLocationWhereInput
  ): BatchPayload!
  updateManyPaymentPlans(
    data: PaymentPlanUpdateManyMutationInput!
    where: PaymentPlanWhereInput
  ): BatchPayload!
  updateManyEmailReceipts(
    data: EmailReceiptUpdateManyMutationInput!
    where: EmailReceiptWhereInput
  ): BatchPayload!
  updateManyBagItems(
    data: BagItemUpdateManyMutationInput!
    where: BagItemWhereInput
  ): BatchPayload!
  updateManyCustomerMemberships(
    data: CustomerMembershipUpdateManyMutationInput!
    where: CustomerMembershipWhereInput
  ): BatchPayload!
  updateManyPauseRequests(
    data: PauseRequestUpdateManyMutationInput!
    where: PauseRequestWhereInput
  ): BatchPayload!
  updateManyRecentlyViewedProducts(
    data: RecentlyViewedProductUpdateManyMutationInput!
    where: RecentlyViewedProductWhereInput
  ): BatchPayload!
  updateManyReservationFeedbacks(
    data: ReservationFeedbackUpdateManyMutationInput!
    where: ReservationFeedbackWhereInput
  ): BatchPayload!
  updateManyProductVariantFeedbacks(
    data: ProductVariantFeedbackUpdateManyMutationInput!
    where: ProductVariantFeedbackWhereInput
  ): BatchPayload!
  updateManyProductVariantFeedbackQuestions(
    data: ProductVariantFeedbackQuestionUpdateManyMutationInput!
    where: ProductVariantFeedbackQuestionWhereInput
  ): BatchPayload!
  updateManyProductRequests(
    data: ProductRequestUpdateManyMutationInput!
    where: ProductRequestWhereInput
  ): BatchPayload!
  updateManyProductVariantWants(
    data: ProductVariantWantUpdateManyMutationInput!
    where: ProductVariantWantWhereInput
  ): BatchPayload!
  updateManyCollections(
    data: CollectionUpdateManyMutationInput!
    where: CollectionWhereInput
  ): BatchPayload!
  updateManyPushNotificationReceipts(
    data: PushNotificationReceiptUpdateManyMutationInput!
    where: PushNotificationReceiptWhereInput
  ): BatchPayload!
  updateManyCustomerDetails(
    data: CustomerDetailUpdateManyMutationInput!
    where: CustomerDetailWhereInput
  ): BatchPayload!
  updateManyUserPushNotificationInterests(
    data: UserPushNotificationInterestUpdateManyMutationInput!
    where: UserPushNotificationInterestWhereInput
  ): BatchPayload!
  updateManyBillingInfoes(
    data: BillingInfoUpdateManyMutationInput!
    where: BillingInfoWhereInput
  ): BatchPayload!
  updateManyReservationReceiptItems(
    data: ReservationReceiptItemUpdateManyMutationInput!
    where: ReservationReceiptItemWhereInput
  ): BatchPayload!
  updateManySmsReceipts(
    data: SmsReceiptUpdateManyMutationInput!
    where: SmsReceiptWhereInput
  ): BatchPayload!
  updateManyStylePreferenceses(
    data: StylePreferencesUpdateManyMutationInput!
    where: StylePreferencesWhereInput
  ): BatchPayload!
  updateManyImages(
    data: ImageUpdateManyMutationInput!
    where: ImageWhereInput
  ): BatchPayload!
  updateManyPackages(
    data: PackageUpdateManyMutationInput!
    where: PackageWhereInput
  ): BatchPayload!
  updateManySizes(
    data: SizeUpdateManyMutationInput!
    where: SizeWhereInput
  ): BatchPayload!
  updateManyProductFunctions(
    data: ProductFunctionUpdateManyMutationInput!
    where: ProductFunctionWhereInput
  ): BatchPayload!
  updateManyColors(
    data: ColorUpdateManyMutationInput!
    where: ColorWhereInput
  ): BatchPayload!
  updateManyTopSizes(
    data: TopSizeUpdateManyMutationInput!
    where: TopSizeWhereInput
  ): BatchPayload!
  updateManyCustomers(
    data: CustomerUpdateManyMutationInput!
    where: CustomerWhereInput
  ): BatchPayload!
  updateManyUserPushNotifications(
    data: UserPushNotificationUpdateManyMutationInput!
    where: UserPushNotificationWhereInput
  ): BatchPayload!
  updateManyCategories(
    data: CategoryUpdateManyMutationInput!
    where: CategoryWhereInput
  ): BatchPayload!
  updateManyBottomSizes(
    data: BottomSizeUpdateManyMutationInput!
    where: BottomSizeWhereInput
  ): BatchPayload!
  updateManyPackageTransitEvents(
    data: PackageTransitEventUpdateManyMutationInput!
    where: PackageTransitEventWhereInput
  ): BatchPayload!
  updateManyLabels(
    data: LabelUpdateManyMutationInput!
    where: LabelWhereInput
  ): BatchPayload!
  updateManyLocations(
    data: LocationUpdateManyMutationInput!
    where: LocationWhereInput
  ): BatchPayload!
  updateManyPhysicalProducts(
    data: PhysicalProductUpdateManyMutationInput!
    where: PhysicalProductWhereInput
  ): BatchPayload!
  updateManyProductVariants(
    data: ProductVariantUpdateManyMutationInput!
    where: ProductVariantWhereInput
  ): BatchPayload!
  updateManyProducts(
    data: ProductUpdateManyMutationInput!
    where: ProductWhereInput
  ): BatchPayload!
  updateManyReservations(
    data: ReservationUpdateManyMutationInput!
    where: ReservationWhereInput
  ): BatchPayload!
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  deleteManyCollectionGroups(where: CollectionGroupWhereInput): BatchPayload!
  deleteManyHomepageProductRails(
    where: HomepageProductRailWhereInput
  ): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyProductStatusChanges(
    where: ProductStatusChangeWhereInput
  ): BatchPayload!
  deleteManyProductMaterialCategories(
    where: ProductMaterialCategoryWhereInput
  ): BatchPayload!
  deleteManyProductModels(where: ProductModelWhereInput): BatchPayload!
  deleteManyPhysicalProductInventoryStatusChanges(
    where: PhysicalProductInventoryStatusChangeWhereInput
  ): BatchPayload!
  deleteManyWarehouseLocationConstraints(
    where: WarehouseLocationConstraintWhereInput
  ): BatchPayload!
  deleteManyWarehouseLocations(
    where: WarehouseLocationWhereInput
  ): BatchPayload!
  deleteManyPaymentPlans(where: PaymentPlanWhereInput): BatchPayload!
  deleteManyEmailReceipts(where: EmailReceiptWhereInput): BatchPayload!
  deleteManyBagItems(where: BagItemWhereInput): BatchPayload!
  deleteManyCustomerMemberships(
    where: CustomerMembershipWhereInput
  ): BatchPayload!
  deleteManyPauseRequests(where: PauseRequestWhereInput): BatchPayload!
  deleteManyRecentlyViewedProducts(
    where: RecentlyViewedProductWhereInput
  ): BatchPayload!
  deleteManyReservationFeedbacks(
    where: ReservationFeedbackWhereInput
  ): BatchPayload!
  deleteManyProductVariantFeedbacks(
    where: ProductVariantFeedbackWhereInput
  ): BatchPayload!
  deleteManyProductVariantFeedbackQuestions(
    where: ProductVariantFeedbackQuestionWhereInput
  ): BatchPayload!
  deleteManyReservationReceipts(
    where: ReservationReceiptWhereInput
  ): BatchPayload!
  deleteManyProductRequests(where: ProductRequestWhereInput): BatchPayload!
  deleteManyProductVariantWants(
    where: ProductVariantWantWhereInput
  ): BatchPayload!
  deleteManyCollections(where: CollectionWhereInput): BatchPayload!
  deleteManyPushNotificationReceipts(
    where: PushNotificationReceiptWhereInput
  ): BatchPayload!
  deleteManyCustomerDetails(where: CustomerDetailWhereInput): BatchPayload!
  deleteManyUserPushNotificationInterests(
    where: UserPushNotificationInterestWhereInput
  ): BatchPayload!
  deleteManyBillingInfoes(where: BillingInfoWhereInput): BatchPayload!
  deleteManyReservationReceiptItems(
    where: ReservationReceiptItemWhereInput
  ): BatchPayload!
  deleteManySmsReceipts(where: SmsReceiptWhereInput): BatchPayload!
  deleteManyStylePreferenceses(where: StylePreferencesWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  deleteManyPackages(where: PackageWhereInput): BatchPayload!
  deleteManySizes(where: SizeWhereInput): BatchPayload!
  deleteManyProductFunctions(where: ProductFunctionWhereInput): BatchPayload!
  deleteManyColors(where: ColorWhereInput): BatchPayload!
  deleteManyTopSizes(where: TopSizeWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  deleteManyUserPushNotifications(
    where: UserPushNotificationWhereInput
  ): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyBottomSizes(where: BottomSizeWhereInput): BatchPayload!
  deleteManyPackageTransitEvents(
    where: PackageTransitEventWhereInput
  ): BatchPayload!
  deleteManyLabels(where: LabelWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyPhysicalProducts(where: PhysicalProductWhereInput): BatchPayload!
  deleteManyProductVariants(where: ProductVariantWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyReservations(where: ReservationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

type Package implements Node {
  id: ID!
  items(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  transactionID: String!
  shippingLabel: Label!
  fromAddress: Location!
  toAddress: Location!
  weight: Float
  events(
    where: PackageTransitEventWhereInput
    orderBy: PackageTransitEventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PackageTransitEvent!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PackageConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PackageEdge]!
  aggregate: AggregatePackage!
}

input PackageCreateInput {
  id: ID
  transactionID: String!
  weight: Float
  items: PhysicalProductCreateManyInput
  shippingLabel: LabelCreateOneInput!
  fromAddress: LocationCreateOneInput!
  toAddress: LocationCreateOneInput!
  events: PackageTransitEventCreateManyInput
}

input PackageCreateOneInput {
  create: PackageCreateInput
  connect: PackageWhereUniqueInput
}

"""
An edge in a connection.
"""
type PackageEdge {
  """
  The item at the end of the edge.
  """
  node: Package!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PackageOrderByInput {
  id_ASC
  id_DESC
  transactionID_ASC
  transactionID_DESC
  weight_ASC
  weight_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PackagePreviousValues {
  id: ID!
  transactionID: String!
  weight: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PackageSubscriptionPayload {
  mutation: MutationType!
  node: Package
  updatedFields: [String!]
  previousValues: PackagePreviousValues
}

input PackageSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PackageWhereInput
}

type PackageTransitEvent implements Node {
=======
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteManyColors(where: ColorWhereInput): BatchPayload!
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(
    data: CustomerUpdateInput!
    where: CustomerWhereUniqueInput!
  ): Customer
  updateManyCustomers(
    data: CustomerUpdateManyMutationInput!
    where: CustomerWhereInput
  ): BatchPayload!
  upsertCustomer(
    where: CustomerWhereUniqueInput!
    create: CustomerCreateInput!
    update: CustomerUpdateInput!
  ): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createCustomerDetail(data: CustomerDetailCreateInput!): CustomerDetail!
  updateCustomerDetail(
    data: CustomerDetailUpdateInput!
    where: CustomerDetailWhereUniqueInput!
  ): CustomerDetail
  updateManyCustomerDetails(
    data: CustomerDetailUpdateManyMutationInput!
    where: CustomerDetailWhereInput
  ): BatchPayload!
  upsertCustomerDetail(
    where: CustomerDetailWhereUniqueInput!
    create: CustomerDetailCreateInput!
    update: CustomerDetailUpdateInput!
  ): CustomerDetail!
  deleteCustomerDetail(where: CustomerDetailWhereUniqueInput!): CustomerDetail
  deleteManyCustomerDetails(where: CustomerDetailWhereInput): BatchPayload!
  createCustomerMembership(
    data: CustomerMembershipCreateInput!
  ): CustomerMembership!
  updateCustomerMembership(
    data: CustomerMembershipUpdateInput!
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  updateManyCustomerMemberships(
    data: CustomerMembershipUpdateManyMutationInput!
    where: CustomerMembershipWhereInput
  ): BatchPayload!
  upsertCustomerMembership(
    where: CustomerMembershipWhereUniqueInput!
    create: CustomerMembershipCreateInput!
    update: CustomerMembershipUpdateInput!
  ): CustomerMembership!
  deleteCustomerMembership(
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  deleteManyCustomerMemberships(
    where: CustomerMembershipWhereInput
  ): BatchPayload!
  createEmailReceipt(data: EmailReceiptCreateInput!): EmailReceipt!
  updateEmailReceipt(
    data: EmailReceiptUpdateInput!
    where: EmailReceiptWhereUniqueInput!
  ): EmailReceipt
  updateManyEmailReceipts(
    data: EmailReceiptUpdateManyMutationInput!
    where: EmailReceiptWhereInput
  ): BatchPayload!
  upsertEmailReceipt(
    where: EmailReceiptWhereUniqueInput!
    create: EmailReceiptCreateInput!
    update: EmailReceiptUpdateInput!
  ): EmailReceipt!
  deleteEmailReceipt(where: EmailReceiptWhereUniqueInput!): EmailReceipt
  deleteManyEmailReceipts(where: EmailReceiptWhereInput): BatchPayload!
  createHomepageProductRail(
    data: HomepageProductRailCreateInput!
  ): HomepageProductRail!
  updateHomepageProductRail(
    data: HomepageProductRailUpdateInput!
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  updateManyHomepageProductRails(
    data: HomepageProductRailUpdateManyMutationInput!
    where: HomepageProductRailWhereInput
  ): BatchPayload!
  upsertHomepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
    create: HomepageProductRailCreateInput!
    update: HomepageProductRailUpdateInput!
  ): HomepageProductRail!
  deleteHomepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  deleteManyHomepageProductRails(
    where: HomepageProductRailWhereInput
  ): BatchPayload!
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateManyImages(
    data: ImageUpdateManyMutationInput!
    where: ImageWhereInput
  ): BatchPayload!
  upsertImage(
    where: ImageWhereUniqueInput!
    create: ImageCreateInput!
    update: ImageUpdateInput!
  ): Image!
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  createLabel(data: LabelCreateInput!): Label!
  updateLabel(data: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label
  updateManyLabels(
    data: LabelUpdateManyMutationInput!
    where: LabelWhereInput
  ): BatchPayload!
  upsertLabel(
    where: LabelWhereUniqueInput!
    create: LabelCreateInput!
    update: LabelUpdateInput!
  ): Label!
<<<<<<< HEAD
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteManyLabels(where: LabelWhereInput): BatchPayload!
  createLocation(data: LocationCreateInput!): Location!
  updateLocation(
    data: LocationUpdateInput!
    where: LocationWhereUniqueInput!
  ): Location
  updateManyLocations(
    data: LocationUpdateManyMutationInput!
    where: LocationWhereInput
  ): BatchPayload!
=======
  upsertSmsReceipt(
    where: SmsReceiptWhereUniqueInput!
    create: SmsReceiptCreateInput!
    update: SmsReceiptUpdateInput!
  ): SmsReceipt!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  upsertLocation(
    where: LocationWhereUniqueInput!
    create: LocationCreateInput!
    update: LocationUpdateInput!
  ): Location!
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  createPackage(data: PackageCreateInput!): Package!
  updatePackage(
    data: PackageUpdateInput!
    where: PackageWhereUniqueInput!
  ): Package
  updateManyPackages(
    data: PackageUpdateManyMutationInput!
    where: PackageWhereInput
  ): BatchPayload!
  upsertPackage(
    where: PackageWhereUniqueInput!
    create: PackageCreateInput!
    update: PackageUpdateInput!
  ): Package!
  deletePackage(where: PackageWhereUniqueInput!): Package
  deleteManyPackages(where: PackageWhereInput): BatchPayload!
  createPackageTransitEvent(
    data: PackageTransitEventCreateInput!
  ): PackageTransitEvent!
  updatePackageTransitEvent(
    data: PackageTransitEventUpdateInput!
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  updateManyPackageTransitEvents(
    data: PackageTransitEventUpdateManyMutationInput!
    where: PackageTransitEventWhereInput
  ): BatchPayload!
  upsertPackageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
    create: PackageTransitEventCreateInput!
    update: PackageTransitEventUpdateInput!
  ): PackageTransitEvent!
  deletePackageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  deleteManyPackageTransitEvents(
    where: PackageTransitEventWhereInput
  ): BatchPayload!
  createPauseRequest(data: PauseRequestCreateInput!): PauseRequest!
  updatePauseRequest(
    data: PauseRequestUpdateInput!
    where: PauseRequestWhereUniqueInput!
  ): PauseRequest
  updateManyPauseRequests(
    data: PauseRequestUpdateManyMutationInput!
    where: PauseRequestWhereInput
  ): BatchPayload!
  upsertPauseRequest(
    where: PauseRequestWhereUniqueInput!
    create: PauseRequestCreateInput!
    update: PauseRequestUpdateInput!
  ): PauseRequest!
  deletePauseRequest(where: PauseRequestWhereUniqueInput!): PauseRequest
  deleteManyPauseRequests(where: PauseRequestWhereInput): BatchPayload!
  createPaymentPlan(data: PaymentPlanCreateInput!): PaymentPlan!
  updatePaymentPlan(
    data: PaymentPlanUpdateInput!
    where: PaymentPlanWhereUniqueInput!
  ): PaymentPlan
  updateManyPaymentPlans(
    data: PaymentPlanUpdateManyMutationInput!
    where: PaymentPlanWhereInput
  ): BatchPayload!
  upsertPaymentPlan(
    where: PaymentPlanWhereUniqueInput!
    create: PaymentPlanCreateInput!
    update: PaymentPlanUpdateInput!
  ): PaymentPlan!
  deletePaymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  deleteManyPaymentPlans(where: PaymentPlanWhereInput): BatchPayload!
  createPhysicalProduct(data: PhysicalProductCreateInput!): PhysicalProduct!
  updatePhysicalProduct(
    data: PhysicalProductUpdateInput!
    where: PhysicalProductWhereUniqueInput!
  ): PhysicalProduct
  updateManyPhysicalProducts(
    data: PhysicalProductUpdateManyMutationInput!
    where: PhysicalProductWhereInput
  ): BatchPayload!
  upsertPhysicalProduct(
    where: PhysicalProductWhereUniqueInput!
    create: PhysicalProductCreateInput!
    update: PhysicalProductUpdateInput!
  ): PhysicalProduct!
  deletePhysicalProduct(
    where: PhysicalProductWhereUniqueInput!
  ): PhysicalProduct
  deleteManyPhysicalProducts(where: PhysicalProductWhereInput): BatchPayload!
  createPhysicalProductInventoryStatusChange(
    data: PhysicalProductInventoryStatusChangeCreateInput!
  ): PhysicalProductInventoryStatusChange!
  updatePhysicalProductInventoryStatusChange(
    data: PhysicalProductInventoryStatusChangeUpdateInput!
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  ): PhysicalProductInventoryStatusChange
  updateManyPhysicalProductInventoryStatusChanges(
    data: PhysicalProductInventoryStatusChangeUpdateManyMutationInput!
    where: PhysicalProductInventoryStatusChangeWhereInput
  ): BatchPayload!
  upsertPhysicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
    create: PhysicalProductInventoryStatusChangeCreateInput!
    update: PhysicalProductInventoryStatusChangeUpdateInput!
  ): PhysicalProductInventoryStatusChange!
  deletePhysicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  ): PhysicalProductInventoryStatusChange
  deleteManyPhysicalProductInventoryStatusChanges(
    where: PhysicalProductInventoryStatusChangeWhereInput
  ): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(
    data: ProductUpdateInput!
    where: ProductWhereUniqueInput!
  ): Product
  updateManyProducts(
    data: ProductUpdateManyMutationInput!
    where: ProductWhereInput
  ): BatchPayload!
  upsertProduct(
    where: ProductWhereUniqueInput!
    create: ProductCreateInput!
    update: ProductUpdateInput!
  ): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductFunction(data: ProductFunctionCreateInput!): ProductFunction!
  updateProductFunction(
    data: ProductFunctionUpdateInput!
    where: ProductFunctionWhereUniqueInput!
  ): ProductFunction
  updateManyProductFunctions(
    data: ProductFunctionUpdateManyMutationInput!
    where: ProductFunctionWhereInput
  ): BatchPayload!
  upsertProductFunction(
    where: ProductFunctionWhereUniqueInput!
    create: ProductFunctionCreateInput!
    update: ProductFunctionUpdateInput!
  ): ProductFunction!
  deleteProductFunction(
    where: ProductFunctionWhereUniqueInput!
o deleteManyProductFunctions(where: ProductFunctionWhereInput): BatchPayload!
  createProductMaterialCategory(
    data: ProductMaterialCategoryCreateInput!
  ): ProductMaterialCategory!
  updateProductMaterialCategory(
    data: ProductMaterialCategoryUpdateInput!
    where: ProductMaterialCategoryWhereUniqueInput!
  ): ProductMaterialCategory
  updateManyProductMaterialC
  upsertProductModel(
    where: ProductModelWhereUniqueInput!
    create: ProductModelCreateInput!
    update: ProductModelUpdateInput!
  ): ProductModel!
  deleteProductModel(where: ProductModelWhereUniqueInput!): ProductModel
  deleteManyProductModels(where: ProductModelWhereInput): BatchPayload!
  updateProductRequest(
    data: ProductRequestUpdateInput!
    where: ProductRequestWhereUniqueInput!
=======
>>>>>>> Rebase
  ): ProductRequest
  updateManyProductRequests(
    data: ProductRequestUpdateManyMutatione cpdateInpuoedce oich 
    data: RecentlyViewedProductUpdateInput!
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  updateManyRecentlyViewedProducts(
    data: RecentlyViewedProductUpdateManyMutationInput!
    where: RecentlyViewedProductWhereInput
  ): BatchPayload!
t   where: RecentlyViewedProductWhereUniqueInput!
    create: RecentlyViewedProductCreateInput!
    update: RecentlyViewedProductUpdateInput!
  ): RecentlyViewedProduct!
  deleteRecentlyViewedProduct(
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  deleteManyRecentlyViewedProducts(
    where: RecentlyViewedProductWhereInput
  ): BatchPayload!
  createReservation(data: ReservationCreateInput!): Reservation!
  updateReservation(
    data: ReservationUpdateInput!
    where: ReservationWhereUniqueInput!
  ): Reservation
  updateManyReservations(
    data: ReservationUpdateManyMutationInput!
    where: ReservationWhereInput
  ): BatchPayload!
  upsertReservation(
    where: ReservationWhereUniqueInput!
    create: ReservationCreateInput!
    update: ReservationUpdateInput!
  ): Reservation!
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteManyReservations(where: ReservationWhereInput): BatchPayload!
  createReservationFeedback(
    data: ReservationFeedbackCreateInput!
  ): ReservationFeedback!
  updateReservationFeedback(
    data: ReservationFeedbackUpdateInput!
    where: ReservationFeedbackWhereUniqueInput!
  ): ReservationFeedbace
    wtihaateUue S
    data: SizeUpdateManyMutationInput!
    where: SizeWhereInput
  ): BatchPayload!
  upsertSize(
    where: SizeWhereUniqueInput!
    create: SizeCreateInput!
    update: SizeUpdateInput!
  ): Size!
  deleteSize(where: SizeWhereUniqueInput!): Size
  deleteManySizes(where: SizeWhereInput): BatchPayload!
  createSmsReceipt(data: SmsReceiptCreateInput!): SmsReceipt!
  updateSmsReceipt(
    data: SmsReceiptUpdateInput!
    where: SmsReceiptWhereUniqueInput!
  ): SmsReceipt
  updateManySmsReceipts(
    data: SmsReceiptUpdateManyMutationInput!
    where: SmsReceiptWhereInput
  ): BatchPayload!
  upsertSmsReceipt(
    where: SmsReceiptWhereUniqueInput!
    create: SmsReceiptCreateInput!
    update: SmsReceiptUpdateInput!
  ): SmsReceipt!
  deleteSmsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  deleteManySmsReceipts(where: SmsReceiptWhereInput): BatchPayload!
  createStylePreferences(data: StylePreferencesCreateInput!): StylePreferences!
  updateStylePreferences(
    data: StylePreferencesUpdateInput!
    where: StylePreferencesWhereUniqueInput!
  ): StylePreferences
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  updateManyStylePreferenceses(
    data: StylePreferencesUpdateManyMutationInput!
    where: StylePreferencesWhereInput
  ): BatchPayload!
<<<<<<< HEAD
  upsertStylePreferences(
    where: StylePreferencesWhereUniqueInput!
    create: StylePreferencesCreateInput!
    update: StylePreferencesUpdateInput!
  ): StylePreferences!
    where: StylePreferencesWhereUniqueInput!
  ): StylePreferences
  deleteManyStylePreferenceses(where: StylePreferencesWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): TagT
=======
  updateManyPackages(
    data: PackageUpdateManyMutationInput!
    where: PackageWhereInput
  ): BatchPayload!
  updateManySizes(
    data: SizeUpdateManyMutationInput!
    where: SizeWhereInput
  ): BatchPayload!
  updateManyProductFunctions(
    data: ProductFunctionUpdateManyMutationInput!
    where: ProductFunctionWhereInput
  ): BatchPayload!
  updateManyStyleSubmissions(
    data: StyleSubmissionUpdateManyMutationInput!
    where: StyleSubmissionWhereInput
  ): BatchPayload!
  updateManyImages(
    data: ImageUpdateManyMutationInput!
    where: ImageWhereInput
  ): BatchPayload!
  updateManyColors(
    data: ColorUpdateManyMutationInput!
    where: ColorWhereInput
  ): BatchPayload!
  updateManyTopSizes(
    data: TopSizeUpdateManyMutationInput!
    where: TopSizeWhereInput
  ): BatchPayload!
  updateManyCustomers(
    data: CustomerUpdateManyMutationInput!
    where: CustomerWhereInput
  ): BatchPayload!
  updateManyUserPushNotifications(
    data: UserPushNotificationUpdateManyMutationInput!
    where: UserPushNotificationWhereInput
  ): BatchPayload!
  updateManyCategories(
    data: CategoryUpdateManyMutationInput!
    where: CategoryWhereInput
  ): BatchPayload!
  updateManyBottomSizes(
    data: BottomSizeUpdateManyMutationInput!
    where: BottomSizeWhereInput
  ): BatchPayload!
  updateManyPackageTransitEvents(
    data: PackageTransitEventUpdateManyMutationInput!
    where: PackageTransitEventWhereInput
  ): BatchPayload!
  updateManyLabels(
    data: LabelUpdateManyMutationInput!
    where: LabelWhereInput
  ): BatchPayload!
  updateManySmsReceipts(
    data: SmsReceiptUpdateManyMutationInput!
    where: SmsReceiptWhereInput
  ): BatchPayload!
  updateManyLocations(
    data: LocationUpdateManyMutationInput!
    where: LocationWhereInput
  ): BatchPayload!
  updateManyPhysicalProducts(
    data: PhysicalProductUpdateManyMutationInput!
    where: PhysicalProductWhereInput
t updateManyProductVariants(
    data: ProductVariantUpdateManyMutationInput!
    where: ProductVariantWhereInput
  ): BatchPayload!
  updateManyProducts(
    data: ProductUpdateManyMutationInput!
    where: ProductWhereInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  ): BatchPayload!
  upsertTag(
    where: TagWhereUniqueInput!
    create: TagCreateInput!
    update: TagUpdateInput!
  ): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createTopSize(data: TopSizeCreateInput!): TopSize!
  updateTopSize(
    data: TopSizeUpdateInput!
    where: TopSizeWhereUniqueInput!
  ): TopSize
  updateManyTopSizes(
    data: TopSizeUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserPushNotification(
    data: UserPushNotificationCreateInput!
  ): UserPushNotification!
  updateUserPushNotification(
    data: UserPushNotificationUpdateInput!
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  updateManyUserPushNotifications(
    data: UserPushNotificationUpdateManyMutationInput!
    where: UserPushNotificationWhereInput
  ): BatchPayload!
  upsertUserPushNotification(
    where: UserPushNotificationWhereUniqueInput!
    create: UserPushNotificationCreateInput!
    update: UserPushNotificationUpdateInput!
  ): UserPushNotification!
  deleteUserPushNotification(
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  deleteManyUserPushNotifications(
    where: UserPushNotificationWhereInput
  ): BatchPayload!
  createUserPushNotificationInterest(
    data: UserPushNotificationInterestCreateInput!
  ): UserPushNotificationInterest!
  updateUserPushNotificationInterest(
    data: UserPushNotificationInterestUpdateInput!
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  updateManyUserPushNotificationInterests(
    data: UserPushNotificationInterestUpdateManyMutationInput!
    where: UserPushNotificationInterestWhereInput
  ): BatchPayload!
  upsertUserPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
    create: UserPushNotificationInterestCreateInput!
    update: UserPushNotificationInterestUpdateInput!
  ): UserPushNotificationInterest!
  deleteUserPushNotificationInterest(
r ): UserPushNotificationInterest
  deleteManyUserPushNotificationInterests(
    where: UserPushNotificationInterestWhereInput
  ): BatchPayload!
  createWarehouseLocation(
    data: WarehouseLocationCreateInput!
  ): WarehouseLocation!
  updateWarehouseLocation(
    data: WarehouseLocationUpdateInput!
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  updateManyWarehouseLocations(
    data: WarehouseLocationUpdateManyMutationInput!
    where: WarehouseLocationWhereInput
  ): BatchPayload!
  upsertWarehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
    create: WarehouseLocationCreateInput!
    update: WarehouseLocationUpdateInput!
  ): WarehouseLocation!
  deleteWarehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  deleteManyWarehouseLocations(
    where: WarehouseLocationWhereInput
  ): BatchPayload!
<<<<<<< HEAD
  createWarehouseLocationConstraint(
    data: WarehouseLocationConstraintCreateInput!
  ): WarehouseLocationConstraint!
  updateWarehouseLocationConstraint(
    data: WarehouseLocationConstraintUpdateInput!
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
  updateManyWarehouseLocationConssRInpu 
  deleteManyProductVariantFeedbackQuestions(
    where: ProductVariantFeedbackQuestionWhereInput
  ): BatchPayload!
  deleteManyReservationReceipts(
    where: ReservationReceiptWhereInput
  ): BatchPayload!
  deleteManyProductRequests(where: ProductRequestWhereInput): BatchPayload!
  deleteManyProductVariantWants(
    where: ProductVariantWantWhereInput
  ): BatchPayload!
  deleteManyCollections(where: CollectionWhereInput): BatchPayload!
  deleteManyPushNotificationReceipts(
    where: PushNotificationReceiptWhereInput
  ): BatchPayload!
  deleteManyCustomerDetails(where: CustomerDetailWhereInput): BatchPayload!
  deleteManyUserPushNotificationInterests(
    where: UserPushNotificationInterestWhereInput
  ): BatchPayload!
  deleteManyBillingInfoes(where: BillingInfoWhereInput): BatchPayload!
  deleteManyReservationReceiptItems(
    where: ReservationReceiptItemWhereInput
  ): BatchPayload!
  deleteManyStylePreferenceses(where: StylePreferencesWhereInput): BatchPayload!
  deleteManyPackages(where: PackageWhereInput): BatchPayload!
  deleteManySizes(where: SizeWhereInput): BatchPayload!
  deleteManyProductFunctions(where: ProductFunctionWhereInput): BatchPayload!
  deleteManyStyleSubmissions(where: StyleSubmissionWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  deleteManyColors(where: ColorWhereInput): BatchPayload!
  deleteManyTopSizes(where: TopSizeWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  deleteManyUserPushNotifications(
    where: UserPushNotificationWhereInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  ): BatchPayload!
  upsertWarehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
    create: WarehouseLocationConstraintCreateInput!
    update: WarehouseLocationConstraintUpdateInput!
  ): WarehouseLocationConstraint!
  deleteWarehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
<<<<<<< HEAD
  deleteManyWarehouseLocationConstraints(
    where: WarehouseLocationConstraintWhereInput
  ): BatchPayload!
<<<<<<< HEAD
=======
  deleteManyLabels(where: LabelWhereInput): BatchPayload!
  deleteManySmsReceipts(where: SmsReceiptWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyPhysicalProducts(where: PhysicalProductWhereInput): BatchPayload!
  deleteManyProductVariants(where: ProductVariantWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyReservations(where: ReservationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID!
}

type Package {
  id: ID!
  items(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  transactionID: String!
  shippingLabel: Label!
  fromAddress: Location!
  toAddress: Location!
  weight: Float
  events(
    where: PackageTransitEventWhereInput
    orderBy: PackageTransitEventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PackageTransitEvent!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

<<<<<<< HEAD
"""
A connection to a list of items.
"""
type PackageTransitEventConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PackageTransitEventEdge]!
  aggregate: AggregatePackageTransitEvent!
=======
type PackageConnection {
  pageInfo: PageInfo!
  edges: [PackageEdge]!
  aggregate: AggregatePackage!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input PackageCreateInput {
  id: ID
  items: PhysicalProductCreateManyInput
  transactionID: String!
  shippingLabel: LabelCreateOneInput!
  fromAddress: LocationCreateOneInput!
  toAddress: LocationCreateOneInput!
  weight: Float
  events: PackageTransitEventCreateManyInput
}

input PackageCreateOneInput {
  create: PackageCreateInput
  connect: PackageWhereUniqueInput
}

<<<<<<< HEAD
"""
An edge in a connection.
"""
type PackageTransitEventEdge {
  """
  The item at the end of the edge.
  """
  node: PackageTransitEvent!

  """
  A cursor for use in pagination.
  """
=======
type PackageEdge {
  node: Package!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  cursor: String!
}

enum PackageOrderByInput {
  id_ASC
  id_DESC
  transactionID_ASC
  transactionID_DESC
  weight_ASC
  weight_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PackagePreviousValues {
  id: ID!
  transactionID: String!
  weight: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

<<<<<<< HEAD
input PackageTransitEventScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageTransitEventScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageTransitEventScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageTransitEventScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  status: PackageTransitEventStatus

  """
  All values that are not equal to given value.
  """
  status_not: PackageTransitEventStatus

  """
  All values that are contained in given list.
  """
  status_in: [PackageTransitEventStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [PackageTransitEventStatus!]
  subStatus: PackageTransitEventSubStatus

  """
  All values that are not equal to given value.
  """
  subStatus_not: PackageTransitEventSubStatus

  """
  All values that are contained in given list.
  """
  subStatus_in: [PackageTransitEventSubStatus!]

  """
  All values that are not contained in given list.
  """
  subStatus_not_in: [PackageTransitEventSubStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

enum PackageTransitEventStatus {
  PreTransit
  Transit
  Delivered
  Returned
  Failure
  Unknown
}

type PackageTransitEventSubscriptionPayload {
=======
type PackageSubscriptionPayload {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  mutation: MutationType!
  node: Package
  updatedFields: [String!]
  previousValues: PackagePreviousValues
}

<<<<<<< HEAD
input PackageTransitEventSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageTransitEventSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageTransitEventSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageTransitEventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
=======
input PackageSubscriptionWhereInput {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
<<<<<<< HEAD
  node: PackageTransitEventWhereInput
}

enum PackageTransitEventSubStatus {
  InformationReceived
  AddressIssue
  ContactCarrier
  Delayed
  DeliveryAttempted
  DeliveryRescheduled
  DeliveryScheduled
  LocationInaccessible
  NoticeLeft
  OutForDelivery
  PackageAccepted
  PackageArrived
  PackageDamaged
  PackageDeparted
  PackageForwarded
  PackageHeld
  PackageProcessed
  PackageProcessing
  PickupAvailable
  RescheduleDelivery
  Delivered
  ReturnToSender
  PackageUnclaimed
  PackageUndeliverable
  PackageDisposed
  PackageLost
  Other
=======
  node: PackageWhereInput
  AND: [PackageSubscriptionWhereInput!]
  OR: [PackageSubscriptionWhereInput!]
  NOT: [PackageSubscriptionWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

type PackageTransitEvent {
  id: ID!
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  data: Json!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PackageTransitEventConnection {
  pageInfo: PageInfo!
  edges: [PackageTransitEventEdge]!
  aggregate: AggregatePackageTransitEvent!
}

input PackageTransitEventCreateInput {
  id: ID
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  data: Json!
}

input PackageTransitEventCreateManyInput {
  create: [PackageTransitEventCreateInput!]
  connect: [PackageTransitEventWhereUniqueInput!]
<<<<<<< HEAD
  set: [PackageTransitEventWhereUniqueInput!]
  disconnect: [PackageTransitEventWhereUniqueInput!]
  delete: [PackageTransitEventWhereUniqueInput!]
  update: [PackageTransitEventUpdateWithWhereUniqueNestedInput!]
  updateMany: [PackageTransitEventUpdateManyWithWhereNestedInput!]
  deleteMany: [PackageTransitEventScalarWhereInput!]
  upsert: [PackageTransitEventUpsertWithWhereUniqueNestedInput!]
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

type PackageTransitEventEdge {
  node: PackageTransitEvent!
r}

<<<<<<< HEAD
input PackageTransitEventWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageTransitEventWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageTransitEventWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageTransitEventWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
=======
enum PackageTransitEventOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  subStatus_ASC
  subStatus_DESC
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID
<<<<<<< HEAD

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  status: PackageTransitEventStatus

  """
  All values that are not equal to given value.
  """
  status_not: PackageTransitEventStatus

  """
  All values that are contained in given list.
  """
  status_in: [PackageTransitEventStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [PackageTransitEventStatus!]
  subStatus: PackageTransitEventSubStatus
<<<<<<< HEAD

  """
  All values that are not equal to given value.
  """
  subStatus_not: PackageTransitEventSubStatus

  """
  All values that are contained in given list.
  """
  subStatus_in: [PackageTransitEventSubStatus!]

  """
  All values that are not contained in given list.
  """
  subStatus_not_in: [PackageTransitEventSubStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
=======
  subStatus_not: PackageTransitEventSubStcanStatus peev PatUtu
  OR: [PackageTransitEventWhereInput!]
  NOT: [PackageTransitEventWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input PackageTransitEventWhereUniqueInput {
  id: ID
}
<<<<<<< HEAD

input PackageUpdateDataInput {
=======
iput PackageUpdateDataInput {
  items: PhysicalProductUpdateManyInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  transactionID: String
  weight: Float
  items: PhysicalProductUpdateManyInput
  shippingLabel: LabelUpdateOneRequiredInput
  fromAddress: LocationUpdateOneRequiredInput
  toAddress: LocationUpdateOneRequiredInput
  events: PackageTransitEventUpdateManyInput
}

input PackageUpdateInput {
  transactionID: String
  weight: Float
  items: PhysicalProductUpdateManyInput
  shippingLabel: LabelUpdateOneRequiredInput
  fromAddress: LocationUpdateOneRequiredInput
  toAddress: LocationUpdateOneRequiredInput
  events: PackageTransitEventUpdateManyInput
}

input PackageUpdateManyMutationInput {
  transactionID: String
  weight: Float
}

input PackageUpdateOneInput {
  create: PackageCreateInput
  connect: PackageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PackageUpdateDataInput
  upsert: PackageUpsertNestedInput
<<<<<<< HEAD
}

input PackageUpsertNestedInput {
  update: PackageUpdateDataInput!
  create: PackageCreateInput!
}

input PackageWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  transactionID: String

  """
  All values that are not equal to given value.
  """
  transactionID_not: String

  """
  All values that are contained in given list.
  """
  transactionID_in: [String!]

  """
  All values that are not contained in given list.
  """
  transactionID_not_in: [String!]

  """
  All values less than the given value.
  """
  transactionID_lt: String

  """
  All values less than or equal the given value.
  """
  transactionID_lte: String

  """
  All values greater than the given value.
  """
  transactionID_gt: String

  """
  All values greater than or equal the given value.
  """
  transactionID_gte: String

  """
  All values containing the given string.
  """
  transactionID_contains: String

  """
  All values not containing the given string.
  """
  transactionID_not_contains: String

  """
  All values starting with the given string.
  """
  transactionID_starts_with: String

  """
  All values not starting with the given string.
  """
  transactionID_not_starts_with: String

  """
  All values ending with the given string.
  """
  transactionID_ends_with: String

  """
  All values not ending with the given string.
  """
  transactionID_not_ends_with: String
  weight: Float

  """
  All values that are not equal to given value.
  """
  weight_not: Float

  """
  All values that are contained in given list.
  """
  weight_in: [Float!]

  """
  All values that are not contained in given list.
  """
  weight_not_in: [Float!]

  """
  All values less than the given value.
  """
  weight_lt: Float

  """
  All values less than or equal the given value.
  """
  weight_lte: Float

  """
  All values greater than the given value.
  """
  weight_gt: Float

  """
  All values greater than or equal the given value.
  """
  weight_gte: Float
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
=======
  delete: Boolean
  disconnect: Boolean
  connect: PackageWhereUniqueInput
}I
  traegnDsStra g
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  items_every: PhysicalProductWhereInput
  items_some: PhysicalProductWhereInput
  items_none: PhysicalProductWhereInput
  shippingLabel: LabelWhereInput
  fromAddress: LocationWhereInput
  toAddress: LocationWhereInput
  events_every: PackageTransitEventWhereInput
  events_some: PackageTransitEventWhereInput
  events_none: PackageTransitEventWhereInput
}

input PackageWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type PauseRequest implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
  membership: CustomerMembership!
}

"""
A connection to a list of items.
"""
type PauseRequestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PauseRequestEdge]!
  aggregate: AggregatePauseRequest!
}

input PauseRequestCreateInput {
  id: ID
  pauseDate: DateTime
  resumeDate: DateTime
  membership: CustomerMembershipCreateOneWithoutPauseRequestsInput!
}
[
}

input PauseRequestCreateWithoutMembershipInput {
  id: ID
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
}

"""
An edge in a connection.
"""
type PauseRequestEdge {
  """
  The item at the end of the edge.
  """
  node: PauseRequest!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PauseRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  pausePending_ASC
  pausePending_DESC
  pauseDate_ASC
  pauseDate_DESC
  resumeDate_ASC
  resumeDate_DESC
}

type PauseRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
}

input PauseRequestScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PauseRequestScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PauseRequestScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PauseRequestScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
<<<<<<< HEAD

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
=======
e updatedAt_lt: DateTime
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  pausePending: Boolean

  """
  All values that are not equal to given value.
  """
  pausePending_not: Boolean
  pauseDate: DateTime

  """
  All values that are not equal to given value.
  """
  pauseDate_not: DateTime

  """
  All values that are contained in given list.
  """
  pauseDate_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  pauseDate_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  pauseDate_lt: DateTime

  """
  All values less than or equal the given value.
  """
  pauseDate_lte: DateTime

  """
  All values greater than the given value.
  """
  pauseDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  pauseDate_gte: DateTime
  resumeDate: DateTime

  """
  All values that are not equal to given value.
  """
  resumeDate_not: DateTime

  """
  All values that are contained in given list.
  """
  resumeDate_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  resumeDate_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  resumeDate_lt: DateTime

  """
  All values less than or equal the given value.
  """
  resumeDate_lte: DateTime

  """
  All values greater than the given value.
  """
  resumeDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  resumeDate_gte: DateTime
<<<<<<< HEAD
}

type PauseRequestSubscriptionPayload {
  mutation: MutationType!
  node: PauseRequest
  updatedFields: [String!]
  previousValues: PauseRequestPreviousValues
}

input PauseRequestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PauseRequestSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PauseRequestSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PauseRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
=======
  AND: [PauseRequestScalarWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PauseRequestWhereInput
}

input PauseRequestUpdateInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
  membership: CustomerMembershipUpdateOneRequiredWithoutPauseRequestsInput
}

input PauseRequestUpdateManyDataInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
}

input PauseRequestUpdateManyMutationInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
}

input PauseRequestUpdateManyWithoutMembershipInput {
  create: [PauseRequestCreateWithoutMembershipInput!]
  connect: [PauseRequestWhereUniqueInput!]
  set: [PauseRequestWhereUniqueInput!]
  disconnect: [PauseRequestWhereUniqueInput!]
  delete: [PauseRequestWhereUniqueInput!]
  update: [PauseRequestUpdateWithWhereUniqueWithoutMembershipInput!]
  updateMany: [PauseRequestUpdateManyWithWhereNestedInput!]
  deleteMany: [PauseRequestScalarWhereInput!]
  upsert: [PauseRequestUpsertWithWhereUniqueWithoutMembershipInput!]
}

input PauseRequestUpdateManyWithWhereNestedInput {
  where: PauseRequestScalarWhereInput!
  data: PauseRequestUpdateManyDataInput!
}

input PauseRequestUpdateWithoutMembershipDataInput {
  pausePending: Boolean
  pauseDate: DateTime
e}

input PauseRequestUpdateWithWhereUniqueWithoutMembershipInput {
  where: PauseRequestWhereUniqueInput!
  data: PauseRequestUpdateWithoutMembershipDataInput!
}

input PauseRequestUpsertWithWhereUniqueWithoutMembershipInput {
  where: PauseRequestWhereUniqueInput!
  update: PauseRequestUpdateWithoutMembershipDataInput!
  create: PauseRequestCreateWithoutMembershipInput!
}

input PauseRequestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PauseRequestWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PauseRequestWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PauseRequestWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
<<<<<<< HEAD

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  pausePending: Boolean

  """
  All values that are not equal to given value.
  """
  pausePending_not: Boolean
  pauseDate: DateTime

  """
  All values that are not equal to given value.
  """
  pauseDate_not: DateTime

  """
  All values that are contained in given list.
  """
  pauseDate_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  pauseDate_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  pauseDate_lt: DateTime

  """
  All values less than or equal the given value.
  """
  pauseDate_lte: DateTime

  """
  All values greater than the given value.
  """
  pauseDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  pauseDate_gte: DateTime
  resumeDate: DateTime

  """
  All values that are not equal to given value.
  """
  resumeDate_not: DateTime

  """
  All values that are contained in given list.
  """
  resumeDate_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
=======
  createdAt_gt: DateTimeT 
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  resumeDate_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  resumeDate_lt: DateTime

  """
  All values less than or equal the given value.
  """
  resumeDate_lte: DateTime

  """
  All values greater than the given value.
  """
  resumeDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  resumeDate_gte: DateTime
  membership: CustomerMembershipWhereInput
}

input PauseRequestWhereUniqueInput {
  id: ID
}

type PaymentPlan implements Node {
  id: ID!
  description: String
  planID: String!
  status: String
  name: String
  price: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PaymentPlanConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PaymentPlanEdge]!
  aggregate: AggregatePaymentPlan!
}

input PaymentPlanCreateInput {
  id: ID
  description: String
  planID: String!
  status: String
  name: String
  price: Int
}

"""
An edge in a connection.
"""
type PaymentPlanEdge {
  """
  The item at the end of the edge.
  """
  node: PaymentPlan!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PaymentPlanOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  planID_ASC
  planID_DESC
  status_ASC
  status_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentPlanPreviousValues {
  id: ID!
  description: String
  planID: String!
  status: String
  name: String
  price: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentPlanSubscriptionPayload {
  mutation: MutationType!
  node: PaymentPlan
  updatedFields: [String!]
  previousValues: PaymentPlanPreviousValues
}

input PaymentPlanSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PaymentPlanSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PaymentPlanSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PaymentPlanSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentPlanWhereInput
}

input PaymentPlanUpdateInput {
  description: String
  planID: String
  status: String
  name: String
  price: Int
}

input PaymentPlanUpdateManyMutationInput {
  description: String
  planID: String
  status: String
  name: String
  price: Int
}

input PaymentPlanWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PaymentPlanWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PaymentPlanWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PaymentPlanWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  planID: String

  """
  All values that are not equal to given value.
  """
  planID_not: String

  """
  All values that are contained in given list.
  """
  planID_in: [String!]

  """
  All values that are not contained in given list.
  """
  planID_not_in: [String!]

  """
  All values less than the given value.
  """
  planID_lt: String

  """
  All values less than or equal the given value.
  """
  planID_lte: String

  """
  All values greater than the given value.
  """
  planID_gt: String

  """
  All values greater than or equal the given value.
  """
  planID_gte: String

  """
  All values containing the given string.
  """
  planID_contains: String

  """
  All values not containing the given string.
  """
  planID_not_contains: String

  """
  All values starting with the given string.
  """
  planID_starts_with: String

  """
  All values not starting with the given string.
  """
  planID_not_starts_with: String

  """
  All values ending with the given string.
  """
  planID_ends_with: String

  """
  All values not ending with the given string.
  """
  planID_not_ends_with: String
  status: String

  """
  All values that are not equal to given value.
  """
  status_not: String

  """
  All values that are contained in given list.
  """
  status_in: [String!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [String!]

  """
  All values less than the given value.
  """
  status_lt: String

  """
  All values less than or equal the given value.
  """
  status_lte: String

  """
  All values greater than the given value.
  """
  status_gt: String

  """
  All values greater than or equal the given value.
  """
  status_gte: String

  """
  All values containing the given string.
  """
  status_contains: String

  """
  All values not containing the given string.
  """
  status_not_contains: String

  """
  All values starting with the given string.
  """
  status_starts_with: String

  """
  All values not starting with the given string.
  """
  status_not_starts_with: String

  """
  All values ending with the given string.
  """
  status_ends_with: String

  """
  All values not ending with the given string.
  """
  status_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  price: Int

  """
  All values that are not equal to given value.
  """
  price_not: Int

  """
  All values that are contained in given list.
  """
  price_in: [Int!]

  """
  All values that are not contained in given list.
  """
  price_not_in: [Int!]

  """
  All values less than the given value.
  """
  price_lt: Int

  """
  All values less than or equal the given value.
  """
  price_lte: Int

  """
  All values greater than the given value.
  """
  price_gt: Int

  """
  All values greater than or equal the given value.
  """
  price_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input PaymentPlanWhereUniqueInput {
  id: ID
  planID: String
}

enum PhotographyStatus {
  Done
  InProgress
  ReadyForEditing
  ReadyToShoot
  Steam
}

type PhysicalProduct implements Node {
  id: ID!
  seasonsUID: String!
  location: Location
  productVariant: ProductVariant!
  inventoryStatus: InventoryStatus!
  inventoryStatusChanges(
    where: PhysicalProductInventoryStatusChangeWhereInput
    orderBy: PhysicalProductInventoryStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProductInventoryStatusChange!]
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  warehouseLocation: WarehouseLocation
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PhysicalProductConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PhysicalProductEdge]!
  aggregate: AggregatePhysicalProduct!
}

input PhysicalProductCreateInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
}

input PhysicalProductCreateManyInput {
  create: [PhysicalProductCreateInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutLocationInput {
  create: [PhysicalProductCreateWithoutLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutProductVariantInput {
  create: [PhysicalProductCreateWithoutProductVariantInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutWarehouseLocationInput {
  create: [PhysicalProductCreateWithoutWarehouseLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateOneInput {
  create: PhysicalProductCreateInput
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductCreateOneWithoutInventoryStatusChangesInput {
  create: PhysicalProductCreateWithoutInventoryStatusChangesInput
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductCreateWithoutInventoryStatusChangesInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
}

input PhysicalProductCreateWithoutLocationInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
}

input PhysicalProductCreateWithoutProductVariantInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationCreateOneWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
}

input PhysicalProductCreateWithoutWarehouseLocationInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput
}

"""
An edge in a connection.
"""
type PhysicalProductEdge {
  """
  The item at the end of the edge.
  """
  node: PhysicalProduct!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type PhysicalProductInventoryStatusChange implements Node {
  id: ID!
  old: InventoryStatus!
  new: InventoryStatus!
  physicalProduct: PhysicalProduct!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""
A connection to a list of items.
"""
type PhysicalProductInventoryStatusChangeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PhysicalProductInventoryStatusChangeEdge]!
  aggregate: AggregatePhysicalProductInventoryStatusChange!
}

input PhysicalProductInventoryStatusChangeCreateInput {
  id: ID
  old: InventoryStatus!
  new: InventoryStatus!
  physicalProduct: PhysicalProductCreateOneWithoutInventoryStatusChangesInput!
}

input PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput {
  create: [PhysicalProductInventoryStatusChangeCreateWithoutPhysicalProductInput!]
  connect: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
}

input PhysicalProductInventoryStatusChangeCreateWithoutPhysicalProductInput {
  id: ID
  old: InventoryStatus!
  new: InventoryStatus!
}

"""
An edge in a connection.
"""
type PhysicalProductInventoryStatusChangeEdge {
  """
  The item at the end of the edge.
  """
  node: PhysicalProductInventoryStatusChange!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PhysicalProductInventoryStatusChangeOrderByInput {
  id_ASC
  id_DESC
  old_ASC
  old_DESC
  new_ASC
  new_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhysicalProductInventoryStatusChangePreviousValues {
  id: ID!
  old: InventoryStatus!
  new: InventoryStatus!
  createdAt: DateTime!
  updatedAt: DateTime
}

input PhysicalProductInventoryStatusChangeScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductInventoryStatusChangeScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductInventoryStatusChangeScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductInventoryStatusChangeScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  old: InventoryStatus

  """
  All values that are not equal to given value.
  """
  old_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  old_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  old_not_in: [InventoryStatus!]
  new: InventoryStatus

  """
  All values that are not equal to given value.
  """
  new_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  new_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  new_not_in: [InventoryStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type PhysicalProductInventoryStatusChangeSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalProductInventoryStatusChange
  updatedFields: [String!]
  previousValues: PhysicalProductInventoryStatusChangePreviousValues
}

input PhysicalProductInventoryStatusChangeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductInventoryStatusChangeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductInventoryStatusChangeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductInventoryStatusChangeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhysicalProductInventoryStatusChangeWhereInput
}

input PhysicalProductInventoryStatusChangeUpdateInput {
  old: InventoryStatus
  new: InventoryStatus
  physicalProduct: PhysicalProductUpdateOneRequiredWithoutInventoryStatusChangesInput
}

input PhysicalProductInventoryStatusChangeUpdateManyDataInput {
  old: InventoryStatus
  new: InventoryStatus
}

input PhysicalProductInventoryStatusChangeUpdateManyMutationInput {
  old: InventoryStatus
  new: InventoryStatus
}

input PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput {
  create: [PhysicalProductInventoryStatusChangeCreateWithoutPhysicalProductInput!]
  connect: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
  set: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
  disconnect: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
  delete: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
  update: [PhysicalProductInventoryStatusChangeUpdateWithWhereUniqueWithoutPhysicalProductInput!]
  updateMany: [PhysicalProductInventoryStatusChangeUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductInventoryStatusChangeScalarWhereInput!]
  upsert: [PhysicalProductInventoryStatusChangeUpsertWithWhereUniqueWithoutPhysicalProductInput!]
}

input PhysicalProductInventoryStatusChangeUpdateManyWithWhereNestedInput {
  where: PhysicalProductInventoryStatusChangeScalarWhereInput!
  data: PhysicalProductInventoryStatusChangeUpdateManyDataInput!
}

input PhysicalProductInventoryStatusChangeUpdateWithoutPhysicalProductDataInput {
  old: InventoryStatus
  new: InventoryStatus
}

input PhysicalProductInventoryStatusChangeUpdateWithWhereUniqueWithoutPhysicalProductInput {
  where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  data: PhysicalProductInventoryStatusChangeUpdateWithoutPhysicalProductDataInput!
}

input PhysicalProductInventoryStatusChangeUpsertWithWhereUniqueWithoutPhysicalProductInput {
  where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  update: PhysicalProductInventoryStatusChangeUpdateWithoutPhysicalProductDataInput!
  create: PhysicalProductInventoryStatusChangeCreateWithoutPhysicalProductInput!
}

input PhysicalProductInventoryStatusChangeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductInventoryStatusChangeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductInventoryStatusChangeWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductInventoryStatusChangeWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  old: InventoryStatus

  """
  All values that are not equal to given value.
  """
  old_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  old_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  old_not_in: [InventoryStatus!]
  new: InventoryStatus

  """
  All values that are not equal to given value.
  """
  new_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  new_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  new_not_in: [InventoryStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  physicalProduct: PhysicalProductWhereInput
}

input PhysicalProductInventoryStatusChangeWhereUniqueInput {
  id: ID
}

enum PhysicalProductOffloadMethod {
  SoldToUser
  SoldToThirdParty
  ReturnedToVendor
  Recycled
  Unknown
}

enum PhysicalProductOrderByInput {
  id_ASC
  id_DESC
  seasonsUID_ASC
  seasonsUID_DESC
  inventoryStatus_ASC
  inventoryStatus_DESC
  productStatus_ASC
  productStatus_DESC
  offloadMethod_ASC
  offloadMethod_DESC
  offloadNotes_ASC
  offloadNotes_DESC
  sequenceNumber_ASC
  sequenceNumber_DESC
  barcoded_ASC
  barcoded_DESC
  dateOrdered_ASC
  dateOrdered_DESC
  dateReceived_ASC
  dateReceived_DESC
  unitCost_ASC
  unitCost_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhysicalProductPreviousValues {
  id: ID!
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhysicalProductScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  seasonsUID: String

  """
  All values that are not equal to given value.
  """
  seasonsUID_not: String

  """
  All values that are contained in given list.
  """
  seasonsUID_in: [String!]

  """
  All values that are not contained in given list.
  """
  seasonsUID_not_in: [String!]

  """
  All values less than the given value.
  """
  seasonsUID_lt: String

  """
  All values less than or equal the given value.
  """
  seasonsUID_lte: String

  """
  All values greater than the given value.
  """
  seasonsUID_gt: String

  """
  All values greater than or equal the given value.
  """
  seasonsUID_gte: String

  """
  All values containing the given string.
  """
  seasonsUID_contains: String

  """
  All values not containing the given string.
  """
  seasonsUID_not_contains: String

  """
  All values starting with the given string.
  """
  seasonsUID_starts_with: String

  """
  All values not starting with the given string.
  """
  seasonsUID_not_starts_with: String

  """
  All values ending with the given string.
  """
  seasonsUID_ends_with: String

  """
  All values not ending with the given string.
  """
  seasonsUID_not_ends_with: String
  inventoryStatus: InventoryStatus

  """
  All values that are not equal to given value.
  """
  inventoryStatus_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  inventoryStatus_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  inventoryStatus_not_in: [InventoryStatus!]
  productStatus: PhysicalProductStatus

  """
  All values that are not equal to given value.
  """
  productStatus_not: PhysicalProductStatus

  """
  All values that are contained in given list.
  """
  productStatus_in: [PhysicalProductStatus!]

  """
  All values that are not contained in given list.
  """
  productStatus_not_in: [PhysicalProductStatus!]
  offloadMethod: PhysicalProductOffloadMethod

  """
  All values that are not equal to given value.
  """
  offloadMethod_not: PhysicalProductOffloadMethod

  """
  All values that are contained in given list.
  """
  offloadMethod_in: [PhysicalProductOffloadMethod!]

  """
  All values that are not contained in given list.
  """
  offloadMethod_not_in: [PhysicalProductOffloadMethod!]
  offloadNotes: String

  """
  All values that are not equal to given value.
  """
  offloadNotes_not: String

  """
  All values that are contained in given list.
  """
  offloadNotes_in: [String!]

  """
  All values that are not contained in given list.
  """
  offloadNotes_not_in: [String!]

  """
  All values less than the given value.
  """
  offloadNotes_lt: String

  """
  All values less than or equal the given value.
  """
  offloadNotes_lte: String

  """
  All values greater than the given value.
  """
  offloadNotes_gt: String

  """
  All values greater than or equal the given value.
  """
  offloadNotes_gte: String

  """
  All values containing the given string.
  """
  offloadNotes_contains: String

  """
  All values not containing the given string.
  """
  offloadNotes_not_contains: String

  """
  All values starting with the given string.
  """
  offloadNotes_starts_with: String

  """
  All values not starting with the given string.
  """
  offloadNotes_not_starts_with: String

  """
  All values ending with the given string.
  """
  offloadNotes_ends_with: String

  """
  All values not ending with the given string.
  """
  offloadNotes_not_ends_with: String
  sequenceNumber: Int

  """
  All values that are not equal to given value.
  """
  sequenceNumber_not: Int

  """
  All values that are contained in given list.
  """
  sequenceNumber_in: [Int!]

  """
  All values that are not contained in given list.
  """
  sequenceNumber_not_in: [Int!]

  """
  All values less than the given value.
  """
  sequenceNumber_lt: Int

  """
  All values less than or equal the given value.
  """
  sequenceNumber_lte: Int

  """
  All values greater than the given value.
  """
  sequenceNumber_gt: Int

  """
  All values greater than or equal the given value.
  """
  sequenceNumber_gte: Int
  barcoded: Boolean

  """
  All values that are not equal to given value.
  """
  barcoded_not: Boolean
  dateOrdered: DateTime

  """
  All values that are not equal to given value.
  """
  dateOrdered_not: DateTime

  """
  All values that are contained in given list.
  """
  dateOrdered_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dateOrdered_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dateOrdered_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dateOrdered_lte: DateTime

  """
  All values greater than the given value.
  """
  dateOrdered_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dateOrdered_gte: DateTime
  dateReceived: DateTime

  """
  All values that are not equal to given value.
  """
  dateReceived_not: DateTime

  """
  All values that are contained in given list.
  """
  dateReceived_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dateReceived_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dateReceived_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dateReceived_lte: DateTime

  """
  All values greater than the given value.
  """
  dateReceived_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dateReceived_gte: DateTime
  unitCost: Float

  """
  All values that are not equal to given value.
  """
  unitCost_not: Float

  """
  All values that are contained in given list.
  """
  unitCost_in: [Float!]

  """
  All values that are not contained in given list.
  """
  unitCost_not_in: [Float!]

  """
  All values less than the given value.
  """
  unitCost_lt: Float

  """
  All values less than or equal the given value.
  """
  unitCost_lte: Float

  """
  All values greater than the given value.
  """
  unitCost_gt: Float

  """
  All values greater than or equal the given value.
  """
  unitCost_gte: Float
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

enum PhysicalProductStatus {
  New
  Used
  Dirty
  Damaged
  PermanentlyDamaged
  Clean
  Lost
}

type PhysicalProductSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalProduct
  updatedFields: [String!]
  previousValues: PhysicalProductPreviousValues
}

input PhysicalProductSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhysicalProductWhereInput
}

input PhysicalProductUpdateDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateManyDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
}

input PhysicalProductUpdateManyInput {
  create: [PhysicalProductCreateInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueNestedInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueNestedInput!]
}

input PhysicalProductUpdateManyMutationInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
}

input PhysicalProductUpdateManyWithoutLocationInput {
  create: [PhysicalProductCreateWithoutLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutLocationInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutLocationInput!]
}

input PhysicalProductUpdateManyWithoutProductVariantInput {
  create: [PhysicalProductCreateWithoutProductVariantInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput!]
}

input PhysicalProductUpdateManyWithoutWarehouseLocationInput {
  create: [PhysicalProductCreateWithoutWarehouseLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutWarehouseLocationInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutWarehouseLocationInput!]
}

input PhysicalProductUpdateManyWithWhereNestedInput {
  where: PhysicalProductScalarWhereInput!
  data: PhysicalProductUpdateManyDataInput!
}

input PhysicalProductUpdateOneRequiredInput {
  create: PhysicalProductCreateInput
  connect: PhysicalProductWhereUniqueInput
  update: PhysicalProductUpdateDataInput
  upsert: PhysicalProductUpsertNestedInput
}

input PhysicalProductUpdateOneRequiredWithoutInventoryStatusChangesInput {
  create: PhysicalProductCreateWithoutInventoryStatusChangesInput
  connect: PhysicalProductWhereUniqueInput
  update: PhysicalProductUpdateWithoutInventoryStatusChangesDataInput
  upsert: PhysicalProductUpsertWithoutInventoryStatusChangesInput
}

input PhysicalProductUpdateWithoutInventoryStatusChangesDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateWithoutLocationDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateWithoutProductVariantDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateWithoutWarehouseLocationDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
}

input PhysicalProductUpdateWithWhereUniqueNestedInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutLocationInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutLocationDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutProductVariantDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutWarehouseLocationInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutWarehouseLocationDataInput!
}

input PhysicalProductUpsertNestedInput {
  update: PhysicalProductUpdateDataInput!
  create: PhysicalProductCreateInput!
}

input PhysicalProductUpsertWithoutInventoryStatusChangesInput {
  update: PhysicalProductUpdateWithoutInventoryStatusChangesDataInput!
  create: PhysicalProductCreateWithoutInventoryStatusChangesInput!
}

input PhysicalProductUpsertWithWhereUniqueNestedInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateDataInput!
  create: PhysicalProductCreateInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutLocationInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutLocationDataInput!
  create: PhysicalProductCreateWithoutLocationInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutProductVariantDataInput!
  create: PhysicalProductCreateWithoutProductVariantInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutWarehouseLocationInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutWarehouseLocationDataInput!
  create: PhysicalProductCreateWithoutWarehouseLocationInput!
}

input PhysicalProductWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  seasonsUID: String

  """
  All values that are not equal to given value.
  """
  seasonsUID_not: String

  """
  All values that are contained in given list.
  """
  seasonsUID_in: [String!]

  """
  All values that are not contained in given list.
  """
  seasonsUID_not_in: [String!]

  """
  All values less than the given value.
  """
  seasonsUID_lt: String

  """
  All values less than or equal the given value.
  """
  seasonsUID_lte: String

  """
  All values greater than the given value.
  """
  seasonsUID_gt: String

  """
  All values greater than or equal the given value.
  """
  seasonsUID_gte: String

  """
  All values containing the given string.
  """
  seasonsUID_contains: String

  """
  All values not containing the given string.
  """
  seasonsUID_not_contains: String

  """
  All values starting with the given string.
  """
  seasonsUID_starts_with: String

  """
  All values not starting with the given string.
  """
  seasonsUID_not_starts_with: String

  """
  All values ending with the given string.
  """
  seasonsUID_ends_with: String

  """
  All values not ending with the given string.
  """
  seasonsUID_not_ends_with: String
  inventoryStatus: InventoryStatus

  """
  All values that are not equal to given value.
  """
  inventoryStatus_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  inventoryStatus_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  inventoryStatus_not_in: [InventoryStatus!]
  productStatus: PhysicalProductStatus

  """
  All values that are not equal to given value.
  """
  productStatus_not: PhysicalProductStatus

  """
  All values that are contained in given list.
  """
  productStatus_in: [PhysicalProductStatus!]

  """
  All values that are not contained in given list.
  """
  productStatus_not_in: [PhysicalProductStatus!]
  offloadMethod: PhysicalProductOffloadMethod

  """
  All values that are not equal to given value.
  """
  offloadMethod_not: PhysicalProductOffloadMethod

  """
  All values that are contained in given list.
  """
  offloadMethod_in: [PhysicalProductOffloadMethod!]

  """
  All values that are not contained in given list.
  """
  offloadMethod_not_in: [PhysicalProductOffloadMethod!]
  offloadNotes: String

  """
  All values that are not equal to given value.
  """
  offloadNotes_not: String

  """
  All values that are contained in given list.
  """
  offloadNotes_in: [String!]

  """
  All values that are not contained in given list.
  """
  offloadNotes_not_in: [String!]

  """
  All values less than the given value.
  """
  offloadNotes_lt: String

  """
  All values less than or equal the given value.
  """
  offloadNotes_lte: String

  """
  All values greater than the given value.
  """
  offloadNotes_gt: String

  """
  All values greater than or equal the given value.
  """
  offloadNotes_gte: String

  """
  All values containing the given string.
  """
  offloadNotes_contains: String

  """
  All values not containing the given string.
  """
  offloadNotes_not_contains: String

  """
  All values starting with the given string.
  """
  offloadNotes_starts_with: String

  """
  All values not starting with the given string.
  """
  offloadNotes_not_starts_with: String

  """
  All values ending with the given string.
  """
  offloadNotes_ends_with: String

  """
  All values not ending with the given string.
  """
  offloadNotes_not_ends_with: String
  sequenceNumber: Int

  """
  All values that are not equal to given value.
  """
  sequenceNumber_not: Int

  """
  All values that are contained in given list.
  """
  sequenceNumber_in: [Int!]

  """
  All values that are not contained in given list.
  """
  sequenceNumber_not_in: [Int!]

  """
  All values less than the given value.
  """
  sequenceNumber_lt: Int

  """
  All values less than or equal the given value.
  """
  sequenceNumber_lte: Int

  """
  All values greater than the given value.
  """
  sequenceNumber_gt: Int

  """
  All values greater than or equal the given value.
  """
  sequenceNumber_gte: Int
  barcoded: Boolean

  """
  All values that are not equal to given value.
  """
  barcoded_not: Boolean
  dateOrdered: DateTime

  """
  All values that are not equal to given value.
  """
  dateOrdered_not: DateTime

  """
  All values that are contained in given list.
  """
  dateOrdered_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dateOrdered_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dateOrdered_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dateOrdered_lte: DateTime

  """
  All values greater than the given value.
  """
  dateOrdered_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dateOrdered_gte: DateTime
  dateReceived: DateTime

  """
  All values that are not equal to given value.
  """
  dateReceived_not: DateTime

  """
  All values that are contained in given list.
  """
  dateReceived_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dateReceived_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dateReceived_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dateReceived_lte: DateTime

  """
  All values greater than the given value.
  """
  dateReceived_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dateReceived_gte: DateTime
  unitCost: Float

  """
  All values that are not equal to given value.
  """
  unitCost_not: Float

  """
  All values that are contained in given list.
  """
  unitCost_in: [Float!]

  """
  All values that are not contained in given list.
  """
  unitCost_not_in: [Float!]

  """
  All values less than the given value.
  """
  unitCost_lt: Float

  """
  All values less than or equal the given value.
  """
  unitCost_lte: Float

  """
  All values greater than the given value.
  """
  unitCost_gt: Float

  """
  All values greater than or equal the given value.
  """
  unitCost_gte: Float
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  location: LocationWhereInput
  productVariant: ProductVariantWhereInput
  inventoryStatusChanges_every: PhysicalProductInventoryStatusChangeWhereInput
  inventoryStatusChanges_some: PhysicalProductInventoryStatusChangeWhereInput
  inventoryStatusChanges_none: PhysicalProductInventoryStatusChangeWhereInput
  warehouseLocation: WarehouseLocationWhereInput
}

input PhysicalProductWhereUniqueInput {
  id: ID
  seasonsUID: String
}

enum Plan {
  AllAccess
  Essential
}

type Product implements Node {
  id: ID!
  slug: String!
  name: String!
  brand: Brand!
  category: Category!
  type: ProductType
  description: String
  externalURL: String
  images(
    where: ImageWhereInput
=======
  deleteWarehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  deletePaymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  deleteEmailReceipt(where: EmailReceiptWhereUniqueInput!): EmailReceipt
  deleteStyleSubmissionReport(
    where: StyleSubmissionReportWhereUniqueInput!
  ): StyleSubmissionReport
  deleteBagItem(where: BagItemWhereUniqueInput!): BagItem
  deleteCustomerMembership(
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  deletePauseRequest(where: PauseRequestWhereUniqueInput!): PauseRequest
  deleteRecentlyViewedProduct(
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  deleteReservationFeedback(
    where: ReservationFeedbackWhereUniqueInput!
  ): ReservationFeedback
  deleteProductVariantFeedback(
    where: ProductVariantFeedbackWhereUniqueInput!
  ): ProductVariantFeedback
  deleteProductVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
  ): ProductVariantFeedbackQuestion
  deleteReservationReceipt(
    where: ReservationReceiptWhereUniqueInput!
  ): ReservationReceipt
  deleteProductRequest(where: ProductRequestWhereUniqueInput!): ProductRequest
  deleteProductVariantWant(
    where: ProductVariantWantWhereUniqueInput!
  ): ProductVariantWant
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deletePushNotificationReceipt(
    where: PushNotificationReceiptWhereUniqueInput!
  ): PushNotificationReceipt
  deleteCustomerDetail(where: CustomerDetailWhereUniqueInput!): CustomerDetail
  deleteUserPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  deleteBillingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  deleteReservationReceiptItem(
    where: ReservationReceiptItemWhereUniqueInput!
  ): ReservationReceiptItem
  deleteStylePreferences(
    where: StylePreferencesWhereUniqueInput!
  ): StylePreferences
  deletePackage(where: PackageWhereUniqueInput!): Package
  deleteSize(where: SizeWhereUniqueInput!): Size
  deleteProductFunction(
    where: ProductFunctionWhereUniqueInput!
  ): ProductFunction
  deleteStyleSubmission(
    where: StyleSubmissionWhereUniqueInput!
  ): StyleSubmission
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteTopSize(where: TopSizeWhereUniqueInput!): TopSize
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteUserPushNotification(
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteBottomSize(where: BottomSizeWhereUniqueInput!): BottomSize
  deletePackageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteSmsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deletePhysicalProduct(
    where: PhysicalProductWhereUniqueInput!
  ): PhysicalProduct
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteUser(where: UserWhereUniqueInput!): User
  upsertBrand(
    where: BrandWhereUniqueInput!
    create: BrandCreateInput!
    update: BrandUpdateInput!
  ): Brand!
  upsertCollectionGroup(
    where: CollectionGroupWhereUniqueInput!
    create: CollectionGroupCreateInput!
    update: CollectionGroupUpdateInput!
  ): CollectionGroup!
  upsertHomepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
    create: HomepageProductRailCreateInput!
    update: HomepageProductRailUpdateInput!
  ): HomepageProductRail!
  upsertTag(
    where: TagWhereUniqueInput!
    create: TagCreateInput!
    update: TagUpdateInput!
  ): Tag!
  upsertProductStatusChange(
    where: ProductStatusChangeWhereUniqueInput!
    create: ProductStatusChangeCreateInput!
    update: ProductStatusChangeUpdateInput!
  ): ProductStatusChange!
  upsertProductMaterialCategory(
    where: ProductMaterialCategoryWhereUniqueInput!
    create: ProductMaterialCategoryCreateInput!
    update: ProductMaterialCategoryUpdateInput!
  ): ProductMaterialCategory!
  upsertProductModel(
    where: ProductModelWhereUniqueInput!
    create: ProductModelCreateInput!
    update: ProductModelUpdateInput!
  ): ProductModel!
  upsertPhysicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
    create: PhysicalProductInventoryStatusChangeCreateInput!
    update: PhysicalProductInventoryStatusChangeUpdateInput!
  ): PhysicalProductInventoryStatusChange!
  upsertWarehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
    create: WarehouseLocationConstraintCreateInput!
    update: WarehouseLocationConstraintUpdateInput!
  ): WarehouseLocationConstraint!
  upsertWarehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
    create: WarehouseLocationCreateInput!
    update: WarehouseLocationUpdateInput!
  ): WarehouseLocation!
  upsertPaymentPlan(
    where: PaymentPlanWhereUniqueInput!
    create: PaymentPlanCreateInput!
    update: PaymentPlanUpdateInput!
  ): PaymentPlan!
  upsertEmailReceipt(
    where: EmailReceiptWhereUniqueInput!
    create: EmailReceiptCreateInput!
    update: EmailReceiptUpdateInput!
  ): EmailReceipt!
  upsertStyleSubmissionReport(
    where: StyleSubmissionReportWhereUniqueInput!
    create: StyleSubmissionReportCreateInput!
    update: StyleSubmissionReportUpdateInput!
  ): StyleSubmissionReport!
  upsertBagItem(
    where: BagItemWhereUniqueInput!
    create: BagItemCreateInput!
    update: BagItemUpdateInput!
  ): BagItem!
  upsertCustomerMembership(
    where: CustomerMembershipWhereUniqueInput!
    create: CustomerMembershipCreateInput!
    update: CustomerMembershipUpdateInput!
  ): CustomerMembership!
  upsertPauseRequest(
    where: PauseRequestWhereUniqueInput!
    create: PauseRequestCreateInput!
    update: PauseRequestUpdateInput!
  ): PauseRequest!
  upsertRecentlyViewedProduct(
    where: RecentlyViewedProductWhereUniqueInput!
    create: RecentlyViewedProductCreateInput!
    update: RecentlyViewedProductUpdateInput!
  ): RecentlyViewedProduct!
  upsertReservationFeedback(
    where: ReservationFeedbackWhereUniqueInput!
    create: ReservationFeedbackCreateInput!
    update: ReservationFeedbackUpdateInput!
  ): ReservationFeedback!
  upsertProductVariantFeedback(
    where: ProductVariantFeedbackWhereUniqueInput!
    create: ProductVariantFeedbackCreateInput!
    update: ProductVariantFeedbackUpdateInput!
  ): ProductVariantFeedback!
  upsertProductVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
    create: ProductVariantFeedbackQuestionCreateInput!
    update: ProductVariantFeedbackQuestionUpdateInput!
  ): ProductVariantFeedbackQuestion!
  upsertReservationReceipt(
    where: ReservationReceiptWhereUniqueInput!
    create: ReservationReceiptCreateInput!
    update: ReservationReceiptUpdateInput!
  ): ReservationReceipt!
  upsertProductRequest(
    where: ProductRequestWhereUniqueInput!
    create: ProductRequestCreateInput!
    update: ProductRequestUpdateInput!
  ): ProductRequest!
  upsertProductVariantWant(
    where: ProductVariantWantWhereUniqueInput!
    create: ProductVariantWantCreateInput!
    update: ProductVariantWantUpdateInput!
  ): ProductVariantWant!
  upsertCollection(
    where: CollectionWhereUniqueInput!
    create: CollectionCreateInput!
    update: CollectionUpdateInput!
  ): Collection!
  upsertPushNotificationReceipt(
    where: PushNotificationReceiptWhereUniqueInput!
    create: PushNotificationReceiptCreateInput!
    update: PushNotificationReceiptUpdateInput!
  ): PushNotificationReceipt!
  upsertCustomerDetail(
    where: CustomerDetailWhereUniqueInput!
    create: CustomerDetailCreateInput!
    update: CustomerDetailUpdateInput!
  ): CustomerDetail!
  upsertUserPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
    create: UserPushNotificationInterestCreateInput!
    update: UserPushNotificationInterestUpdateInput!
  ): UserPushNotificationInterest!
  upsertBillingInfo(
    where: BillingInfoWhereUniqueInput!
    create: BillingInfoCreateInput!
    update: BillingInfoUpdateInput!
  ): BillingInfo!
  upsertReservationReceiptItem(
    where: ReservationReceiptItemWhereUniqueInput!
    create: ReservationReceiptItemCreateInput!
    update: ReservationReceiptItemUpdateInput!
  ): ReservationReceiptItem!
  upsertStylePreferences(
    where: StylePreferencesWhereUniqueInput!
    create: StylePreferencesCreateInput!
    update: StylePreferencesUpdateInput!
  ): StylePreferences!
  upsertPackage(
    where: PackageWhereUniqueInput!
    create: PackageCreateInput!
    update: PackageUpdateInput!
  ): Package!
  upsertSize(
    where: SizeWhereUniqueInput!
    create: SizeCreateInput!
    update: SizeUpdateInput!
  ): Size!
  upsertProductFunction(
    where: ProductFunctionWhereUniqueInput!
    create: ProductFunctionCreateInput!
    update: ProductFunctionUpdateInput!
  ): ProductFunction!
  upsertStyleSubmission(
    where: StyleSubmissionWhereUniqueInput!
    create: StyleSubmissionCreateInput!
    update: StyleSubmissionUpdateInput!
  ): StyleSubmission!
  upsertImage(
    where: ImageWhereUniqueInput!
    create: ImageCreateInput!
    update: ImageUpdateInput!
  ): Image!
  upsertColor(
    where: ColorWhereUniqueInput!
    create: ColorCreateInput!
    update: ColorUpdateInput!
  ): Color!
  upsertTopSize(
    where: TopSizeWhereUniqueInput!
    create: TopSizeCreateInput!
    update: TopSizeUpdateInput!
  ): TopSize!
  upsertCustomer(
    where: CustomerWhereUniqueInput!
    create: CustomerCreateInput!
    update: CustomerUpdateInput!
  ): Customer!
  upsertUserPushNotification(
    where: UserPushNotificationWhereUniqueInput!
    create: UserPushNotificationCreateInput!
    update: UserPushNotificationUpdateInput!
  ): UserPushNotification!
  upsertCategory(
    where: CategoryWhereUniqueInput!
    create: CategoryCreateInput!
    update: CategoryUpdateInput!
  ): Category!
  upsertBottomSize(
    where: BottomSizeWhereUniqueInput!
    create: BottomSizeCreateInput!
    update: BottomSizeUpdateInput!
  ): BottomSize!
  upsertPackageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
    create: PackageTransitEventCreateInput!
    update: PackageTransitEventUpdateInput!
  ): PackageTransitEvent!
  upsertLabel(
    where: LabelWhereUniqueInput!
    create: LabelCreateInput!
    update: LabelUpdateInput!
  ): Label!
  upsertSmsReceipt(
    where: SmsReceiptWhereUniqueInput!
    create: SmsReceiptCreateInput!
    update: SmsReceiptUpdateInput!
  ): SmsReceipt!
  upsertLocation(
    where: LocationWhereUniqueInput!
    create: LocationCreateInput!
    update: LocationUpdateInput!
  ): Location!
  upsertPhysicalProduct(
    where: PhysicalProductWhereUniqueInput!
    create: PhysicalProductCreateInput!
    update: PhysicalProductUpdateInput!
  ): PhysicalProduct!
  upsertProductVariant(
    where: ProductVariantWhereUniqueInput!
    create: ProductVariantCreateInput!
    update: ProductVariantUpdateInput!
  ): ProductVariant!
  upsertProduct(
    where: ProductWhereUniqueInput!
    create: ProductCreateInput!
    update: ProductUpdateInput!
  ): Product!
  upsertReservation(
    where: ReservationWhereUniqueInput!
    create: ReservationCreateInput!
    update: ReservationUpdateInput!
  ): Reservation!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  updateManyBrands(
    data: BrandUpdateManyMutationInput!
    where: BrandWhereInput
  ): BatchPayload!
  updateManyCollectionGroups(
    data: CollectionGroupUpdateManyMutationInput!
    where: CollectionGroupWhereInput
  ): BatchPayload!
  updateManyHomepageProductRails(
    data: HomepageProductRailUpdateManyMutationInput!
    where: HomepageProductRailWhereInput
  ): BatchPayload!
  updateManyTags(
    data: TagUpdateManyMutationInput!
    where: TagWhereInput
  ): BatchPayload!
  updateManyProductStatusChanges(
    data: ProductStatusChangeUpdateManyMutationInput!
    where: ProductStatusChangeWhereInput
  ): BatchPayload!
  updateManyProductMaterialCategories(
    data: ProductMaterialCategoryUpdateManyMutationInput!
    where: ProductMaterialCategoryWhereInput
  ): BatchPayload!
  updateManyProductModels(
    data: ProductModelUpdateManyMutationInput!
    where: ProductModelWhereInput
  ): BatchPayload!
  updateManyPhysicalProductInventoryStatusChanges(
    data: PhysicalProductInventoryStatusChangeUpdateManyMutationInput!
    where: PhysicalProductInventoryStatusChangeWhereInput
  ): BatchPayload!
  updateManyWarehouseLocationConstraints(
    data: WarehouseLocationConstraintUpdateManyMutationInput!
    where: WarehouseLocationConstraintWhereInput
  ): BatchPayload!
  updateManyWarehouseLocations(
    data: WarehouseLocationUpdateManyMutationInput!
    where: WarehouseLocationWhereInput
  ): BatchPayload!
  updateManyPaymentPlans(
    data: PaymentPlanUpdateManyMutationInput!
    where: PaymentPlanWhereInput
  ): BatchPayload!
  updateManyEmailReceipts(
    data: EmailReceiptUpdateManyMutationInput!
    where: EmailReceiptWhereInput
  ): BatchPayload!
  updateManyStyleSubmissionReports(
    data: StyleSubmissionReportUpdateManyMutationInput!
    where: StyleSubmissionReportWhereInput
  ): BatchPayload!
  updateManyBagItems(
    data: BagItemUpdateManyMutationInput!
    where: BagItemWhereInput
  ): BatchPayload!
  updateManyCustomerMemberships(
    data: CustomerMembershipUpdateManyMutationInput!
    where: CustomerMembershipWhereInput
  ): BatchPayload!
  updateManyPauseRequests(
    data: PauseRequestUpdateManyMutationInput!
    where: PauseRequestWhereInput
  ): BatchPayload!
  updateManyRecentlyViewedProducts(
    data: RecentlyViewedProductUpdateManyMutationInput!
    where: RecentlyViewedProductWhereInput
  ): BatchPayload!
  updateManyReservationFeedbacks(
    data: ReservationFeedbackUpdateManyMutationInput!
    where: ReservationFeedbackWhereInput
  ): BatchPayload!
  updateManyProductVariantFeedbacks(
    data: ProductVariantFeedbackUpdateManyMutationInput!
    where: ProductVariantFeedbackWhereInput
  ): BatchPayload!
  updateManyProductVariantFeedbackQuestions(
    data: ProductVariantFeedbackQuestionUpdateManyMutationInput!
    where: ProductVariantFeedbackQuestionWhereInput
  ): BatchPayload!
  updateManyProductRequests(
    data: ProductRequestUpdateManyMutationInput!
    where: ProductRequestWhereInput
  ): BatchPayload!
  updateManyProductVariantWants(
    data: ProductVariantWantUpdateManyMutationInput!
    where: ProductVariantWantWhereInput
  ): BatchPayload!
  updateManyCollections(
    data: CollectionUpdateManyMutationInput!
    where: CollectionWhereInput
  ): BatchPayload!
  updateManyPushNotificationReceipts(
    data: PushNotificationReceiptUpdateManyMutationInput!
    where: PushNotificationReceiptWhereInput
  ): BatchPayload!
  updateManyCustomerDetails(
    data: CustomerDetailUpdateManyMutationInput!
    where: CustomerDetailWhereInput
  ): BatchPayload!
  updateManyUserPushNotificationInterests(
    data: UserPushNotificationInterestUpdateManyMutationInput!
    where: UserPushNotificationInterestWhereInput
  ): BatchPayload!
  updateManyBillingInfoes(
    data: BillingInfoUpdateManyMutationInput!
    where: BillingInfoWhereInput
  ): BatchPayload!
  updateManyReservationReceiptItems(
    data: ReservationReceiptItemUpdateManyMutationInput!
    where: ReservationReceiptItemWhereInput
  ): BatchPayload!
  updateManyStylePreferenceses(
    data: StylePreferencesUpdateManyMutationInput!
    where: StylePreferencesWhereInput
  ): BatchPayload!
  updateManyPackages(
    data: PackageUpdateManyMutationInput!
    where: PackageWhereInput
  ): BatchPayload!
  updateManySizes(
    data: SizeUpdateManyMutationInput!
    where: SizeWhereInput
  ): BatchPayload!
  updateManyProductFunctions(
    data: ProductFunctionUpdateManyMutationInput!
    where: ProductFunctionWhereInput
  ): BatchPayload!
  updateManyStyleSubmissions(
    data: StyleSubmissionUpdateManyMutationInput!
    where: StyleSubmissionWhereInput
  ): BatchPayload!
  updateManyImages(
    data: ImageUpdateManyMutationInput!
    where: ImageWhereInput
  ): BatchPayload!
  updateManyColors(
    data: ColorUpdateManyMutationInput!
    where: ColorWhereInput
  ): BatchPayload!
  updateManyTopSizes(
    data: TopSizeUpdateManyMutationInput!
    where: TopSizeWhereInput
  ): BatchPayload!
  updateManyCustomers(
    data: CustomerUpdateManyMutationInput!
    where: CustomerWhereInput
  ): BatchPayload!
  updateManyUserPushNotifications(
    data: UserPushNotificationUpdateManyMutationInput!
    where: UserPushNotificationWhereInput
  ): BatchPayload!
  updateManyCategories(
    data: CategoryUpdateManyMutationInput!
    where: CategoryWhereInput
  ): BatchPayload!
  updateManyBottomSizes(
    data: BottomSizeUpdateManyMutationInput!
    where: BottomSizeWhereInput
  ): BatchPayload!
  updateManyPackageTransitEvents(
    data: PackageTransitEventUpdateManyMutationInput!
    where: PackageTransitEventWhereInput
  ): BatchPayload!
  updateManyLabels(
    data: LabelUpdateManyMutationInput!
    where: LabelWhereInput
  ): BatchPayload!
  updateManySmsReceipts(
    data: SmsReceiptUpdateManyMutationInput!
    where: SmsReceiptWhereInput
  ): BatchPayload!
  updateManyLocations(
    data: LocationUpdateManyMutationInput!
    where: LocationWhereInput
  ): BatchPayload!
  updateManyPhysicalProducts(
    data: PhysicalProductUpdateManyMutationInput!
    where: PhysicalProductWhereInput
  ): BatchPayload!
  updateManyProductVariants(
    data: ProductVariantUpdateManyMutationInput!
    where: ProductVariantWhereInput
  ): BatchPayload!
  updateManyProducts(
    data: ProductUpdateManyMutationInput!
    where: ProductWhereInput
  ): BatchPayload!
  updateManyReservations(
    data: ReservationUpdateManyMutationInput!
    where: ReservationWhereInput
  ): BatchPayload!
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  deleteManyCollectionGroups(where: CollectionGroupWhereInput): BatchPayload!
  deleteManyHomepageProductRails(
    where: HomepageProductRailWhereInput
  ): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyProductStatusChanges(
    where: ProductStatusChangeWhereInput
  ): BatchPayload!
  deleteManyProductMaterialCategories(
    where: ProductMaterialCategoryWhereInput
  ): BatchPayload!
  deleteManyProductModels(where: ProductModelWhereInput): BatchPayload!
  deleteManyPhysicalProductInventoryStatusChanges(
    where: PhysicalProductInventoryStatusChangeWhereInput
  ): BatchPayload!
  deleteManyWarehouseLocationConstraints(
    where: WarehouseLocationConstraintWhereInput
  ): BatchPayload!
  deleteManyWarehouseLocations(
    where: WarehouseLocationWhereInput
  ): BatchPayload!
  deleteManyPaymentPlans(where: PaymentPlanWhereInput): BatchPayload!
  deleteManyEmailReceipts(where: EmailReceiptWhereInput): BatchPayload!
  deleteManyStyleSubmissionReports(
    where: StyleSubmissionReportWhereInput
  ): BatchPayload!
  deleteManyBagItems(where: BagItemWhereInput): BatchPayload!
  deleteManyCustomerMemberships(
    where: CustomerMembershipWhereInput
  ): BatchPayload!
  deleteManyPauseRequests(where: PauseRequestWhereInput): BatchPayload!
  deleteManyRecentlyViewedProducts(
    where: RecentlyViewedProductWhereInput
  ): BatchPayload!
  deleteManyReservationFeedbacks(
    where: ReservationFeedbackWhereInput
  ): BatchPayload!
  deleteManyProductVariantFeedbacks(
    where: ProductVariantFeedbackWhereInput
  ): BatchPayload!
  deleteManyProductVariantFeedbackQuestions(
    where: ProductVariantFeedbackQuestionWhereInput
  ): BatchPayload!
  deleteManyReservationReceipts(
    where: ReservationReceiptWhereInput
  ): BatchPayload!
  deleteManyProductRequests(where: ProductRequestWhereInput): BatchPayload!
  deleteManyProductVariantWants(
    where: ProductVariantWantWhereInput
  ): BatchPayload!
  deleteManyCollections(where: CollectionWhereInput): BatchPayload!
  deleteManyPushNotificationReceipts(
    where: PushNotificationReceiptWhereInput
  ): BatchPayload!
  deleteManyCustomerDetails(where: CustomerDetailWhereInput): BatchPayload!
  deleteManyUserPushNotificationInterests(
    where: UserPushNotificationInterestWhereInput
  ): BatchPayload!
  deleteManyBillingInfoes(where: BillingInfoWhereInput): BatchPayload!
  deleteManyReservationReceiptItems(
    where: ReservationReceiptItemWhereInput
  ): BatchPayload!
  deleteManyStylePreferenceses(where: StylePreferencesWhereInput): BatchPayload!
  deleteManyPackages(where: PackageWhereInput): BatchPayload!
  deleteManySizes(where: SizeWhereInput): BatchPayload!
  deleteManyProductFunctions(where: ProductFunctionWhereInput): BatchPayload!
  deleteManyStyleSubmissions(where: StyleSubmissionWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  deleteManyColors(where: ColorWhereInput): BatchPayload!
  deleteManyTopSizes(where: TopSizeWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  deleteManyUserPushNotifications(
    where: UserPushNotificationWhereInput
  ): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyBottomSizes(where: BottomSizeWhereInput): BatchPayload!
  deleteManyPackageTransitEvents(
    where: PackageTransitEventWhereInput
  ): BatchPayload!
  deleteManyLabels(where: LabelWhereInput): BatchPayload!
  deleteManySmsReceipts(where: SmsReceiptWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyPhysicalProducts(where: PhysicalProductWhereInput): BatchPayload!
  deleteManyProductVariants(where: ProductVariantWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyReservations(where: ReservationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

type Package implements Node {
  id: ID!
  items(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  transactionID: String!
  shippingLabel: Label!
  fromAddress: Location!
  toAddress: Location!
  weight: Float
  events(
    where: PackageTransitEventWhereInput
    orderBy: PackageTransitEventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PackageTransitEvent!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PackageConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PackageEdge]!
  aggregate: AggregatePackage!
}

input PackageCreateInput {
  id: ID
  transactionID: String!
  weight: Float
  items: PhysicalProductCreateManyInput
  shippingLabel: LabelCreateOneInput!
  fromAddress: LocationCreateOneInput!
  toAddress: LocationCreateOneInput!
  events: PackageTransitEventCreateManyInput
}

input PackageCreateOneInput {
  create: PackageCreateInput
  connect: PackageWhereUniqueInput
}

"""
An edge in a connection.
"""
type PackageEdge {
  """
  The item at the end of the edge.
  """
  node: Package!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PackageOrderByInput {
  id_ASC
  id_DESC
  transactionID_ASC
  transactionID_DESC
  weight_ASC
  weight_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PackagePreviousValues {
  id: ID!
  transactionID: String!
  weight: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PackageSubscriptionPayload {
  mutation: MutationType!
  node: Package
  updatedFields: [String!]
  previousValues: PackagePreviousValues
}

input PackageSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PackageWhereInput
}

type PackageTransitEvent implements Node {
  id: ID!
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  data: Json!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PackageTransitEventConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PackageTransitEventEdge]!
  aggregate: AggregatePackageTransitEvent!
}

input PackageTransitEventCreateInput {
  id: ID
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  data: Json!
}

input PackageTransitEventCreateManyInput {
  create: [PackageTransitEventCreateInput!]
  connect: [PackageTransitEventWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type PackageTransitEventEdge {
  """
  The item at the end of the edge.
  """
  node: PackageTransitEvent!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PackageTransitEventOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  subStatus_ASC
  subStatus_DESC
  data_ASC
  data_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PackageTransitEventPreviousValues {
  id: ID!
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  data: Json!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PackageTransitEventScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageTransitEventScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageTransitEventScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageTransitEventScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  status: PackageTransitEventStatus

  """
  All values that are not equal to given value.
  """
  status_not: PackageTransitEventStatus

  """
  All values that are contained in given list.
  """
  status_in: [PackageTransitEventStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [PackageTransitEventStatus!]
  subStatus: PackageTransitEventSubStatus

  """
  All values that are not equal to given value.
  """
  subStatus_not: PackageTransitEventSubStatus

  """
  All values that are contained in given list.
  """
  subStatus_in: [PackageTransitEventSubStatus!]

  """
  All values that are not contained in given list.
  """
  subStatus_not_in: [PackageTransitEventSubStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

enum PackageTransitEventStatus {
  PreTransit
  Transit
  Delivered
  Returned
  Failure
  Unknown
}

type PackageTransitEventSubscriptionPayload {
  mutation: MutationType!
  node: PackageTransitEvent
  updatedFields: [String!]
  previousValues: PackageTransitEventPreviousValues
}

input PackageTransitEventSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageTransitEventSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageTransitEventSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageTransitEventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PackageTransitEventWhereInput
}

enum PackageTransitEventSubStatus {
  InformationReceived
  AddressIssue
  ContactCarrier
  Delayed
  DeliveryAttempted
  DeliveryRescheduled
  DeliveryScheduled
  LocationInaccessible
  NoticeLeft
  OutForDelivery
  PackageAccepted
  PackageArrived
  PackageDamaged
  PackageDeparted
  PackageForwarded
  PackageHeld
  PackageProcessed
  PackageProcessing
  PickupAvailable
  RescheduleDelivery
  Delivered
  ReturnToSender
  PackageUnclaimed
  PackageUndeliverable
  PackageDisposed
  PackageLost
  Other
}

input PackageTransitEventUpdateDataInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  data: Json
}

input PackageTransitEventUpdateInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  data: Json
}

input PackageTransitEventUpdateManyDataInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  data: Json
}

input PackageTransitEventUpdateManyInput {
  create: [PackageTransitEventCreateInput!]
  connect: [PackageTransitEventWhereUniqueInput!]
  set: [PackageTransitEventWhereUniqueInput!]
  disconnect: [PackageTransitEventWhereUniqueInput!]
  delete: [PackageTransitEventWhereUniqueInput!]
  update: [PackageTransitEventUpdateWithWhereUniqueNestedInput!]
  updateMany: [PackageTransitEventUpdateManyWithWhereNestedInput!]
  deleteMany: [PackageTransitEventScalarWhereInput!]
  upsert: [PackageTransitEventUpsertWithWhereUniqueNestedInput!]
}

input PackageTransitEventUpdateManyMutationInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  data: Json
}

input PackageTransitEventUpdateManyWithWhereNestedInput {
  where: PackageTransitEventScalarWhereInput!
  data: PackageTransitEventUpdateManyDataInput!
}

input PackageTransitEventUpdateWithWhereUniqueNestedInput {
  where: PackageTransitEventWhereUniqueInput!
  data: PackageTransitEventUpdateDataInput!
}

input PackageTransitEventUpsertWithWhereUniqueNestedInput {
  where: PackageTransitEventWhereUniqueInput!
  update: PackageTransitEventUpdateDataInput!
  create: PackageTransitEventCreateInput!
}

input PackageTransitEventWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageTransitEventWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageTransitEventWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageTransitEventWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  status: PackageTransitEventStatus

  """
  All values that are not equal to given value.
  """
  status_not: PackageTransitEventStatus

  """
  All values that are contained in given list.
  """
  status_in: [PackageTransitEventStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [PackageTransitEventStatus!]
  subStatus: PackageTransitEventSubStatus

  """
  All values that are not equal to given value.
  """
  subStatus_not: PackageTransitEventSubStatus

  """
  All values that are contained in given list.
  """
  subStatus_in: [PackageTransitEventSubStatus!]

  """
  All values that are not contained in given list.
  """
  subStatus_not_in: [PackageTransitEventSubStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input PackageTransitEventWhereUniqueInput {
  id: ID
}

input PackageUpdateDataInput {
  transactionID: String
  weight: Float
  items: PhysicalProductUpdateManyInput
  shippingLabel: LabelUpdateOneRequiredInput
  fromAddress: LocationUpdateOneRequiredInput
  toAddress: LocationUpdateOneRequiredInput
  events: PackageTransitEventUpdateManyInput
}

input PackageUpdateInput {
  transactionID: String
  weight: Float
  items: PhysicalProductUpdateManyInput
  shippingLabel: LabelUpdateOneRequiredInput
  fromAddress: LocationUpdateOneRequiredInput
  toAddress: LocationUpdateOneRequiredInput
  events: PackageTransitEventUpdateManyInput
}

input PackageUpdateManyMutationInput {
  transactionID: String
  weight: Float
}

input PackageUpdateOneInput {
  create: PackageCreateInput
  connect: PackageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PackageUpdateDataInput
  upsert: PackageUpsertNestedInput
}

input PackageUpsertNestedInput {
  update: PackageUpdateDataInput!
  create: PackageCreateInput!
}

input PackageWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PackageWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PackageWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PackageWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  transactionID: String

  """
  All values that are not equal to given value.
  """
  transactionID_not: String

  """
  All values that are contained in given list.
  """
  transactionID_in: [String!]

  """
  All values that are not contained in given list.
  """
  transactionID_not_in: [String!]

  """
  All values less than the given value.
  """
  transactionID_lt: String

  """
  All values less than or equal the given value.
  """
  transactionID_lte: String

  """
  All values greater than the given value.
  """
  transactionID_gt: String

  """
  All values greater than or equal the given value.
  """
  transactionID_gte: String

  """
  All values containing the given string.
  """
  transactionID_contains: String

  """
  All values not containing the given string.
  """
  transactionID_not_contains: String

  """
  All values starting with the given string.
  """
  transactionID_starts_with: String

  """
  All values not starting with the given string.
  """
  transactionID_not_starts_with: String

  """
  All values ending with the given string.
  """
  transactionID_ends_with: String

  """
  All values not ending with the given string.
  """
  transactionID_not_ends_with: String
  weight: Float

  """
  All values that are not equal to given value.
  """
  weight_not: Float

  """
  All values that are contained in given list.
  """
  weight_in: [Float!]

  """
  All values that are not contained in given list.
  """
  weight_not_in: [Float!]

  """
  All values less than the given value.
  """
  weight_lt: Float

  """
  All values less than or equal the given value.
  """
  weight_lte: Float

  """
  All values greater than the given value.
  """
  weight_gt: Float

  """
  All values greater than or equal the given value.
  """
  weight_gte: Float
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  items_every: PhysicalProductWhereInput
  items_some: PhysicalProductWhereInput
  items_none: PhysicalProductWhereInput
  shippingLabel: LabelWhereInput
  fromAddress: LocationWhereInput
  toAddress: LocationWhereInput
  events_every: PackageTransitEventWhereInput
  events_some: PackageTransitEventWhereInput
  events_none: PackageTransitEventWhereInput
}

input PackageWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type PauseRequest implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
  membership: CustomerMembership!
}

"""
A connection to a list of items.
"""
type PauseRequestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PauseRequestEdge]!
  aggregate: AggregatePauseRequest!
}

input PauseRequestCreateInput {
  id: ID
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
  membership: CustomerMembershipCreateOneWithoutPauseRequestsInput!
}

input PauseRequestCreateManyWithoutMembershipInput {
  create: [PauseRequestCreateWithoutMembershipInput!]
  connect: [PauseRequestWhereUniqueInput!]
}

input PauseRequestCreateWithoutMembershipInput {
  id: ID
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
}

"""
An edge in a connection.
"""
type PauseRequestEdge {
  """
  The item at the end of the edge.
  """
  node: PauseRequest!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PauseRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  pausePending_ASC
  pausePending_DESC
  pauseDate_ASC
  pauseDate_DESC
  resumeDate_ASC
  resumeDate_DESC
}

type PauseRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
}

input PauseRequestScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PauseRequestScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PauseRequestScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PauseRequestScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  pausePending: Boolean

  """
  All values that are not equal to given value.
  """
  pausePending_not: Boolean
  pauseDate: DateTime

  """
  All values that are not equal to given value.
  """
  pauseDate_not: DateTime

  """
  All values that are contained in given list.
  """
  pauseDate_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  pauseDate_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  pauseDate_lt: DateTime

  """
  All values less than or equal the given value.
  """
  pauseDate_lte: DateTime

  """
  All values greater than the given value.
  """
  pauseDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  pauseDate_gte: DateTime
  resumeDate: DateTime

  """
  All values that are not equal to given value.
  """
  resumeDate_not: DateTime

  """
  All values that are contained in given list.
  """
  resumeDate_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  resumeDate_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  resumeDate_lt: DateTime

  """
  All values less than or equal the given value.
  """
  resumeDate_lte: DateTime

  """
  All values greater than the given value.
  """
  resumeDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  resumeDate_gte: DateTime
}

type PauseRequestSubscriptionPayload {
  mutation: MutationType!
  node: PauseRequest
  updatedFields: [String!]
  previousValues: PauseRequestPreviousValues
}

input PauseRequestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PauseRequestSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PauseRequestSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PauseRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PauseRequestWhereInput
}

input PauseRequestUpdateInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
  membership: CustomerMembershipUpdateOneRequiredWithoutPauseRequestsInput
}

input PauseRequestUpdateManyDataInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
}

input PauseRequestUpdateManyMutationInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
}

input PauseRequestUpdateManyWithoutMembershipInput {
  create: [PauseRequestCreateWithoutMembershipInput!]
  connect: [PauseRequestWhereUniqueInput!]
  set: [PauseRequestWhereUniqueInput!]
  disconnect: [PauseRequestWhereUniqueInput!]
  delete: [PauseRequestWhereUniqueInput!]
  update: [PauseRequestUpdateWithWhereUniqueWithoutMembershipInput!]
  updateMany: [PauseRequestUpdateManyWithWhereNestedInput!]
  deleteMany: [PauseRequestScalarWhereInput!]
  upsert: [PauseRequestUpsertWithWhereUniqueWithoutMembershipInput!]
}

input PauseRequestUpdateManyWithWhereNestedInput {
  where: PauseRequestScalarWhereInput!
  data: PauseRequestUpdateManyDataInput!
}

input PauseRequestUpdateWithoutMembershipDataInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
}

input PauseRequestUpdateWithWhereUniqueWithoutMembershipInput {
  where: PauseRequestWhereUniqueInput!
  data: PauseRequestUpdateWithoutMembershipDataInput!
}

input PauseRequestUpsertWithWhereUniqueWithoutMembershipInput {
  where: PauseRequestWhereUniqueInput!
  update: PauseRequestUpdateWithoutMembershipDataInput!
  create: PauseRequestCreateWithoutMembershipInput!
}

input PauseRequestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PauseRequestWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PauseRequestWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PauseRequestWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  pausePending: Boolean

  """
  All values that are not equal to given value.
  """
  pausePending_not: Boolean
  pauseDate: DateTime

  """
  All values that are not equal to given value.
  """
  pauseDate_not: DateTime

  """
  All values that are contained in given list.
  """
  pauseDate_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  pauseDate_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  pauseDate_lt: DateTime

  """
  All values less than or equal the given value.
  """
  pauseDate_lte: DateTime

  """
  All values greater than the given value.
  """
  pauseDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  pauseDate_gte: DateTime
  resumeDate: DateTime

  """
  All values that are not equal to given value.
  """
  resumeDate_not: DateTime

  """
  All values that are contained in given list.
  """
  resumeDate_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  resumeDate_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  resumeDate_lt: DateTime

  """
  All values less than or equal the given value.
  """
  resumeDate_lte: DateTime

  """
  All values greater than the given value.
  """
  resumeDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  resumeDate_gte: DateTime
  membership: CustomerMembershipWhereInput
}

input PauseRequestWhereUniqueInput {
  id: ID
}

type PaymentPlan implements Node {
  id: ID!
  description: String
  planID: String!
  status: String
  name: String
  price: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PaymentPlanConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PaymentPlanEdge]!
  aggregate: AggregatePaymentPlan!
}

input PaymentPlanCreateInput {
  id: ID
  description: String
  planID: String!
  status: String
  name: String
  price: Int
}

"""
An edge in a connection.
"""
type PaymentPlanEdge {
  """
  The item at the end of the edge.
  """
  node: PaymentPlan!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PaymentPlanOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  planID_ASC
  planID_DESC
  status_ASC
  status_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentPlanPreviousValues {
  id: ID!
  description: String
  planID: String!
  status: String
  name: String
  price: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentPlanSubscriptionPayload {
  mutation: MutationType!
  node: PaymentPlan
  updatedFields: [String!]
  previousValues: PaymentPlanPreviousValues
}

input PaymentPlanSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PaymentPlanSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PaymentPlanSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PaymentPlanSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentPlanWhereInput
}

input PaymentPlanUpdateInput {
  description: String
  planID: String
  status: String
  name: String
  price: Int
}

input PaymentPlanUpdateManyMutationInput {
  description: String
  planID: String
  status: String
  name: String
  price: Int
}

input PaymentPlanWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PaymentPlanWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PaymentPlanWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PaymentPlanWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  planID: String

  """
  All values that are not equal to given value.
  """
  planID_not: String

  """
  All values that are contained in given list.
  """
  planID_in: [String!]

  """
  All values that are not contained in given list.
  """
  planID_not_in: [String!]

  """
  All values less than the given value.
  """
  planID_lt: String

  """
  All values less than or equal the given value.
  """
  planID_lte: String

  """
  All values greater than the given value.
  """
  planID_gt: String

  """
  All values greater than or equal the given value.
  """
  planID_gte: String

  """
  All values containing the given string.
  """
  planID_contains: String

  """
  All values not containing the given string.
  """
  planID_not_contains: String

  """
  All values starting with the given string.
  """
  planID_starts_with: String

  """
  All values not starting with the given string.
  """
  planID_not_starts_with: String

  """
  All values ending with the given string.
  """
  planID_ends_with: String

  """
  All values not ending with the given string.
  """
  planID_not_ends_with: String
  status: String

  """
  All values that are not equal to given value.
  """
  status_not: String

  """
  All values that are contained in given list.
  """
  status_in: [String!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [String!]

  """
  All values less than the given value.
  """
  status_lt: String

  """
  All values less than or equal the given value.
  """
  status_lte: String

  """
  All values greater than the given value.
  """
  status_gt: String

  """
  All values greater than or equal the given value.
  """
  status_gte: String

  """
  All values containing the given string.
  """
  status_contains: String

  """
  All values not containing the given string.
  """
  status_not_contains: String

  """
  All values starting with the given string.
  """
  status_starts_with: String

  """
  All values not starting with the given string.
  """
  status_not_starts_with: String

  """
  All values ending with the given string.
  """
  status_ends_with: String

  """
  All values not ending with the given string.
  """
  status_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  price: Int

  """
  All values that are not equal to given value.
  """
  price_not: Int

  """
  All values that are contained in given list.
  """
  price_in: [Int!]

  """
  All values that are not contained in given list.
  """
  price_not_in: [Int!]

  """
  All values less than the given value.
  """
  price_lt: Int

  """
  All values less than or equal the given value.
  """
  price_lte: Int

  """
  All values greater than the given value.
  """
  price_gt: Int

  """
  All values greater than or equal the given value.
  """
  price_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input PaymentPlanWhereUniqueInput {
  id: ID
  planID: String
}

enum PhotographyStatus {
  Done
  InProgress
  ReadyForEditing
  ReadyToShoot
  Steam
}

type PhysicalProduct implements Node {
  id: ID!
  seasonsUID: String!
  location: Location
  productVariant: ProductVariant!
  inventoryStatus: InventoryStatus!
  inventoryStatusChanges(
    where: PhysicalProductInventoryStatusChangeWhereInput
    orderBy: PhysicalProductInventoryStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProductInventoryStatusChange!]
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  warehouseLocation: WarehouseLocation
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PhysicalProductConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PhysicalProductEdge]!
  aggregate: AggregatePhysicalProduct!
}

input PhysicalProductCreateInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
}

input PhysicalProductCreateManyInput {
  create: [PhysicalProductCreateInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutLocationInput {
  create: [PhysicalProductCreateWithoutLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutProductVariantInput {
  create: [PhysicalProductCreateWithoutProductVariantInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutWarehouseLocationInput {
  create: [PhysicalProductCreateWithoutWarehouseLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateOneInput {
  create: PhysicalProductCreateInput
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductCreateOneWithoutInventoryStatusChangesInput {
  create: PhysicalProductCreateWithoutInventoryStatusChangesInput
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductCreateWithoutInventoryStatusChangesInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
}

input PhysicalProductCreateWithoutLocationInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
}

input PhysicalProductCreateWithoutProductVariantInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationCreateOneWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
}

input PhysicalProductCreateWithoutWarehouseLocationInput {
  id: ID
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput
}

"""
An edge in a connection.
"""
type PhysicalProductEdge {
  """
  The item at the end of the edge.
  """
  node: PhysicalProduct!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type PhysicalProductInventoryStatusChange implements Node {
  id: ID!
  old: InventoryStatus!
  new: InventoryStatus!
  physicalProduct: PhysicalProduct!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""
A connection to a list of items.
"""
type PhysicalProductInventoryStatusChangeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PhysicalProductInventoryStatusChangeEdge]!
  aggregate: AggregatePhysicalProductInventoryStatusChange!
}

input PhysicalProductInventoryStatusChangeCreateInput {
  id: ID
  old: InventoryStatus!
  new: InventoryStatus!
  physicalProduct: PhysicalProductCreateOneWithoutInventoryStatusChangesInput!
}

input PhysicalProductInventoryStatusChangeCreateManyWithoutPhysicalProductInput {
  create: [PhysicalProductInventoryStatusChangeCreateWithoutPhysicalProductInput!]
  connect: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
}

input PhysicalProductInventoryStatusChangeCreateWithoutPhysicalProductInput {
  id: ID
  old: InventoryStatus!
  new: InventoryStatus!
}

"""
An edge in a connection.
"""
type PhysicalProductInventoryStatusChangeEdge {
  """
  The item at the end of the edge.
  """
  node: PhysicalProductInventoryStatusChange!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PhysicalProductInventoryStatusChangeOrderByInput {
  id_ASC
  id_DESC
  old_ASC
  old_DESC
  new_ASC
  new_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhysicalProductInventoryStatusChangePreviousValues {
  id: ID!
  old: InventoryStatus!
  new: InventoryStatus!
  createdAt: DateTime!
  updatedAt: DateTime
}

input PhysicalProductInventoryStatusChangeScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductInventoryStatusChangeScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductInventoryStatusChangeScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductInventoryStatusChangeScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  old: InventoryStatus

  """
  All values that are not equal to given value.
  """
  old_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  old_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  old_not_in: [InventoryStatus!]
  new: InventoryStatus

  """
  All values that are not equal to given value.
  """
  new_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  new_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  new_not_in: [InventoryStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type PhysicalProductInventoryStatusChangeSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalProductInventoryStatusChange
  updatedFields: [String!]
  previousValues: PhysicalProductInventoryStatusChangePreviousValues
}

input PhysicalProductInventoryStatusChangeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductInventoryStatusChangeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductInventoryStatusChangeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductInventoryStatusChangeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhysicalProductInventoryStatusChangeWhereInput
}

input PhysicalProductInventoryStatusChangeUpdateInput {
  old: InventoryStatus
  new: InventoryStatus
  physicalProduct: PhysicalProductUpdateOneRequiredWithoutInventoryStatusChangesInput
}

input PhysicalProductInventoryStatusChangeUpdateManyDataInput {
  old: InventoryStatus
  new: InventoryStatus
}

input PhysicalProductInventoryStatusChangeUpdateManyMutationInput {
  old: InventoryStatus
  new: InventoryStatus
}

input PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput {
  create: [PhysicalProductInventoryStatusChangeCreateWithoutPhysicalProductInput!]
  connect: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
  set: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
  disconnect: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
  delete: [PhysicalProductInventoryStatusChangeWhereUniqueInput!]
  update: [PhysicalProductInventoryStatusChangeUpdateWithWhereUniqueWithoutPhysicalProductInput!]
  updateMany: [PhysicalProductInventoryStatusChangeUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductInventoryStatusChangeScalarWhereInput!]
  upsert: [PhysicalProductInventoryStatusChangeUpsertWithWhereUniqueWithoutPhysicalProductInput!]
}

input PhysicalProductInventoryStatusChangeUpdateManyWithWhereNestedInput {
  where: PhysicalProductInventoryStatusChangeScalarWhereInput!
  data: PhysicalProductInventoryStatusChangeUpdateManyDataInput!
}

input PhysicalProductInventoryStatusChangeUpdateWithoutPhysicalProductDataInput {
  old: InventoryStatus
  new: InventoryStatus
}

input PhysicalProductInventoryStatusChangeUpdateWithWhereUniqueWithoutPhysicalProductInput {
  where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  data: PhysicalProductInventoryStatusChangeUpdateWithoutPhysicalProductDataInput!
}

input PhysicalProductInventoryStatusChangeUpsertWithWhereUniqueWithoutPhysicalProductInput {
  where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  update: PhysicalProductInventoryStatusChangeUpdateWithoutPhysicalProductDataInput!
  create: PhysicalProductInventoryStatusChangeCreateWithoutPhysicalProductInput!
}

input PhysicalProductInventoryStatusChangeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductInventoryStatusChangeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductInventoryStatusChangeWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductInventoryStatusChangeWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  old: InventoryStatus

  """
  All values that are not equal to given value.
  """
  old_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  old_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  old_not_in: [InventoryStatus!]
  new: InventoryStatus

  """
  All values that are not equal to given value.
  """
  new_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  new_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  new_not_in: [InventoryStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  physicalProduct: PhysicalProductWhereInput
}

input PhysicalProductInventoryStatusChangeWhereUniqueInput {
  id: ID
}

enum PhysicalProductOffloadMethod {
  SoldToUser
  SoldToThirdParty
  ReturnedToVendor
  Recycled
  Unknown
}

enum PhysicalProductOrderByInput {
  id_ASC
  id_DESC
  seasonsUID_ASC
  seasonsUID_DESC
  inventoryStatus_ASC
  inventoryStatus_DESC
  productStatus_ASC
  productStatus_DESC
  offloadMethod_ASC
  offloadMethod_DESC
  offloadNotes_ASC
  offloadNotes_DESC
  sequenceNumber_ASC
  sequenceNumber_DESC
  barcoded_ASC
  barcoded_DESC
  dateOrdered_ASC
  dateOrdered_DESC
  dateReceived_ASC
  dateReceived_DESC
  unitCost_ASC
  unitCost_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhysicalProductPreviousValues {
  id: ID!
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhysicalProductScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  seasonsUID: String

  """
  All values that are not equal to given value.
  """
  seasonsUID_not: String

  """
  All values that are contained in given list.
  """
  seasonsUID_in: [String!]

  """
  All values that are not contained in given list.
  """
  seasonsUID_not_in: [String!]

  """
  All values less than the given value.
  """
  seasonsUID_lt: String

  """
  All values less than or equal the given value.
  """
  seasonsUID_lte: String

  """
  All values greater than the given value.
  """
  seasonsUID_gt: String

  """
  All values greater than or equal the given value.
  """
  seasonsUID_gte: String

  """
  All values containing the given string.
  """
  seasonsUID_contains: String

  """
  All values not containing the given string.
  """
  seasonsUID_not_contains: String

  """
  All values starting with the given string.
  """
  seasonsUID_starts_with: String

  """
  All values not starting with the given string.
  """
  seasonsUID_not_starts_with: String

  """
  All values ending with the given string.
  """
  seasonsUID_ends_with: String

  """
  All values not ending with the given string.
  """
  seasonsUID_not_ends_with: String
  inventoryStatus: InventoryStatus

  """
  All values that are not equal to given value.
  """
  inventoryStatus_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  inventoryStatus_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  inventoryStatus_not_in: [InventoryStatus!]
  productStatus: PhysicalProductStatus

  """
  All values that are not equal to given value.
  """
  productStatus_not: PhysicalProductStatus

  """
  All values that are contained in given list.
  """
  productStatus_in: [PhysicalProductStatus!]

  """
  All values that are not contained in given list.
  """
  productStatus_not_in: [PhysicalProductStatus!]
  offloadMethod: PhysicalProductOffloadMethod

  """
  All values that are not equal to given value.
  """
  offloadMethod_not: PhysicalProductOffloadMethod

  """
  All values that are contained in given list.
  """
  offloadMethod_in: [PhysicalProductOffloadMethod!]

  """
  All values that are not contained in given list.
  """
  offloadMethod_not_in: [PhysicalProductOffloadMethod!]
  offloadNotes: String

  """
  All values that are not equal to given value.
  """
  offloadNotes_not: String

  """
  All values that are contained in given list.
  """
  offloadNotes_in: [String!]

  """
  All values that are not contained in given list.
  """
  offloadNotes_not_in: [String!]

  """
  All values less than the given value.
  """
  offloadNotes_lt: String

  """
  All values less than or equal the given value.
  """
  offloadNotes_lte: String

  """
  All values greater than the given value.
  """
  offloadNotes_gt: String

  """
  All values greater than or equal the given value.
  """
  offloadNotes_gte: String

  """
  All values containing the given string.
  """
  offloadNotes_contains: String

  """
  All values not containing the given string.
  """
  offloadNotes_not_contains: String

  """
  All values starting with the given string.
  """
  offloadNotes_starts_with: String

  """
  All values not starting with the given string.
  """
  offloadNotes_not_starts_with: String

  """
  All values ending with the given string.
  """
  offloadNotes_ends_with: String

  """
  All values not ending with the given string.
  """
  offloadNotes_not_ends_with: String
  sequenceNumber: Int

  """
  All values that are not equal to given value.
  """
  sequenceNumber_not: Int

  """
  All values that are contained in given list.
  """
  sequenceNumber_in: [Int!]

  """
  All values that are not contained in given list.
  """
  sequenceNumber_not_in: [Int!]

  """
  All values less than the given value.
  """
  sequenceNumber_lt: Int

  """
  All values less than or equal the given value.
  """
  sequenceNumber_lte: Int

  """
  All values greater than the given value.
  """
  sequenceNumber_gt: Int

  """
  All values greater than or equal the given value.
  """
  sequenceNumber_gte: Int
  barcoded: Boolean

  """
  All values that are not equal to given value.
  """
  barcoded_not: Boolean
  dateOrdered: DateTime

  """
  All values that are not equal to given value.
  """
  dateOrdered_not: DateTime

  """
  All values that are contained in given list.
  """
  dateOrdered_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dateOrdered_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dateOrdered_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dateOrdered_lte: DateTime

  """
  All values greater than the given value.
  """
  dateOrdered_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dateOrdered_gte: DateTime
  dateReceived: DateTime

  """
  All values that are not equal to given value.
  """
  dateReceived_not: DateTime

  """
  All values that are contained in given list.
  """
  dateReceived_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dateReceived_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dateReceived_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dateReceived_lte: DateTime

  """
  All values greater than the given value.
  """
  dateReceived_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dateReceived_gte: DateTime
  unitCost: Float

  """
  All values that are not equal to given value.
  """
  unitCost_not: Float

  """
  All values that are contained in given list.
  """
  unitCost_in: [Float!]

  """
  All values that are not contained in given list.
  """
  unitCost_not_in: [Float!]

  """
  All values less than the given value.
  """
  unitCost_lt: Float

  """
  All values less than or equal the given value.
  """
  unitCost_lte: Float

  """
  All values greater than the given value.
  """
  unitCost_gt: Float

  """
  All values greater than or equal the given value.
  """
  unitCost_gte: Float
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

enum PhysicalProductStatus {
  New
  Used
  Dirty
  Damaged
  PermanentlyDamaged
  Clean
  Lost
}

type PhysicalProductSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalProduct
  updatedFields: [String!]
  previousValues: PhysicalProductPreviousValues
}

input PhysicalProductSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhysicalProductWhereInput
}

input PhysicalProductUpdateDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateManyDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
}

input PhysicalProductUpdateManyInput {
  create: [PhysicalProductCreateInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueNestedInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueNestedInput!]
}

input PhysicalProductUpdateManyMutationInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
}

input PhysicalProductUpdateManyWithoutLocationInput {
  create: [PhysicalProductCreateWithoutLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutLocationInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutLocationInput!]
}

input PhysicalProductUpdateManyWithoutProductVariantInput {
  create: [PhysicalProductCreateWithoutProductVariantInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput!]
}

input PhysicalProductUpdateManyWithoutWarehouseLocationInput {
  create: [PhysicalProductCreateWithoutWarehouseLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutWarehouseLocationInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutWarehouseLocationInput!]
}

input PhysicalProductUpdateManyWithWhereNestedInput {
  where: PhysicalProductScalarWhereInput!
  data: PhysicalProductUpdateManyDataInput!
}

input PhysicalProductUpdateOneRequiredInput {
  create: PhysicalProductCreateInput
  connect: PhysicalProductWhereUniqueInput
  update: PhysicalProductUpdateDataInput
  upsert: PhysicalProductUpsertNestedInput
}

input PhysicalProductUpdateOneRequiredWithoutInventoryStatusChangesInput {
  create: PhysicalProductCreateWithoutInventoryStatusChangesInput
  connect: PhysicalProductWhereUniqueInput
  update: PhysicalProductUpdateWithoutInventoryStatusChangesDataInput
  upsert: PhysicalProductUpsertWithoutInventoryStatusChangesInput
}

input PhysicalProductUpdateWithoutInventoryStatusChangesDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateWithoutLocationDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateWithoutProductVariantDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
}

input PhysicalProductUpdateWithoutWarehouseLocationDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatusChanges: PhysicalProductInventoryStatusChangeUpdateManyWithoutPhysicalProductInput
}

input PhysicalProductUpdateWithWhereUniqueNestedInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutLocationInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutLocationDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutProductVariantDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutWarehouseLocationInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutWarehouseLocationDataInput!
}

input PhysicalProductUpsertNestedInput {
  update: PhysicalProductUpdateDataInput!
  create: PhysicalProductCreateInput!
}

input PhysicalProductUpsertWithoutInventoryStatusChangesInput {
  update: PhysicalProductUpdateWithoutInventoryStatusChangesDataInput!
  create: PhysicalProductCreateWithoutInventoryStatusChangesInput!
}

input PhysicalProductUpsertWithWhereUniqueNestedInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateDataInput!
  create: PhysicalProductCreateInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutLocationInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutLocationDataInput!
  create: PhysicalProductCreateWithoutLocationInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutProductVariantDataInput!
  create: PhysicalProductCreateWithoutProductVariantInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutWarehouseLocationInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutWarehouseLocationDataInput!
  create: PhysicalProductCreateWithoutWarehouseLocationInput!
}

input PhysicalProductWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PhysicalProductWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PhysicalProductWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PhysicalProductWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  seasonsUID: String

  """
  All values that are not equal to given value.
  """
  seasonsUID_not: String

  """
  All values that are contained in given list.
  """
  seasonsUID_in: [String!]

  """
  All values that are not contained in given list.
  """
  seasonsUID_not_in: [String!]

  """
  All values less than the given value.
  """
  seasonsUID_lt: String

  """
  All values less than or equal the given value.
  """
  seasonsUID_lte: String

  """
  All values greater than the given value.
  """
  seasonsUID_gt: String

  """
  All values greater than or equal the given value.
  """
  seasonsUID_gte: String

  """
  All values containing the given string.
  """
  seasonsUID_contains: String

  """
  All values not containing the given string.
  """
  seasonsUID_not_contains: String

  """
  All values starting with the given string.
  """
  seasonsUID_starts_with: String

  """
  All values not starting with the given string.
  """
  seasonsUID_not_starts_with: String

  """
  All values ending with the given string.
  """
  seasonsUID_ends_with: String

  """
  All values not ending with the given string.
  """
  seasonsUID_not_ends_with: String
  inventoryStatus: InventoryStatus

  """
  All values that are not equal to given value.
  """
  inventoryStatus_not: InventoryStatus

  """
  All values that are contained in given list.
  """
  inventoryStatus_in: [InventoryStatus!]

  """
  All values that are not contained in given list.
  """
  inventoryStatus_not_in: [InventoryStatus!]
  productStatus: PhysicalProductStatus

  """
  All values that are not equal to given value.
  """
  productStatus_not: PhysicalProductStatus

  """
  All values that are contained in given list.
  """
  productStatus_in: [PhysicalProductStatus!]

  """
  All values that are not contained in given list.
  """
  productStatus_not_in: [PhysicalProductStatus!]
  offloadMethod: PhysicalProductOffloadMethod

  """
  All values that are not equal to given value.
  """
  offloadMethod_not: PhysicalProductOffloadMethod

  """
  All values that are contained in given list.
  """
  offloadMethod_in: [PhysicalProductOffloadMethod!]

  """
  All values that are not contained in given list.
  """
  offloadMethod_not_in: [PhysicalProductOffloadMethod!]
  offloadNotes: String

  """
  All values that are not equal to given value.
  """
  offloadNotes_not: String

  """
  All values that are contained in given list.
  """
  offloadNotes_in: [String!]

  """
  All values that are not contained in given list.
  """
  offloadNotes_not_in: [String!]

  """
  All values less than the given value.
  """
  offloadNotes_lt: String

  """
  All values less than or equal the given value.
  """
  offloadNotes_lte: String

  """
  All values greater than the given value.
  """
  offloadNotes_gt: String

  """
  All values greater than or equal the given value.
  """
  offloadNotes_gte: String

  """
  All values containing the given string.
  """
  offloadNotes_contains: String

  """
  All values not containing the given string.
  """
  offloadNotes_not_contains: String

  """
  All values starting with the given string.
  """
  offloadNotes_starts_with: String

  """
  All values not starting with the given string.
  """
  offloadNotes_not_starts_with: String

  """
  All values ending with the given string.
  """
  offloadNotes_ends_with: String

  """
  All values not ending with the given string.
  """
  offloadNotes_not_ends_with: String
  sequenceNumber: Int

  """
  All values that are not equal to given value.
  """
  sequenceNumber_not: Int

  """
  All values that are contained in given list.
  """
  sequenceNumber_in: [Int!]

  """
  All values that are not contained in given list.
  """
  sequenceNumber_not_in: [Int!]

  """
  All values less than the given value.
  """
  sequenceNumber_lt: Int

  """
  All values less than or equal the given value.
  """
  sequenceNumber_lte: Int

  """
  All values greater than the given value.
  """
  sequenceNumber_gt: Int

  """
  All values greater than or equal the given value.
  """
  sequenceNumber_gte: Int
  barcoded: Boolean

  """
  All values that are not equal to given value.
  """
  barcoded_not: Boolean
  dateOrdered: DateTime

  """
  All values that are not equal to given value.
  """
  dateOrdered_not: DateTime

  """
  All values that are contained in given list.
  """
  dateOrdered_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dateOrdered_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dateOrdered_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dateOrdered_lte: DateTime

  """
  All values greater than the given value.
  """
  dateOrdered_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dateOrdered_gte: DateTime
  dateReceived: DateTime

  """
  All values that are not equal to given value.
  """
  dateReceived_not: DateTime

  """
  All values that are contained in given list.
  """
  dateReceived_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dateReceived_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dateReceived_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dateReceived_lte: DateTime

  """
  All values greater than the given value.
  """
  dateReceived_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dateReceived_gte: DateTime
  unitCost: Float

  """
  All values that are not equal to given value.
  """
  unitCost_not: Float

  """
  All values that are contained in given list.
  """
  unitCost_in: [Float!]

  """
  All values that are not contained in given list.
  """
  unitCost_not_in: [Float!]

  """
  All values less than the given value.
  """
  unitCost_lt: Float

  """
  All values less than or equal the given value.
  """
  unitCost_lte: Float

  """
  All values greater than the given value.
  """
  unitCost_gt: Float

  """
  All values greater than or equal the given value.
  """
  unitCost_gte: Float
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  location: LocationWhereInput
  productVariant: ProductVariantWhereInput
  inventoryStatusChanges_every: PhysicalProductInventoryStatusChangeWhereInput
  inventoryStatusChanges_some: PhysicalProductInventoryStatusChangeWhereInput
  inventoryStatusChanges_none: PhysicalProductInventoryStatusChangeWhereInput
  warehouseLocation: WarehouseLocationWhereInput
}

input PhysicalProductWhereUniqueInput {
  id: ID
  seasonsUID: String
}

enum Plan {
  AllAccess
  Essential
}

type Product implements Node {
  id: ID!
  slug: String!
  name: String!
  brand: Brand!
  category: Category!
  type: ProductType
  description: String
  externalURL: String
  images(
    where: ImageWhereInput
>>>>>>> Rebase
    orderBy: ImageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Image!]
  modelHeight: Int
  retailPrice: Int
  model: ProductModel
  modelSize: Size
  color: Color!
  secondaryColor: Color
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  functions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction!]
  materialCategory: ProductMaterialCategory
  innerMaterials: [String!]!
  outerMaterials: [String!]!
  variants(
    where: ProductVariantWhereInput
    orderBy: ProductVariantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariant!]
  status: ProductStatus
  statusChanges(
    where: ProductStatusChangeWhereInput
    orderBy: ProductStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductStatusChange!]
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ProductArchitecture {
  Fashion
  Showstopper
  Staple
}

"""
A connection to a list of items.
"""
type ProductConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateinnerMaterialsInput {
  set: [String!]
}

input ProductCreateInput {
  id: ID
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductCreateinnerMaterialsInput
  outerMaterials: ProductCreateouterMaterialsInput
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  images: ImageCreateManyInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  color: ColorCreateOneInput!
  secondaryColor: ColorCreateOneInput
  tags: TagCreateManyWithoutProductsInput
  functions: ProductFunctionCreateManyInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  variants: ProductVariantCreateManyWithoutProductInput
  statusChanges: ProductStatusChangeCreateManyWithoutProductInput
}

input ProductCreateManyInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutMaterialCategoryInput {
  create: [ProductCreateWithoutMaterialCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutModelInput {
  create: [ProductCreateWithoutModelInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutStatusChangesInput {
  create: ProductCreateWithoutStatusChangesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateouterMaterialsInput {
  set: [String!]
}

input ProductCreateWithoutBrandInput {
  id: ID
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductCreateinnerMaterialsInput
  outerMaterials: ProductCreateouterMaterialsInput
  category: CategoryCreateOneWithoutProductsInput!
  images: ImageCreateManyInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  color: ColorCreateOneInput!
  secondaryColor: ColorCreateOneInput
  tags: TagCreateManyWithoutProductsInput
  functions: ProductFunctionCreateManyInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  variants: ProductVariantCreateManyWithoutProductInput
  statusChanges: ProductStatusChangeCreateManyWithoutProductInput
}

input ProductCreateWithoutCategoryInput {
  id: ID
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductCreateinnerMaterialsInput
  outerMaterials: ProductCreateouterMaterialsInput
  brand: BrandCreateOneWithoutProductsInput!
  images: ImageCreateManyInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  color: ColorCreateOneInput!
  secondaryColor: ColorCreateOneInput
  tags: TagCreateManyWithoutProductsInput
  functions: ProductFunctionCreateManyInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  variants: ProductVariantCreateManyWithoutProductInput
  statusChanges: ProductStatusChangeCreateManyWithoutProductInput
}

input ProductCreateWithoutMaterialCategoryInput {
  id: ID
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductCreateinnerMaterialsInput
  outerMaterials: ProductCreateouterMaterialsInput
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  images: ImageCreateManyInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  color: ColorCreateOneInput!
  secondaryColor: ColorCreateOneInput
  tags: TagCreateManyWithoutProductsInput
  functions: ProductFunctionCreateManyInput
  variants: ProductVariantCreateManyWithoutProductInput
  statusChanges: ProductStatusChangeCreateManyWithoutProductInput
}

input ProductCreateWithoutModelInput {
  id: ID
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductCreateinnerMaterialsInput
  outerMaterials: ProductCreateouterMaterialsInput
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  images: ImageCreateManyInput
  modelSize: SizeCreateOneInput
  color: ColorCreateOneInput!
  secondaryColor: ColorCreateOneInput
  tags: TagCreateManyWithoutProductsInput
  functions: ProductFunctionCreateManyInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  variants: ProductVariantCreateManyWithoutProductInput
  statusChanges: ProductStatusChangeCreateManyWithoutProductInput
}

input ProductCreateWithoutStatusChangesInput {
  id: ID
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductCreateinnerMaterialsInput
  outerMaterials: ProductCreateouterMaterialsInput
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  images: ImageCreateManyInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  color: ColorCreateOneInput!
  secondaryColor: ColorCreateOneInput
  tags: TagCreateManyWithoutProductsInput
  functions: ProductFunctionCreateManyInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  variants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutTagsInput {
  id: ID
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductCreateinnerMaterialsInput
  outerMaterials: ProductCreateouterMaterialsInput
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  images: ImageCreateManyInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  color: ColorCreateOneInput!
  secondaryColor: ColorCreateOneInput
  functions: ProductFunctionCreateManyInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  variants: ProductVariantCreateManyWithoutProductInput
  statusChanges: ProductStatusChangeCreateManyWithoutProductInput
}

input ProductCreateWithoutVariantsInput {
  id: ID
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductCreateinnerMaterialsInput
  outerMaterials: ProductCreateouterMaterialsInput
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  images: ImageCreateManyInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  color: ColorCreateOneInput!
  secondaryColor: ColorCreateOneInput
  tags: TagCreateManyWithoutProductsInput
  functions: ProductFunctionCreateManyInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  statusChanges: ProductStatusChangeCreateManyWithoutProductInput
}

"""
An edge in a connection.
"""
type ProductEdge {
  """
  The item at the end of the edge.
  """
  node: Product!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type ProductFunction implements Node {
  id: ID!
  name: String
}

"""
A connection to a list of items.
"""
type ProductFunctionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductFunctionEdge]!
  aggregate: AggregateProductFunction!
}

input ProductFunctionCreateInput {
  id: ID
  name: String
}

input ProductFunctionCreateManyInput {
  create: [ProductFunctionCreateInput!]
  connect: [ProductFunctionWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type ProductFunctionEdge {
  """
  The item at the end of the edge.
  """
  node: ProductFunction!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductFunctionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ProductFunctionPreviousValues {
  id: ID!
  name: String
}

input ProductFunctionScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductFunctionScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductFunctionScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductFunctionScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

type ProductFunctionSubscriptionPayload {
  mutation: MutationType!
  node: ProductFunction
  updatedFields: [String!]
  previousValues: ProductFunctionPreviousValues
}

input ProductFunctionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductFunctionSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductFunctionSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductFunctionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductFunctionWhereInput
}

input ProductFunctionUpdateDataInput {
  name: String
}

input ProductFunctionUpdateInput {
  name: String
}

input ProductFunctionUpdateManyDataInput {
  name: String
}

input ProductFunctionUpdateManyInput {
  create: [ProductFunctionCreateInput!]
  connect: [ProductFunctionWhereUniqueInput!]
  set: [ProductFunctionWhereUniqueInput!]
  disconnect: [ProductFunctionWhereUniqueInput!]
  delete: [ProductFunctionWhereUniqueInput!]
  update: [ProductFunctionUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductFunctionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductFunctionScalarWhereInput!]
  upsert: [ProductFunctionUpsertWithWhereUniqueNestedInput!]
}

input ProductFunctionUpdateManyMutationInput {
  name: String
}

input ProductFunctionUpdateManyWithWhereNestedInput {
  where: ProductFunctionScalarWhereInput!
  data: ProductFunctionUpdateManyDataInput!
}

input ProductFunctionUpdateWithWhereUniqueNestedInput {
  where: ProductFunctionWhereUniqueInput!
  data: ProductFunctionUpdateDataInput!
}

input ProductFunctionUpsertWithWhereUniqueNestedInput {
  where: ProductFunctionWhereUniqueInput!
  update: ProductFunctionUpdateDataInput!
  create: ProductFunctionCreateInput!
}

input ProductFunctionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductFunctionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductFunctionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductFunctionWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input ProductFunctionWhereUniqueInput {
  id: ID
  name: String
}

type ProductMaterialCategory implements Node {
  id: ID!
  slug: String!
  lifeExpectancy: Float!
  category: Category!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
}

"""
A connection to a list of items.
"""
type ProductMaterialCategoryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductMaterialCategoryEdge]!
  aggregate: AggregateProductMaterialCategory!
}

input ProductMaterialCategoryCreateInput {
  id: ID
  slug: String!
  lifeExpectancy: Float!
  category: CategoryCreateOneInput!
  products: ProductCreateManyWithoutMaterialCategoryInput
}

input ProductMaterialCategoryCreateOneWithoutProductsInput {
  create: ProductMaterialCategoryCreateWithoutProductsInput
  connect: ProductMaterialCategoryWhereUniqueInput
}

input ProductMaterialCategoryCreateWithoutProductsInput {
  id: ID
  slug: String!
  lifeExpectancy: Float!
  category: CategoryCreateOneInput!
}

"""
An edge in a connection.
"""
type ProductMaterialCategoryEdge {
  """
  The item at the end of the edge.
  """
  node: ProductMaterialCategory!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductMaterialCategoryOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  lifeExpectancy_ASC
  lifeExpectancy_DESC
}

type ProductMaterialCategoryPreviousValues {
  id: ID!
  slug: String!
  lifeExpectancy: Float!
}

type ProductMaterialCategorySubscriptionPayload {
  mutation: MutationType!
  node: ProductMaterialCategory
  updatedFields: [String!]
  previousValues: ProductMaterialCategoryPreviousValues
}

input ProductMaterialCategorySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductMaterialCategorySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductMaterialCategorySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductMaterialCategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductMaterialCategoryWhereInput
}

input ProductMaterialCategoryUpdateInput {
  slug: String
  lifeExpectancy: Float
  category: CategoryUpdateOneRequiredInput
  products: ProductUpdateManyWithoutMaterialCategoryInput
}

input ProductMaterialCategoryUpdateManyMutationInput {
  slug: String
  lifeExpectancy: Float
}

input ProductMaterialCategoryUpdateOneWithoutProductsInput {
  create: ProductMaterialCategoryCreateWithoutProductsInput
  connect: ProductMaterialCategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductMaterialCategoryUpdateWithoutProductsDataInput
  upsert: ProductMaterialCategoryUpsertWithoutProductsInput
}

input ProductMaterialCategoryUpdateWithoutProductsDataInput {
  slug: String
  lifeExpectancy: Float
  category: CategoryUpdateOneRequiredInput
}

input ProductMaterialCategoryUpsertWithoutProductsInput {
  update: ProductMaterialCategoryUpdateWithoutProductsDataInput!
  create: ProductMaterialCategoryCreateWithoutProductsInput!
}

input ProductMaterialCategoryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductMaterialCategoryWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductMaterialCategoryWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductMaterialCategoryWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  lifeExpectancy: Float

  """
  All values that are not equal to given value.
  """
  lifeExpectancy_not: Float

  """
  All values that are contained in given list.
  """
  lifeExpectancy_in: [Float!]

  """
  All values that are not contained in given list.
  """
  lifeExpectancy_not_in: [Float!]

  """
  All values less than the given value.
  """
  lifeExpectancy_lt: Float

  """
  All values less than or equal the given value.
  """
  lifeExpectancy_lte: Float

  """
  All values greater than the given value.
  """
  lifeExpectancy_gt: Float

  """
  All values greater than or equal the given value.
  """
  lifeExpectancy_gte: Float
  category: CategoryWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input ProductMaterialCategoryWhereUniqueInput {
  id: ID
  slug: String
}

type ProductModel implements Node {
  id: ID!
  name: String!
  height: Float!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
}

"""
A connection to a list of items.
"""
type ProductModelConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductModelEdge]!
  aggregate: AggregateProductModel!
}

input ProductModelCreateInput {
  id: ID
  name: String!
  height: Float!
  products: ProductCreateManyWithoutModelInput
}

input ProductModelCreateOneWithoutProductsInput {
  create: ProductModelCreateWithoutProductsInput
  connect: ProductModelWhereUniqueInput
}

input ProductModelCreateWithoutProductsInput {
  id: ID
  name: String!
  height: Float!
}

"""
An edge in a connection.
"""
type ProductModelEdge {
  """
  The item at the end of the edge.
  """
  node: ProductModel!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductModelOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  height_ASC
  height_DESC
}

type ProductModelPreviousValues {
  id: ID!
  name: String!
  height: Float!
}

type ProductModelSubscriptionPayload {
  mutation: MutationType!
  node: ProductModel
  updatedFields: [String!]
  previousValues: ProductModelPreviousValues
}

input ProductModelSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductModelSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductModelSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductModelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductModelWhereInput
}

input ProductModelUpdateInput {
  name: String
  height: Float
  products: ProductUpdateManyWithoutModelInput
}

input ProductModelUpdateManyMutationInput {
  name: String
  height: Float
}

input ProductModelUpdateOneWithoutProductsInput {
  create: ProductModelCreateWithoutProductsInput
  connect: ProductModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductModelUpdateWithoutProductsDataInput
  upsert: ProductModelUpsertWithoutProductsInput
}

input ProductModelUpdateWithoutProductsDataInput {
  name: String
  height: Float
}

input ProductModelUpsertWithoutProductsInput {
  update: ProductModelUpdateWithoutProductsDataInput!
  create: ProductModelCreateWithoutProductsInput!
}

input ProductModelWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductModelWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductModelWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductModelWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  height: Float

  """
  All values that are not equal to given value.
  """
  height_not: Float

  """
  All values that are contained in given list.
  """
  height_in: [Float!]

  """
  All values that are not contained in given list.
  """
  height_not_in: [Float!]

  """
  All values less than the given value.
  """
  height_lt: Float

  """
  All values less than or equal the given value.
  """
  height_lte: Float

  """
  All values greater than the given value.
  """
  height_gt: Float

  """
  All values greater than or equal the given value.
  """
  height_gte: Float
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input ProductModelWhereUniqueInput {
  id: ID
  name: String
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  description_ASC
  description_DESC
  externalURL_ASC
  externalURL_DESC
  modelHeight_ASC
  modelHeight_DESC
  retailPrice_ASC
  retailPrice_DESC
  status_ASC
  status_DESC
  season_ASC
  season_DESC
  architecture_ASC
  architecture_DESC
  photographyStatus_ASC
  photographyStatus_DESC
  publishedAt_ASC
  publishedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  slug: String!
  name: String!
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  innerMaterials: [String!]!
  outerMaterials: [String!]!
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductRequest implements Node {
  id: ID!
  brand: String
  description: String
  images: [String!]!
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String!
  sku: String
  url: String!
  user: User!
}

"""
A connection to a list of items.
"""
type ProductRequestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductRequestEdge]!
  aggregate: AggregateProductRequest!
}

input ProductRequestCreateimagesInput {
  set: [String!]
}

input ProductRequestCreateInput {
  id: ID
  brand: String
  description: String
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String!
  sku: String
  url: String!
  images: ProductRequestCreateimagesInput
  user: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type ProductRequestEdge {
  """
  The item at the end of the edge.
  """
  node: ProductRequest!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductRequestOrderByInput {
  id_ASC
  id_DESC
  brand_ASC
  brand_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  priceCurrency_ASC
  priceCurrency_DESC
  productID_ASC
  productID_DESC
  reason_ASC
  reason_DESC
  sku_ASC
  sku_DESC
  url_ASC
  url_DESC
}

type ProductRequestPreviousValues {
  id: ID!
  brand: String
  description: String
  images: [String!]!
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String!
  sku: String
  url: String!
}

type ProductRequestSubscriptionPayload {
  mutation: MutationType!
  node: ProductRequest
  updatedFields: [String!]
  previousValues: ProductRequestPreviousValues
}

input ProductRequestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductRequestSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductRequestSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductRequestWhereInput
}

input ProductRequestUpdateimagesInput {
  set: [String!]
}

input ProductRequestUpdateInput {
  brand: String
  description: String
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String
  sku: String
  url: String
  images: ProductRequestUpdateimagesInput
  user: UserUpdateOneRequiredInput
}

input ProductRequestUpdateManyMutationInput {
  brand: String
  description: String
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String
  sku: String
  url: String
  images: ProductRequestUpdateimagesInput
}

input ProductRequestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductRequestWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductRequestWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductRequestWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  brand: String

  """
  All values that are not equal to given value.
  """
  brand_not: String

  """
  All values that are contained in given list.
  """
  brand_in: [String!]

  """
  All values that are not contained in given list.
  """
  brand_not_in: [String!]

  """
  All values less than the given value.
  """
  brand_lt: String

  """
  All values less than or equal the given value.
  """
  brand_lte: String

  """
  All values greater than the given value.
  """
  brand_gt: String

  """
  All values greater than or equal the given value.
  """
  brand_gte: String

  """
  All values containing the given string.
  """
  brand_contains: String

  """
  All values not containing the given string.
  """
  brand_not_contains: String

  """
  All values starting with the given string.
  """
  brand_starts_with: String

  """
  All values not starting with the given string.
  """
  brand_not_starts_with: String

  """
  All values ending with the given string.
  """
  brand_ends_with: String

  """
  All values not ending with the given string.
  """
  brand_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  price: Int

  """
  All values that are not equal to given value.
  """
  price_not: Int

  """
  All values that are contained in given list.
  """
  price_in: [Int!]

  """
  All values that are not contained in given list.
  """
  price_not_in: [Int!]

  """
  All values less than the given value.
  """
  price_lt: Int

  """
  All values less than or equal the given value.
  """
  price_lte: Int

  """
  All values greater than the given value.
  """
  price_gt: Int

  """
  All values greater than or equal the given value.
  """
  price_gte: Int
  priceCurrency: String

  """
  All values that are not equal to given value.
  """
  priceCurrency_not: String

  """
  All values that are contained in given list.
  """
  priceCurrency_in: [String!]

  """
  All values that are not contained in given list.
  """
  priceCurrency_not_in: [String!]

  """
  All values less than the given value.
  """
  priceCurrency_lt: String

  """
  All values less than or equal the given value.
  """
  priceCurrency_lte: String

  """
  All values greater than the given value.
  """
  priceCurrency_gt: String

  """
  All values greater than or equal the given value.
  """
  priceCurrency_gte: String

  """
  All values containing the given string.
  """
  priceCurrency_contains: String

  """
  All values not containing the given string.
  """
  priceCurrency_not_contains: String

  """
  All values starting with the given string.
  """
  priceCurrency_starts_with: String

  """
  All values not starting with the given string.
  """
  priceCurrency_not_starts_with: String

  """
  All values ending with the given string.
  """
  priceCurrency_ends_with: String

  """
  All values not ending with the given string.
  """
  priceCurrency_not_ends_with: String
  productID: String

  """
  All values that are not equal to given value.
  """
  productID_not: String

  """
  All values that are contained in given list.
  """
  productID_in: [String!]

  """
  All values that are not contained in given list.
  """
  productID_not_in: [String!]

  """
  All values less than the given value.
  """
  productID_lt: String

  """
  All values less than or equal the given value.
  """
  productID_lte: String

  """
  All values greater than the given value.
  """
  productID_gt: String

  """
  All values greater than or equal the given value.
  """
  productID_gte: String

  """
  All values containing the given string.
  """
  productID_contains: String

  """
  All values not containing the given string.
  """
  productID_not_contains: String

  """
  All values starting with the given string.
  """
  productID_starts_with: String

  """
  All values not starting with the given string.
  """
  productID_not_starts_with: String

  """
  All values ending with the given string.
  """
  productID_ends_with: String

  """
  All values not ending with the given string.
  """
  productID_not_ends_with: String
  reason: String

  """
  All values that are not equal to given value.
  """
  reason_not: String

  """
  All values that are contained in given list.
  """
  reason_in: [String!]

  """
  All values that are not contained in given list.
  """
  reason_not_in: [String!]

  """
  All values less than the given value.
  """
  reason_lt: String

  """
  All values less than or equal the given value.
  """
  reason_lte: String

  """
  All values greater than the given value.
  """
  reason_gt: String

  """
  All values greater than or equal the given value.
  """
  reason_gte: String

  """
  All values containing the given string.
  """
  reason_contains: String

  """
  All values not containing the given string.
  """
  reason_not_contains: String

  """
  All values starting with the given string.
  """
  reason_starts_with: String

  """
  All values not starting with the given string.
  """
  reason_not_starts_with: String

  """
  All values ending with the given string.
  """
  reason_ends_with: String

  """
  All values not ending with the given string.
  """
  reason_not_ends_with: String
  sku: String

  """
  All values that are not equal to given value.
  """
  sku_not: String

  """
  All values that are contained in given list.
  """
  sku_in: [String!]

  """
  All values that are not contained in given list.
  """
  sku_not_in: [String!]

  """
  All values less than the given value.
  """
  sku_lt: String

  """
  All values less than or equal the given value.
  """
  sku_lte: String

  """
  All values greater than the given value.
  """
  sku_gt: String

  """
  All values greater than or equal the given value.
  """
  sku_gte: String

  """
  All values containing the given string.
  """
  sku_contains: String

  """
  All values not containing the given string.
  """
  sku_not_contains: String

  """
  All values starting with the given string.
  """
  sku_starts_with: String

  """
  All values not starting with the given string.
  """
  sku_not_starts_with: String

  """
  All values ending with the given string.
  """
  sku_ends_with: String

  """
  All values not ending with the given string.
  """
  sku_not_ends_with: String
  url: String

  """
  All values that are not equal to given value.
  """
  url_not: String

  """
  All values that are contained in given list.
  """
  url_in: [String!]

  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]

  """
  All values less than the given value.
  """
  url_lt: String

  """
  All values less than or equal the given value.
  """
  url_lte: String

  """
  All values greater than the given value.
  """
  url_gt: String

  """
  All values greater than or equal the given value.
  """
  url_gte: String

  """
  All values containing the given string.
  """
  url_contains: String

  """
  All values not containing the given string.
  """
  url_not_contains: String

  """
  All values starting with the given string.
  """
  url_starts_with: String

  """
  All values not starting with the given string.
  """
  url_not_starts_with: String

  """
  All values ending with the given string.
  """
  url_ends_with: String

  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  user: UserWhereInput
}

input ProductRequestWhereUniqueInput {
  id: ID
}

input ProductScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  type: ProductType

  """
  All values that are not equal to given value.
  """
  type_not: ProductType

  """
  All values that are contained in given list.
  """
  type_in: [ProductType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [ProductType!]
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  externalURL: String

  """
  All values that are not equal to given value.
  """
  externalURL_not: String

  """
  All values that are contained in given list.
  """
  externalURL_in: [String!]

  """
  All values that are not contained in given list.
  """
  externalURL_not_in: [String!]

  """
  All values less than the given value.
  """
  externalURL_lt: String

  """
  All values less than or equal the given value.
  """
  externalURL_lte: String

  """
  All values greater than the given value.
  """
  externalURL_gt: String

  """
  All values greater than or equal the given value.
  """
  externalURL_gte: String

  """
  All values containing the given string.
  """
  externalURL_contains: String

  """
  All values not containing the given string.
  """
  externalURL_not_contains: String

  """
  All values starting with the given string.
  """
  externalURL_starts_with: String

  """
  All values not starting with the given string.
  """
  externalURL_not_starts_with: String

  """
  All values ending with the given string.
  """
  externalURL_ends_with: String

  """
  All values not ending with the given string.
  """
  externalURL_not_ends_with: String
  modelHeight: Int

  """
  All values that are not equal to given value.
  """
  modelHeight_not: Int

  """
  All values that are contained in given list.
  """
  modelHeight_in: [Int!]

  """
  All values that are not contained in given list.
  """
  modelHeight_not_in: [Int!]

  """
  All values less than the given value.
  """
  modelHeight_lt: Int

  """
  All values less than or equal the given value.
  """
  modelHeight_lte: Int

  """
  All values greater than the given value.
  """
  modelHeight_gt: Int

  """
  All values greater than or equal the given value.
  """
  modelHeight_gte: Int
  retailPrice: Int

  """
  All values that are not equal to given value.
  """
  retailPrice_not: Int

  """
  All values that are contained in given list.
  """
  retailPrice_in: [Int!]

  """
  All values that are not contained in given list.
  """
  retailPrice_not_in: [Int!]

  """
  All values less than the given value.
  """
  retailPrice_lt: Int

  """
  All values less than or equal the given value.
  """
  retailPrice_lte: Int

  """
  All values greater than the given value.
  """
  retailPrice_gt: Int

  """
  All values greater than or equal the given value.
  """
  retailPrice_gte: Int
  status: ProductStatus

  """
  All values that are not equal to given value.
  """
  status_not: ProductStatus

  """
  All values that are contained in given list.
  """
  status_in: [ProductStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [ProductStatus!]
  season: String

  """
  All values that are not equal to given value.
  """
  season_not: String

  """
  All values that are contained in given list.
  """
  season_in: [String!]

  """
  All values that are not contained in given list.
  """
  season_not_in: [String!]

  """
  All values less than the given value.
  """
  season_lt: String

  """
  All values less than or equal the given value.
  """
  season_lte: String

  """
  All values greater than the given value.
  """
  season_gt: String

  """
  All values greater than or equal the given value.
  """
  season_gte: String

  """
  All values containing the given string.
  """
  season_contains: String

  """
  All values not containing the given string.
  """
  season_not_contains: String

  """
  All values starting with the given string.
  """
  season_starts_with: String

  """
  All values not starting with the given string.
  """
  season_not_starts_with: String

  """
  All values ending with the given string.
  """
  season_ends_with: String

  """
  All values not ending with the given string.
  """
  season_not_ends_with: String
  architecture: ProductArchitecture

  """
  All values that are not equal to given value.
  """
  architecture_not: ProductArchitecture

  """
  All values that are contained in given list.
  """
  architecture_in: [ProductArchitecture!]

  """
  All values that are not contained in given list.
  """
  architecture_not_in: [ProductArchitecture!]
  photographyStatus: PhotographyStatus

  """
  All values that are not equal to given value.
  """
  photographyStatus_not: PhotographyStatus

  """
  All values that are contained in given list.
  """
  photographyStatus_in: [PhotographyStatus!]

  """
  All values that are not contained in given list.
  """
  photographyStatus_not_in: [PhotographyStatus!]
  publishedAt: DateTime

  """
  All values that are not equal to given value.
  """
  publishedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  publishedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  publishedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  publishedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  publishedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  publishedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  publishedAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

enum ProductStatus {
  Available
  NotAvailable
  Stored
  Offloaded
}

type ProductStatusChange implements Node {
  id: ID!
  old: ProductStatus!
  new: ProductStatus!
  product: Product!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type ProductStatusChangeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductStatusChangeEdge]!
  aggregate: AggregateProductStatusChange!
}

input ProductStatusChangeCreateInput {
  id: ID
  old: ProductStatus!
  new: ProductStatus!
  product: ProductCreateOneWithoutStatusChangesInput!
}

input ProductStatusChangeCreateManyWithoutProductInput {
  create: [ProductStatusChangeCreateWithoutProductInput!]
  connect: [ProductStatusChangeWhereUniqueInput!]
}

input ProductStatusChangeCreateWithoutProductInput {
  id: ID
  old: ProductStatus!
  new: ProductStatus!
}

"""
An edge in a connection.
"""
type ProductStatusChangeEdge {
  """
  The item at the end of the edge.
  """
  node: ProductStatusChange!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductStatusChangeOrderByInput {
  id_ASC
  id_DESC
  old_ASC
  old_DESC
  new_ASC
  new_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductStatusChangePreviousValues {
  id: ID!
  old: ProductStatus!
  new: ProductStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductStatusChangeScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductStatusChangeScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductStatusChangeScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductStatusChangeScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  old: ProductStatus

  """
  All values that are not equal to given value.
  """
  old_not: ProductStatus

  """
  All values that are contained in given list.
  """
  old_in: [ProductStatus!]

  """
  All values that are not contained in given list.
  """
  old_not_in: [ProductStatus!]
  new: ProductStatus

  """
  All values that are not equal to given value.
  """
  new_not: ProductStatus

  """
  All values that are contained in given list.
  """
  new_in: [ProductStatus!]

  """
  All values that are not contained in given list.
  """
  new_not_in: [ProductStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type ProductStatusChangeSubscriptionPayload {
  mutation: MutationType!
  node: ProductStatusChange
  updatedFields: [String!]
  previousValues: ProductStatusChangePreviousValues
}

input ProductStatusChangeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductStatusChangeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductStatusChangeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductStatusChangeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductStatusChangeWhereInput
}

input ProductStatusChangeUpdateInput {
  old: ProductStatus
  new: ProductStatus
  product: ProductUpdateOneRequiredWithoutStatusChangesInput
}

input ProductStatusChangeUpdateManyDataInput {
  old: ProductStatus
  new: ProductStatus
}

input ProductStatusChangeUpdateManyMutationInput {
  old: ProductStatus
  new: ProductStatus
}

input ProductStatusChangeUpdateManyWithoutProductInput {
  create: [ProductStatusChangeCreateWithoutProductInput!]
  connect: [ProductStatusChangeWhereUniqueInput!]
  set: [ProductStatusChangeWhereUniqueInput!]
  disconnect: [ProductStatusChangeWhereUniqueInput!]
  delete: [ProductStatusChangeWhereUniqueInput!]
  update: [ProductStatusChangeUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductStatusChangeUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductStatusChangeScalarWhereInput!]
  upsert: [ProductStatusChangeUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductStatusChangeUpdateManyWithWhereNestedInput {
  where: ProductStatusChangeScalarWhereInput!
  data: ProductStatusChangeUpdateManyDataInput!
}

input ProductStatusChangeUpdateWithoutProductDataInput {
  old: ProductStatus
  new: ProductStatus
}

input ProductStatusChangeUpdateWithWhereUniqueWithoutProductInput {
  where: ProductStatusChangeWhereUniqueInput!
  data: ProductStatusChangeUpdateWithoutProductDataInput!
}

input ProductStatusChangeUpsertWithWhereUniqueWithoutProductInput {
  where: ProductStatusChangeWhereUniqueInput!
  update: ProductStatusChangeUpdateWithoutProductDataInput!
  create: ProductStatusChangeCreateWithoutProductInput!
}

input ProductStatusChangeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductStatusChangeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductStatusChangeWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductStatusChangeWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  old: ProductStatus

  """
  All values that are not equal to given value.
  """
  old_not: ProductStatus

  """
  All values that are contained in given list.
  """
  old_in: [ProductStatus!]

  """
  All values that are not contained in given list.
  """
  old_not_in: [ProductStatus!]
  new: ProductStatus

  """
  All values that are not equal to given value.
  """
  new_not: ProductStatus

  """
  All values that are contained in given list.
  """
  new_in: [ProductStatus!]

  """
  All values that are not contained in given list.
  """
  new_not_in: [ProductStatus!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  product: ProductWhereInput
}

input ProductStatusChangeWhereUniqueInput {
  id: ID
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

enum ProductType {
  Top
  Bottom
  Accessory
  Shoe
}

input ProductUpdateDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  tags: TagUpdateManyWithoutProductsInput
  functions: ProductFunctionUpdateManyInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  variants: ProductVariantUpdateManyWithoutProductInput
  statusChanges: ProductStatusChangeUpdateManyWithoutProductInput
}

input ProductUpdateinnerMaterialsInput {
  set: [String!]
}

input ProductUpdateInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  tags: TagUpdateManyWithoutProductsInput
  functions: ProductFunctionUpdateManyInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  variants: ProductVariantUpdateManyWithoutProductInput
  statusChanges: ProductStatusChangeUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
}

input ProductUpdateManyInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueNestedInput!]
}

input ProductUpdateManyMutationInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
}

input ProductUpdateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutBrandInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutBrandInput!]
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateManyWithoutMaterialCategoryInput {
  create: [ProductCreateWithoutMaterialCategoryInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutMaterialCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutMaterialCategoryInput!]
}

input ProductUpdateManyWithoutModelInput {
  create: [ProductCreateWithoutModelInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutModelInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutModelInput!]
}

input ProductUpdateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutTagsInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
}

input ProductUpdateOneRequiredWithoutStatusChangesInput {
  create: ProductCreateWithoutStatusChangesInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutStatusChangesDataInput
  upsert: ProductUpsertWithoutStatusChangesInput
}

input ProductUpdateOneRequiredWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutVariantsDataInput
  upsert: ProductUpsertWithoutVariantsInput
}

input ProductUpdateouterMaterialsInput {
  set: [String!]
}

input ProductUpdateWithoutBrandDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  tags: TagUpdateManyWithoutProductsInput
  functions: ProductFunctionUpdateManyInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  variants: ProductVariantUpdateManyWithoutProductInput
  statusChanges: ProductStatusChangeUpdateManyWithoutProductInput
}

input ProductUpdateWithoutCategoryDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  brand: BrandUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  tags: TagUpdateManyWithoutProductsInput
  functions: ProductFunctionUpdateManyInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  variants: ProductVariantUpdateManyWithoutProductInput
  statusChanges: ProductStatusChangeUpdateManyWithoutProductInput
}

input ProductUpdateWithoutMaterialCategoryDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  tags: TagUpdateManyWithoutProductsInput
  functions: ProductFunctionUpdateManyInput
  variants: ProductVariantUpdateManyWithoutProductInput
  statusChanges: ProductStatusChangeUpdateManyWithoutProductInput
}

input ProductUpdateWithoutModelDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  tags: TagUpdateManyWithoutProductsInput
  functions: ProductFunctionUpdateManyInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  variants: ProductVariantUpdateManyWithoutProductInput
  statusChanges: ProductStatusChangeUpdateManyWithoutProductInput
}

input ProductUpdateWithoutStatusChangesDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  tags: TagUpdateManyWithoutProductsInput
  functions: ProductFunctionUpdateManyInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  variants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutTagsDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  functions: ProductFunctionUpdateManyInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  variants: ProductVariantUpdateManyWithoutProductInput
  statusChanges: ProductStatusChangeUpdateManyWithoutProductInput
}

input ProductUpdateWithoutVariantsDataInput {
  slug: String
  name: String
  type: ProductType
  description: String
  externalURL: String
  modelHeight: Int
  retailPrice: Int
  status: ProductStatus
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  innerMaterials: ProductUpdateinnerMaterialsInput
  outerMaterials: ProductUpdateouterMaterialsInput
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  images: ImageUpdateManyInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  color: ColorUpdateOneRequiredInput
  secondaryColor: ColorUpdateOneInput
  tags: TagUpdateManyWithoutProductsInput
  functions: ProductFunctionUpdateManyInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  statusChanges: ProductStatusChangeUpdateManyWithoutProductInput
}

input ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateDataInput!
}

input ProductUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutBrandDataInput!
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpdateWithWhereUniqueWithoutMaterialCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutMaterialCategoryDataInput!
}

input ProductUpdateWithWhereUniqueWithoutModelInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutModelDataInput!
}

input ProductUpdateWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutTagsDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutStatusChangesInput {
  update: ProductUpdateWithoutStatusChangesDataInput!
  create: ProductCreateWithoutStatusChangesInput!
}

input ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput!
  create: ProductCreateWithoutVariantsInput!
}

input ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutBrandDataInput!
  create: ProductCreateWithoutBrandInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductUpsertWithWhereUniqueWithoutMaterialCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutMaterialCategoryDataInput!
  create: ProductCreateWithoutMaterialCategoryInput!
}

input ProductUpsertWithWhereUniqueWithoutModelInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutModelDataInput!
  create: ProductCreateWithoutModelInput!
}

input ProductUpsertWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutTagsDataInput!
  create: ProductCreateWithoutTagsInput!
}

type ProductVariant implements Node {
  id: ID!
  sku: String
  color: Color!
  internalSize: Size
  manufacturerSizes(
    where: SizeWhereInput
    orderBy: SizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Size!]
  weight: Float
  height: Float
  productID: String!
  product: Product!
  retailPrice: Float
  physicalProducts(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type ProductVariantConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductVariantEdge]!
  aggregate: AggregateProductVariant!
}

input ProductVariantCreateInput {
  id: ID
  sku: String
  weight: Float
  height: Float
  productID: String!
  retailPrice: Float
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  color: ColorCreateOneWithoutProductVariantsInput!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  product: ProductCreateOneWithoutVariantsInput!
  physicalProducts: PhysicalProductCreateManyWithoutProductVariantInput
}

input ProductVariantCreateManyWithoutColorInput {
  create: [ProductVariantCreateWithoutColorInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductVariantCreateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductVariantCreateOneInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantCreateOneWithoutPhysicalProductsInput {
  create: ProductVariantCreateWithoutPhysicalProductsInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantCreateWithoutColorInput {
  id: ID
  sku: String
  weight: Float
  height: Float
  productID: String!
  retailPrice: Float
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  product: ProductCreateOneWithoutVariantsInput!
  physicalProducts: PhysicalProductCreateManyWithoutProductVariantInput
}

input ProductVariantCreateWithoutPhysicalProductsInput {
  id: ID
  sku: String
  weight: Float
  height: Float
  productID: String!
  retailPrice: Float
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  color: ColorCreateOneWithoutProductVariantsInput!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  product: ProductCreateOneWithoutVariantsInput!
}

input ProductVariantCreateWithoutProductInput {
  id: ID
  sku: String
  weight: Float
  height: Float
  productID: String!
  retailPrice: Float
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  color: ColorCreateOneWithoutProductVariantsInput!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  physicalProducts: PhysicalProductCreateManyWithoutProductVariantInput
}

"""
An edge in a connection.
"""
type ProductVariantEdge {
  """
  The item at the end of the edge.
  """
  node: ProductVariant!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type ProductVariantFeedback implements Node {
  id: ID!
  isCompleted: Boolean!
  questions(
    where: ProductVariantFeedbackQuestionWhereInput
    orderBy: ProductVariantFeedbackQuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantFeedbackQuestion!]
  reservationFeedback: ReservationFeedback!
  variant: ProductVariant!
}

"""
A connection to a list of items.
"""
type ProductVariantFeedbackConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductVariantFeedbackEdge]!
  aggregate: AggregateProductVariantFeedback!
}

input ProductVariantFeedbackCreateInput {
  id: ID
  isCompleted: Boolean!
  questions: ProductVariantFeedbackQuestionCreateManyWithoutVariantFeedbackInput
  reservationFeedback: ReservationFeedbackCreateOneWithoutFeedbacksInput!
  variant: ProductVariantCreateOneInput!
}

input ProductVariantFeedbackCreateManyWithoutReservationFeedbackInput {
  create: [ProductVariantFeedbackCreateWithoutReservationFeedbackInput!]
  connect: [ProductVariantFeedbackWhereUniqueInput!]
}

input ProductVariantFeedbackCreateOneWithoutQuestionsInput {
  create: ProductVariantFeedbackCreateWithoutQuestionsInput
  connect: ProductVariantFeedbackWhereUniqueInput
}

input ProductVariantFeedbackCreateWithoutQuestionsInput {
  id: ID
  isCompleted: Boolean!
  reservationFeedback: ReservationFeedbackCreateOneWithoutFeedbacksInput!
  variant: ProductVariantCreateOneInput!
}

input ProductVariantFeedbackCreateWithoutReservationFeedbackInput {
  id: ID
  isCompleted: Boolean!
  questions: ProductVariantFeedbackQuestionCreateManyWithoutVariantFeedbackInput
  variant: ProductVariantCreateOneInput!
}

"""
An edge in a connection.
"""
type ProductVariantFeedbackEdge {
  """
  The item at the end of the edge.
  """
  node: ProductVariantFeedback!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductVariantFeedbackOrderByInput {
  id_ASC
  id_DESC
  isCompleted_ASC
  isCompleted_DESC
}

type ProductVariantFeedbackPreviousValues {
  id: ID!
  isCompleted: Boolean!
}

type ProductVariantFeedbackQuestion implements Node {
  id: ID!
  options: [String!]!
  question: String!
  responses: [String!]!
  type: QuestionType!
  variantFeedback: ProductVariantFeedback!
}

"""
A connection to a list of items.
"""
type ProductVariantFeedbackQuestionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductVariantFeedbackQuestionEdge]!
  aggregate: AggregateProductVariantFeedbackQuestion!
}

input ProductVariantFeedbackQuestionCreateInput {
  id: ID
  question: String!
  type: QuestionType!
  options: ProductVariantFeedbackQuestionCreateoptionsInput
  responses: ProductVariantFeedbackQuestionCreateresponsesInput
  variantFeedback: ProductVariantFeedbackCreateOneWithoutQuestionsInput!
}

input ProductVariantFeedbackQuestionCreateManyWithoutVariantFeedbackInput {
  create: [ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput!]
  connect: [ProductVariantFeedbackQuestionWhereUniqueInput!]
}

input ProductVariantFeedbackQuestionCreateoptionsInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionCreateresponsesInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput {
  id: ID
  question: String!
  type: QuestionType!
  options: ProductVariantFeedbackQuestionCreateoptionsInput
  responses: ProductVariantFeedbackQuestionCreateresponsesInput
}

"""
An edge in a connection.
"""
type ProductVariantFeedbackQuestionEdge {
  """
  The item at the end of the edge.
  """
  node: ProductVariantFeedbackQuestion!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductVariantFeedbackQuestionOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  type_ASC
  type_DESC
}

type ProductVariantFeedbackQuestionPreviousValues {
  id: ID!
  options: [String!]!
  question: String!
  responses: [String!]!
  type: QuestionType!
}

input ProductVariantFeedbackQuestionScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackQuestionScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackQuestionScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackQuestionScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  question: String

  """
  All values that are not equal to given value.
  """
  question_not: String

  """
  All values that are contained in given list.
  """
  question_in: [String!]

  """
  All values that are not contained in given list.
  """
  question_not_in: [String!]

  """
  All values less than the given value.
  """
  question_lt: String

  """
  All values less than or equal the given value.
  """
  question_lte: String

  """
  All values greater than the given value.
  """
  question_gt: String

  """
  All values greater than or equal the given value.
  """
  question_gte: String

  """
  All values containing the given string.
  """
  question_contains: String

  """
  All values not containing the given string.
  """
  question_not_contains: String

  """
  All values starting with the given string.
  """
  question_starts_with: String

  """
  All values not starting with the given string.
  """
  question_not_starts_with: String

  """
  All values ending with the given string.
  """
  question_ends_with: String

  """
  All values not ending with the given string.
  """
  question_not_ends_with: String
  type: QuestionType

  """
  All values that are not equal to given value.
  """
  type_not: QuestionType

  """
  All values that are contained in given list.
  """
  type_in: [QuestionType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [QuestionType!]
<<<<<<< HEAD
}

type ProductVariantFeedbackQuestionSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantFeedbackQuestion
  updatedFields: [String!]
  previousValues: ProductVariantFeedbackQuestionPreviousValues
}

input ProductVariantFeedbackQuestionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantFeedbackQuestionWhereInput
}

input ProductVariantFeedbackQuestionUpdateInput {
  question: String
  type: QuestionType
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
  variantFeedback: ProductVariantFeedbackUpdateOneRequiredWithoutQuestionsInput
}

input ProductVariantFeedbackQuestionUpdateManyDataInput {
  question: String
  type: QuestionType
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
}

input ProductVariantFeedbackQuestionUpdateManyMutationInput {
  question: String
  type: QuestionType
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
}

input ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput {
  create: [ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput!]
  connect: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  set: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  disconnect: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  delete: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  update: [ProductVariantFeedbackQuestionUpdateWithWhereUniqueWithoutVariantFeedbackInput!]
  updateMany: [ProductVariantFeedbackQuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantFeedbackQuestionScalarWhereInput!]
  upsert: [ProductVariantFeedbackQuestionUpsertWithWhereUniqueWithoutVariantFeedbackInput!]
}

input ProductVariantFeedbackQuestionUpdateManyWithWhereNestedInput {
  where: ProductVariantFeedbackQuestionScalarWhereInput!
  data: ProductVariantFeedbackQuestionUpdateManyDataInput!
}

input ProductVariantFeedbackQuestionUpdateoptionsInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionUpdateresponsesInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput {
  question: String
  type: QuestionType
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
}

input ProductVariantFeedbackQuestionUpdateWithWhereUniqueWithoutVariantFeedbackInput {
  where: ProductVariantFeedbackQuestionWhereUniqueInput!
  data: ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput!
}

input ProductVariantFeedbackQuestionUpsertWithWhereUniqueWithoutVariantFeedbackInput {
  where: ProductVariantFeedbackQuestionWhereUniqueInput!
  update: ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput!
  create: ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput!
}

input ProductVariantFeedbackQuestionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackQuestionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackQuestionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackQuestionWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  question: String

  """
  All values that are not equal to given value.
  """
  question_not: String

  """
  All values that are contained in given list.
  """
  question_in: [String!]

  """
  All values that are not contained in given list.
  """
  question_not_in: [String!]

  """
  All values less than the given value.
  """
  question_lt: String

  """
  All values less than or equal the given value.
  """
  question_lte: String

  """
  All values greater than the given value.
  """
  question_gt: String

  """
  All values greater than or equal the given value.
  """
  question_gte: String

  """
  All values containing the given string.
  """
  question_contains: String

  """
  All values not containing the given string.
  """
  question_not_contains: String

  """
  All values starting with the given string.
  """
  question_starts_with: String

  """
  All values not starting with the given string.
  """
  question_not_starts_with: String

  """
  All values ending with the given string.
  """
  question_ends_with: String

  """
  All values not ending with the given string.
  """
  question_not_ends_with: String
  type: QuestionType

  """
  All values that are not equal to given value.
  """
  type_not: QuestionType

  """
  All values that are contained in given list.
  """
  type_in: [QuestionType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [QuestionType!]
  variantFeedback: ProductVariantFeedbackWhereInput
}

input ProductVariantFeedbackQuestionWhereUniqueInput {
  id: ID
}

input ProductVariantFeedbackScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  isCompleted: Boolean

  """
  All values that are not equal to given value.
  """
  isCompleted_not: Boolean
}

type ProductVariantFeedbackSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantFeedback
  updatedFields: [String!]
  previousValues: ProductVariantFeedbackPreviousValues
}

input ProductVariantFeedbackSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantFeedbackWhereInput
}

input ProductVariantFeedbackUpdateInput {
  isCompleted: Boolean
  questions: ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput
  reservationFeedback: ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateManyDataInput {
  isCompleted: Boolean
}

input ProductVariantFeedbackUpdateManyMutationInput {
  isCompleted: Boolean
}

input ProductVariantFeedbackUpdateManyWithoutReservationFeedbackInput {
  create: [ProductVariantFeedbackCreateWithoutReservationFeedbackInput!]
  connect: [ProductVariantFeedbackWhereUniqueInput!]
  set: [ProductVariantFeedbackWhereUniqueInput!]
  disconnect: [ProductVariantFeedbackWhereUniqueInput!]
  delete: [ProductVariantFeedbackWhereUniqueInput!]
  update: [ProductVariantFeedbackUpdateWithWhereUniqueWithoutReservationFeedbackInput!]
  updateMany: [ProductVariantFeedbackUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantFeedbackScalarWhereInput!]
  upsert: [ProductVariantFeedbackUpsertWithWhereUniqueWithoutReservationFeedbackInput!]
}

input ProductVariantFeedbackUpdateManyWithWhereNestedInput {
  where: ProductVariantFeedbackScalarWhereInput!
  data: ProductVariantFeedbackUpdateManyDataInput!
}

input ProductVariantFeedbackUpdateOneRequiredWithoutQuestionsInput {
  create: ProductVariantFeedbackCreateWithoutQuestionsInput
  connect: ProductVariantFeedbackWhereUniqueInput
  update: ProductVariantFeedbackUpdateWithoutQuestionsDataInput
  upsert: ProductVariantFeedbackUpsertWithoutQuestionsInput
}

input ProductVariantFeedbackUpdateWithoutQuestionsDataInput {
  isCompleted: Boolean
  reservationFeedback: ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput {
  isCompleted: Boolean
  questions: ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateWithWhereUniqueWithoutReservationFeedbackInput {
  where: ProductVariantFeedbackWhereUniqueInput!
  data: ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput!
}

input ProductVariantFeedbackUpsertWithoutQuestionsInput {
  update: ProductVariantFeedbackUpdateWithoutQuestionsDataInput!
  create: ProductVariantFeedbackCreateWithoutQuestionsInput!
}

input ProductVariantFeedbackUpsertWithWhereUniqueWithoutReservationFeedbackInput {
  where: ProductVariantFeedbackWhereUniqueInput!
  update: ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput!
  create: ProductVariantFeedbackCreateWithoutReservationFeedbackInput!
}

input ProductVariantFeedbackWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  isCompleted: Boolean

  """
  All values that are not equal to given value.
  """
  isCompleted_not: Boolean
  questions_every: ProductVariantFeedbackQuestionWhereInput
  questions_some: ProductVariantFeedbackQuestionWhereInput
  questions_none: ProductVariantFeedbackQuestionWhereInput
  reservationFeedback: ReservationFeedbackWhereInput
  variant: ProductVariantWhereInput
}

input ProductVariantFeedbackWhereUniqueInput {
  id: ID
}

enum ProductVariantOrderByInput {
  id_ASC
  id_DESC
  sku_ASC
  sku_DESC
  weight_ASC
  weight_DESC
  height_ASC
  height_DESC
  productID_ASC
  productID_DESC
  retailPrice_ASC
  retailPrice_DESC
  total_ASC
  total_DESC
  reservable_ASC
  reservable_DESC
  reserved_ASC
  reserved_DESC
  nonReservable_ASC
  nonReservable_DESC
  offloaded_ASC
  offloaded_DESC
  stored_ASC
  stored_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductVariantPreviousValues {
  id: ID!
  sku: String
  weight: Float
  height: Float
  productID: String!
  retailPrice: Float
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductVariantScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  sku: String

  """
  All values that are not equal to given value.
  """
  sku_not: String

  """
  All values that are contained in given list.
  """
  sku_in: [String!]

  """
  All values that are not contained in given list.
  """
  sku_not_in: [String!]

  """
  All values less than the given value.
  """
  sku_lt: String

  """
  All values less than or equal the given value.
  """
  sku_lte: String

  """
  All values greater than the given value.
  """
  sku_gt: String

  """
  All values greater than or equal the given value.
  """
  sku_gte: String

  """
  All values containing the given string.
  """
  sku_contains: String

  """
  All values not containing the given string.
  """
  sku_not_contains: String

  """
  All values starting with the given string.
  """
  sku_starts_with: String

  """
  All values not starting with the given string.
  """
  sku_not_starts_with: String

  """
  All values ending with the given string.
  """
  sku_ends_with: String

  """
  All values not ending with the given string.
  """
  sku_not_ends_with: String
  weight: Float

  """
  All values that are not equal to given value.
  """
  weight_not: Float

  """
  All values that are contained in given list.
  """
  weight_in: [Float!]

  """
  All values that are not contained in given list.
  """
  weight_not_in: [Float!]

  """
  All values less than the given value.
  """
  weight_lt: Float

  """
  All values less than or equal the given value.
  """
  weight_lte: Float

  """
  All values greater than the given value.
  """
  weight_gt: Float

  """
  All values greater than or equal the given value.
  """
  weight_gte: Float
  height: Float

  """
  All values that are not equal to given value.
  """
  height_not: Float

  """
  All values that are contained in given list.
  """
  height_in: [Float!]

  """
  All values that are not contained in given list.
  """
  height_not_in: [Float!]

  """
  All values less than the given value.
  """
  height_lt: Float

  """
  All values less than or equal the given value.
  """
  height_lte: Float

  """
  All values greater than the given value.
  """
  height_gt: Float

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  updatedAt_gte: DateTime
  items_every: PhysicalProductWhereInput
  items_some: PhysicalProductWhereInput
  items_none: PhysicalProductWhereInput
  shippingLabel: LabelWhereInput
  fromAddress: LocationWhereInput
  toAddress: LocationWhereInput
  events_every: PackageTransitEventWhereInput
  events_some: PackageTransitEventWhereInput
  events_none: PackageTransitEventWhereInput
}

input PackageWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type PauseRequest implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean!
  membership: CustomerMembership!
}

"""
A connection to a list of items.
"""
type PauseRequestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PauseRequestEdge]!
  aggregate: AggregatePauseRequest!
}

input PauseRequestCreateInput {
  id: ID
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
  membership: CustomerMembershipCreateOneWithoutPauseRequestsInput!
}
[
}

input PauseRequestCreateWithoutMembershipInput {
  id: ID
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
}

"""
An edge in a connection.
"""
type PauseRequestEdge {
  """
  The item at the end of the edge.
  """
  node: PauseRequest!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PauseRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  pausePending_ASC
  pausePending_DESC
  pauseDate_ASC
  pauseDate_DESC
  resumeDate_ASC
  resumeDate_DESC
  notified_ASC
  notified_DESC
}

type PauseRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean!
}

input PauseRequestScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PauseRequestScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PauseRequestScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PauseRequestScalarWhereInput!]
  id: ID
=======
  height_gte: Float
  productID: String
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
  productID_not: String

  """
  All values that are contained in given list.
  """
  productID_in: [String!]

  """
  All values that are not contained in given list.
  """
  productID_not_in: [String!]

  """
  All values less than the given value.
  """
  productID_lt: String

  """
  All values less than or equal the given value.
  """
  productID_lte: String

  """
  All values greater than the given value.
  """
  productID_gt: String

  """
  All values greater than or equal the given value.
  """
  productID_gte: String

  """
  All values containing the given string.
  """
  productID_contains: String

  """
  All values not containing the given string.
  """
  productID_not_contains: String

  """
  All values starting with the given string.
  """
  productID_starts_with: String

  """
  All values not starting with the given string.
  """
  productID_not_starts_with: String

  """
  All values ending with the given string.
  """
  productID_ends_with: String

  """
  All values not ending with the given string.
  """
  productID_not_ends_with: String
  retailPrice: Float

  """
  All values that are not equal to given value.
  """
  retailPrice_not: Float

  """
  All values that are contained in given list.
  """
  retailPrice_in: [Float!]

  """
  All values that are not contained in given list.
  """
  retailPrice_not_in: [Float!]

  """
  All values less than the given value.
  """
  retailPrice_lt: Float

  """
  All values less than or equal the given value.
  """
  retailPrice_lte: Float

  """
  All values greater than the given value.
  """
  retailPrice_gt: Float

  """
  All values greater than or equal the given value.
  """
  retailPrice_gte: Float
  total: Int

  """
  All values that are not equal to given value.
  """
  total_not: Int

  """
  All values that are contained in given list.
  """
  total_in: [Int!]

  """
  All values that are not contained in given list.
  """
  total_not_in: [Int!]

  """
  All values less than the given value.
  """
  total_lt: Int

  """
  All values less than or equal the given value.
  """
  total_lte: Int

  """
  All values greater than the given value.
  """
  total_gt: Int

  """
  All values greater than or equal the given value.
  """
  total_gte: Int
  reservable: Int

  """
  All values that are not equal to given value.
  """
  reservable_not: Int

  """
  All values that are contained in given list.
  """
  reservable_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reservable_not_in: [Int!]

  """
  All values less than the given value.
  """
  reservable_lt: Int

  """
  All values less than or equal the given value.
  """
  reservable_lte: Int

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  resumeDate_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  resumeDate_gte: DateTime
<<<<<<< HEAD
  notified: Boolean

  """
  All values that are not equal to given value.
  """
  notified_not: Boolean
=======
<<<<<<< HEAD
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

type PauseRequestSubscriptionPayload {
  mutation: MutationType!
  node: PauseRequest
  updatedFields: [String!]
  previousValues: PauseRequestPreviousValues
}
=======
  reservable_gt: Int
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
  reservable_gte: Int
  reserved: Int

  """
  All values that are not equal to given value.
  """
  reserved_not: Int

  """
  All values that are contained in given list.
  """
  reserved_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reserved_not_in: [Int!]

  """
  All values less than the given value.
  """
  reserved_lt: Int

  """
  All values less than or equal the given value.
  """
  reserved_lte: Int

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  updatedFields_contains_some: [String!]
  node: PauseRequestWhereInput
}

input PauseRequestUpdateInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
  membership: CustomerMembershipUpdateOneRequiredWithoutPauseRequestsInput
}

input PauseRequestUpdateManyDataInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
}

input PauseRequestUpdateManyMutationInput {
  pausePending: Boolean
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
}
=======
  reserved_gt: Int
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
  reserved_gte: Int
  nonReservable: Int

  """
  All values that are not equal to given value.
  """
  nonReservable_not: Int

<<<<<<< HEAD
input PauseRequestUpdateWithoutMembershipDataInput {
  pausePending: Boolean
  pauseDate: DateTime
<<<<<<< HEAD
  resumeDate: DateTime
  notified: Boolean
}
=======
e}
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  """
  All values that are contained in given list.
  """
  nonReservable_in: [Int!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
  nonReservable_not_in: [Int!]

  """
  All values less than the given value.
  """
  nonReservable_lt: Int

  """
  All values less than or equal the given value.
  """
  nonReservable_lte: Int

  """
  All values greater than the given value.
  """
  nonReservable_gt: Int

  """
  All values greater than or equal the given value.
  """
  nonReservable_gte: Int
  offloaded: Int

  """
  All values that are not equal to given value.
  """
  offloaded_not: Int

  """
  All values that are contained in given list.
  """
  offloaded_in: [Int!]

  """
  All values that are not contained in given list.
  """
  offloaded_not_in: [Int!]

  """
  All values less than the given value.
  """
  offloaded_lt: Int

  """
  All values less than or equal the given value.
  """
  offloaded_lte: Int

  """
  All values greater than the given value.
  """
  offloaded_gt: Int

  """
  All values greater than or equal the given value.
  """
  offloaded_gte: Int
  stored: Int

  """
  All values that are not equal to given value.
  """
  stored_not: Int

  """
  All values that are contained in given list.
  """
  stored_in: [Int!]

  """
  All values that are not contained in given list.
  """
  stored_not_in: [Int!]

  """
  All values less than the given value.
  """
  stored_lt: Int

  """
  All values less than or equal the given value.
  """
  stored_lte: Int

  """
  All values greater than the given value.
  """
  stored_gt: Int

  """
  All values greater than or equal the given value.
  """
  stored_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type ProductVariantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariant
  updatedFields: [String!]
  previousValues: ProductVariantPreviousValues
}

input ProductVariantSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantWhereInput
}

input ProductVariantUpdateDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  product: ProductUpdateOneRequiredWithoutVariantsInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
}

input ProductVariantUpdateInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  product: ProductUpdateOneRequiredWithoutVariantsInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
}

input ProductVariantUpdateManyDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateManyMutationInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateManyWithoutColorInput {
  create: [ProductVariantCreateWithoutColorInput!]
  connect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  delete: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutColorInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutColorInput!]
}

input ProductVariantUpdateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  delete: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutProductInput!]
}

<<<<<<< HEAD
  """
  All values greater than or equal the given value.
  """
  resumeDate_gte: DateTime
  notified: Boolean

  """
  All values that are not equal to given value.
  """
  notified_not: Boolean
  membership: CustomerMembershipWhereInput
=======
input ProductVariantUpdateManyWithWhereNestedInput {
  where: ProductVariantScalarWhereInput!
  data: ProductVariantUpdateManyDataInput!
>>>>>>> Rebase
}

input ProductVariantUpdateOneRequiredInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  update: ProductVariantUpdateDataInput
  upsert: ProductVariantUpsertNestedInput
}

input ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput {
  create: ProductVariantCreateWithoutPhysicalProductsInput
  connect: ProductVariantWhereUniqueInput
  update: ProductVariantUpdateWithoutPhysicalProductsDataInput
  upsert: ProductVariantUpsertWithoutPhysicalProductsInput
}

input ProductVariantUpdateWithoutColorDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  product: ProductUpdateOneRequiredWithoutVariantsInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
}

input ProductVariantUpdateWithoutPhysicalProductsDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  product: ProductUpdateOneRequiredWithoutVariantsInput
}

input ProductVariantUpdateWithoutProductDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
}

input ProductVariantUpdateWithWhereUniqueWithoutColorInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutColorDataInput!
}

input ProductVariantUpdateWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutProductDataInput!
}

input ProductVariantUpsertNestedInput {
  update: ProductVariantUpdateDataInput!
  create: ProductVariantCreateInput!
}

input ProductVariantUpsertWithoutPhysicalProductsInput {
  update: ProductVariantUpdateWithoutPhysicalProductsDataInput!
  create: ProductVariantCreateWithoutPhysicalProductsInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutColorInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutColorDataInput!
  create: ProductVariantCreateWithoutColorInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutProductDataInput!
  create: ProductVariantCreateWithoutProductInput!
}

type ProductVariantWant implements Node {
  id: ID!
  productVariant: ProductVariant!
  user: User!
  isFulfilled: Boolean!
}

"""
A connection to a list of items.
"""
type ProductVariantWantConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductVariantWantEdge]!
  aggregate: AggregateProductVariantWant!
}

input ProductVariantWantCreateInput {
  id: ID
  isFulfilled: Boolean!
  productVariant: ProductVariantCreateOneInput!
  user: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type ProductVariantWantEdge {
  """
  The item at the end of the edge.
  """
  node: ProductVariantWant!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductVariantWantOrderByInput {
  id_ASC
  id_DESC
  isFulfilled_ASC
  isFulfilled_DESC
}

type ProductVariantWantPreviousValues {
  id: ID!
  isFulfilled: Boolean!
}

type ProductVariantWantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantWant
  updatedFields: [String!]
  previousValues: ProductVariantWantPreviousValues
}

input ProductVariantWantSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantWantSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantWantSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantWantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantWantWhereInput
}

input ProductVariantWantUpdateInput {
  isFulfilled: Boolean
  productVariant: ProductVariantUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
}

input ProductVariantWantUpdateManyMutationInput {
  isFulfilled: Boolean
}

input ProductVariantWantWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantWantWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantWantWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantWantWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  isFulfilled: Boolean

  """
  All values that are not equal to given value.
  """
  isFulfilled_not: Boolean
  productVariant: ProductVariantWhereInput
  user: UserWhereInput
}

input ProductVariantWantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  sku: String

  """
  All values that are not equal to given value.
  """
  sku_not: String

  """
  All values that are contained in given list.
  """
  sku_in: [String!]

  """
  All values that are not contained in given list.
  """
  sku_not_in: [String!]

  """
  All values less than the given value.
  """
  sku_lt: String

  """
  All values less than or equal the given value.
  """
  sku_lte: String

  """
  All values greater than the given value.
  """
  sku_gt: String

  """
  All values greater than or equal the given value.
  """
  sku_gte: String

  """
  All values containing the given string.
  """
  sku_contains: String

  """
  All values not containing the given string.
  """
  sku_not_contains: String

  """
  All values starting with the given string.
  """
  sku_starts_with: String

  """
  All values not starting with the given string.
  """
  sku_not_starts_with: String

  """
  All values ending with the given string.
  """
  sku_ends_with: String

  """
  All values not ending with the given string.
  """
  sku_not_ends_with: String
  weight: Float

  """
  All values that are not equal to given value.
  """
  weight_not: Float

  """
  All values that are contained in given list.
  """
  weight_in: [Float!]

  """
  All values that are not contained in given list.
  """
  weight_not_in: [Float!]

  """
  All values less than the given value.
  """
  weight_lt: Float

  """
  All values less than or equal the given value.
  """
  weight_lte: Float

  """
  All values greater than the given value.
  """
  weight_gt: Float

  """
  All values greater than or equal the given value.
  """
  weight_gte: Float
  height: Float

  """
  All values that are not equal to given value.
  """
  height_not: Float

  """
  All values that are contained in given list.
  """
  height_in: [Float!]

  """
  All values that are not contained in given list.
  """
  height_not_in: [Float!]

  """
  All values less than the given value.
  """
  height_lt: Float

  """
  All values less than or equal the given value.
  """
  height_lte: Float

  """
  All values greater than the given value.
  """
  height_gt: Float

  """
  All values greater than or equal the given value.
  """
  height_gte: Float
  productID: String

  """
  All values that are not equal to given value.
  """
  productID_not: String

  """
  All values that are contained in given list.
  """
  productID_in: [String!]

  """
  All values that are not contained in given list.
  """
  productID_not_in: [String!]

  """
  All values less than the given value.
  """
  productID_lt: String

  """
  All values less than or equal the given value.
  """
  productID_lte: String

  """
  All values greater than the given value.
  """
  productID_gt: String

  """
  All values greater than or equal the given value.
  """
  productID_gte: String

  """
  All values containing the given string.
  """
  productID_contains: String

  """
  All values not containing the given string.
  """
  productID_not_contains: String

  """
  All values starting with the given string.
  """
  productID_starts_with: String

  """
  All values not starting with the given string.
  """
  productID_not_starts_with: String

  """
  All values ending with the given string.
  """
  productID_ends_with: String

  """
  All values not ending with the given string.
  """
  productID_not_ends_with: String
  retailPrice: Float

  """
  All values that are not equal to given value.
  """
  retailPrice_not: Float

  """
  All values that are contained in given list.
  """
  retailPrice_in: [Float!]

  """
  All values that are not contained in given list.
  """
  retailPrice_not_in: [Float!]

  """
  All values less than the given value.
  """
  retailPrice_lt: Float

  """
  All values less than or equal the given value.
  """
  retailPrice_lte: Float

  """
  All values greater than the given value.
  """
  retailPrice_gt: Float

  """
  All values greater than or equal the given value.
  """
  retailPrice_gte: Float
  total: Int

  """
  All values that are not equal to given value.
  """
  total_not: Int

  """
  All values that are contained in given list.
  """
  total_in: [Int!]

  """
  All values that are not contained in given list.
  """
  total_not_in: [Int!]

  """
  All values less than the given value.
  """
  total_lt: Int

  """
  All values less than or equal the given value.
  """
  total_lte: Int

  """
  All values greater than the given value.
  """
  total_gt: Int

  """
  All values greater than or equal the given value.
  """
  total_gte: Int
  reservable: Int

  """
  All values that are not equal to given value.
  """
  reservable_not: Int

  """
  All values that are contained in given list.
  """
  reservable_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reservable_not_in: [Int!]

  """
  All values less than the given value.
  """
  reservable_lt: Int

  """
  All values less than or equal the given value.
  """
  reservable_lte: Int

  """
  All values greater than the given value.
  """
  reservable_gt: Int

  """
  All values greater than or equal the given value.
  """
  reservable_gte: Int
  reserved: Int

  """
  All values that are not equal to given value.
  """
  reserved_not: Int

  """
  All values that are contained in given list.
  """
  reserved_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reserved_not_in: [Int!]

  """
  All values less than the given value.
  """
  reserved_lt: Int

  """
  All values less than or equal the given value.
  """
  reserved_lte: Int

  """
  All values greater than the given value.
  """
  reserved_gt: Int

  """
  All values greater than or equal the given value.
  """
  reserved_gte: Int
  nonReservable: Int

  """
  All values that are not equal to given value.
  """
  nonReservable_not: Int

  """
  All values that are contained in given list.
  """
  nonReservable_in: [Int!]

  """
  All values that are not contained in given list.
  """
  nonReservable_not_in: [Int!]

  """
  All values less than the given value.
  """
  nonReservable_lt: Int

  """
  All values less than or equal the given value.
  """
  nonReservable_lte: Int

  """
  All values greater than the given value.
  """
  nonReservable_gt: Int

  """
  All values greater than or equal the given value.
  """
  nonReservable_gte: Int
  offloaded: Int

  """
  All values that are not equal to given value.
  """
  offloaded_not: Int

  """
  All values that are contained in given list.
  """
  offloaded_in: [Int!]

  """
  All values that are not contained in given list.
  """
  offloaded_not_in: [Int!]

  """
  All values less than the given value.
  """
  offloaded_lt: Int

  """
  All values less than or equal the given value.
  """
  offloaded_lte: Int

  """
  All values greater than the given value.
  """
  offloaded_gt: Int

  """
  All values greater than or equal the given value.
  """
  offloaded_gte: Int
  stored: Int

  """
  All values that are not equal to given value.
  """
  stored_not: Int

  """
  All values that are contained in given list.
  """
  stored_in: [Int!]

  """
  All values that are not contained in given list.
  """
  stored_not_in: [Int!]

  """
  All values less than the given value.
  """
  stored_lt: Int

  """
  All values less than or equal the given value.
  """
  stored_lte: Int

  """
  All values greater than the given value.
  """
  stored_gt: Int

  """
  All values greater than or equal the given value.
  """
  stored_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  color: ColorWhereInput
  internalSize: SizeWhereInput
  manufacturerSizes_every: SizeWhereInput
  manufacturerSizes_some: SizeWhereInput
  manufacturerSizes_none: SizeWhereInput
  product: ProductWhereInput
  physicalProducts_every: PhysicalProductWhereInput
  physicalProducts_some: PhysicalProductWhereInput
  physicalProducts_none: PhysicalProductWhereInput
}

input ProductVariantWhereUniqueInput {
  id: ID
  sku: String
}

input ProductWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  type: ProductType

  """
  All values that are not equal to given value.
  """
  type_not: ProductType

  """
  All values that are contained in given list.
  """
  type_in: [ProductType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [ProductType!]
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  externalURL: String

  """
  All values that are not equal to given value.
  """
  externalURL_not: String

  """
  All values that are contained in given list.
  """
  externalURL_in: [String!]

  """
  All values that are not contained in given list.
  """
  externalURL_not_in: [String!]

  """
  All values less than the given value.
  """
  externalURL_lt: String

  """
  All values less than or equal the given value.
  """
  externalURL_lte: String

  """
  All values greater than the given value.
  """
  externalURL_gt: String

  """
  All values greater than or equal the given value.
  """
  externalURL_gte: String

  """
  All values containing the given string.
  """
  externalURL_contains: String

  """
  All values not containing the given string.
  """
  externalURL_not_contains: String

  """
  All values starting with the given string.
  """
  externalURL_starts_with: String

  """
  All values not starting with the given string.
  """
  externalURL_not_starts_with: String

  """
  All values ending with the given string.
  """
  externalURL_ends_with: String

  """
  All values not ending with the given string.
  """
  externalURL_not_ends_with: String
  modelHeight: Int

  """
  All values that are not equal to given value.
  """
  modelHeight_not: Int

  """
  All values that are contained in given list.
  """
  modelHeight_in: [Int!]

  """
  All values that are not contained in given list.
  """
  modelHeight_not_in: [Int!]

  """
  All values less than the given value.
  """
  modelHeight_lt: Int

  """
  All values less than or equal the given value.
  """
  modelHeight_lte: Int

  """
  All values greater than the given value.
  """
  modelHeight_gt: Int

  """
  All values greater than or equal the given value.
  """
  modelHeight_gte: Int
  retailPrice: Int

  """
  All values that are not equal to given value.
  """
  retailPrice_not: Int

  """
  All values that are contained in given list.
  """
  retailPrice_in: [Int!]

  """
  All values that are not contained in given list.
  """
  retailPrice_not_in: [Int!]

  """
  All values less than the given value.
  """
  retailPrice_lt: Int

  """
  All values less than or equal the given value.
  """
  retailPrice_lte: Int

  """
  All values greater than the given value.
  """
  retailPrice_gt: Int

  """
  All values greater than or equal the given value.
  """
  retailPrice_gte: Int
  status: ProductStatus

  """
  All values that are not equal to given value.
  """
  status_not: ProductStatus

  """
  All values that are contained in given list.
  """
  status_in: [ProductStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [ProductStatus!]
  season: String

  """
  All values that are not equal to given value.
  """
  season_not: String

  """
  All values that are contained in given list.
  """
  season_in: [String!]

  """
  All values that are not contained in given list.
  """
  season_not_in: [String!]

  """
  All values less than the given value.
  """
  season_lt: String

  """
  All values less than or equal the given value.
  """
  season_lte: String

  """
  All values greater than the given value.
  """
  season_gt: String

  """
  All values greater than or equal the given value.
  """
  season_gte: String

  """
  All values containing the given string.
  """
  season_contains: String

  """
  All values not containing the given string.
  """
  season_not_contains: String

  """
  All values starting with the given string.
  """
  season_starts_with: String

  """
  All values not starting with the given string.
  """
  season_not_starts_with: String

  """
  All values ending with the given string.
  """
  season_ends_with: String

  """
  All values not ending with the given string.
  """
  season_not_ends_with: String
  architecture: ProductArchitecture

  """
  All values that are not equal to given value.
  """
  architecture_not: ProductArchitecture

  """
  All values that are contained in given list.
  """
  architecture_in: [ProductArchitecture!]

  """
  All values that are not contained in given list.
  """
  architecture_not_in: [ProductArchitecture!]
  photographyStatus: PhotographyStatus

  """
  All values that are not equal to given value.
  """
  photographyStatus_not: PhotographyStatus

  """
  All values that are contained in given list.
  """
  photographyStatus_in: [PhotographyStatus!]

  """
  All values that are not contained in given list.
  """
  photographyStatus_not_in: [PhotographyStatus!]
  publishedAt: DateTime

  """
  All values that are not equal to given value.
  """
  publishedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  publishedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  publishedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  publishedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  publishedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  publishedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  publishedAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  brand: BrandWhereInput
  category: CategoryWhereInput
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
  model: ProductModelWhereInput
  modelSize: SizeWhereInput
  color: ColorWhereInput
  secondaryColor: ColorWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  functions_every: ProductFunctionWhereInput
  functions_some: ProductFunctionWhereInput
  functions_none: ProductFunctionWhereInput
  materialCategory: ProductMaterialCategoryWhereInput
  variants_every: ProductVariantWhereInput
  variants_some: ProductVariantWhereInput
  variants_none: ProductVariantWhereInput
  statusChanges_every: ProductStatusChangeWhereInput
  statusChanges_some: ProductStatusChangeWhereInput
  statusChanges_none: ProductStatusChangeWhereInput
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

type PushNotificationReceipt implements Node {
  id: ID!
  route: String
  screen: String
  uri: String
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PushNotificationReceiptConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PushNotificationReceiptEdge]!
  aggregate: AggregatePushNotificationReceipt!
}

input PushNotificationReceiptCreateInput {
  id: ID
  route: String
  screen: String
  uri: String
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime!
  users: UserCreateManyWithoutPushNotificationsInput
}

input PushNotificationReceiptCreateManyInput {
  create: [PushNotificationReceiptCreateInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
}

input PushNotificationReceiptCreateManyWithoutUsersInput {
  create: [PushNotificationReceiptCreateWithoutUsersInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
}

input PushNotificationReceiptCreateWithoutUsersInput {
  id: ID
  route: String
  screen: String
  uri: String
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime!
}

"""
An edge in a connection.
"""
type PushNotificationReceiptEdge {
  """
  The item at the end of the edge.
  """
  node: PushNotificationReceipt!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PushNotificationReceiptOrderByInput {
  id_ASC
  id_DESC
  route_ASC
  route_DESC
  screen_ASC
  screen_DESC
  uri_ASC
  uri_DESC
  interest_ASC
  interest_DESC
  body_ASC
  body_DESC
  title_ASC
  title_DESC
  recordID_ASC
  recordID_DESC
  recordSlug_ASC
  recordSlug_DESC
  sentAt_ASC
  sentAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PushNotificationReceiptPreviousValues {
  id: ID!
  route: String
  screen: String
  uri: String
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PushNotificationReceiptScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PushNotificationReceiptScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PushNotificationReceiptScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PushNotificationReceiptScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  route: String

  """
  All values that are not equal to given value.
  """
  route_not: String

  """
  All values that are contained in given list.
  """
  route_in: [String!]

  """
  All values that are not contained in given list.
  """
  route_not_in: [String!]

  """
  All values less than the given value.
  """
  route_lt: String

  """
  All values less than or equal the given value.
  """
  route_lte: String

  """
  All values greater than the given value.
  """
  route_gt: String

  """
  All values greater than or equal the given value.
  """
  route_gte: String

  """
  All values containing the given string.
  """
  route_contains: String

  """
  All values not containing the given string.
  """
  route_not_contains: String

  """
  All values starting with the given string.
  """
  route_starts_with: String

  """
  All values not starting with the given string.
  """
  route_not_starts_with: String

  """
  All values ending with the given string.
  """
  route_ends_with: String

  """
  All values not ending with the given string.
  """
  route_not_ends_with: String
  screen: String

  """
  All values that are not equal to given value.
  """
  screen_not: String

  """
  All values that are contained in given list.
  """
  screen_in: [String!]

  """
  All values that are not contained in given list.
  """
  screen_not_in: [String!]

  """
  All values less than the given value.
  """
  screen_lt: String

  """
  All values less than or equal the given value.
  """
  screen_lte: String

  """
  All values greater than the given value.
  """
  screen_gt: String

  """
  All values greater than or equal the given value.
  """
  screen_gte: String

  """
  All values containing the given string.
  """
  screen_contains: String

  """
  All values not containing the given string.
  """
  screen_not_contains: String

  """
  All values starting with the given string.
  """
  screen_starts_with: String

  """
  All values not starting with the given string.
  """
  screen_not_starts_with: String

  """
  All values ending with the given string.
  """
  screen_ends_with: String

  """
  All values not ending with the given string.
  """
  screen_not_ends_with: String
  uri: String

  """
  All values that are not equal to given value.
  """
  uri_not: String

  """
  All values that are contained in given list.
  """
  uri_in: [String!]

  """
  All values that are not contained in given list.
  """
  uri_not_in: [String!]

  """
  All values less than the given value.
  """
  uri_lt: String

  """
  All values less than or equal the given value.
  """
  uri_lte: String

  """
  All values greater than the given value.
  """
  uri_gt: String

  """
  All values greater than or equal the given value.
  """
  uri_gte: String

  """
  All values containing the given string.
  """
  uri_contains: String

  """
  All values not containing the given string.
  """
  uri_not_contains: String

  """
  All values starting with the given string.
  """
  uri_starts_with: String

  """
  All values not starting with the given string.
  """
  uri_not_starts_with: String

  """
  All values ending with the given string.
  """
  uri_ends_with: String

  """
  All values not ending with the given string.
  """
  uri_not_ends_with: String
  interest: String

  """
  All values that are not equal to given value.
  """
  interest_not: String

  """
  All values that are contained in given list.
  """
  interest_in: [String!]

  """
  All values that are not contained in given list.
  """
  interest_not_in: [String!]

  """
  All values less than the given value.
  """
  interest_lt: String

  """
  All values less than or equal the given value.
  """
  interest_lte: String

  """
  All values greater than the given value.
  """
  interest_gt: String

  """
  All values greater than or equal the given value.
  """
  interest_gte: String

  """
  All values containing the given string.
  """
  interest_contains: String

  """
  All values not containing the given string.
  """
  interest_not_contains: String

  """
  All values starting with the given string.
  """
  interest_starts_with: String

  """
  All values not starting with the given string.
  """
  interest_not_starts_with: String

  """
  All values ending with the given string.
  """
  interest_ends_with: String

  """
  All values not ending with the given string.
  """
  interest_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  recordID: String

  """
  All values that are not equal to given value.
  """
  recordID_not: String

  """
  All values that are contained in given list.
  """
  recordID_in: [String!]

  """
  All values that are not contained in given list.
  """
  recordID_not_in: [String!]

  """
  All values less than the given value.
  """
  recordID_lt: String

  """
  All values less than or equal the given value.
  """
  recordID_lte: String

  """
  All values greater than the given value.
  """
  recordID_gt: String

  """
  All values greater than or equal the given value.
  """
  recordID_gte: String

  """
  All values containing the given string.
  """
  recordID_contains: String

  """
  All values not containing the given string.
  """
  recordID_not_contains: String

  """
  All values starting with the given string.
  """
  recordID_starts_with: String

  """
  All values not starting with the given string.
  """
  recordID_not_starts_with: String

  """
  All values ending with the given string.
  """
  recordID_ends_with: String

  """
  All values not ending with the given string.
  """
  recordID_not_ends_with: String
  recordSlug: String

  """
  All values that are not equal to given value.
  """
  recordSlug_not: String

  """
  All values that are contained in given list.
  """
  recordSlug_in: [String!]

  """
  All values that are not contained in given list.
  """
  recordSlug_not_in: [String!]

  """
  All values less than the given value.
  """
  recordSlug_lt: String

  """
  All values less than or equal the given value.
  """
  recordSlug_lte: String

  """
  All values greater than the given value.
  """
  recordSlug_gt: String

  """
  All values greater than or equal the given value.
  """
  recordSlug_gte: String

  """
  All values containing the given string.
  """
  recordSlug_contains: String

  """
  All values not containing the given string.
  """
  recordSlug_not_contains: String

  """
  All values starting with the given string.
  """
  recordSlug_starts_with: String

  """
  All values not starting with the given string.
  """
  recordSlug_not_starts_with: String

  """
  All values ending with the given string.
  """
  recordSlug_ends_with: String

  """
  All values not ending with the given string.
  """
  recordSlug_not_ends_with: String
  sentAt: DateTime

  """
  All values that are not equal to given value.
  """
  sentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  sentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  sentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  sentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  sentAt_lte: DateTime
=======
}

type ProductVariantFeedbackQuestionSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantFeedbackQuestion
  updatedFields: [String!]
  previousValues: ProductVariantFeedbackQuestionPreviousValues
}

input ProductVariantFeedbackQuestionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantFeedbackQuestionWhereInput
}

input ProductVariantFeedbackQuestionUpdateInput {
  question: String
  type: QuestionType
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
  variantFeedback: ProductVariantFeedbackUpdateOneRequiredWithoutQuestionsInput
}

input ProductVariantFeedbackQuestionUpdateManyDataInput {
  question: String
  type: QuestionType
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
}

input ProductVariantFeedbackQuestionUpdateManyMutationInput {
  question: String
  type: QuestionType
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
}

input ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput {
  create: [ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput!]
  connect: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  set: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  disconnect: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  delete: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  update: [ProductVariantFeedbackQuestionUpdateWithWhereUniqueWithoutVariantFeedbackInput!]
  updateMany: [ProductVariantFeedbackQuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantFeedbackQuestionScalarWhereInput!]
  upsert: [ProductVariantFeedbackQuestionUpsertWithWhereUniqueWithoutVariantFeedbackInput!]
}

input ProductVariantFeedbackQuestionUpdateManyWithWhereNestedInput {
  where: ProductVariantFeedbackQuestionScalarWhereInput!
  data: ProductVariantFeedbackQuestionUpdateManyDataInput!
}

input ProductVariantFeedbackQuestionUpdateoptionsInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionUpdateresponsesInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput {
  question: String
  type: QuestionType
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
}

input ProductVariantFeedbackQuestionUpdateWithWhereUniqueWithoutVariantFeedbackInput {
  where: ProductVariantFeedbackQuestionWhereUniqueInput!
  data: ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput!
}

input ProductVariantFeedbackQuestionUpsertWithWhereUniqueWithoutVariantFeedbackInput {
  where: ProductVariantFeedbackQuestionWhereUniqueInput!
  update: ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput!
  create: ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput!
}

input ProductVariantFeedbackQuestionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackQuestionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackQuestionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackQuestionWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  question: String

  """
  All values that are not equal to given value.
  """
  question_not: String

  """
  All values that are contained in given list.
  """
  question_in: [String!]

  """
  All values that are not contained in given list.
  """
  question_not_in: [String!]

  """
  All values less than the given value.
  """
  question_lt: String

  """
  All values less than or equal the given value.
  """
  question_lte: String

  """
  All values greater than the given value.
  """
  question_gt: String

  """
  All values greater than or equal the given value.
  """
  question_gte: String

  """
  All values containing the given string.
  """
  question_contains: String

  """
  All values not containing the given string.
  """
  question_not_contains: String

  """
  All values starting with the given string.
  """
  question_starts_with: String

  """
  All values not starting with the given string.
  """
  question_not_starts_with: String

  """
  All values ending with the given string.
  """
  question_ends_with: String

  """
  All values not ending with the given string.
  """
  question_not_ends_with: String
  type: QuestionType

  """
  All values that are not equal to given value.
  """
  type_not: QuestionType

  """
  All values that are contained in given list.
  """
  type_in: [QuestionType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [QuestionType!]
  variantFeedback: ProductVariantFeedbackWhereInput
}

input ProductVariantFeedbackQuestionWhereUniqueInput {
  id: ID
}

input ProductVariantFeedbackScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  sentAt_gt: DateTime
=======
  id_gt: ID
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  sentAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type PushNotificationReceiptSubscriptionPayload {
  mutation: MutationType!
  node: PushNotificationReceipt
  updatedFields: [String!]
  previousValues: PushNotificationReceiptPreviousValues
}

input PushNotificationReceiptSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PushNotificationReceiptSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PushNotificationReceiptSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PushNotificationReceiptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PushNotificationReceiptWhereInput
}

input PushNotificationReceiptUpdateDataInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
  users: UserUpdateManyWithoutPushNotificationsInput
}

input PushNotificationReceiptUpdateInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
  users: UserUpdateManyWithoutPushNotificationsInput
}

input PushNotificationReceiptUpdateManyDataInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateManyInput {
  create: [PushNotificationReceiptCreateInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
  set: [PushNotificationReceiptWhereUniqueInput!]
  disconnect: [PushNotificationReceiptWhereUniqueInput!]
  delete: [PushNotificationReceiptWhereUniqueInput!]
  update: [PushNotificationReceiptUpdateWithWhereUniqueNestedInput!]
  updateMany: [PushNotificationReceiptUpdateManyWithWhereNestedInput!]
  deleteMany: [PushNotificationReceiptScalarWhereInput!]
  upsert: [PushNotificationReceiptUpsertWithWhereUniqueNestedInput!]
}

input PushNotificationReceiptUpdateManyMutationInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateManyWithoutUsersInput {
  create: [PushNotificationReceiptCreateWithoutUsersInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
  set: [PushNotificationReceiptWhereUniqueInput!]
  disconnect: [PushNotificationReceiptWhereUniqueInput!]
  delete: [PushNotificationReceiptWhereUniqueInput!]
  update: [PushNotificationReceiptUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [PushNotificationReceiptUpdateManyWithWhereNestedInput!]
  deleteMany: [PushNotificationReceiptScalarWhereInput!]
  upsert: [PushNotificationReceiptUpsertWithWhereUniqueWithoutUsersInput!]
}

input PushNotificationReceiptUpdateManyWithWhereNestedInput {
  where: PushNotificationReceiptScalarWhereInput!
  data: PushNotificationReceiptUpdateManyDataInput!
}

input PushNotificationReceiptUpdateWithoutUsersDataInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateWithWhereUniqueNestedInput {
  where: PushNotificationReceiptWhereUniqueInput!
  data: PushNotificationReceiptUpdateDataInput!
}

input PushNotificationReceiptUpdateWithWhereUniqueWithoutUsersInput {
  where: PushNotificationReceiptWhereUniqueInput!
  data: PushNotificationReceiptUpdateWithoutUsersDataInput!
}

input PushNotificationReceiptUpsertWithWhereUniqueNestedInput {
  where: PushNotificationReceiptWhereUniqueInput!
  update: PushNotificationReceiptUpdateDataInput!
  create: PushNotificationReceiptCreateInput!
}

input PushNotificationReceiptUpsertWithWhereUniqueWithoutUsersInput {
  where: PushNotificationReceiptWhereUniqueInput!
  update: PushNotificationReceiptUpdateWithoutUsersDataInput!
  create: PushNotificationReceiptCreateWithoutUsersInput!
}

input PushNotificationReceiptWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PushNotificationReceiptWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PushNotificationReceiptWhereInput!]
=======
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  isCompleted: Boolean

  """
  All values that are not equal to given value.
  """
  isCompleted_not: Boolean
}

type ProductVariantFeedbackSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantFeedback
  updatedFields: [String!]
  previousValues: ProductVariantFeedbackPreviousValues
}

input ProductVariantFeedbackSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantFeedbackWhereInput
}

input ProductVariantFeedbackUpdateInput {
  isCompleted: Boolean
  questions: ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput
  reservationFeedback: ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateManyDataInput {
  isCompleted: Boolean
}

input ProductVariantFeedbackUpdateManyMutationInput {
  isCompleted: Boolean
}

input ProductVariantFeedbackUpdateManyWithoutReservationFeedbackInput {
  create: [ProductVariantFeedbackCreateWithoutReservationFeedbackInput!]
  connect: [ProductVariantFeedbackWhereUniqueInput!]
  set: [ProductVariantFeedbackWhereUniqueInput!]
  disconnect: [ProductVariantFeedbackWhereUniqueInput!]
  delete: [ProductVariantFeedbackWhereUniqueInput!]
  update: [ProductVariantFeedbackUpdateWithWhereUniqueWithoutReservationFeedbackInput!]
  updateMany: [ProductVariantFeedbackUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantFeedbackScalarWhereInput!]
  upsert: [ProductVariantFeedbackUpsertWithWhereUniqueWithoutReservationFeedbackInput!]
}

input ProductVariantFeedbackUpdateManyWithWhereNestedInput {
  where: ProductVariantFeedbackScalarWhereInput!
  data: ProductVariantFeedbackUpdateManyDataInput!
}

input ProductVariantFeedbackUpdateOneRequiredWithoutQuestionsInput {
  create: ProductVariantFeedbackCreateWithoutQuestionsInput
  connect: ProductVariantFeedbackWhereUniqueInput
  update: ProductVariantFeedbackUpdateWithoutQuestionsDataInput
  upsert: ProductVariantFeedbackUpsertWithoutQuestionsInput
}

input ProductVariantFeedbackUpdateWithoutQuestionsDataInput {
  isCompleted: Boolean
  reservationFeedback: ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput {
  isCompleted: Boolean
  questions: ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateWithWhereUniqueWithoutReservationFeedbackInput {
  where: ProductVariantFeedbackWhereUniqueInput!
  data: ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput!
}

input ProductVariantFeedbackUpsertWithoutQuestionsInput {
  update: ProductVariantFeedbackUpdateWithoutQuestionsDataInput!
  create: ProductVariantFeedbackCreateWithoutQuestionsInput!
}

input ProductVariantFeedbackUpsertWithWhereUniqueWithoutReservationFeedbackInput {
  where: ProductVariantFeedbackWhereUniqueInput!
  update: ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput!
  create: ProductVariantFeedbackCreateWithoutReservationFeedbackInput!
}

input ProductVariantFeedbackWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantFeedbackWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantFeedbackWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantFeedbackWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  isCompleted: Boolean

  """
  All values that are not equal to given value.
  """
  isCompleted_not: Boolean
  questions_every: ProductVariantFeedbackQuestionWhereInput
  questions_some: ProductVariantFeedbackQuestionWhereInput
  questions_none: ProductVariantFeedbackQuestionWhereInput
  reservationFeedback: ReservationFeedbackWhereInput
  variant: ProductVariantWhereInput
}

input ProductVariantFeedbackWhereUniqueInput {
  id: ID
}

enum ProductVariantOrderByInput {
  id_ASC
  id_DESC
  sku_ASC
  sku_DESC
  weight_ASC
  weight_DESC
  height_ASC
  height_DESC
  productID_ASC
  productID_DESC
  retailPrice_ASC
  retailPrice_DESC
  total_ASC
  total_DESC
  reservable_ASC
  reservable_DESC
  reserved_ASC
  reserved_DESC
  nonReservable_ASC
  nonReservable_DESC
  offloaded_ASC
  offloaded_DESC
  stored_ASC
  stored_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductVariantPreviousValues {
  id: ID!
  sku: String
  weight: Float
  height: Float
  productID: String!
  retailPrice: Float
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductVariantScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantScalarWhereInput!]
>>>>>>> Rebase

  """
  Logical NOT on all given filters combined by AND.
  """
<<<<<<< HEAD
  NOT: [PushNotificationReceiptWhereInput!]
=======
  NOT: [ProductVariantScalarWhereInput!]
>>>>>>> Rebase
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID
<<<<<<< HEAD

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  route: String

  """
  All values that are not equal to given value.
  """
  route_not: String

  """
  All values that are contained in given list.
  """
  route_in: [String!]

  """
  All values that are not contained in given list.
  """
  route_not_in: [String!]

  """
  All values less than the given value.
  """
  route_lt: String

  """
  All values less than or equal the given value.
  """
  route_lte: String

  """
  All values greater than the given value.
  """
  route_gt: String

  """
  All values greater than or equal the given value.
  """
  route_gte: String

  """
  All values containing the given string.
  """
  route_contains: String

  """
  All values not containing the given string.
  """
  route_not_contains: String

  """
  All values starting with the given string.
  """
  route_starts_with: String
<<<<<<< HEAD

  """
  All values not starting with the given string.
  """
  route_not_starts_with: String

  """
  All values ending with the given string.
  """
  route_ends_with: String

  """
  All values not ending with the given string.
  """
  route_not_ends_with: String
  screen: String

  """
  All values that are not equal to given value.
  """
  screen_not: String

  """
  All values that are contained in given list.
  """
  screen_in: [String!]

  """
  All values that are not contained in given list.
  """
  screen_not_in: [String!]

  """
  All values less than the given value.
  """
  screen_lt: String

  """
  All values less than or equal the given value.
  """
  screen_lte: String

  """
  All values greater than the given value.
  """
  screen_gt: String

  """
  All values greater than or equal the given value.
  """
  screen_gte: String

  """
  All values containing the given string.
  """
  screen_contains: String

  """
  All values not containing the given string.
  """
  screen_not_contains: String

  """
  All values starting with the given string.
  """
  screen_starts_with: String

  """
  All values not starting with the given string.
  """
  screen_not_starts_with: String

  """
  All values ending with the given string.
  """
  screen_ends_with: String

  """
  All values not ending with the given string.
  """
  screen_not_ends_with: String
=======
_ route_ends_with: String:n
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  uri: String
=======

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  sku: String

  """
  All values that are not equal to given value.
  """
  sku_not: String

  """
  All values that are contained in given list.
  """
  sku_in: [String!]

  """
  All values that are not contained in given list.
  """
  sku_not_in: [String!]

  """
  All values less than the given value.
  """
  sku_lt: String

  """
  All values less than or equal the given value.
  """
  sku_lte: String

  """
  All values greater than the given value.
  """
  sku_gt: String

  """
  All values greater than or equal the given value.
  """
  sku_gte: String

  """
  All values containing the given string.
  """
  sku_contains: String

  """
  All values not containing the given string.
  """
  sku_not_contains: String

  """
  All values starting with the given string.
  """
  sku_starts_with: String

  """
  All values not starting with the given string.
  """
  sku_not_starts_with: String

  """
  All values ending with the given string.
  """
  sku_ends_with: String

  """
  All values not ending with the given string.
  """
  sku_not_ends_with: String
  weight: Float

  """
  All values that are not equal to given value.
  """
  weight_not: Float

  """
  All values that are contained in given list.
  """
  weight_in: [Float!]

  """
  All values that are not contained in given list.
  """
  weight_not_in: [Float!]

  """
  All values less than the given value.
  """
  weight_lt: Float

  """
  All values less than or equal the given value.
  """
  weight_lte: Float

  """
  All values greater than the given value.
  """
  weight_gt: Float

  """
  All values greater than or equal the given value.
  """
  weight_gte: Float
  height: Float

  """
  All values that are not equal to given value.
  """
  height_not: Float

  """
  All values that are contained in given list.
  """
  height_in: [Float!]

  """
  All values that are not contained in given list.
  """
  height_not_in: [Float!]

  """
  All values less than the given value.
  """
  height_lt: Float

  """
  All values less than or equal the given value.
  """
  height_lte: Float

  """
  All values greater than the given value.
  """
  height_gt: Float

  """
  All values greater than or equal the given value.
  """
  height_gte: Float
  productID: String

  """
  All values that are not equal to given value.
  """
  productID_not: String

  """
  All values that are contained in given list.
  """
  productID_in: [String!]

  """
  All values that are not contained in given list.
  """
  productID_not_in: [String!]

  """
  All values less than the given value.
  """
  productID_lt: String

  """
  All values less than or equal the given value.
  """
  productID_lte: String

  """
  All values greater than the given value.
  """
  productID_gt: String

  """
  All values greater than or equal the given value.
  """
  productID_gte: String

  """
  All values containing the given string.
  """
  productID_contains: String

  """
  All values not containing the given string.
  """
  productID_not_contains: String

  """
  All values starting with the given string.
  """
  productID_starts_with: String

  """
  All values not starting with the given string.
  """
  productID_not_starts_with: String

  """
  All values ending with the given string.
  """
  productID_ends_with: String

  """
  All values not ending with the given string.
  """
  productID_not_ends_with: String
  retailPrice: Float

  """
  All values that are not equal to given value.
  """
  retailPrice_not: Float

  """
  All values that are contained in given list.
  """
  retailPrice_in: [Float!]

  """
  All values that are not contained in given list.
  """
  retailPrice_not_in: [Float!]

  """
  All values less than the given value.
  """
  retailPrice_lt: Float

  """
  All values less than or equal the given value.
  """
  retailPrice_lte: Float

  """
  All values greater than the given value.
  """
  retailPrice_gt: Float

  """
  All values greater than or equal the given value.
  """
  retailPrice_gte: Float
  total: Int

  """
  All values that are not equal to given value.
  """
  total_not: Int

  """
  All values that are contained in given list.
  """
  total_in: [Int!]

  """
  All values that are not contained in given list.
  """
  total_not_in: [Int!]

  """
  All values less than the given value.
  """
  total_lt: Int

  """
  All values less than or equal the given value.
  """
  total_lte: Int

  """
  All values greater than the given value.
  """
  total_gt: Int

  """
  All values greater than or equal the given value.
  """
  total_gte: Int
  reservable: Int

  """
  All values that are not equal to given value.
  """
  reservable_not: Int

  """
  All values that are contained in given list.
  """
  reservable_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reservable_not_in: [Int!]

  """
  All values less than the given value.
  """
  reservable_lt: Int

  """
  All values less than or equal the given value.
  """
  reservable_lte: Int

  """
  All values greater than the given value.
  """
  reservable_gt: Int

  """
  All values greater than or equal the given value.
  """
  reservable_gte: Int
  reserved: Int
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  uri_not: String
=======
  reserved_not: Int
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  uri_in: [String!]
=======
  reserved_in: [Int!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  uri_not_in: [String!]
<<<<<<< HEAD

  """
  All values less than the given value.
  """
  uri_lt: String

  """
  All values less than or equal the given value.
  """
  uri_lte: String

  """
  All values greater than the given value.
  """
=======
t uri_lte: String
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  uri_gt: String

  """
  All values greater than or equal the given value.
  """
  uri_gte: String

  """
  All values containing the given string.
  """
  uri_contains: String

  """
  All values not containing the given string.
  """
  uri_not_contains: String

  """
  All values starting with the given string.
  """
  uri_starts_with: String

  """
  All values not starting with the given string.
  """
  uri_not_starts_with: String

  """
  All values ending with the given string.
  """
  uri_ends_with: String

  """
  All values not ending with the given string.
  """
  uri_not_ends_with: String
  interest: String

  """
  All values that are not equal to given value.
  """
  interest_not: String

  """
  All values that are contained in given list.
  """
  interest_in: [String!]
<<<<<<< HEAD

  """
  All values that are not contained in given list.
  """
  interest_not_in: [String!]

  """
  All values less than the given value.
  """
  interest_lt: String

  """
  All values less than or equal the given value.
  """
  interest_lte: String

  """
  All values greater than the given value.
  """
  interest_gt: String

  """
  All values greater than or equal the given value.
  """
  interest_gte: String

  """
  All values containing the given string.
  """
  interest_contains: String

  """
  All values not containing the given string.
  """
  interest_not_contains: String

  """
  All values starting with the given string.
  """
  interest_starts_with: String

  """
  All values not starting with the given string.
  """
  interest_not_starts_with: String

  """
  All values ending with the given string.
  """
  interest_ends_with: String

  """
  All values not ending with the given string.
  """
  interest_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  recordID: String

  """
  All values that are not equal to given value.
  """
  recordID_not: String

  """
  All values that are contained in given list.
  """
  recordID_in: [String!]

  """
  All values that are not contained in given list.
  """
  recordID_not_in: [String!]

  """
  All values less than the given value.
  """
  recordID_lt: String

  """
  All values less than or equal the given value.
  """
  recordID_lte: String

  """
  All values greater than the given value.
  """
  recordID_gt: String

  """
  All values greater than or equal the given value.
  """
  recordID_gte: String

  """
  All values containing the given string.
  """
  recordID_contains: String

  """
  All values not containing the given string.
  """
  recordID_not_contains: String

  """
  All values starting with the given string.
  """
  recordID_starts_with: String

  """
  All values not starting with the given string.
  """
  recordID_not_starts_with: String

  """
  All values ending with the given string.
  """
  recordID_ends_with: String

  """
  All values not ending with the given string.
  """
  recordID_not_ends_with: String
  recordSlug: String

  """
  All values that are not equal to given value.
  """
  recordSlug_not: String

  """
  All values that are contained in given list.
  """
  recordSlug_in: [String!]

  """
  All values that are not contained in given list.
  """
  recordSlug_not_in: [String!]

  """
  All values less than the given value.
  """
  recordSlug_lt: String

  """
  All values less than or equal the given value.
  """
  recordSlug_lte: String

  """
  All values greater than the given value.
  """
  recordSlug_gt: String

  """
  All values greater than or equal the given value.
  """
=======
  interest_not_in: [String!]ri
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  recordSlug_gte: String

  """
  All values containing the given string.
  """
  recordSlug_contains: String

  """
  All values not containing the given string.
  """
  recordSlug_not_contains: String

  """
  All values starting with the given string.
  """
  recordSlug_starts_with: String

  """
  All values not starting with the given string.
  """
  recordSlug_not_starts_with: String

  """
  All values ending with the given string.
  """
  recordSlug_ends_with: String

  """
  All values not ending with the given string.
  """
  recordSlug_not_ends_with: String
  sentAt: DateTime

  """
  All values that are not equal to given value.
  """
  sentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  sentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  sentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  sentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  sentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  sentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  sentAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
<<<<<<< HEAD

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
=======
  reserved_not_in: [Int!]

  """
  All values less than the given value.
  """
  reserved_lt: Int

  """
  All values less than or equal the given value.
  """
  reserved_lte: Int

  """
  All values greater than the given value.
  """
  reserved_gt: Int

  """
  All values greater than or equal the given value.
  """
  reserved_gte: Int
  nonReservable: Int

  """
  All values that are not equal to given value.
  """
  nonReservable_not: Int

  """
  All values that are contained in given list.
  """
  nonReservable_in: [Int!]

  """
  All values that are not contained in given list.
  """
  nonReservable_not_in: [Int!]

  """
  All values less than the given value.
  """
  nonReservable_lt: Int

  """
  All values less than or equal the given value.
  """
  nonReservable_lte: Int

  """
  All values greater than the given value.
  """
  nonReservable_gt: Int

  """
  All values greater than or equal the given value.
  """
  nonReservable_gte: Int
  offloaded: Int

  """
  All values that are not equal to given value.
  """
  offloaded_not: Int

  """
  All values that are contained in given list.
  """
  offloaded_in: [Int!]

  """
  All values that are not contained in given list.
  """
  offloaded_not_in: [Int!]

  """
  All values less than the given value.
  """
  offloaded_lt: Int

  """
  All values less than or equal the given value.
  """
  offloaded_lte: Int

  """
  All values greater than the given value.
  """
  offloaded_gt: Int

  """
  All values greater than or equal the given value.
  """
  offloaded_gte: Int
  stored: Int

  """
  All values that are not equal to given value.
  """
  stored_not: Int

  """
  All values that are contained in given list.
  """
  stored_in: [Int!]

  """
  All values that are not contained in given list.
  """
  stored_not_in: [Int!]

  """
  All values less than the given value.
  """
  stored_lt: Int

  """
  All values less than or equal the given value.
  """
  stored_lte: Int

  """
  All values greater than the given value.
  """
  stored_gt: Int

  """
  All values greater than or equal the given value.
  """
  stored_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type ProductVariantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariant
  updatedFields: [String!]
  previousValues: ProductVariantPreviousValues
}

input ProductVariantSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantWhereInput
}

input ProductVariantUpdateDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  product: ProductUpdateOneRequiredWithoutVariantsInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
}

input ProductVariantUpdateInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  product: ProductUpdateOneRequiredWithoutVariantsInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
}

input ProductVariantUpdateManyDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateManyMutationInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateManyWithoutColorInput {
  create: [ProductVariantCreateWithoutColorInput!]
  connect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  delete: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutColorInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutColorInput!]
}

input ProductVariantUpdateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  delete: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductVariantUpdateManyWithWhereNestedInput {
  where: ProductVariantScalarWhereInput!
  data: ProductVariantUpdateManyDataInput!
}

input ProductVariantUpdateOneRequiredInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  update: ProductVariantUpdateDataInput
  upsert: ProductVariantUpsertNestedInput
}

input ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput {
  create: ProductVariantCreateWithoutPhysicalProductsInput
  connect: ProductVariantWhereUniqueInput
  update: ProductVariantUpdateWithoutPhysicalProductsDataInput
  upsert: ProductVariantUpsertWithoutPhysicalProductsInput
}

input ProductVariantUpdateWithoutColorDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  product: ProductUpdateOneRequiredWithoutVariantsInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
}

input ProductVariantUpdateWithoutPhysicalProductsDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  product: ProductUpdateOneRequiredWithoutVariantsInput
}

input ProductVariantUpdateWithoutProductDataInput {
  sku: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
}

input ProductVariantUpdateWithWhereUniqueWithoutColorInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutColorDataInput!
}

input ProductVariantUpdateWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutProductDataInput!
}

input ProductVariantUpsertNestedInput {
  update: ProductVariantUpdateDataInput!
  create: ProductVariantCreateInput!
}

input ProductVariantUpsertWithoutPhysicalProductsInput {
  update: ProductVariantUpdateWithoutPhysicalProductsDataInput!
  create: ProductVariantCreateWithoutPhysicalProductsInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutColorInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutColorDataInput!
  create: ProductVariantCreateWithoutColorInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutProductDataInput!
  create: ProductVariantCreateWithoutProductInput!
}

type ProductVariantWant implements Node {
  id: ID!
  productVariant: ProductVariant!
  user: User!
  isFulfilled: Boolean!
}

"""
A connection to a list of items.
"""
type ProductVariantWantConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProductVariantWantEdge]!
  aggregate: AggregateProductVariantWant!
}

input ProductVariantWantCreateInput {
  id: ID
  isFulfilled: Boolean!
  productVariant: ProductVariantCreateOneInput!
  user: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type ProductVariantWantEdge {
  """
  The item at the end of the edge.
  """
  node: ProductVariantWant!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductVariantWantOrderByInput {
  id_ASC
  id_DESC
  isFulfilled_ASC
  isFulfilled_DESC
}

type ProductVariantWantPreviousValues {
  id: ID!
  isFulfilled: Boolean!
}

type ProductVariantWantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantWant
  updatedFields: [String!]
  previousValues: ProductVariantWantPreviousValues
}

input ProductVariantWantSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantWantSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantWantSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantWantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantWantWhereInput
}

input ProductVariantWantUpdateInput {
  isFulfilled: Boolean
  productVariant: ProductVariantUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
}

input ProductVariantWantUpdateManyMutationInput {
  isFulfilled: Boolean
}

input ProductVariantWantWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantWantWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantWantWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantWantWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  isFulfilled: Boolean

  """
  All values that are not equal to given value.
  """
  isFulfilled_not: Boolean
  productVariant: ProductVariantWhereInput
  user: UserWhereInput
}

input ProductVariantWantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductVariantWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductVariantWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductVariantWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  sku: String

  """
  All values that are not equal to given value.
  """
  sku_not: String

  """
  All values that are contained in given list.
  """
  sku_in: [String!]

  """
  All values that are not contained in given list.
  """
  sku_not_in: [String!]

  """
  All values less than the given value.
  """
  sku_lt: String

  """
  All values less than or equal the given value.
  """
  sku_lte: String

  """
  All values greater than the given value.
  """
  sku_gt: String

  """
  All values greater than or equal the given value.
  """
  sku_gte: String

  """
  All values containing the given string.
  """
  sku_contains: String

  """
  All values not containing the given string.
  """
  sku_not_contains: String

  """
  All values starting with the given string.
  """
  sku_starts_with: String

  """
  All values not starting with the given string.
  """
  sku_not_starts_with: String

  """
  All values ending with the given string.
  """
  sku_ends_with: String

  """
  All values not ending with the given string.
  """
  sku_not_ends_with: String
  weight: Float

  """
  All values that are not equal to given value.
  """
  weight_not: Float

  """
  All values that are contained in given list.
  """
  weight_in: [Float!]

  """
  All values that are not contained in given list.
  """
  weight_not_in: [Float!]

  """
  All values less than the given value.
  """
  weight_lt: Float

  """
  All values less than or equal the given value.
  """
  weight_lte: Float

  """
  All values greater than the given value.
  """
  weight_gt: Float

  """
  All values greater than or equal the given value.
  """
  weight_gte: Float
  height: Float

  """
  All values that are not equal to given value.
  """
  height_not: Float

  """
  All values that are contained in given list.
  """
  height_in: [Float!]

  """
  All values that are not contained in given list.
  """
  height_not_in: [Float!]

  """
  All values less than the given value.
  """
  height_lt: Float

  """
  All values less than or equal the given value.
  """
  height_lte: Float

  """
  All values greater than the given value.
  """
  height_gt: Float

  """
  All values greater than or equal the given value.
  """
  height_gte: Float
  productID: String

  """
  All values that are not equal to given value.
  """
  productID_not: String

  """
  All values that are contained in given list.
  """
  productID_in: [String!]

  """
  All values that are not contained in given list.
  """
  productID_not_in: [String!]

  """
  All values less than the given value.
  """
  productID_lt: String

  """
  All values less than or equal the given value.
  """
  productID_lte: String

  """
  All values greater than the given value.
  """
  productID_gt: String

  """
  All values greater than or equal the given value.
  """
  productID_gte: String

  """
  All values containing the given string.
  """
  productID_contains: String

  """
  All values not containing the given string.
  """
  productID_not_contains: String

  """
  All values starting with the given string.
  """
  productID_starts_with: String

  """
  All values not starting with the given string.
  """
  productID_not_starts_with: String

  """
  All values ending with the given string.
  """
  productID_ends_with: String

  """
  All values not ending with the given string.
  """
  productID_not_ends_with: String
  retailPrice: Float

  """
  All values that are not equal to given value.
  """
  retailPrice_not: Float
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  updatedAt_in: [DateTime!]
=======
  retailPrice_in: [Float!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  updatedAt_not_in: [DateTime!]
=======
  retailPrice_not_in: [Float!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  updatedAt_lt: DateTime
=======
  retailPrice_lt: Float
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
=======
e updatedAt: DateTime
  updatedAt_not: DateTime
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  updatedAt_lte: DateTime
=======
  retailPrice_lte: Float
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input PushNotificationReceiptWhereUniqueInput {
  id: ID
}

enum PushNotificationStatus {
  Blocked
  Granted
  Denied
}

type Query {
  brands(
    where: BrandWhereInput
    orderBy: BrandOrderByInput
    skip: Int
e   before: String
    first: Int
    last: Int
  ): [Brand]!
  collectionGroups(
    where: CollectionGroupWhereInput
    orderBy: CollectionGroupOrderByInput
    skip: Int
    after: String
<<<<<<< HEAD
    before: String
    first: Int
    last: Int
  ): [CollectionGroup]!
  homepageProductRails(
    where: HomepageProductRailWhereInput
    orderBy: HomepageProductRailOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [HomepageProductRail]!
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
=======
    before: Stringize
  bottomSizes(
    where: BottomSizeWhereInput
    orderBy: BottomSizeOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag]!
  productStatusChanges(
    where: ProductStatusChangeWhereInput
    orderBy: ProductStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductStatusChange]!
  productMaterialCategories(
    where: ProductMaterialCategoryWhereInput
    orderBy: ProductMaterialCategoryOrderByInput
    skip: Int
    after: String
    before: String
<<<<<<< HEAD
    first: Int
    last: Int
  ): [ProductMaterialCategory]!
  productModels(
    where: ProductModelWhereInput
    orderBy: ProductModelOrderByInput
=======
s   last: Int
  ): [Brand]!
  brandsConnection(
    where: BrandWhereInput
    orderBy: BrandOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductModel]!
  physicalProductInventoryStatusChanges(
    where: PhysicalProductInventoryStatusChangeWhereInput
    orderBy: PhysicalProductInventoryStatusChangeOrderByInput
    skip: Int
    after: String
<<<<<<< HEAD
    before: String
    first: Int
    last: Int
  ): [PhysicalProductInventoryStatusChange]!
  warehouseLocationConstraints(
    where: WarehouseLocationConstraintWhereInput
    orderBy: WarehouseLocationConstraintOrderByInput
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [WarehouseLocationConstraint]!
  warehouseLocations(
    where: WarehouseLocationWhereInput
    orderBy: WarehouseLocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [WarehouseLocation]!
  paymentPlans(
    where: PaymentPlanWhereInput
    orderBy: PaymentPlanOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PaymentPlan]!
  emailReceipts(
    where: EmailReceiptWhereInput
    orderBy: EmailReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [EmailReceipt]!
  bagItems(
    where: BagItemWhereInput
    orderBy: BagItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BagItem]!
  customerMemberships(
    where: CustomerMembershipWhereInput
    orderBy: CustomerMembershipOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CustomerMembership]!
  pauseRequests(
    where: PauseRequestWhereInput
    orderBy: PauseRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PauseRequest]!
  recentlyViewedProducts(
    where: RecentlyViewedProductWhereInput
    orderBy: RecentlyViewedProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RecentlyViewedProduct]!
  reservationFeedbacks(
    where: ReservationFeedbackWhereInput
    orderBy: ReservationFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ReservationFeedback]!
  productVariantFeedbacks(
    where: ProductVariantFeedbackWhereInput
    orderBy: ProductVariantFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantFeedback]!
  productVariantFeedbackQuestions(
    where: ProductVariantFeedbackQuestionWhereInput
    orderBy: ProductVariantFeedbackQuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantFeedbackQuestion]!
  reservationReceipts(
    where: ReservationReceiptWhereInput
    orderBy: ReservationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ReservationReceipt]!
  productRequests(
    where: ProductRequestWhereInput
    orderBy: ProductRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductRequest]!
  productVariantWants(
    where: ProductVariantWantWhereInput
    orderBy: ProductVariantWantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantWant]!
  collections(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Collection]!
  pushNotificationReceipts(
    where: PushNotificationReceiptWhereInput
    orderBy: PushNotificationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [PushNotificationReceipt]!
  customerDetails(
    where: CustomerDetailWhereInput
    orderBy: CustomerDetailOrderByInput
=======
<<<<<<< HEAD
  ): [HomepageProductRail]!
  homepageProductRailsConnection(
    where: HomepageProductRailWhereInput
    orderBy: HomepageProductRailOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [CustomerDetail]!
  userPushNotificationInterests(
    where: UserPushNotificationInterestWhereInput
    orderBy: UserPushNotificationInterestOrderByInput
=======
  ): HomepageProductRailConnection!
  image(where: ImageWhereUniqueInput!): Image
  images(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
=======
  ): [ReservationReceiptItem]!
  stylePreferenceses(
    where: StylePreferencesWhereInput
    orderBy: StylePreferencesOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [UserPushNotificationInterest]!
  billingInfoes(
    where: BillingInfoWhereInput
    orderBy: BillingInfoOrderByInput
=======
<<<<<<< HEAD
  ): [Image]!
  imagesConnection(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [BillingInfo]!
  reservationReceiptItems(
    where: ReservationReceiptItemWhereInput
    orderBy: ReservationReceiptItemOrderByInput
=======
  ): ImageConnection!
  label(where: LabelWhereUniqueInput!): Label
  labels(
    where: LabelWhereInput
    orderBy: LabelOrderByInput
=======
  ): [StylePreferences]!
  packages(
    where: PackageWhereInput
    orderBy: PackageOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ReservationReceiptItem]!
  smsReceipts(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [SmsReceipt]!
  stylePreferenceses(
    where: StylePreferencesWhereInput
    orderBy: StylePreferencesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [StylePreferences]!
  images(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
=======
<<<<<<< HEAD
  ): [Location]!
  locationsConnection(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
=======
  ): [ProductFunction]!
  styleSubmissions(
    where: StyleSubmissionWhereInput
    orderBy: StyleSubmissionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [StyleSubmission]!
  images(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Image]!
  colors(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Image]!
  packages(
    where: PackageWhereInput
    orderBy: PackageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Package]!
  sizes(
    where: SizeWhereInput
    orderBy: SizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Size]!
  productFunctions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction]!
  colors(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Color]!
  topSizes(
    where: TopSizeWhereInput
    orderBy: TopSizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [TopSize]!
  customers(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Customer]!
  userPushNotifications(
    where: UserPushNotificationWhereInput
    orderBy: UserPushNotificationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [UserPushNotification]!
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
=======
<<<<<<< HEAD
  ): [PaymentPlan]!
  paymentPlansConnection(
    where: PaymentPlanWhereInput
    orderBy: PaymentPlanOrderByInput
=======
  ): [Label]!
  smsReceipts(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [SmsReceipt]!
  locations(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!
  bottomSizes(
    where: BottomSizeWhereInput
    orderBy: BottomSizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BottomSize]!
  packageTransitEvents(
    where: PackageTransitEventWhereInput
    orderBy: PackageTransitEventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PackageTransitEvent]!
  labels(
    where: LabelWhereInput
    orderBy: LabelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Label]!
  locations(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Location]!
  physicalProducts(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct]!
  productVariants(
    where: ProductVariantWhereInput
    orderBy: ProductVariantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariant]!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product]!
  reservations(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Reservation]!
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  brand(where: BrandWhereUniqueInput!): Brand
  collectionGroup(where: CollectionGroupWhereUniqueInput!): CollectionGroup
  homepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  tag(where: TagWhereUniqueInput!): Tag
  productStatusChange(
    where: ProductStatusChangeWhereUniqueInput!
  ): ProductStatusChange
  productMaterialCategory(
    where: ProductMaterialCategoryWhereUniqueInput!
  ): ProductMaterialCategory
<<<<<<< HEAD
=======
<<<<<<< HEAD
  productMaterialCategories(
    where: ProductMaterialCategoryWhereInput
    orderBy: ProductMaterialCategoryOrderByInput
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  productModel(where: ProductModelWhereUniqueInput!): ProductModel
  physicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  ): PhysicalProductInventoryStatusChange
  warehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
  warehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  paymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  emailReceipt(where: EmailReceiptWhereUniqueInput!): EmailReceipt
<<<<<<< HEAD
=======
  styleSubmissionReport(
    where: StyleSubmissionReportWhereUniqueInput!
  ): StyleSubmissionReport
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  bagItem(where: BagItemWhereUniqueInput!): BagItem
  customerMembership(
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  pauseRequest(where: PauseRequestWhereUniqueInput!): PauseRequest
  recentlyViewedProduct(
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  reservationFeedback(
    where: ReservationFeedbackWhereUniqueInput!
  ): ReservationFeedback
  productVariantFeedback(
    where: ProductVariantFeedbackWhereUniqueInput!
  ): ProductVariantFeedback
  productVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
  ): ProductVariantFeedbackQuestion
  reservationReceipt(
    where: ReservationReceiptWhereUniqueInput!
  ): ReservationReceipt
  productRequest(where: ProductRequestWhereUniqueInput!): ProductRequest
  productVariantWant(
    where: ProductVariantWantWhereUniqueInput!
  ): ProductVariantWant
  collection(where: CollectionWhereUniqueInput!): Collection
  pushNotificationReceipt(
    where: PushNotificationReceiptWhereUniqueInput!
  ): PushNotificationReceipt
  customerDetail(where: CustomerDetailWhereUniqueInput!): CustomerDetail
  userPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  billingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  reservationReceiptItem(
    where: ReservationReceiptItemWhereUniqueInput!
  ): ReservationReceiptItem
<<<<<<< HEAD
  smsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  stylePreferences(where: StylePreferencesWhereUniqueInput!): StylePreferences
  image(where: ImageWhereUniqueInput!): Image
  package(where: PackageWhereUniqueInput!): Package
  size(where: SizeWhereUniqueInput!): Size
  productFunction(where: ProductFunctionWhereUniqueInput!): ProductFunction
=======
  stylePreferences(where: StylePreferencesWhereUniqueInput!): StylePreferences
  package(where: PackageWhereUniqueInput!): Package
  size(where: SizeWhereUniqueInput!): Size
  productFunction(where: ProductFunctionWhereUniqueInput!): ProductFunction
  styleSubmission(where: StyleSubmissionWhereUniqueInput!): StyleSubmission
  image(where: ImageWhereUniqueInput!): Image
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  color(where: ColorWhereUniqueInput!): Color
  topSize(where: TopSizeWhereUniqueInput!): TopSize
  customer(where: CustomerWhereUniqueInput!): Customer
  userPushNotification(
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  category(where: CategoryWhereUniqueInput!): Category
  bottomSize(where: BottomSizeWhereUniqueInput!): BottomSize
  packageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  label(where: LabelWhereUniqueInput!): Label
<<<<<<< HEAD
=======
  smsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  location(where: LocationWhereUniqueInput!): Location
  physicalProduct(where: PhysicalProductWhereUniqueInput!): PhysicalProduct
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  product(where: ProductWhereUniqueInput!): Product
  reservation(where: ReservationWhereUniqueInput!): Reservation
  user(where: UserWhereUniqueInput!): User
  brandsConnection(
    where: BrandWhereInput
    orderBy: BrandOrderByInput
<<<<<<< HEAD
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BrandConnection!
  collectionGroupsConnection(
    where: CollectionGroupWhereInput
    orderBy: CollectionGroupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CollectionGroupConnection!
  homepageProductRailsConnection(
    where: HomepageProductRailWhereInput
    orderBy: HomepageProductRailOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): HomepageProductRailConnection!
  tagsConnection(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TagConnection!
  productStatusChangesConnection(
    where: ProductStatusChangeWhereInput
    orderBy: ProductStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductStatusChangeConnection!
  productMaterialCategoriesConnection(
    where: ProductMaterialCategoryWhereInput
    orderBy: ProductMaterialCategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductMaterialCategoryConnection!
  productModelsConnection(
    where: ProductModelWhereInput
    orderBy: ProductModelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductModelConnection!
  physicalProductInventoryStatusChangesConnection(
    where: PhysicalProductInventoryStatusChangeWhereInput
    orderBy: PhysicalProductInventoryStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PhysicalProductInventoryStatusChangeConnection!
  warehouseLocationConstraintsConnection(
    where: WarehouseLocationConstraintWhereInput
    orderBy: WarehouseLocationConstraintOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): WarehouseLocationConstraintConnection!
  warehouseLocationsConnection(
    where: WarehouseLocationWhereInput
    orderBy: WarehouseLocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): WarehouseLocationConnection!
  paymentPlansConnection(
    where: PaymentPlanWhereInput
    orderBy: PaymentPlanOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PaymentPlanConnection!
  emailReceiptsConnection(
    where: EmailReceiptWhereInput
    orderBy: EmailReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): EmailReceiptConnection!
  bagItemsConnection(
    where: BagItemWhereInput
    orderBy: BagItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BagItemConnection!
  customerMembershipsConnection(
    where: CustomerMembershipWhereInput
    orderBy: CustomerMembershipOrderByInput
=======
<<<<<<< HEAD
  ): ProductVariantFeedbackConnection!
  productVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
  ): ProductVariantFeedbackQuestion
  productVariantFeedbackQuestions(
    where: ProductVariantFeedbackQuestionWhereInput
    orderBy: ProductVariantFeedbackQuestionOrderByInput
=======
a styleSubmissionReportsConnectiomodel
    first: Int
    last: Int
  ): [ProductVariantFeedbackQuestion]!
  productVariantFeedbackQuestionsConnection(
r   orderBy: ProductVariantFeedbackQuestionOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerMembershipConnection!
  pauseRequestsConnection(
    where: PauseRequestWhereInput
    orderBy: PauseRequestOrderByInput
    skip: Int
    after: String
<<<<<<< HEAD
    before: String
    first: Int
    last: Int
  ): PauseRequestConnection!
  recentlyViewedProductsConnection(
    where: RecentlyViewedProductWhereInput
    orderBy: RecentlyViewedProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RecentlyViewedProductConnection!
  reservationFeedbacksConnection(
    where: ReservationFeedbackWhereInput
    orderBy: ReservationFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ReservationFeedbackConnection!
  productVariantFeedbacksConnection(
    where: ProductVariantFeedbackWhereInput
    orderBy: ProductVariantFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductVariantFeedbackConnection!
  productVariantFeedbackQuestionsConnection(
    where: ProductVariantFeedbackQuestionWhereInput
    orderBy: ProductVariantFeedbackQuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductVariantFeedbackQuestionConnection!
  reservationReceiptsConnection(
    where: ReservationReceiptWhereInput
    orderBy: ReservationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ReservationReceiptConnection!
  productRequestsConnection(
    where: ProductRequestWhereInput
    orderBy: ProductRequestOrderByInput
    skip: Int
=======
    before: Stringi 
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    after: String
    before: String
    first: Int
    last: Int
  ): ProductRequestConnection!
  productVariantWantsConnection(
    where: ProductVariantWantWhereInput
    orderBy: ProductVariantWantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductVariantWantConnection!
  collectionsConnection(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
o   first: Int
    last: Int
<<<<<<< HEAD
  ): CollectionConnection!
  pushNotificationReceiptsConnection(
    where: PushNotificationReceiptWhereInput
    orderBy: PushNotificationReceiptOrderByInput
=======
    orderBy: ReservationFeedbackOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PushNotificationReceiptConnection!
  customerDetailsConnection(
    where: CustomerDetailWhereInput
    orderBy: CustomerDetailOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerDetailConnection!
  userPushNotificationInterestsConnection(
    where: UserPushNotificationInterestWhereInput
    orderBy: UserPushNotificationInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): UserPushNotificationInterestConnection!
  billingInfoesConnection(
    where: BillingInfoWhereInput
    orderBy: BillingInfoOrderByInput
    skip: Int
=======
  ): ReservationReceiptConnection!
  reservationReceiptItem(
    where: ReservationReceiptItemWhereUniqueInput!
  ): ReservationReceiptItem
  reservationReceiptItems(
    where: ReservationReceiptItemWhereInput
e   skip: Int
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    after: String
    before: String
    first: Int
    last: Int
  ): BillingInfoConnection!
  reservationReceiptItemsConnection(
    where: ReservationReceiptItemWhereInput
    orderBy: ReservationReceiptItemOrderByInput
    skip: Int
    after: String
<<<<<<< HEAD
    before: String
    first: Int
    last: Int
  ): ReservationReceiptItemConnection!
  smsReceiptsConnection(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): SmsReceiptConnection!
  stylePreferencesesConnection(
    where: StylePreferencesWhereInput
    orderBy: StylePreferencesOrderByInput
=======
    last: Int
  ): [Size]!
  sizesConnection(
    where: SizeWhereInput
    orderBy: SizeOrderByInput
=======
  stylePreferencesesConnection(
    where: StylePreferencesWhereInput
    orderBy: StylePreferencesOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): StylePreferencesConnection!
  imagesConnection(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
=======
<<<<<<< HEAD
  ): SizeConnection!
  smsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  smsReceipts(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
<<<<<<< HEAD
    last: Int
  ): ImageConnection!
  packagesConnection(
    where: PackageWhereInput
    orderBy: PackageOrderByInput
=======
t ): [SmsReceipt]!
  smsReceiptsConnection(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
=======
  ): StylePreferencesConnection!
  packagesConnection(
    where: PackageWhereInput
    orderBy: PackageOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): PackageConnection!
  sizesConnection(
    where: SizeWhereInput
    orderBy: SizeOrderByInput
=======
  ): SmsReceiptConnection!
  stylePreferences(where: StylePreferencesWhereUniqueInput!): StylePreferences
    orderBy: TagOrderByInput
=======
  ): ProductFunctionConnection!
  styleSubmissionsConnection(
    where: StyleSubmissionWhereInput
    orderBy: StyleSubmissionOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): SizeConnection!
  productFunctionsConnection(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
=======
  ): StyleSubmissionConnection!
  imagesConnection(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): ProductFunctionConnection!
  colorsConnection(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
=======
  ): ImageConnection!
  colorsConnection(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ColorConnection!
  topSizesConnection(
    where: TopSizeWhereInput
    orderBy: TopSizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TopSizeConnection!
  customersConnection(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerConnection!
  userPushNotificationsConnection(
    where: UserPushNotificationWhereInput
    orderBy: UserPushNotificationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserPushNotificationConnection!
  categoriesConnection(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CategoryConnection!
  bottomSizesConnection(
    where: BottomSizeWhereInput
    orderBy: BottomSizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BottomSizeConnection!
  packageTransitEventsConnection(
    where: PackageTransitEventWhereInput
    orderBy: PackageTransitEventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PackageTransitEventConnection!
  labelsConnection(
    where: LabelWhereInput
    orderBy: LabelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): LabelConnection!
  locationsConnection(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
=======
<<<<<<< HEAD
  ): UserPushNotificationConnection!
  userPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  userPushNotificationInterests(
    where: UserPushNotificationInterestWhereInput
    orderBy: UserPushNotificationInterestOrderByInput
=======
  ): LabelConnection!
  smsReceiptsConnection(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): LocationConnection!
  physicalProductsConnection(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PhysicalProductConnection!
  productVariantsConnection(
    where: ProductVariantWhereInput
    orderBy: ProductVariantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductVariantConnection!
  productsConnection(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection!
  reservationsConnection(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
=======
  ): SmsReceiptConnection!
  locationsConnection(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): ReservationConnection!
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
=======
  ): [UserPushNotificationInterest]!
  userPushNotificationInterestsConnection(
    where: UserPushNotificationInterestWhereInput
    orderBy: UserPushNotificationInterestOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): UserConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

enum QuestionType {
  MultipleChoice
  FreeResponse
}

enum Rating {
  Disliked
  Ok
  Loved
}

type RecentlyViewedProduct implements Node {
  id: ID!
  product: Product!
  customer: Customer!
  viewCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type RecentlyViewedProductConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RecentlyViewedProductEdge]!
  aggregate: AggregateRecentlyViewedProduct!
}

input RecentlyViewedProductCreateInput {
  id: ID
  viewCount: Int
  product: ProductCreateOneInput!
  customer: CustomerCreateOneInput!
}

"""
An edge in a connection.
"""
type RecentlyViewedProductEdge {
  """
  The item at the end of the edge.
  """
  node: RecentlyViewedProduct!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RecentlyViewedProductOrderByInput {
  id_ASC
  id_DESC
  viewCount_ASC
  viewCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecentlyViewedProductPreviousValues {
  id: ID!
  viewCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RecentlyViewedProductSubscriptionPayload {
  mutation: MutationType!
  node: RecentlyViewedProduct
  updatedFields: [String!]
  previousValues: RecentlyViewedProductPreviousValues
}

input RecentlyViewedProductSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RecentlyViewedProductSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RecentlyViewedProductSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RecentlyViewedProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecentlyViewedProductWhereInput
}

input RecentlyViewedProductUpdateInput {
  viewCount: Int
  product: ProductUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredInput
}

input RecentlyViewedProductUpdateManyMutationInput {
  viewCount: Int
}

input RecentlyViewedProductWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RecentlyViewedProductWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [RecentlyViewedProductWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [RecentlyViewedProductWhereInput!]
  id: ID

  """
=======
  retailPrice_gt: Float

  """
  All values greater than or equal the given value.
  """
  retailPrice_gte: Float
  total: Int

  """
  All values that are not equal to given value.
  """
  total_not: Int

  """
  All values that are contained in given list.
  """
  total_in: [Int!]

  """
  All values that are not contained in given list.
  """
  total_not_in: [Int!]

  """
  All values less than the given value.
  """
  total_lt: Int

  """
  All values less than or equal the given value.
  """
  total_lte: Int

  """
  All values greater than the given value.
  """
  total_gt: Int

  """
  All values greater than or equal the given value.
  """
  total_gte: Int
  reservable: Int

  """
  All values that are not equal to given value.
  """
  reservable_not: Int

  """
  All values that are contained in given list.
  """
  reservable_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reservable_not_in: [Int!]

  """
  All values less than the given value.
  """
  reservable_lt: Int

  """
  All values less than or equal the given value.
  """
  reservable_lte: Int

  """
  All values greater than the given value.
  """
  reservable_gt: Int

  """
  All values greater than or equal the given value.
  """
  reservable_gte: Int
  reserved: Int

  """
  All values that are not equal to given value.
  """
  reserved_not: Int

  """
  All values that are contained in given list.
  """
  reserved_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reserved_not_in: [Int!]

  """
  All values less than the given value.
  """
  reserved_lt: Int

  """
  All values less than or equal the given value.
  """
  reserved_lte: Int

  """
  All values greater than the given value.
  """
  reserved_gt: Int

  """
  All values greater than or equal the given value.
  """
  reserved_gte: Int
  nonReservable: Int

  """
  All values that are not equal to given value.
  """
  nonReservable_not: Int

  """
  All values that are contained in given list.
  """
  nonReservable_in: [Int!]

  """
  All values that are not contained in given list.
  """
  nonReservable_not_in: [Int!]

  """
  All values less than the given value.
  """
  nonReservable_lt: Int

  """
  All values less than or equal the given value.
  """
  nonReservable_lte: Int

  """
  All values greater than the given value.
  """
  nonReservable_gt: Int

  """
  All values greater than or equal the given value.
  """
  nonReservable_gte: Int
  offloaded: Int

  """
  All values that are not equal to given value.
  """
  offloaded_not: Int

  """
  All values that are contained in given list.
  """
  offloaded_in: [Int!]

  """
  All values that are not contained in given list.
  """
  offloaded_not_in: [Int!]

  """
  All values less than the given value.
  """
  offloaded_lt: Int

  """
  All values less than or equal the given value.
  """
  offloaded_lte: Int

  """
  All values greater than the given value.
  """
  offloaded_gt: Int

  """
  All values greater than or equal the given value.
  """
  offloaded_gte: Int
  stored: Int

  """
  All values that are not equal to given value.
  """
  stored_not: Int

  """
  All values that are contained in given list.
  """
  stored_in: [Int!]

  """
  All values that are not contained in given list.
  """
  stored_not_in: [Int!]

  """
  All values less than the given value.
  """
  stored_lt: Int

  """
  All values less than or equal the given value.
  """
  stored_lte: Int

  """
  All values greater than the given value.
  """
  stored_gt: Int

  """
  All values greater than or equal the given value.
  """
  stored_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  color: ColorWhereInput
  internalSize: SizeWhereInput
  manufacturerSizes_every: SizeWhereInput
  manufacturerSizes_some: SizeWhereInput
  manufacturerSizes_none: SizeWhereInput
  product: ProductWhereInput
  physicalProducts_every: PhysicalProductWhereInput
  physicalProducts_some: PhysicalProductWhereInput
  physicalProducts_none: PhysicalProductWhereInput
}

input ProductVariantWhereUniqueInput {
  id: ID
  sku: String
}

input ProductWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ProductWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ProductWhereInput!]
  id: ID

  """
>>>>>>> Rebase
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
<<<<<<< HEAD
  viewCount: Int
=======
  slug: String
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  viewCount_not: Int
=======
  slug_not: String
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  viewCount_in: [Int!]
=======
  slug_in: [String!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  viewCount_not_in: [Int!]
=======
  slug_not_in: [String!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  viewCount_lt: Int
=======
  slug_lt: String
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  viewCount_lte: Int
=======
  slug_lte: String
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  viewCount_gt: Int
=======
  slug_gt: String
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  viewCount_gte: Int
  createdAt: DateTime
=======
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  name: String
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  createdAt_not: DateTime
=======
  name_not: String
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  createdAt_in: [DateTime!]
=======
  name_in: [String!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  createdAt_not_in: [DateTime!]
=======
  name_not_in: [String!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  createdAt_lt: DateTime
=======
  name_lt: String
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  createdAt_lte: DateTime
=======
  name_lte: String
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  createdAt_gt: DateTime
=======
  name_gt: String
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  createdAt_gte: DateTime
  updatedAt: DateTime
=======
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  type: ProductType

  """
  All values that are not equal to given value.
  """
  type_not: ProductType

  """
  All values that are contained in given list.
  """
  type_in: [ProductType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [ProductType!]
  description: String
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  updatedAt_not: DateTime
=======
  description_not: String
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  updatedAt_in: [DateTime!]
=======
  description_in: [String!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  updatedAt_not_in: [DateTime!]
=======
  description_not_in: [String!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  updatedAt_lt: DateTime
=======
  description_lt: String
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  updatedAt_lte: DateTime
=======
  description_lte: String
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  updatedAt_gt: DateTime
=======
  description_gt: String
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  updatedAt_gte: DateTime
  product: ProductWhereInput
  customer: CustomerWhereInput
}

input RecentlyViewedProductWhereUniqueInput {
  id: ID
}

type Reservation implements Node {
  id: ID!
  user: User!
  customer: Customer!
  sentPackage: Package
  returnedPackage: Package
  products(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
=======
  ): UserPushNotificationInterestConnection!
  warehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  warehouseLocations(
    where: WarehouseLocationWhereInput
    orderBy: WarehouseLocationOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [PhysicalProduct!]
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  receipt: ReservationReceipt
  lastLocation: Location
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type ReservationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ReservationEdge]!
  aggregate: AggregateReservation!
}

input ReservationCreateInput {
  id: ID
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
}

input ReservationCreateManyWithoutCustomerInput {
  create: [ReservationCreateWithoutCustomerInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReservationCreateOneInput {
  create: ReservationCreateInput
  connect: ReservationWhereUniqueInput
}

input ReservationCreateOneWithoutReceiptInput {
  create: ReservationCreateWithoutReceiptInput
  connect: ReservationWhereUniqueInput
}

input ReservationCreateWithoutCustomerInput {
  id: ID
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserCreateOneInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
}

input ReservationCreateWithoutReceiptInput {
  id: ID
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  lastLocation: LocationCreateOneInput
}

"""
An edge in a connection.
"""
type ReservationEdge {
  """
  The item at the end of the edge.
  """
  node: Reservation!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type ReservationFeedback implements Node {
  id: ID!
  comment: String
  feedbacks(
    where: ProductVariantFeedbackWhereInput
    orderBy: ProductVariantFeedbackOrderByInput
=======
  ): [WarehouseLocation]!
  warehouseLocationsConnection(
    where: WarehouseLocationWhereInput
    orderBy: WarehouseLocationOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [ProductVariantFeedback!]
  rating: Rating
  user: User!
  reservation: Reservation!
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
}

"""
A connection to a list of items.
"""
type ReservationFeedbackConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ReservationFeedbackEdge]!
  aggregate: AggregateReservationFeedback!
}

input ReservationFeedbackCreateInput {
  id: ID
  comment: String
  rating: Rating
  respondedAt: DateTime
  feedbacks: ProductVariantFeedbackCreateManyWithoutReservationFeedbackInput
  user: UserCreateOneInput!
  reservation: ReservationCreateOneInput!
}

input ReservationFeedbackCreateOneWithoutFeedbacksInput {
  create: ReservationFeedbackCreateWithoutFeedbacksInput
  connect: ReservationFeedbackWhereUniqueInput
}

input ReservationFeedbackCreateWithoutFeedbacksInput {
  id: ID
  comment: String
  rating: Rating
  respondedAt: DateTime
  user: UserCreateOneInput!
  reservation: ReservationCreateOneInput!
}

"""
An edge in a connection.
"""
type ReservationFeedbackEdge {
  """
  The item at the end of the edge.
  """
  node: ReservationFeedback!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ReservationFeedbackOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  respondedAt_ASC
  respondedAt_DESC
}

type ReservationFeedbackPreviousValues {
  id: ID!
  comment: String
  rating: Rating
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
}

type ReservationFeedbackSubscriptionPayload {
  mutation: MutationType!
  node: ReservationFeedback
  updatedFields: [String!]
  previousValues: ReservationFeedbackPreviousValues
}

input ReservationFeedbackSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationFeedbackSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationFeedbackSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationFeedbackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReservationFeedbackWhereInput
}

input ReservationFeedbackUpdateInput {
  comment: String
  rating: Rating
  respondedAt: DateTime
  feedbacks: ProductVariantFeedbackUpdateManyWithoutReservationFeedbackInput
  user: UserUpdateOneRequiredInput
  reservation: ReservationUpdateOneRequiredInput
}

input ReservationFeedbackUpdateManyMutationInput {
  comment: String
  rating: Rating
  respondedAt: DateTime
}

input ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput {
  create: ReservationFeedbackCreateWithoutFeedbacksInput
  connect: ReservationFeedbackWhereUniqueInput
  update: ReservationFeedbackUpdateWithoutFeedbacksDataInput
  upsert: ReservationFeedbackUpsertWithoutFeedbacksInput
}

input ReservationFeedbackUpdateWithoutFeedbacksDataInput {
  comment: String
  rating: Rating
  respondedAt: DateTime
  user: UserUpdateOneRequiredInput
  reservation: ReservationUpdateOneRequiredInput
}

input ReservationFeedbackUpsertWithoutFeedbacksInput {
  update: ReservationFeedbackUpdateWithoutFeedbacksDataInput!
  create: ReservationFeedbackCreateWithoutFeedbacksInput!
}

input ReservationFeedbackWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationFeedbackWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationFeedbackWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationFeedbackWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  comment: String

  """
  All values that are not equal to given value.
  """
  comment_not: String

  """
  All values that are contained in given list.
  """
  comment_in: [String!]

  """
  All values that are not contained in given list.
  """
  comment_not_in: [String!]

  """
  All values less than the given value.
  """
  comment_lt: String

  """
  All values less than or equal the given value.
  """
  comment_lte: String

  """
  All values greater than the given value.
  """
  comment_gt: String

  """
  All values greater than or equal the given value.
  """
  comment_gte: String

  """
  All values containing the given string.
  """
  comment_contains: String

  """
  All values not containing the given string.
  """
  comment_not_contains: String

  """
  All values starting with the given string.
  """
  comment_starts_with: String

  """
  All values not starting with the given string.
  """
  comment_not_starts_with: String

  """
  All values ending with the given string.
  """
  comment_ends_with: String

  """
  All values not ending with the given string.
  """
  comment_not_ends_with: String
  rating: Rating

  """
  All values that are not equal to given value.
  """
  rating_not: Rating

  """
  All values that are contained in given list.
  """
  rating_in: [Rating!]

  """
  All values that are not contained in given list.
  """
  rating_not_in: [Rating!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  respondedAt: DateTime

  """
  All values that are not equal to given value.
  """
  respondedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  respondedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  respondedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  respondedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  respondedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  respondedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  respondedAt_gte: DateTime
  feedbacks_every: ProductVariantFeedbackWhereInput
  feedbacks_some: ProductVariantFeedbackWhereInput
  feedbacks_none: ProductVariantFeedbackWhereInput
  user: UserWhereInput
  reservation: ReservationWhereInput
}

input ReservationFeedbackWhereUniqueInput {
  id: ID
}

enum ReservationOrderByInput {
  id_ASC
  id_DESC
  reservationNumber_ASC
  reservationNumber_DESC
  phase_ASC
  phase_DESC
  shipped_ASC
  shipped_DESC
  status_ASC
  status_DESC
  shippedAt_ASC
  shippedAt_DESC
  receivedAt_ASC
  receivedAt_DESC
  reminderSentAt_ASC
  reminderSentAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum ReservationPhase {
  BusinessToCustomer
  CustomerToBusiness
}

type ReservationPreviousValues {
  id: ID!
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReservationReceipt implements Node {
  id: ID!
  reservation: Reservation!
  items(
    where: ReservationReceiptItemWhereInput
    orderBy: ReservationReceiptItemOrderByInput
=======
  ): WarehouseLocationConnection!
  warehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
  warehouseLocationConstraints(
    where: WarehouseLocationConstraintWhereInput
    orderBy: WarehouseLocationConstraintOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [WarehouseLocationConstraint]!
  warehouseLocationConstraintsConnection(
    where: WarehouseLocationConstraintWhereInput
    orderBy: WarehouseLocationConstraintOrderByInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
<<<<<<< HEAD
  ): [ReservationReceiptItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type ReservationReceiptConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ReservationReceiptEdge]!
  aggregate: AggregateReservationReceipt!
}

input ReservationReceiptCreateInput {
  id: ID
  reservation: ReservationCreateOneWithoutReceiptInput!
  items: ReservationReceiptItemCreateManyInput
}

input ReservationReceiptCreateOneWithoutReservationInput {
  create: ReservationReceiptCreateWithoutReservationInput
  connect: ReservationReceiptWhereUniqueInput
=======
  ): WarehouseLocationConstraintConnection!
  node(id: ID!): Node
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

enum QuestionType {
  MultipleChoice
  FreeResponse
}

<<<<<<< HEAD
"""
An edge in a connection.
"""
type ReservationReceiptEdge {
  """
  The item at the end of the edge.
  """
  node: ReservationReceipt!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type ReservationReceiptItem implements Node {
=======
enum Rating {
  Disliked
  Ok
  Loved
}

type RecentlyViewedProduct {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID!
  product: Product!
  customer: Customer!
  viewCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

<<<<<<< HEAD
"""
A connection to a list of items.
"""
type ReservationReceiptItemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ReservationReceiptItemEdge]!
  aggregate: AggregateReservationReceiptItem!
=======
type RecentlyViewedProductConnection {
  pageInfo: PageInfo!
  edges: [RecentlyViewedProductEdge]!
  aggregate: AggregateRecentlyViewedProduct!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input RecentlyViewedProductCreateInput {
  id: ID
<<<<<<< HEAD
  productStatus: PhysicalProductStatus!
  notes: String
  product: PhysicalProductCreateOneInput!
}

input ReservationReceiptItemCreateManyInput {
  create: [ReservationReceiptItemCreateInput!]
  connect: [ReservationReceiptItemWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type ReservationReceiptItemEdge {
  """
  The item at the end of the edge.
  """
  node: ReservationReceiptItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ReservationReceiptItemOrderByInput {
  id_ASC
  id_DESC
  productStatus_ASC
  productStatus_DESC
  notes_ASC
  notes_DESC
}

type ReservationReceiptItemPreviousValues {
  id: ID!
  productStatus: PhysicalProductStatus!
  notes: String
}

input ReservationReceiptItemScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptItemScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptItemScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptItemScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  productStatus: PhysicalProductStatus

  """
  All values that are not equal to given value.
  """
  productStatus_not: PhysicalProductStatus

  """
  All values that are contained in given list.
  """
  productStatus_in: [PhysicalProductStatus!]
=======
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  externalURL: String

  """
  All values that are not equal to given value.
  """
  externalURL_not: String

  """
  All values that are contained in given list.
  """
  externalURL_in: [String!]

  """
  All values that are not contained in given list.
  """
  externalURL_not_in: [String!]

  """
  All values less than the given value.
  """
  externalURL_lt: String

  """
  All values less than or equal the given value.
  """
  externalURL_lte: String

  """
  All values greater than the given value.
  """
  externalURL_gt: String

  """
  All values greater than or equal the given value.
  """
  externalURL_gte: String

  """
  All values containing the given string.
  """
  externalURL_contains: String

  """
  All values not containing the given string.
  """
  externalURL_not_contains: String

  """
  All values starting with the given string.
  """
  externalURL_starts_with: String

  """
  All values not starting with the given string.
  """
  externalURL_not_starts_with: String

  """
  All values ending with the given string.
  """
  externalURL_ends_with: String

  """
  All values not ending with the given string.
  """
  externalURL_not_ends_with: String
  modelHeight: Int

  """
  All values that are not equal to given value.
  """
  modelHeight_not: Int

  """
  All values that are contained in given list.
  """
  modelHeight_in: [Int!]

  """
  All values that are not contained in given list.
  """
  modelHeight_not_in: [Int!]

  """
  All values less than the given value.
  """
  modelHeight_lt: Int

  """
  All values less than or equal the given value.
  """
  modelHeight_lte: Int

  """
  All values greater than the given value.
  """
  modelHeight_gt: Int

  """
  All values greater than or equal the given value.
  """
  modelHeight_gte: Int
  retailPrice: Int

  """
  All values that are not equal to given value.
  """
  retailPrice_not: Int

  """
  All values that are contained in given list.
  """
  retailPrice_in: [Int!]

  """
  All values that are not contained in given list.
  """
  retailPrice_not_in: [Int!]

  """
  All values less than the given value.
  """
  retailPrice_lt: Int

  """
  All values less than or equal the given value.
  """
  retailPrice_lte: Int

  """
  All values greater than the given value.
  """
  retailPrice_gt: Int

  """
  All values greater than or equal the given value.
  """
  retailPrice_gte: Int
  status: ProductStatus

  """
  All values that are not equal to given value.
  """
  status_not: ProductStatus

  """
  All values that are contained in given list.
  """
  status_in: [ProductStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [ProductStatus!]
  season: String

  """
  All values that are not equal to given value.
  """
  season_not: String

  """
  All values that are contained in given list.
  """
  season_in: [String!]

  """
  All values that are not contained in given list.
  """
  season_not_in: [String!]

  """
  All values less than the given value.
  """
  season_lt: String

  """
  All values less than or equal the given value.
  """
  season_lte: String

  """
  All values greater than the given value.
  """
  season_gt: String

  """
  All values greater than or equal the given value.
  """
  season_gte: String

  """
  All values containing the given string.
  """
  season_contains: String

  """
  All values not containing the given string.
  """
  season_not_contains: String

  """
  All values starting with the given string.
  """
  season_starts_with: String

  """
  All values not starting with the given string.
  """
  season_not_starts_with: String

  """
  All values ending with the given string.
  """
  season_ends_with: String

  """
  All values not ending with the given string.
  """
  season_not_ends_with: String
  architecture: ProductArchitecture

  """
  All values that are not equal to given value.
  """
  architecture_not: ProductArchitecture

  """
  All values that are contained in given list.
  """
  architecture_in: [ProductArchitecture!]

  """
  All values that are not contained in given list.
  """
  architecture_not_in: [ProductArchitecture!]
  photographyStatus: PhotographyStatus

  """
  All values that are not equal to given value.
  """
  photographyStatus_not: PhotographyStatus

  """
  All values that are contained in given list.
  """
  photographyStatus_in: [PhotographyStatus!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  productStatus_not_in: [PhysicalProductStatus!]
  notes: String
=======
  photographyStatus_not_in: [PhotographyStatus!]
  publishedAt: DateTime
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  notes_not: String
=======
  publishedAt_not: DateTime
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  notes_in: [String!]
=======
  publishedAt_in: [DateTime!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  notes_not_in: [String!]
=======
  publishedAt_not_in: [DateTime!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  notes_lt: String
=======
  publishedAt_lt: DateTime
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  notes_lte: String
=======
  publishedAt_lte: DateTime
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  notes_gt: String
=======
  publishedAt_gt: DateTime
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  notes_gte: String

  """
  All values containing the given string.
  """
  notes_contains: String

  """
  All values not containing the given string.
  """
  notes_not_contains: String

  """
  All values starting with the given string.
  """
  notes_starts_with: String

  """
  All values not starting with the given string.
  """
  notes_not_starts_with: String

  """
  All values ending with the given string.
  """
  notes_ends_with: String

  """
  All values not ending with the given string.
  """
  notes_not_ends_with: String
}

type ReservationReceiptItemSubscriptionPayload {
  mutation: MutationType!
  node: ReservationReceiptItem
  updatedFields: [String!]
  previousValues: ReservationReceiptItemPreviousValues
}

input ReservationReceiptItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptItemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptItemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReservationReceiptItemWhereInput
}

input ReservationReceiptItemUpdateDataInput {
  productStatus: PhysicalProductStatus
  notes: String
  product: PhysicalProductUpdateOneRequiredInput
}

input ReservationReceiptItemUpdateInput {
  productStatus: PhysicalProductStatus
  notes: String
  product: PhysicalProductUpdateOneRequiredInput
}

input ReservationReceiptItemUpdateManyDataInput {
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateManyInput {
  create: [ReservationReceiptItemCreateInput!]
  connect: [ReservationReceiptItemWhereUniqueInput!]
  set: [ReservationReceiptItemWhereUniqueInput!]
  disconnect: [ReservationReceiptItemWhereUniqueInput!]
  delete: [ReservationReceiptItemWhereUniqueInput!]
  update: [ReservationReceiptItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [ReservationReceiptItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ReservationReceiptItemScalarWhereInput!]
  upsert: [ReservationReceiptItemUpsertWithWhereUniqueNestedInput!]
}

input ReservationReceiptItemUpdateManyMutationInput {
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateManyWithWhereNestedInput {
  where: ReservationReceiptItemScalarWhereInput!
  data: ReservationReceiptItemUpdateManyDataInput!
}

input ReservationReceiptItemUpdateWithWhereUniqueNestedInput {
  where: ReservationReceiptItemWhereUniqueInput!
  data: ReservationReceiptItemUpdateDataInput!
}

input ReservationReceiptItemUpsertWithWhereUniqueNestedInput {
  where: ReservationReceiptItemWhereUniqueInput!
  update: ReservationReceiptItemUpdateDataInput!
  create: ReservationReceiptItemCreateInput!
}

input ReservationReceiptItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptItemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptItemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptItemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  productStatus: PhysicalProductStatus

  """
  All values that are not equal to given value.
  """
  productStatus_not: PhysicalProductStatus

  """
  All values that are contained in given list.
  """
  productStatus_in: [PhysicalProductStatus!]

  """
  All values that are not contained in given list.
  """
  productStatus_not_in: [PhysicalProductStatus!]
  notes: String

  """
  All values that are not equal to given value.
  """
  notes_not: String

  """
  All values that are contained in given list.
  """
  notes_in: [String!]

  """
  All values that are not contained in given list.
  """
  notes_not_in: [String!]

  """
  All values less than the given value.
  """
  notes_lt: String

  """
  All values less than or equal the given value.
  """
  notes_lte: String

  """
  All values greater than the given value.
  """
  notes_gt: String

  """
  All values greater than or equal the given value.
  """
  notes_gte: String

  """
  All values containing the given string.
  """
  notes_contains: String

  """
  All values not containing the given string.
  """
  notes_not_contains: String

  """
  All values starting with the given string.
  """
  notes_starts_with: String

  """
  All values not starting with the given string.
  """
  notes_not_starts_with: String

  """
  All values ending with the given string.
  """
  notes_ends_with: String

  """
  All values not ending with the given string.
  """
  notes_not_ends_with: String
  product: PhysicalProductWhereInput
}

input ReservationReceiptItemWhereUniqueInput {
  id: ID
}

enum ReservationReceiptOrderByInput {
=======
  product: ProductCreateOneInput!
  customer: CustomerCreateOneInput!
  viewCount: Int
}

type RecentlyViewedProductEdge {
  node: RecentlyViewedProduct!
  cursor: String!
}

enum RecentlyViewedProductOrderByInput {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id_ASC
  id_DESC
  viewCount_ASC
  viewCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecentlyViewedProductPreviousValues {
  id: ID!
  viewCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RecentlyViewedProductSubscriptionPayload {
  mutation: MutationType!
  node: RecentlyViewedProduct
  updatedFields: [String!]
  previousValues: RecentlyViewedProductPreviousValues
}

<<<<<<< HEAD
input ReservationReceiptSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
=======
input RecentlyViewedProductSubscriptionWhereInput {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
<<<<<<< HEAD
  node: ReservationReceiptWhereInput
}

input ReservationReceiptUpdateInput {
  reservation: ReservationUpdateOneRequiredWithoutReceiptInput
  items: ReservationReceiptItemUpdateManyInput
}

input ReservationReceiptUpdateOneWithoutReservationInput {
  create: ReservationReceiptCreateWithoutReservationInput
  connect: ReservationReceiptWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ReservationReceiptUpdateWithoutReservationDataInput
  upsert: ReservationReceiptUpsertWithoutReservationInput
=======
  node: RecentlyViewedProductWhereInput
  AND: [RecentlyViewedProductSubscriptionWhereInput!]
  OR: [RecentlyViewedProductSubscriptionWhereInput!]
  NOT: [RecentlyViewedProductSubscriptionWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input RecentlyViewedProductUpdateInput {
  product: ProductUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredInput
  viewCount: Int
}

input RecentlyViewedProductUpdateManyMutationInput {
  viewCount: Int
}

<<<<<<< HEAD
input ReservationReceiptWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptWhereInput!]
=======
input RecentlyViewedProductWhereInput {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
<<<<<<< HEAD
=======
  product: ProductWhereInput
  customer: CustomerWhereInput
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
<<<<<<< HEAD
  reservation: ReservationWhereInput
  items_every: ReservationReceiptItemWhereInput
  items_some: ReservationReceiptItemWhereInput
  items_none: ReservationReceiptItemWhereInput
=======
  AND: [RecentlyViewedProductWhereInput!]
  OR: [RecentlyViewedProductWhereInput!]
  NOT: [RecentlyViewedProductWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input RecentlyViewedProductWhereUniqueInput {
  id: ID
}

<<<<<<< HEAD
input ReservationScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  reservationNumber: Int

  """
  All values that are not equal to given value.
  """
  reservationNumber_not: Int

  """
  All values that are contained in given list.
  """
  reservationNumber_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reservationNumber_not_in: [Int!]

  """
  All values less than the given value.
  """
  reservationNumber_lt: Int

  """
  All values less than or equal the given value.
  """
  reservationNumber_lte: Int

  """
  All values greater than the given value.
  """
  reservationNumber_gt: Int

  """
  All values greater than or equal the given value.
  """
  reservationNumber_gte: Int
  phase: ReservationPhase

  """
  All values that are not equal to given value.
  """
  phase_not: ReservationPhase

  """
  All values that are contained in given list.
  """
  phase_in: [ReservationPhase!]

  """
  All values that are not contained in given list.
  """
  phase_not_in: [ReservationPhase!]
  shipped: Boolean

  """
  All values that are not equal to given value.
  """
  shipped_not: Boolean
  status: ReservationStatus

  """
  All values that are not equal to given value.
  """
  status_not: ReservationStatus

  """
  All values that are contained in given list.
  """
  status_in: [ReservationStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [ReservationStatus!]
  shippedAt: DateTime

  """
  All values that are not equal to given value.
  """
  shippedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  shippedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  shippedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  shippedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  shippedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  shippedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  shippedAt_gte: DateTime
  receivedAt: DateTime

  """
  All values that are not equal to given value.
  """
  receivedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  receivedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  receivedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  receivedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  receivedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  receivedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  receivedAt_gte: DateTime
  reminderSentAt: DateTime

  """
  All values that are not equal to given value.
  """
  reminderSentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  reminderSentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  reminderSentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  reminderSentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  reminderSentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  reminderSentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  reminderSentAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
=======
type Reservation {
  id: ID!
  user: User!
  customer: Customer!
  sentPackage: Package
  returnedPackage: Package
  products(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  receipt: ReservationReceipt
  lastLocation: Location
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReservationConnection {
  pageInfo: PageInfo!
  edges: [ReservationEdge]!
  aggregate: AggregateReservation!
}

input ReservationCreateInput {
  id: ID
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationCreateManyWithoutCustomerInput {
  create: [ReservationCreateWithoutCustomerInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReservationCreateOneInput {
  create: ReservationCreateInput
  connect: ReservationWhereUniqueInput
}

<<<<<<< HEAD
input ReservationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReservationWhereInput
}

input ReservationUpdateDataInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
}

input ReservationUpdateInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
=======
input ReservationCreateOneWithoutReceiptInput {
  create: ReservationCreateWithoutReceiptInput
  connect: ReservationWhereUniqueInput
}

input ReservationCreateWithoutCustomerInput {
  id: ID
  user: UserCreateOneInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
}

input ReservationCreateWithoutReceiptInput {
  id: ID
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  lastLocation: LocationCreateOneInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

type ReservationEdge {
  node: Reservation!
  cursor: String!
}

type ReservationFeedback {
  id: ID!
  comment: String
  feedbacks(
    where: ProductVariantFeedbackWhereInput
    orderBy: ProductVariantFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantFeedback!]
  rating: Rating
  user: User!
  reservation: Reservation!
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
}

<<<<<<< HEAD
input ReservationUpdateManyWithoutCustomerInput {
  create: [ReservationCreateWithoutCustomerInput!]
  connect: [ReservationWhereUniqueInput!]
  set: [ReservationWhereUniqueInput!]
  disconnect: [ReservationWhereUniqueInput!]
  delete: [ReservationWhereUniqueInput!]
  update: [ReservationUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ReservationUpdateManyWithWhereNestedInput!]
  deleteMany: [ReservationScalarWhereInput!]
  upsert: [ReservationUpsertWithWhereUniqueWithoutCustomerInput!]
=======
type ReservationFeedbackConnection {
  pageInfo: PageInfo!
  edges: [ReservationFeedbackEdge]!
  aggregate: AggregateReservationFeedback!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationFeedbackCreateInput {
  id: ID
  comment: String
  feedbacks: ProductVariantFeedbackCreateManyWithoutReservationFeedbackInput
  rating: Rating
  user: UserCreateOneInput!
  reservation: ReservationCreateOneInput!
  respondedAt: DateTime
}

<<<<<<< HEAD
input ReservationUpdateOneRequiredInput {
  create: ReservationCreateInput
  connect: ReservationWhereUniqueInput
  update: ReservationUpdateDataInput
  upsert: ReservationUpsertNestedInput
}

input ReservationUpdateOneRequiredWithoutReceiptInput {
  create: ReservationCreateWithoutReceiptInput
  connect: ReservationWhereUniqueInput
  update: ReservationUpdateWithoutReceiptDataInput
  upsert: ReservationUpsertWithoutReceiptInput
}

input ReservationUpdateWithoutCustomerDataInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserUpdateOneRequiredInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
}

input ReservationUpdateWithoutReceiptDataInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  lastLocation: LocationUpdateOneInput
=======
input ReservationFeedbackCreateOneWithoutFeedbacksInput {
  create: ReservationFeedbackCreateWithoutFeedbacksInput
  connect: ReservationFeedbackWhereUniqueInput
}

input ReservationFeedbackCreateWithoutFeedbacksInput {
  id: ID
  comment: String
  rating: Rating
  user: UserCreateOneInput!
  reservation: ReservationCreateOneInput!
  respondedAt: DateTime
}

type ReservationFeedbackEdge {
  node: ReservationFeedback!
  cursor: String!
}

enum ReservationFeedbackOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  respondedAt_ASC
  respondedAt_DESC
}

type ReservationFeedbackPreviousValues {
  id: ID!
  comment: String
  rating: Rating
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
}

type ReservationFeedbackSubscriptionPayload {
  mutation: MutationType!
  node: ReservationFeedback
  updatedFields: [String!]
  previousValues: ReservationFeedbackPreviousValues
}

input ReservationFeedbackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReservationFeedbackWhereInput
  AND: [ReservationFeedbackSubscriptionWhereInput!]
  OR: [ReservationFeedbackSubscriptionWhereInput!]
  NOT: [ReservationFeedbackSubscriptionWhereInput!]
}

input ReservationFeedbackUpdateInput {
  comment: String
  feedbacks: ProductVariantFeedbackUpdateManyWithoutReservationFeedbackInput
  rating: Rating
  user: UserUpdateOneRequiredInput
  reservation: ReservationUpdateOneRequiredInput
  respondedAt: DateTime
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationFeedbackUpdateManyMutationInput {
  comment: String
  rating: Rating
  respondedAt: DateTime
}

input ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput {
  create: ReservationFeedbackCreateWithoutFeedbacksInput
  update: ReservationFeedbackUpdateWithoutFeedbacksDataInput
  upsert: ReservationFeedbackUpsertWithoutFeedbacksInput
  connect: ReservationFeedbackWhereUniqueInput
}

input ReservationFeedbackUpdateWithoutFeedbacksDataInput {
  comment: String
  rating: Rating
  user: UserUpdateOneRequiredInput
  reservation: ReservationUpdateOneRequiredInput
  respondedAt: DateTime
}

input ReservationFeedbackUpsertWithoutFeedbacksInput {
  update: ReservationFeedbackUpdateWithoutFeedbacksDataInput!
  create: ReservationFeedbackCreateWithoutFeedbacksInput!
}

<<<<<<< HEAD
input ReservationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationWhereInput!]
=======
input ReservationFeedbackWhereInput {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
<<<<<<< HEAD
  reservationNumber: Int

  """
  All values that are not equal to given value.
  """
  reservationNumber_not: Int

  """
  All values that are contained in given list.
  """
  reservationNumber_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reservationNumber_not_in: [Int!]

  """
  All values less than the given value.
  """
  reservationNumber_lt: Int

  """
  All values less than or equal the given value.
  """
  reservationNumber_lte: Int

  """
  All values greater than the given value.
  """
  reservationNumber_gt: Int

  """
  All values greater than or equal the given value.
  """
  reservationNumber_gte: Int
  phase: ReservationPhase

  """
  All values that are not equal to given value.
  """
  phase_not: ReservationPhase

  """
  All values that are contained in given list.
  """
  phase_in: [ReservationPhase!]

  """
  All values that are not contained in given list.
  """
  phase_not_in: [ReservationPhase!]
  shipped: Boolean

  """
  All values that are not equal to given value.
  """
  shipped_not: Boolean
  status: ReservationStatus

  """
  All values that are not equal to given value.
  """
  status_not: ReservationStatus

  """
  All values that are contained in given list.
  """
  status_in: [ReservationStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [ReservationStatus!]
  shippedAt: DateTime

  """
  All values that are not equal to given value.
  """
  shippedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  shippedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  shippedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  shippedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  shippedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  shippedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  shippedAt_gte: DateTime
  receivedAt: DateTime

  """
  All values that are not equal to given value.
  """
  receivedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  receivedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  receivedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  receivedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  receivedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  receivedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  receivedAt_gte: DateTime
  reminderSentAt: DateTime

  """
  All values that are not equal to given value.
  """
  reminderSentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  reminderSentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  reminderSentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  reminderSentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  reminderSentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  reminderSentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  reminderSentAt_gte: DateTime
=======
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  feedbacks_every: ProductVariantFeedbackWhereInput
  feedbacks_some: ProductVariantFeedbackWhereInput
  feedbacks_none: ProductVariantFeedbackWhereInput
  rating: Rating
  rating_not: Rating
  rating_in: [Rating!]
  rating_not_in: [Rating!]
  user: UserWhereInput
  reservation: ReservationWhereInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  createdAt: DateTime
=======
  publishedAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  brand: BrandWhereInput
  category: CategoryWhereInput
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
  model: ProductModelWhereInput
  modelSize: SizeWhereInput
  color: ColorWhereInput
  secondaryColor: ColorWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  functions_every: ProductFunctionWhereInput
  functions_some: ProductFunctionWhereInput
  functions_none: ProductFunctionWhereInput
  materialCategory: ProductMaterialCategoryWhereInput
  variants_every: ProductVariantWhereInput
  variants_some: ProductVariantWhereInput
  variants_none: ProductVariantWhereInput
  statusChanges_every: ProductStatusChangeWhereInput
  statusChanges_some: ProductStatusChangeWhereInput
  statusChanges_none: ProductStatusChangeWhereInput
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

type PushNotificationReceipt implements Node {
  id: ID!
  route: String
  screen: String
  uri: String
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type PushNotificationReceiptConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PushNotificationReceiptEdge]!
  aggregate: AggregatePushNotificationReceipt!
}

input PushNotificationReceiptCreateInput {
  id: ID
  route: String
  screen: String
  uri: String
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime!
  users: UserCreateManyWithoutPushNotificationsInput
}

input PushNotificationReceiptCreateManyInput {
  create: [PushNotificationReceiptCreateInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
}

input PushNotificationReceiptCreateManyWithoutUsersInput {
  create: [PushNotificationReceiptCreateWithoutUsersInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
}

input PushNotificationReceiptCreateWithoutUsersInput {
  id: ID
  route: String
  screen: String
  uri: String
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime!
}

"""
An edge in a connection.
"""
type PushNotificationReceiptEdge {
  """
  The item at the end of the edge.
  """
  node: PushNotificationReceipt!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PushNotificationReceiptOrderByInput {
  id_ASC
  id_DESC
  route_ASC
  route_DESC
  screen_ASC
  screen_DESC
  uri_ASC
  uri_DESC
  interest_ASC
  interest_DESC
  body_ASC
  body_DESC
  title_ASC
  title_DESC
  recordID_ASC
  recordID_DESC
  recordSlug_ASC
  recordSlug_DESC
  sentAt_ASC
  sentAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PushNotificationReceiptPreviousValues {
  id: ID!
  route: String
  screen: String
  uri: String
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PushNotificationReceiptScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PushNotificationReceiptScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PushNotificationReceiptScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PushNotificationReceiptScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  route: String

  """
  All values that are not equal to given value.
  """
  route_not: String

  """
  All values that are contained in given list.
  """
  route_in: [String!]

  """
  All values that are not contained in given list.
  """
  route_not_in: [String!]

  """
  All values less than the given value.
  """
  route_lt: String

  """
  All values less than or equal the given value.
  """
  route_lte: String

  """
  All values greater than the given value.
  """
  route_gt: String

  """
  All values greater than or equal the given value.
  """
  route_gte: String

  """
  All values containing the given string.
  """
  route_contains: String

  """
  All values not containing the given string.
  """
  route_not_contains: String

  """
  All values starting with the given string.
  """
  route_starts_with: String

  """
  All values not starting with the given string.
  """
  route_not_starts_with: String

  """
  All values ending with the given string.
  """
  route_ends_with: String

  """
  All values not ending with the given string.
  """
  route_not_ends_with: String
  screen: String

  """
  All values that are not equal to given value.
  """
  screen_not: String

  """
  All values that are contained in given list.
  """
  screen_in: [String!]

  """
  All values that are not contained in given list.
  """
  screen_not_in: [String!]

  """
  All values less than the given value.
  """
  screen_lt: String

  """
  All values less than or equal the given value.
  """
  screen_lte: String

  """
  All values greater than the given value.
  """
  screen_gt: String

  """
  All values greater than or equal the given value.
  """
  screen_gte: String

  """
  All values containing the given string.
  """
  screen_contains: String

  """
  All values not containing the given string.
  """
  screen_not_contains: String

  """
  All values starting with the given string.
  """
  screen_starts_with: String

  """
  All values not starting with the given string.
  """
  screen_not_starts_with: String

  """
  All values ending with the given string.
  """
  screen_ends_with: String

  """
  All values not ending with the given string.
  """
  screen_not_ends_with: String
  uri: String

  """
  All values that are not equal to given value.
  """
  uri_not: String

  """
  All values that are contained in given list.
  """
  uri_in: [String!]

  """
  All values that are not contained in given list.
  """
  uri_not_in: [String!]

  """
  All values less than the given value.
  """
  uri_lt: String

  """
  All values less than or equal the given value.
  """
  uri_lte: String

  """
  All values greater than the given value.
  """
  uri_gt: String

  """
  All values greater than or equal the given value.
  """
  uri_gte: String

  """
  All values containing the given string.
  """
  uri_contains: String

  """
  All values not containing the given string.
  """
  uri_not_contains: String

  """
  All values starting with the given string.
  """
  uri_starts_with: String

  """
  All values not starting with the given string.
  """
  uri_not_starts_with: String

  """
  All values ending with the given string.
  """
  uri_ends_with: String

  """
  All values not ending with the given string.
  """
  uri_not_ends_with: String
  interest: String

  """
  All values that are not equal to given value.
  """
  interest_not: String

  """
  All values that are contained in given list.
  """
  interest_in: [String!]

  """
  All values that are not contained in given list.
  """
  interest_not_in: [String!]

  """
  All values less than the given value.
  """
  interest_lt: String

  """
  All values less than or equal the given value.
  """
  interest_lte: String

  """
  All values greater than the given value.
  """
  interest_gt: String

  """
  All values greater than or equal the given value.
  """
  interest_gte: String

  """
  All values containing the given string.
  """
  interest_contains: String

  """
  All values not containing the given string.
  """
  interest_not_contains: String

  """
  All values starting with the given string.
  """
  interest_starts_with: String

  """
  All values not starting with the given string.
  """
  interest_not_starts_with: String

  """
  All values ending with the given string.
  """
  interest_ends_with: String

  """
  All values not ending with the given string.
  """
  interest_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  recordID: String

  """
  All values that are not equal to given value.
  """
  recordID_not: String

  """
  All values that are contained in given list.
  """
  recordID_in: [String!]

  """
  All values that are not contained in given list.
  """
  recordID_not_in: [String!]

  """
  All values less than the given value.
  """
  recordID_lt: String

  """
  All values less than or equal the given value.
  """
  recordID_lte: String

  """
  All values greater than the given value.
  """
  recordID_gt: String

  """
  All values greater than or equal the given value.
  """
  recordID_gte: String

  """
  All values containing the given string.
  """
  recordID_contains: String

  """
  All values not containing the given string.
  """
  recordID_not_contains: String

  """
  All values starting with the given string.
  """
  recordID_starts_with: String

  """
  All values not starting with the given string.
  """
  recordID_not_starts_with: String

  """
  All values ending with the given string.
  """
  recordID_ends_with: String

  """
  All values not ending with the given string.
  """
  recordID_not_ends_with: String
  recordSlug: String

  """
  All values that are not equal to given value.
  """
  recordSlug_not: String

  """
  All values that are contained in given list.
  """
  recordSlug_in: [String!]

  """
  All values that are not contained in given list.
  """
  recordSlug_not_in: [String!]

  """
  All values less than the given value.
  """
  recordSlug_lt: String

  """
  All values less than or equal the given value.
  """
  recordSlug_lte: String

  """
  All values greater than the given value.
  """
  recordSlug_gt: String

  """
  All values greater than or equal the given value.
  """
  recordSlug_gte: String

  """
  All values containing the given string.
  """
  recordSlug_contains: String

  """
  All values not containing the given string.
  """
  recordSlug_not_contains: String

  """
  All values starting with the given string.
  """
  recordSlug_starts_with: String

  """
  All values not starting with the given string.
  """
  recordSlug_not_starts_with: String

  """
  All values ending with the given string.
  """
  recordSlug_ends_with: String

  """
  All values not ending with the given string.
  """
  recordSlug_not_ends_with: String
  sentAt: DateTime

  """
  All values that are not equal to given value.
  """
  sentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  sentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  sentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  sentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  sentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  sentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  sentAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type PushNotificationReceiptSubscriptionPayload {
  mutation: MutationType!
  node: PushNotificationReceipt
  updatedFields: [String!]
  previousValues: PushNotificationReceiptPreviousValues
}

input PushNotificationReceiptSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PushNotificationReceiptSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PushNotificationReceiptSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PushNotificationReceiptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PushNotificationReceiptWhereInput
}

input PushNotificationReceiptUpdateDataInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
  users: UserUpdateManyWithoutPushNotificationsInput
}

input PushNotificationReceiptUpdateInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
  users: UserUpdateManyWithoutPushNotificationsInput
}

input PushNotificationReceiptUpdateManyDataInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateManyInput {
  create: [PushNotificationReceiptCreateInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
  set: [PushNotificationReceiptWhereUniqueInput!]
  disconnect: [PushNotificationReceiptWhereUniqueInput!]
  delete: [PushNotificationReceiptWhereUniqueInput!]
  update: [PushNotificationReceiptUpdateWithWhereUniqueNestedInput!]
  updateMany: [PushNotificationReceiptUpdateManyWithWhereNestedInput!]
  deleteMany: [PushNotificationReceiptScalarWhereInput!]
  upsert: [PushNotificationReceiptUpsertWithWhereUniqueNestedInput!]
}

input PushNotificationReceiptUpdateManyMutationInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateManyWithoutUsersInput {
  create: [PushNotificationReceiptCreateWithoutUsersInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
  set: [PushNotificationReceiptWhereUniqueInput!]
  disconnect: [PushNotificationReceiptWhereUniqueInput!]
  delete: [PushNotificationReceiptWhereUniqueInput!]
  update: [PushNotificationReceiptUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [PushNotificationReceiptUpdateManyWithWhereNestedInput!]
  deleteMany: [PushNotificationReceiptScalarWhereInput!]
  upsert: [PushNotificationReceiptUpsertWithWhereUniqueWithoutUsersInput!]
}

input PushNotificationReceiptUpdateManyWithWhereNestedInput {
  where: PushNotificationReceiptScalarWhereInput!
  data: PushNotificationReceiptUpdateManyDataInput!
}

input PushNotificationReceiptUpdateWithoutUsersDataInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateWithWhereUniqueNestedInput {
  where: PushNotificationReceiptWhereUniqueInput!
  data: PushNotificationReceiptUpdateDataInput!
}

input PushNotificationReceiptUpdateWithWhereUniqueWithoutUsersInput {
  where: PushNotificationReceiptWhereUniqueInput!
  data: PushNotificationReceiptUpdateWithoutUsersDataInput!
}

input PushNotificationReceiptUpsertWithWhereUniqueNestedInput {
  where: PushNotificationReceiptWhereUniqueInput!
  update: PushNotificationReceiptUpdateDataInput!
  create: PushNotificationReceiptCreateInput!
}

input PushNotificationReceiptUpsertWithWhereUniqueWithoutUsersInput {
  where: PushNotificationReceiptWhereUniqueInput!
  update: PushNotificationReceiptUpdateWithoutUsersDataInput!
  create: PushNotificationReceiptCreateWithoutUsersInput!
}

input PushNotificationReceiptWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PushNotificationReceiptWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PushNotificationReceiptWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PushNotificationReceiptWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  route: String

  """
  All values that are not equal to given value.
  """
  route_not: String

  """
  All values that are contained in given list.
  """
  route_in: [String!]

  """
  All values that are not contained in given list.
  """
  route_not_in: [String!]

  """
  All values less than the given value.
  """
  route_lt: String

  """
  All values less than or equal the given value.
  """
  route_lte: String

  """
  All values greater than the given value.
  """
  route_gt: String

  """
  All values greater than or equal the given value.
  """
  route_gte: String

  """
  All values containing the given string.
  """
  route_contains: String

  """
  All values not containing the given string.
  """
  route_not_contains: String

  """
  All values starting with the given string.
  """
  route_starts_with: String

  """
  All values not starting with the given string.
  """
  route_not_starts_with: String

  """
  All values ending with the given string.
  """
  route_ends_with: String

  """
  All values not ending with the given string.
  """
  route_not_ends_with: String
  screen: String

  """
  All values that are not equal to given value.
  """
  screen_not: String

  """
  All values that are contained in given list.
  """
  screen_in: [String!]

  """
  All values that are not contained in given list.
  """
  screen_not_in: [String!]

  """
  All values less than the given value.
  """
  screen_lt: String

  """
  All values less than or equal the given value.
  """
  screen_lte: String

  """
  All values greater than the given value.
  """
  screen_gt: String

  """
  All values greater than or equal the given value.
  """
  screen_gte: String

  """
  All values containing the given string.
  """
  screen_contains: String

  """
  All values not containing the given string.
  """
  screen_not_contains: String

  """
  All values starting with the given string.
  """
  screen_starts_with: String

  """
  All values not starting with the given string.
  """
  screen_not_starts_with: String

  """
  All values ending with the given string.
  """
  screen_ends_with: String

  """
  All values not ending with the given string.
  """
  screen_not_ends_with: String
  uri: String

  """
  All values that are not equal to given value.
  """
  uri_not: String

  """
  All values that are contained in given list.
  """
  uri_in: [String!]

  """
  All values that are not contained in given list.
  """
  uri_not_in: [String!]

  """
  All values less than the given value.
  """
  uri_lt: String

  """
  All values less than or equal the given value.
  """
  uri_lte: String

  """
  All values greater than the given value.
  """
  uri_gt: String

  """
  All values greater than or equal the given value.
  """
  uri_gte: String

  """
  All values containing the given string.
  """
  uri_contains: String

  """
  All values not containing the given string.
  """
  uri_not_contains: String

  """
  All values starting with the given string.
  """
  uri_starts_with: String

  """
  All values not starting with the given string.
  """
  uri_not_starts_with: String

  """
  All values ending with the given string.
  """
  uri_ends_with: String

  """
  All values not ending with the given string.
  """
  uri_not_ends_with: String
  interest: String

  """
  All values that are not equal to given value.
  """
  interest_not: String

  """
  All values that are contained in given list.
  """
  interest_in: [String!]

  """
  All values that are not contained in given list.
  """
  interest_not_in: [String!]

  """
  All values less than the given value.
  """
  interest_lt: String

  """
  All values less than or equal the given value.
  """
  interest_lte: String

  """
  All values greater than the given value.
  """
  interest_gt: String

  """
  All values greater than or equal the given value.
  """
  interest_gte: String

  """
  All values containing the given string.
  """
  interest_contains: String

  """
  All values not containing the given string.
  """
  interest_not_contains: String

  """
  All values starting with the given string.
  """
  interest_starts_with: String

  """
  All values not starting with the given string.
  """
  interest_not_starts_with: String

  """
  All values ending with the given string.
  """
  interest_ends_with: String

  """
  All values not ending with the given string.
  """
  interest_not_ends_with: String
  body: String
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  createdAt_not: DateTime
=======
  body_not: String
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  createdAt_in: [DateTime!]
=======
  body_in: [String!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  createdAt_not_in: [DateTime!]
=======
  body_not_in: [String!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  createdAt_lt: DateTime
=======
  body_lt: String
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  createdAt_lte: DateTime
=======
  body_lte: String
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  createdAt_gt: DateTime
=======
  body_gt: String
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  createdAt_gte: DateTime
  updatedAt: DateTime
=======
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  title: String
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  updatedAt_not: DateTime
=======
  title_not: String
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  updatedAt_in: [DateTime!]
=======
  title_in: [String!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  updatedAt_not_in: [DateTime!]
=======
  title_not_in: [String!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  updatedAt_lt: DateTime
=======
  title_lt: String
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  updatedAt_lte: DateTime
=======
  title_lte: String
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  updatedAt_gt: DateTime
=======
  title_gt: String
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  updatedAt_gte: DateTime
<<<<<<< HEAD
  user: UserWhereInput
  customer: CustomerWhereInput
  sentPackage: PackageWhereInput
  returnedPackage: PackageWhereInput
  products_every: PhysicalProductWhereInput
  products_some: PhysicalProductWhereInput
  products_none: PhysicalProductWhereInput
  receipt: ReservationReceiptWhereInput
  lastLocation: LocationWhereInput
=======
  respondedAt: DateTime
  respondedAt_not: DateTime
  respondedAt_in: [DateTime!]
  respondedAt_not_in: [DateTime!]
  respondedAt_lt: DateTime
  respondedAt_lte: DateTime
  respondedAt_gt: DateTime
  respondedAt_gte: DateTime
  AND: [ReservationFeedbackWhereInput!]
  OR: [ReservationFeedbackWhereInput!]
  NOT: [ReservationFeedbackWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationFeedbackWhereUniqueInput {
  id: ID
}

<<<<<<< HEAD
type Size implements Node {
=======
enum ReservationOrderByInput {
  id_ASC
  id_DESC
  reservationNumber_ASC
  reservationNumber_DESC
  phase_ASC
  phase_DESC
  shipped_ASC
  shipped_DESC
  status_ASC
  status_DESC
  shippedAt_ASC
  shippedAt_DESC
  receivedAt_ASC
  receivedAt_DESC
  reminderSentAt_ASC
  reminderSentAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum ReservationPhase {
  BusinessToCustomer
  CustomerToBusiness
}

type ReservationPreviousValues {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID!
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReservationReceipt {
  id: ID!
  reservation: Reservation!
  items(
    where: ReservationReceiptItemWhereInput
    orderBy: ReservationReceiptItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ReservationReceiptItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

<<<<<<< HEAD
"""
A connection to a list of items.
"""
type SizeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SizeEdge]!
  aggregate: AggregateSize!
=======
type ReservationReceiptConnection {
  pageInfo: PageInfo!
  edges: [ReservationReceiptEdge]!
  aggregate: AggregateReservationReceipt!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationReceiptCreateInput {
  id: ID
<<<<<<< HEAD
  slug: String!
  productType: ProductType
  display: String!
  top: TopSizeCreateOneInput
  bottom: BottomSizeCreateOneInput
=======
  reservation: ReservationCreateOneWithoutReceiptInput!
  items: ReservationReceiptItemCreateManyInput
}

input ReservationReceiptCreateOneWithoutReservationInput {
  create: ReservationReceiptCreateWithoutReservationInput
  connect: ReservationReceiptWhereUniqueInput
}

input ReservationReceiptCreateWithoutReservationInput {
  id: ID
  items: ReservationReceiptItemCreateManyInput
}

type ReservationReceiptEdge {
  node: ReservationReceipt!
  cursor: String!
}

type ReservationReceiptItem {
  id: ID!
  product: PhysicalProduct!
  productStatus: PhysicalProductStatus!
  notes: String
}

type ReservationReceiptItemConnection {
  pageInfo: PageInfo!
  edges: [ReservationReceiptItemEdge]!
  aggregate: AggregateReservationReceiptItem!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationReceiptItemCreateInput {
  id: ID
  product: PhysicalProductCreateOneInput!
  productStatus: PhysicalProductStatus!
  notes: String
}

input ReservationReceiptItemCreateManyInput {
  create: [ReservationReceiptItemCreateInput!]
  connect: [ReservationReceiptItemWhereUniqueInput!]
}

<<<<<<< HEAD
"""
An edge in a connection.
"""
type SizeEdge {
  """
  The item at the end of the edge.
  """
  node: Size!

  """
  A cursor for use in pagination.
  """
=======
type ReservationReceiptItemEdge {
  node: ReservationReceiptItem!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  cursor: String!
}

enum ReservationReceiptItemOrderByInput {
  id_ASC
  id_DESC
  productStatus_ASC
  productStatus_DESC
  notes_ASC
  notes_DESC
}

type ReservationReceiptItemPreviousValues {
  id: ID!
  productStatus: PhysicalProductStatus!
  notes: String
}

<<<<<<< HEAD
input SizeScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SizeScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SizeScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SizeScalarWhereInput!]
=======
input ReservationReceiptItemScalarWhereInput {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID
=======
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  recordID: String

  """
  All values that are not equal to given value.
  """
  recordID_not: String

  """
  All values that are contained in given list.
  """
  recordID_in: [String!]

  """
  All values that are not contained in given list.
  """
  recordID_not_in: [String!]

  """
  All values less than the given value.
  """
  recordID_lt: String

  """
  All values less than or equal the given value.
  """
  recordID_lte: String

  """
  All values greater than the given value.
  """
  recordID_gt: String

  """
  All values greater than or equal the given value.
  """
  recordID_gte: String

  """
  All values containing the given string.
  """
  recordID_contains: String

  """
  All values not containing the given string.
  """
  recordID_not_contains: String

  """
  All values starting with the given string.
  """
  recordID_starts_with: String

  """
  All values not starting with the given string.
  """
  recordID_not_starts_with: String

  """
  All values ending with the given string.
  """
  recordID_ends_with: String

  """
  All values not ending with the given string.
  """
  recordID_not_ends_with: String
  recordSlug: String

  """
  All values that are not equal to given value.
  """
  recordSlug_not: String

  """
  All values that are contained in given list.
  """
  recordSlug_in: [String!]

  """
  All values that are not contained in given list.
  """
  recordSlug_not_in: [String!]

  """
  All values less than the given value.
  """
  recordSlug_lt: String

  """
  All values less than or equal the given value.
  """
  recordSlug_lte: String
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  id_gt: ID
=======
  recordSlug_gt: String
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  id_gte: ID
=======
  recordSlug_gte: String
>>>>>>> Rebase

  """
  All values containing the given string.
  """
<<<<<<< HEAD
  id_contains: ID
=======
  recordSlug_contains: String
>>>>>>> Rebase

  """
  All values not containing the given string.
  """
<<<<<<< HEAD
  id_not_contains: ID
=======
  recordSlug_not_contains: String
>>>>>>> Rebase

  """
  All values starting with the given string.
  """
<<<<<<< HEAD
  id_starts_with: ID
=======
  recordSlug_starts_with: String
>>>>>>> Rebase

  """
  All values not starting with the given string.
  """
<<<<<<< HEAD
  id_not_starts_with: ID
=======
  recordSlug_not_starts_with: String
>>>>>>> Rebase

  """
  All values ending with the given string.
  """
<<<<<<< HEAD
  id_ends_with: ID
=======
  recordSlug_ends_with: String
>>>>>>> Rebase

  """
  All values not ending with the given string.
  """
<<<<<<< HEAD
  id_not_ends_with: ID
<<<<<<< HEAD
  slug: String
=======
  recordSlug_not_ends_with: String
  sentAt: DateTime
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  slug_not: String
=======
  sentAt_not: DateTime
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  slug_in: [String!]
=======
  sentAt_in: [DateTime!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  slug_not_in: [String!]
=======
  sentAt_not_in: [DateTime!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  slug_lt: String
=======
  sentAt_lt: DateTime
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  slug_lte: String
=======
  sentAt_lte: DateTime
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  slug_gt: String
=======
  sentAt_gt: DateTime
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  productType: ProductType

  """
  All values that are not equal to given value.
  """
  productType_not: ProductType

  """
  All values that are contained in given list.
  """
  productType_in: [ProductType!]

  """
  All values that are not contained in given list.
  """
  productType_not_in: [ProductType!]
  display: String

  """
  All values that are not equal to given value.
  """
  display_not: String

  """
  All values that are contained in given list.
  """
  display_in: [String!]

  """
  All values that are not contained in given list.
  """
  display_not_in: [String!]

  """
  All values less than the given value.
  """
  display_lt: String

  """
  All values less than or equal the given value.
  """
  display_lte: String
=======
  sentAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
  display_gt: String

  """
  All values greater than or equal the given value.
  """
  display_gte: String

  """
  All values containing the given string.
  """
  display_contains: String

  """
  All values not containing the given string.
  """
  display_not_contains: String

  """
  All values starting with the given string.
  """
  display_starts_with: String

  """
  All values not starting with the given string.
  """
  display_not_starts_with: String

  """
  All values ending with the given string.
  """
  display_ends_with: String

  """
  All values not ending with the given string.
  """
  display_not_ends_with: String
}

type SizeSubscriptionPayload {
=======
  productStatus: PhysicalProductStatus
  productStatus_not: PhysicalProductStatus
  productStatus_in: [PhysicalProductStatus!]
  productStatus_not_in: [PhysicalProductStatus!]
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  AND: [ReservationReceiptItemScalarWhereInput!]
  OR: [ReservationReceiptItemScalarWhereInput!]
  NOT: [ReservationReceiptItemScalarWhereInput!]
}

type ReservationReceiptItemSubscriptionPayload {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  mutation: MutationType!
  node: ReservationReceiptItem
  updatedFields: [String!]
  previousValues: ReservationReceiptItemPreviousValues
}

input ReservationReceiptItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReservationReceiptItemWhereInput
  AND: [ReservationReceiptItemSubscriptionWhereInput!]
  OR: [ReservationReceiptItemSubscriptionWhereInput!]
  NOT: [ReservationReceiptItemSubscriptionWhereInput!]
}

input ReservationReceiptItemUpdateDataInput {
  product: PhysicalProductUpdateOneRequiredInput
  productStatus: PhysicalProductStatus
  notes: String
}
input ReservationReceip
}

<<<<<<< HEAD
<<<<<<< HEAD
input SizeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SizeSubscriptionWhereInput!]
=======
type Query {
  brands(
    where: BrandWhereInput
    orderBy: BrandOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Brand]!
  collectionGroups(
    where: CollectionGroupWhereInput
    orderBy: CollectionGroupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CollectionGroup]!
  homepageProductRails(
    where: HomepageProductRailWhereInput
    orderBy: HomepageProductRailOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [HomepageProductRail]!
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag]!
  productStatusChanges(
    where: ProductStatusChangeWhereInput
    orderBy: ProductStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductStatusChange]!
  productMaterialCategories(
    where: ProductMaterialCategoryWhereInput
    orderBy: ProductMaterialCategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductMaterialCategory]!
  productModels(
    where: ProductModelWhereInput
    orderBy: ProductModelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductModel]!
  physicalProductInventoryStatusChanges(
    where: PhysicalProductInventoryStatusChangeWhereInput
    orderBy: PhysicalProductInventoryStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProductInventoryStatusChange]!
  warehouseLocationConstraints(
    where: WarehouseLocationConstraintWhereInput
    orderBy: WarehouseLocationConstraintOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [WarehouseLocationConstraint]!
  warehouseLocations(
    where: WarehouseLocationWhereInput
    orderBy: WarehouseLocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [WarehouseLocation]!
  paymentPlans(
    where: PaymentPlanWhereInput
    orderBy: PaymentPlanOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PaymentPlan]!
  emailReceipts(
    where: EmailReceiptWhereInput
    orderBy: EmailReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [EmailReceipt]!
  styleSubmissionReports(
    where: StyleSubmissionReportWhereInput
    orderBy: StyleSubmissionReportOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [StyleSubmissionReport]!
  bagItems(
    where: BagItemWhereInput
    orderBy: BagItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BagItem]!
  customerMemberships(
    where: CustomerMembershipWhereInput
    orderBy: CustomerMembershipOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CustomerMembership]!
  pauseRequests(
    where: PauseRequestWhereInput
    orderBy: PauseRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PauseRequest]!
  recentlyViewedProducts(
    where: RecentlyViewedProductWhereInput
    orderBy: RecentlyViewedProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RecentlyViewedProduct]!
  reservationFeedbacks(
    where: ReservationFeedbackWhereInput
    orderBy: ReservationFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ReservationFeedback]!
  productVariantFeedbacks(
    where: ProductVariantFeedbackWhereInput
    orderBy: ProductVariantFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantFeedback]!
  productVariantFeedbackQuestions(
    where: ProductVariantFeedbackQuestionWhereInput
    orderBy: ProductVariantFeedbackQuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantFeedbackQuestion]!
  reservationReceipts(
    where: ReservationReceiptWhereInput
    orderBy: ReservationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ReservationReceipt]!
  productRequests(
    where: ProductRequestWhereInput
    orderBy: ProductRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductRequest]!
  productVariantWants(
    where: ProductVariantWantWhereInput
    orderBy: ProductVariantWantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantWant]!
  collections(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Collection]!
  pushNotificationReceipts(
    where: PushNotificationReceiptWhereInput
    orderBy: PushNotificationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PushNotificationReceipt]!
  customerDetails(
    where: CustomerDetailWhereInput
    orderBy: CustomerDetailOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CustomerDetail]!
  userPushNotificationInterests(
    where: UserPushNotificationInterestWhereInput
    orderBy: UserPushNotificationInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [UserPushNotificationInterest]!
  billingInfoes(
    where: BillingInfoWhereInput
    orderBy: BillingInfoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BillingInfo]!
  reservationReceiptItems(
    where: ReservationReceiptItemWhereInput
    orderBy: ReservationReceiptItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ReservationReceiptItem]!
  stylePreferenceses(
    where: StylePreferencesWhereInput
    orderBy: StylePreferencesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [StylePreferences]!
  packages(
    where: PackageWhereInput
    orderBy: PackageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Package]!
  sizes(
    where: SizeWhereInput
    orderBy: SizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Size]!
  productFunctions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction]!
  styleSubmissions(
    where: StyleSubmissionWhereInput
    orderBy: StyleSubmissionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [StyleSubmission]!
  images(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Image]!
  colors(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Color]!
  topSizes(
    where: TopSizeWhereInput
    orderBy: TopSizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [TopSize]!
  customers(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Customer]!
  userPushNotifications(
    where: UserPushNotificationWhereInput
    orderBy: UserPushNotificationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [UserPushNotification]!
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!
  bottomSizes(
    where: BottomSizeWhereInput
    orderBy: BottomSizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BottomSize]!
  packageTransitEvents(
    where: PackageTransitEventWhereInput
    orderBy: PackageTransitEventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PackageTransitEvent]!
  labels(
    where: LabelWhereInput
    orderBy: LabelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Label]!
  smsReceipts(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [SmsReceipt]!
  locations(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Location]!
  physicalProducts(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct]!
  productVariants(
    where: ProductVariantWhereInput
    orderBy: ProductVariantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariant]!
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product]!
  reservations(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Reservation]!
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  brand(where: BrandWhereUniqueInput!): Brand
  collectionGroup(where: CollectionGroupWhereUniqueInput!): CollectionGroup
  homepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  tag(where: TagWhereUniqueInput!): Tag
  productStatusChange(
    where: ProductStatusChangeWhereUniqueInput!
  ): ProductStatusChange
  productMaterialCategory(
    where: ProductMaterialCategoryWhereUniqueInput!
  ): ProductMaterialCategory
  productModel(where: ProductModelWhereUniqueInput!): ProductModel
  physicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeWhereUniqueInput!
  ): PhysicalProductInventoryStatusChange
  warehouseLocationConstraint(
    where: WarehouseLocationConstraintWhereUniqueInput!
  ): WarehouseLocationConstraint
  warehouseLocation(
    where: WarehouseLocationWhereUniqueInput!
  ): WarehouseLocation
  paymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  emailReceipt(where: EmailReceiptWhereUniqueInput!): EmailReceipt
  styleSubmissionReport(
    where: StyleSubmissionReportWhereUniqueInput!
  ): StyleSubmissionReport
  bagItem(where: BagItemWhereUniqueInput!): BagItem
  customerMembership(
    where: CustomerMembershipWhereUniqueInput!
  ): CustomerMembership
  pauseRequest(where: PauseRequestWhereUniqueInput!): PauseRequest
  recentlyViewedProduct(
    where: RecentlyViewedProductWhereUniqueInput!
  ): RecentlyViewedProduct
  reservationFeedback(
    where: ReservationFeedbackWhereUniqueInput!
  ): ReservationFeedback
  productVariantFeedback(
    where: ProductVariantFeedbackWhereUniqueInput!
  ): ProductVariantFeedback
  productVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionWhereUniqueInput!
  ): ProductVariantFeedbackQuestion
  reservationReceipt(
    where: ReservationReceiptWhereUniqueInput!
  ): ReservationReceipt
  productRequest(where: ProductRequestWhereUniqueInput!): ProductRequest
  productVariantWant(
    where: ProductVariantWantWhereUniqueInput!
  ): ProductVariantWant
  collection(where: CollectionWhereUniqueInput!): Collection
  pushNotificationReceipt(
    where: PushNotificationReceiptWhereUniqueInput!
  ): PushNotificationReceipt
  customerDetail(where: CustomerDetailWhereUniqueInput!): CustomerDetail
  userPushNotificationInterest(
    where: UserPushNotificationInterestWhereUniqueInput!
  ): UserPushNotificationInterest
  billingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  reservationReceiptItem(
    where: ReservationReceiptItemWhereUniqueInput!
  ): ReservationReceiptItem
  stylePreferences(where: StylePreferencesWhereUniqueInput!): StylePreferences
  package(where: PackageWhereUniqueInput!): Package
  size(where: SizeWhereUniqueInput!): Size
  productFunction(where: ProductFunctionWhereUniqueInput!): ProductFunction
  styleSubmission(where: StyleSubmissionWhereUniqueInput!): StyleSubmission
  image(where: ImageWhereUniqueInput!): Image
  color(where: ColorWhereUniqueInput!): Color
  topSize(where: TopSizeWhereUniqueInput!): TopSize
  customer(where: CustomerWhereUniqueInput!): Customer
  userPushNotification(
    where: UserPushNotificationWhereUniqueInput!
  ): UserPushNotification
  category(where: CategoryWhereUniqueInput!): Category
  bottomSize(where: BottomSizeWhereUniqueInput!): BottomSize
  packageTransitEvent(
    where: PackageTransitEventWhereUniqueInput!
  ): PackageTransitEvent
  label(where: LabelWhereUniqueInput!): Label
  smsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  location(where: LocationWhereUniqueInput!): Location
  physicalProduct(where: PhysicalProductWhereUniqueInput!): PhysicalProduct
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  product(where: ProductWhereUniqueInput!): Product
  reservation(where: ReservationWhereUniqueInput!): Reservation
  user(where: UserWhereUniqueInput!): User
  brandsConnection(
    where: BrandWhereInput
    orderBy: BrandOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BrandConnection!
  collectionGroupsConnection(
    where: CollectionGroupWhereInput
    orderBy: CollectionGroupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CollectionGroupConnection!
  homepageProductRailsConnection(
    where: HomepageProductRailWhereInput
    orderBy: HomepageProductRailOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): HomepageProductRailConnection!
  tagsConnection(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TagConnection!
  productStatusChangesConnection(
    where: ProductStatusChangeWhereInput
    orderBy: ProductStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductStatusChangeConnection!
  productMaterialCategoriesConnection(
    where: ProductMaterialCategoryWhereInput
    orderBy: ProductMaterialCategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductMaterialCategoryConnection!
  productModelsConnection(
    where: ProductModelWhereInput
    orderBy: ProductModelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductModelConnection!
  physicalProductInventoryStatusChangesConnection(
    where: PhysicalProductInventoryStatusChangeWhereInput
    orderBy: PhysicalProductInventoryStatusChangeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PhysicalProductInventoryStatusChangeConnection!
  warehouseLocationConstraintsConnection(
    where: WarehouseLocationConstraintWhereInput
    orderBy: WarehouseLocationConstraintOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): WarehouseLocationConstraintConnection!
  warehouseLocationsConnection(
    where: WarehouseLocationWhereInput
    orderBy: WarehouseLocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): WarehouseLocationConnection!
  paymentPlansConnection(
    where: PaymentPlanWhereInput
    orderBy: PaymentPlanOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PaymentPlanConnection!
  emailReceiptsConnection(
    where: EmailReceiptWhereInput
    orderBy: EmailReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): EmailReceiptConnection!
  styleSubmissionReportsConnection(
    where: StyleSubmissionReportWhereInput
    orderBy: StyleSubmissionReportOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): StyleSubmissionReportConnection!
  bagItemsConnection(
    where: BagItemWhereInput
    orderBy: BagItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BagItemConnection!
  customerMembershipsConnection(
    where: CustomerMembershipWhereInput
    orderBy: CustomerMembershipOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerMembershipConnection!
  pauseRequestsConnection(
    where: PauseRequestWhereInput
    orderBy: PauseRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PauseRequestConnection!
  recentlyViewedProductsConnection(
    where: RecentlyViewedProductWhereInput
    orderBy: RecentlyViewedProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RecentlyViewedProductConnection!
  reservationFeedbacksConnection(
    where: ReservationFeedbackWhereInput
    orderBy: ReservationFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ReservationFeedbackConnection!
  productVariantFeedbacksConnection(
    where: ProductVariantFeedbackWhereInput
    orderBy: ProductVariantFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductVariantFeedbackConnection!
  productVariantFeedbackQuestionsConnection(
    where: ProductVariantFeedbackQuestionWhereInput
    orderBy: ProductVariantFeedbackQuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductVariantFeedbackQuestionConnection!
  reservationReceiptsConnection(
    where: ReservationReceiptWhereInput
    orderBy: ReservationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ReservationReceiptConnection!
  productRequestsConnection(
    where: ProductRequestWhereInput
    orderBy: ProductRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductRequestConnection!
  productVariantWantsConnection(
    where: ProductVariantWantWhereInput
    orderBy: ProductVariantWantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductVariantWantConnection!
  collectionsConnection(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CollectionConnection!
  pushNotificationReceiptsConnection(
    where: PushNotificationReceiptWhereInput
    orderBy: PushNotificationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PushNotificationReceiptConnection!
  customerDetailsConnection(
    where: CustomerDetailWhereInput
    orderBy: CustomerDetailOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerDetailConnection!
  userPushNotificationInterestsConnection(
    where: UserPushNotificationInterestWhereInput
    orderBy: UserPushNotificationInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserPushNotificationInterestConnection!
  billingInfoesConnection(
    where: BillingInfoWhereInput
    orderBy: BillingInfoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BillingInfoConnection!
  reservationReceiptItemsConnection(
    where: ReservationReceiptItemWhereInput
    orderBy: ReservationReceiptItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ReservationReceiptItemConnection!
  stylePreferencesesConnection(
    where: StylePreferencesWhereInput
    orderBy: StylePreferencesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): StylePreferencesConnection!
  packagesConnection(
    where: PackageWhereInput
    orderBy: PackageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PackageConnection!
  sizesConnection(
    where: SizeWhereInput
    orderBy: SizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): SizeConnection!
  productFunctionsConnection(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductFunctionConnection!
  styleSubmissionsConnection(
    where: StyleSubmissionWhereInput
    orderBy: StyleSubmissionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): StyleSubmissionConnection!
  imagesConnection(
    where: ImageWhereInput
    orderBy: ImageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ImageConnection!
  colorsConnection(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ColorConnection!
  topSizesConnection(
    where: TopSizeWhereInput
    orderBy: TopSizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TopSizeConnection!
  customersConnection(
    where: CustomerWhereInput
    orderBy: CustomerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CustomerConnection!
  userPushNotificationsConnection(
    where: UserPushNotificationWhereInput
    orderBy: UserPushNotificationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserPushNotificationConnection!
  categoriesConnection(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CategoryConnection!
  bottomSizesConnection(
    where: BottomSizeWhereInput
    orderBy: BottomSizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BottomSizeConnection!
  packageTransitEventsConnection(
    where: PackageTransitEventWhereInput
    orderBy: PackageTransitEventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PackageTransitEventConnection!
  labelsConnection(
    where: LabelWhereInput
    orderBy: LabelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): LabelConnection!
  smsReceiptsConnection(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): SmsReceiptConnection!
  locationsConnection(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): LocationConnection!
  physicalProductsConnection(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PhysicalProductConnection!
  productVariantsConnection(
    where: ProductVariantWhereInput
    orderBy: ProductVariantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductVariantConnection!
  productsConnection(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection!
  reservationsConnection(
    where: ReservationWhereInput
    orderBy: ReservationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ReservationConnection!
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

enum QuestionType {
  MultipleChoice
  FreeResponse
}

enum Rating {
  Disliked
  Ok
  Loved
}

type RecentlyViewedProduct implements Node {
  id: ID!
  product: Product!
  customer: Customer!
  viewCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type RecentlyViewedProductConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RecentlyViewedProductEdge]!
  aggregate: AggregateRecentlyViewedProduct!
}

input RecentlyViewedProductCreateInput {
  id: ID
  viewCount: Int
  product: ProductCreateOneInput!
  customer: CustomerCreateOneInput!
}

"""
An edge in a connection.
"""
type RecentlyViewedProductEdge {
  """
  The item at the end of the edge.
  """
  node: RecentlyViewedProduct!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RecentlyViewedProductOrderByInput {
  id_ASC
  id_DESC
  viewCount_ASC
  viewCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecentlyViewedProductPreviousValues {
  id: ID!
  viewCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RecentlyViewedProductSubscriptionPayload {
  mutation: MutationType!
  node: RecentlyViewedProduct
  updatedFields: [String!]
  previousValues: RecentlyViewedProductPreviousValues
}

input RecentlyViewedProductSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RecentlyViewedProductSubscriptionWhereInput!]
>>>>>>> Rebase

  """
  Logical OR on all given filters.
  """
<<<<<<< HEAD
  OR: [SizeSubscriptionWhereInput!]
=======
  OR: [RecentlyViewedProductSubscriptionWhereInput!]
>>>>>>> Rebase

  """
  Logical NOT on all given filters combined by AND.
  """
<<<<<<< HEAD
  NOT: [SizeSubscriptionWhereInput!]
=======
  NOT: [RecentlyViewedProductSubscriptionWhereInput!]
>>>>>>> Rebase

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
<<<<<<< HEAD
  node: SizeWhereInput
}

input SizeUpdateDataInput {
  slug: String
  productType: ProductType
  display: String
  top: TopSizeUpdateOneInput
  bottom: BottomSizeUpdateOneInput
}

input SizeUpdateInput {
  slug: String
  productType: ProductType
  display: String
  top: TopSizeUpdateOneInput
  bottom: BottomSizeUpdateOneInput
=======
input ReservationReceiptItemUpdateManyDataInput {
  productStatus: PhysicalProductStatus
  notes: String
}

  create: [ReservationReceiptItemInput!]
  disconnect: [Reserv

input ReservationReceiptItemUpdateManyMutationInput {
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateManyWithWhereNestedInput {
  where: ReservationReceiptItemScalarWhereInput!
  data: ReservationReceiptItemUpdateManyDataInput!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationReceiptItemUpdateWithWhereUniqueNestedInput {
  where: ReservationReceiptItemWhereUniqueInput!
  data: ReservationReceiptItemUpdateDataInput!
}

<<<<<<< HEAD
input SizeUpdateManyInput {
  create: [SizeCreateInput!]
  connect: [SizeWhereUniqueInput!]
  set: [SizeWhereUniqueInput!]
  disconnect: [SizeWhereUniqueInput!]
  delete: [SizeWhereUniqueInput!]
  update: [SizeUpdateWithWhereUniqueNestedInput!]
  updateMany: [SizeUpdateManyWithWhereNestedInput!]
  deleteMany: [SizeScalarWhereInput!]
  upsert: [SizeUpsertWithWhereUniqueNestedInput!]
=======
input ReservationReceiptItemUpsertWithWhereUniqueNestedInput {
  where: ReservationReceiptItemWhereUniqueInput!
  update: ReservationReceiptItemUpdateDataInput!
  create: ReservationReceiptItemCreateInput!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationReceiptItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_not_starts_with: IDus
  productStatus_in: [Phys
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  AND: [ReservationReceiptItemWhereInput!]
  OR: [ReservationReceiptItemWhereInput!]
  NOT: [ReservationReceiptItemWhereInput!]
}

input ReservationReceiptItemWhereUniqueInput {
  id: ID
}

<<<<<<< HEAD
input SizeUpdateOneInput {
  create: SizeCreateInput
  connect: SizeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SizeUpdateDataInput
  upsert: SizeUpsertNestedInput
=======
enum ReservationReceiptOrderByInput {
  id_ASC
  id_DESC
e createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

type ReservationReceiptPreviousValues {
  id: ID!
  crede: ReservationReceiptpRnput
  upsert: ReservationReceiptUpsertWithoutReservationInput
  delete: Boolean
  disconnect: Boolean
  connect: ReservationReceiptWhereUniqueInput
}

input ReservationReceiptUpdateWithoutReservationDataInput {
  items: ReservationReceiptItemUpdateManyInput
}

input ReservationReceiptUpsertWithoutReservationInput {
  update: ReservationReceiptUpdateWithoutReservationDataInput!
  create: ReservationReceiptCreateWithoutReservationInput!
}

<<<<<<< HEAD
input SizeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SizeWhereInput!]
=======
  node: RecentlyViewedProductWhereInput
}

input RecentlyViewedProductUpdateInput {
  viewCount: Int
  product: ProductUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredInput
}

input RecentlyViewedProductUpdateManyMutationInput {
  viewCount: Int
}

input RecentlyViewedProductWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RecentlyViewedProductWhereInput!]
>>>>>>> Rebase

  """
  Logical OR on all given filters.
  """
<<<<<<< HEAD
  OR: [SizeWhereInput!]
=======
  OR: [RecentlyViewedProductWhereInput!]
>>>>>>> Rebase

  """
  Logical NOT on all given filters combined by AND.
  """
<<<<<<< HEAD
  NOT: [SizeWhereInput!]
=======
input ReservationReceiptWhereInput {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  NOT: [RecentlyViewedProductWhereInput!]
>>>>>>> Rebase
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
<<<<<<< HEAD
<<<<<<< HEAD
  slug: String
=======
  viewCount: Int
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  slug_not: String
=======
  viewCount_not: Int
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  slug_in: [String!]
=======
  viewCount_in: [Int!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  slug_not_in: [String!]
=======
  viewCount_not_in: [Int!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  slug_lt: String
=======
  viewCount_lt: Int
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  slug_lte: String
=======
  viewCount_lte: Int
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  slug_gt: String
=======
  viewCount_gt: Int
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  productType: ProductType

  """
  All values that are not equal to given value.
  """
  productType_not: ProductType

  """
  All values that are contained in given list.
  """
  productType_in: [ProductType!]

  """
  All values that are not contained in given list.
  """
  productType_not_in: [ProductType!]
  display: String
=======
  viewCount_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  display_not: String
=======
  updatedAt_not: DateTime
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  display_in: [String!]
=======
  updatedAt_in: [DateTime!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  display_not_in: [String!]
=======
  updatedAt_not_in: [DateTime!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  display_lt: String
=======
  updatedAt_lt: DateTime
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  display_lte: String
=======
  updatedAt_lte: DateTime
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  display_gt: String
=======
  updatedAt_gt: DateTime
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  display_gte: String

  """
  All values containing the given string.
  """
  display_contains: String

  """
  All values not containing the given string.
  """
  display_not_contains: String

  """
  All values starting with the given string.
  """
  display_starts_with: String

  """
  All values not starting with the given string.
  """
  display_not_starts_with: String

  """
  All values ending with the given string.
  """
  display_ends_with: String

  """
  All values not ending with the given string.
  """
  display_not_ends_with: String
  top: TopSizeWhereInput
  bottom: BottomSizeWhereInput
}

input SizeWhereUniqueInput {
  id: ID
  slug: String
}

type SmsReceipt implements Node {
  id: ID!
  externalId: String
  body: String!
  mediaUrls: [String!]!
  status: SmsStatus!
  sentAt: DateTime!
  updatedAt: DateTime!
=======
  updatedAt_gte: DateTime
  product: ProductWhereInput
  customer: CustomerWhereInput
}

input RecentlyViewedProductWhereUniqueInput {
  id: ID
}

type Reservation implements Node {
  id: ID!
  user: User!
  customer: Customer!
  sentPackage: Package
  returnedPackage: Package
  products(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  receipt: ReservationReceipt
  lastLocation: Location
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type ReservationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ReservationEdge]!
  aggregate: AggregateReservation!
}

input ReservationCreateInput {
  id: ID
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
}

input ReservationCreateManyWithoutCustomerInput {
  create: [ReservationCreateWithoutCustomerInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReservationCreateOneInput {
  create: ReservationCreateInput
  connect: ReservationWhereUniqueInput
}

input ReservationCreateOneWithoutReceiptInput {
  create: ReservationCreateWithoutReceiptInput
  connect: ReservationWhereUniqueInput
}

input ReservationCreateWithoutCustomerInput {
  id: ID
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserCreateOneInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
}

input ReservationCreateWithoutReceiptInput {
  id: ID
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  lastLocation: LocationCreateOneInput
}

"""
An edge in a connection.
"""
type ReservationEdge {
  """
  The item at the end of the edge.
  """
  node: Reservation!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type ReservationFeedback implements Node {
  id: ID!
  comment: String
  feedbacks(
    where: ProductVariantFeedbackWhereInput
    orderBy: ProductVariantFeedbackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariantFeedback!]
  rating: Rating
  user: User!
  reservation: Reservation!
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
>>>>>>> Rebase
}

"""
A connection to a list of items.
"""
<<<<<<< HEAD
type SmsReceiptConnection {
=======
type ReservationFeedbackConnection {
>>>>>>> Rebase
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
<<<<<<< HEAD
  edges: [SmsReceiptEdge]!
  aggregate: AggregateSmsReceipt!
=======
  reservation: ReservationWhereInput
  items_every: ReservationReceiptItemWhereInput
  items_some: ReservationReceiptItemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTimed
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReservationReceiptWhereInput!]
  OR: [ReservationReceiptWhereInput!]
  NOT: [ReservationReceiptWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input ReservationReceiptWhereUniqueInput {
  id: ID
<<<<<<< HEAD
  externalId: String
  body: String!
  status: SmsStatus!
  mediaUrls: SmsReceiptCreatemediaUrlsInput
}

input SmsReceiptCreateManyInput {
  create: [SmsReceiptCreateInput!]
  connect: [SmsReceiptWhereUniqueInput!]
}

input SmsReceiptCreatemediaUrlsInput {
  set: [String!]
=======
  edges: [ReservationFeedbackEdge]!
  aggregate: AggregateReservationFeedback!
}

input ReservationFeedbackCreateInput {
  id: ID
  comment: String
  rating: Rating
  respondedAt: DateTime
  feedbacks: ProductVariantFeedbackCreateManyWithoutReservationFeedbackInput
  user: UserCreateOneInput!
  reservation: ReservationCreateOneInput!
}

input ReservationFeedbackCreateOneWithoutFeedbacksInput {
  create: ReservationFeedbackCreateWithoutFeedbacksInput
  connect: ReservationFeedbackWhereUniqueInput
}

input ReservationFeedbackCreateWithoutFeedbacksInput {
  id: ID
  comment: String
  rating: Rating
  respondedAt: DateTime
  user: UserCreateOneInput!
  reservation: ReservationCreateOneInput!
>>>>>>> Rebase
}

"""
An edge in a connection.
"""
<<<<<<< HEAD
type SmsReceiptEdge {
  """
  The item at the end of the edge.
  """
  node: SmsReceipt!
=======
type ReservationFeedbackEdge {
  """
  The item at the end of the edge.
  """
  node: ReservationFeedback!
>>>>>>> Rebase

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

<<<<<<< HEAD
enum SmsReceiptOrderByInput {
  id_ASC
  id_DESC
  externalId_ASC
  externalId_DESC
  body_ASC
  body_DESC
  status_ASC
  status_DESC
  sentAt_ASC
  sentAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SmsReceiptPreviousValues {
  id: ID!
  externalId: String
  body: String!
  mediaUrls: [String!]!
  status: SmsStatus!
  sentAt: DateTime!
  updatedAt: DateTime!
}

input SmsReceiptScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SmsReceiptScalarWhereInput!]
=======
enum ReservationFeedbackOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  respondedAt_ASC
  respondedAt_DESC
}

type ReservationFeedbackPreviousValues {
  id: ID!
  comment: String
  rating: Rating
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
}

type ReservationFeedbackSubscriptionPayload {
  mutation: MutationType!
  node: ReservationFeedback
  updatedFields: [String!]
  previousValues: ReservationFeedbackPreviousValues
}

input ReservationFeedbackSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationFeedbackSubscriptionWhereInput!]
>>>>>>> Rebase

  """
  Logical OR on all given filters.
  """
<<<<<<< HEAD
  OR: [SmsReceiptScalarWhereInput!]
=======
  OR: [ReservationFeedbackSubscriptionWhereInput!]
>>>>>>> Rebase

  """
  Logical NOT on all given filters combined by AND.
  """
<<<<<<< HEAD
  NOT: [SmsReceiptScalarWhereInput!]
=======
}

input ReservationScalarWhereInput {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  NOT: [ReservationFeedbackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReservationFeedbackWhereInput
}

input ReservationFeedbackUpdateInput {
  comment: String
  rating: Rating
  respondedAt: DateTime
  feedbacks: ProductVariantFeedbackUpdateManyWithoutReservationFeedbackInput
  user: UserUpdateOneRequiredInput
  reservation: ReservationUpdateOneRequiredInput
}

input ReservationFeedbackUpdateManyMutationInput {
  comment: String
  rating: Rating
  respondedAt: DateTime
}

input ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput {
  create: ReservationFeedbackCreateWithoutFeedbacksInput
  connect: ReservationFeedbackWhereUniqueInput
  update: ReservationFeedbackUpdateWithoutFeedbacksDataInput
  upsert: ReservationFeedbackUpsertWithoutFeedbacksInput
}

input ReservationFeedbackUpdateWithoutFeedbacksDataInput {
  comment: String
  rating: Rating
  respondedAt: DateTime
  user: UserUpdateOneRequiredInput
  reservation: ReservationUpdateOneRequiredInput
}

input ReservationFeedbackUpsertWithoutFeedbacksInput {
  update: ReservationFeedbackUpdateWithoutFeedbacksDataInput!
  create: ReservationFeedbackCreateWithoutFeedbacksInput!
}

input ReservationFeedbackWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationFeedbackWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationFeedbackWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationFeedbackWhereInput!]
>>>>>>> Rebase
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
<<<<<<< HEAD
=======
: id_not_in: [ID!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
>>>>>>> Rebase
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
<<<<<<< HEAD
<<<<<<< HEAD
  externalId: String
=======
  comment: String
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  externalId_not: String
=======
  comment_not: String
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  externalId_in: [String!]
=======
  comment_in: [String!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  externalId_not_in: [String!]
=======
  comment_not_in: [String!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  externalId_lt: String
=======
  comment_lt: String
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
  externalId_lte: String
=======
  comment_lte: String
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  externalId_gt: String
=======
  comment_gt: String
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  externalId_gte: String
=======
  comment_gte: String
>>>>>>> Rebase

  """
  All values containing the given string.
  """
<<<<<<< HEAD
  externalId_contains: String
=======
  comment_contains: String
>>>>>>> Rebase

  """
  All values not containing the given string.
  """
<<<<<<< HEAD
  externalId_not_contains: String
=======
  comment_not_contains: String
>>>>>>> Rebase

  """
  All values starting with the given string.
  """
<<<<<<< HEAD
  externalId_starts_with: String
=======
  comment_starts_with: String
>>>>>>> Rebase

  """
  All values not starting with the given string.
  """
<<<<<<< HEAD
  externalId_not_starts_with: String
=======
  comment_not_starts_with: String
>>>>>>> Rebase

  """
  All values ending with the given string.
  """
<<<<<<< HEAD
  externalId_ends_with: String
=======
  comment_ends_with: String
>>>>>>> Rebase

  """
  All values not ending with the given string.
  """
<<<<<<< HEAD
=======
  reservationNumber: Int
  reservationNumber_not: Int
  reservationNumber_in: [Int!]
  reservationNumber_not_in: [Int!]
  reservationNumber_lt: Int
  reservationNumbteaapeOne
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  rpetontn:t
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  externalId_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  status: SmsStatus

  """
  All values that are not equal to given value.
  """
  status_not: SmsStatus

  """
  All values that are contained in given list.
  """
  status_in: [SmsStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [SmsStatus!]
  sentAt: DateTime

  """
  All values that are not equal to given value.
  """
  sentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  sentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  sentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  sentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  sentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  sentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  sentAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
<<<<<<< HEAD

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
=======
e updatedAt_lt: DateTime
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
<<<<<<< HEAD

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type SmsReceiptSubscriptionPayload {
  mutation: MutationType!
  node: SmsReceipt
  updatedFields: [String!]
  previousValues: SmsReceiptPreviousValues
}

=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
input SmsReceiptSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SmsReceiptSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SmsReceiptSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SmsReceiptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SmsReceiptWhereInput
<<<<<<< HEAD
}
=======
  AND: [SmsReceiptSubscriptionWhereInput!]
  OR: [SmsReceiptSubscriptionWhereInput!]
  NOT: [SmsReceiptSubscriptionWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers

input SmsReceiptUpdateDataInput {
  externalId: String
  body: String
<<<<<<< HEAD
  status: SmsStatus
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
}

input SmsReceiptUpdateInput {
  externalId: String
  body: String
  status: SmsStatus
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
}

input SmsReceiptUpdateManyDataInput {
  externalId: String
  body: String
  status: SmsStatus
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
}

input SmsReceiptUpdateManyInput {
  create: [SmsReceiptCreateInput!]
=======
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  connect: [SmsReceiptWhereUniqueInput!]
  set: [SmsReceiptWhereUniqueInput!]
  disconnect: [SmsReceiptWhereUniqueInput!]
  delete: [SmsReceiptWhereUniqueInput!]
  update: [SmsReceiptUpdateWithWhereUniqueNestedInput!]
  updateMany: [SmsReceiptUpdateManyWithWhereNestedInput!]
  deleteMany: [SmsReceiptScalarWhereInput!]
  upsert: [SmsReceiptUpsertWithWhereUniqueNestedInput!]
}

input SmsReceiptUpdateManyMutationInput {
  externalId: String
  body: String
  status: SmsStatus
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
}

input SmsReceiptUpdateManyWithWhereNestedInput {
  where: SmsReceiptScalarWhereInput!
  data: SmsReceiptUpdateManyDataInput!
}

input SmsReceiptUpdatemediaUrlsInput {
  set: [String!]
}

input SmsReceiptUpdateWithWhereUniqueNestedInput {
  where: SmsReceiptWhereUniqueInput!
  data: SmsReceiptUpdateDataInput!
}

input SmsReceiptUpsertWithWhereUniqueNestedInput {
  where: SmsReceiptWhereUniqueInput!
  update: SmsReceiptUpdateDataInput!
  create: SmsReceiptCreateInput!
}

input SmsReceiptWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SmsReceiptWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SmsReceiptWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SmsReceiptWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  externalId: String

  """
  All values that are not equal to given value.
  """
  externalId_not: String

  """
  All values that are contained in given list.
  """
  externalId_in: [String!]

  """
  All values that are not contained in given list.
  """
  externalId_not_in: [String!]

  """
  All values less than the given value.
  """
  externalId_lt: String

  """
  All values less than or equal the given value.
  """
  externalId_lte: String

  """
  All values greater than the given value.
  """
  externalId_gt: String

  """
  All values greater than or equal the given value.
  """
  externalId_gte: String

  """
  All values containing the given string.
  """
  externalId_contains: String

  """
  All values not containing the given string.
  """
  externalId_not_contains: String

  """
  All values starting with the given string.
  """
  externalId_starts_with: String

  """
  All values not starting with the given string.
  """
  externalId_not_starts_with: String

  """
  All values ending with the given string.
  """
  externalId_ends_with: String

  """
  All values not ending with the given string.
  """
  externalId_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

<<<<<<< HEAD
  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]
=======
<<<<<<< HEAD
type ReservationFeedbackSubscriptionPayload {
=======
=======
  comment_not_ends_with: String
  rating: Rating

  """
  All values that are not equal to given value.
  """
  rating_not: Rating

  """
  All values that are contained in given list.
  """
  rating_in: [Rating!]

  """
  All values that are not contained in given list.
  """
  rating_not_in: [Rating!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  respondedAt: DateTime

  """
  All values that are not equal to given value.
  """
  respondedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  respondedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  respondedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  respondedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  respondedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  respondedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  respondedAt_gte: DateTime
  feedbacks_every: ProductVariantFeedbackWhereInput
  feedbacks_some: ProductVariantFeedbackWhereInput
  feedbacks_none: ProductVariantFeedbackWhereInput
  user: UserWhereInput
  reservation: ReservationWhereInput
}

input ReservationFeedbackWhereUniqueInput {
  id: ID
}

enum ReservationOrderByInput {
  id_ASC
  id_DESC
  reservationNumber_ASC
  reservationNumber_DESC
  phase_ASC
  phase_DESC
  shipped_ASC
  shipped_DESC
  status_ASC
  status_DESC
  shippedAt_ASC
  shippedAt_DESC
  receivedAt_ASC
  receivedAt_DESC
  reminderSentAt_ASC
  reminderSentAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum ReservationPhase {
  BusinessToCustomer
  CustomerToBusiness
}

type ReservationPreviousValues {
  id: ID!
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReservationReceipt implements Node {
  id: ID!
  reservation: Reservation!
  items(
    where: ReservationReceiptItemWhereInput
    orderBy: ReservationReceiptItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ReservationReceiptItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type ReservationReceiptConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ReservationReceiptEdge]!
  aggregate: AggregateReservationReceipt!
}

input ReservationReceiptCreateInput {
  id: ID
  reservation: ReservationCreateOneWithoutReceiptInput!
  items: ReservationReceiptItemCreateManyInput
}

input ReservationReceiptCreateOneWithoutReservationInput {
  create: ReservationReceiptCreateWithoutReservationInput
  connect: ReservationReceiptWhereUniqueInput
}

input ReservationReceiptCreateWithoutReservationInput {
  id: ID
  items: ReservationReceiptItemCreateManyInput
}

"""
An edge in a connection.
"""
type ReservationReceiptEdge {
  """
  The item at the end of the edge.
  """
  node: ReservationReceipt!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type ReservationReceiptItem implements Node {
  id: ID!
  product: PhysicalProduct!
  productStatus: PhysicalProductStatus!
  notes: String
}

"""
A connection to a list of items.
"""
type ReservationReceiptItemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ReservationReceiptItemEdge]!
  aggregate: AggregateReservationReceiptItem!
}

input ReservationReceiptItemCreateInput {
  id: ID
  productStatus: PhysicalProductStatus!
  notes: String
  product: PhysicalProductCreateOneInput!
}

input ReservationReceiptItemCreateManyInput {
  create: [ReservationReceiptItemCreateInput!]
  connect: [ReservationReceiptItemWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type ReservationReceiptItemEdge {
  """
  The item at the end of the edge.
  """
  node: ReservationReceiptItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ReservationReceiptItemOrderByInput {
  id_ASC
  id_DESC
  productStatus_ASC
  productStatus_DESC
  notes_ASC
  notes_DESC
}

type ReservationReceiptItemPreviousValues {
  id: ID!
  productStatus: PhysicalProductStatus!
  notes: String
}

input ReservationReceiptItemScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptItemScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptItemScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptItemScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  productStatus: PhysicalProductStatus

  """
  All values that are not equal to given value.
  """
  productStatus_not: PhysicalProductStatus

  """
  All values that are contained in given list.
  """
  productStatus_in: [PhysicalProductStatus!]

  """
  All values that are not contained in given list.
  """
  productStatus_not_in: [PhysicalProductStatus!]
  notes: String

  """
  All values that are not equal to given value.
  """
  notes_not: String

  """
  All values that are contained in given list.
  """
  notes_in: [String!]

  """
  All values that are not contained in given list.
  """
  notes_not_in: [String!]

  """
  All values less than the given value.
  """
  notes_lt: String

  """
  All values less than or equal the given value.
  """
  notes_lte: String

  """
  All values greater than the given value.
  """
  notes_gt: String

  """
  All values greater than or equal the given value.
  """
  notes_gte: String

  """
  All values containing the given string.
  """
  notes_contains: String

  """
  All values not containing the given string.
  """
  notes_not_contains: String

  """
  All values starting with the given string.
  """
  notes_starts_with: String

  """
  All values not starting with the given string.
  """
  notes_not_starts_with: String

  """
  All values ending with the given string.
  """
  notes_ends_with: String

  """
  All values not ending with the given string.
  """
  notes_not_ends_with: String
}

type ReservationReceiptItemSubscriptionPayload {
  mutation: MutationType!
  node: ReservationReceiptItem
  updatedFields: [String!]
  previousValues: ReservationReceiptItemPreviousValues
}

input ReservationReceiptItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptItemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptItemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReservationReceiptItemWhereInput
}

input ReservationReceiptItemUpdateDataInput {
  productStatus: PhysicalProductStatus
  notes: String
  product: PhysicalProductUpdateOneRequiredInput
}

input ReservationReceiptItemUpdateInput {
  productStatus: PhysicalProductStatus
  notes: String
  product: PhysicalProductUpdateOneRequiredInput
}

input ReservationReceiptItemUpdateManyDataInput {
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateManyInput {
  create: [ReservationReceiptItemCreateInput!]
  connect: [ReservationReceiptItemWhereUniqueInput!]
  set: [ReservationReceiptItemWhereUniqueInput!]
  disconnect: [ReservationReceiptItemWhereUniqueInput!]
  delete: [ReservationReceiptItemWhereUniqueInput!]
  update: [ReservationReceiptItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [ReservationReceiptItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ReservationReceiptItemScalarWhereInput!]
  upsert: [ReservationReceiptItemUpsertWithWhereUniqueNestedInput!]
}

input ReservationReceiptItemUpdateManyMutationInput {
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateManyWithWhereNestedInput {
  where: ReservationReceiptItemScalarWhereInput!
  data: ReservationReceiptItemUpdateManyDataInput!
}

input ReservationReceiptItemUpdateWithWhereUniqueNestedInput {
  where: ReservationReceiptItemWhereUniqueInput!
  data: ReservationReceiptItemUpdateDataInput!
}

input ReservationReceiptItemUpsertWithWhereUniqueNestedInput {
  where: ReservationReceiptItemWhereUniqueInput!
  update: ReservationReceiptItemUpdateDataInput!
  create: ReservationReceiptItemCreateInput!
}

input ReservationReceiptItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptItemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptItemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptItemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  productStatus: PhysicalProductStatus

  """
  All values that are not equal to given value.
  """
  productStatus_not: PhysicalProductStatus

  """
  All values that are contained in given list.
  """
  productStatus_in: [PhysicalProductStatus!]

  """
  All values that are not contained in given list.
  """
  productStatus_not_in: [PhysicalProductStatus!]
  notes: String

  """
  All values that are not equal to given value.
  """
  notes_not: String

  """
  All values that are contained in given list.
  """
  notes_in: [String!]

  """
  All values that are not contained in given list.
  """
  notes_not_in: [String!]

  """
  All values less than the given value.
  """
  notes_lt: String

  """
  All values less than or equal the given value.
  """
  notes_lte: String

  """
  All values greater than the given value.
  """
  notes_gt: String

  """
  All values greater than or equal the given value.
  """
  notes_gte: String

  """
  All values containing the given string.
  """
  notes_contains: String

  """
  All values not containing the given string.
  """
  notes_not_contains: String

  """
  All values starting with the given string.
  """
  notes_starts_with: String

  """
  All values not starting with the given string.
  """
  notes_not_starts_with: String

  """
  All values ending with the given string.
  """
  notes_ends_with: String

  """
  All values not ending with the given string.
  """
  notes_not_ends_with: String
  product: PhysicalProductWhereInput
}

input ReservationReceiptItemWhereUniqueInput {
  id: ID
}

enum ReservationReceiptOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReservationReceiptPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReservationReceiptSubscriptionPayload {
  mutation: MutationType!
  node: ReservationReceipt
  updatedFields: [String!]
  previousValues: ReservationReceiptPreviousValues
}

input ReservationReceiptSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReservationReceiptWhereInput
}

input ReservationReceiptUpdateInput {
  reservation: ReservationUpdateOneRequiredWithoutReceiptInput
  items: ReservationReceiptItemUpdateManyInput
}

input ReservationReceiptUpdateOneWithoutReservationInput {
  create: ReservationReceiptCreateWithoutReservationInput
  connect: ReservationReceiptWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ReservationReceiptUpdateWithoutReservationDataInput
  upsert: ReservationReceiptUpsertWithoutReservationInput
}

input ReservationReceiptUpdateWithoutReservationDataInput {
  items: ReservationReceiptItemUpdateManyInput
}

input ReservationReceiptUpsertWithoutReservationInput {
  update: ReservationReceiptUpdateWithoutReservationDataInput!
  create: ReservationReceiptCreateWithoutReservationInput!
}

input ReservationReceiptWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationReceiptWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationReceiptWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationReceiptWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  reservation: ReservationWhereInput
  items_every: ReservationReceiptItemWhereInput
  items_some: ReservationReceiptItemWhereInput
  items_none: ReservationReceiptItemWhereInput
}

input ReservationReceiptWhereUniqueInput {
  id: ID
}

input ReservationScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  reservationNumber: Int

  """
  All values that are not equal to given value.
  """
  reservationNumber_not: Int

  """
  All values that are contained in given list.
  """
  reservationNumber_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reservationNumber_not_in: [Int!]

  """
  All values less than the given value.
  """
  reservationNumber_lt: Int

  """
  All values less than or equal the given value.
  """
  reservationNumber_lte: Int

  """
  All values greater than the given value.
  """
  reservationNumber_gt: Int

  """
  All values greater than or equal the given value.
  """
  reservationNumber_gte: Int
  phase: ReservationPhase

  """
  All values that are not equal to given value.
  """
  phase_not: ReservationPhase

  """
  All values that are contained in given list.
  """
  phase_in: [ReservationPhase!]

  """
  All values that are not contained in given list.
  """
  phase_not_in: [ReservationPhase!]
  shipped: Boolean

  """
  All values that are not equal to given value.
  """
  shipped_not: Boolean
  status: ReservationStatus

  """
  All values that are not equal to given value.
  """
  status_not: ReservationStatus

  """
  All values that are contained in given list.
  """
  status_in: [ReservationStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [ReservationStatus!]
  shippedAt: DateTime

  """
  All values that are not equal to given value.
  """
  shippedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  shippedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  shippedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  shippedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  shippedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  shippedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  shippedAt_gte: DateTime
  receivedAt: DateTime

  """
  All values that are not equal to given value.
  """
  receivedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  receivedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  receivedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  receivedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  receivedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  receivedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  receivedAt_gte: DateTime
  reminderSentAt: DateTime

  """
  All values that are not equal to given value.
  """
  reminderSentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  reminderSentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  reminderSentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  reminderSentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  reminderSentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  reminderSentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  reminderSentAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

enum ReservationStatus {
  Queued
  Packed
  Shipped
  Delivered
  Completed
  Cancelled
  Blocked
  Unknown
  Received
}

type ReservationSubscriptionPayload {
  mutation: MutationType!
  node: Reservation
  updatedFields: [String!]
  previousValues: ReservationPreviousValues
}

input ReservationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReservationWhereInput
}

input ReservationUpdateDataInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
}

input ReservationUpdateInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
}

input ReservationUpdateManyDataInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
}

input ReservationUpdateManyMutationInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
}

input ReservationUpdateManyWithoutCustomerInput {
  create: [ReservationCreateWithoutCustomerInput!]
  connect: [ReservationWhereUniqueInput!]
  set: [ReservationWhereUniqueInput!]
  disconnect: [ReservationWhereUniqueInput!]
  delete: [ReservationWhereUniqueInput!]
  update: [ReservationUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ReservationUpdateManyWithWhereNestedInput!]
  deleteMany: [ReservationScalarWhereInput!]
  upsert: [ReservationUpsertWithWhereUniqueWithoutCustomerInput!]
}

input ReservationUpdateManyWithWhereNestedInput {
  where: ReservationScalarWhereInput!
  data: ReservationUpdateManyDataInput!
}

input ReservationUpdateOneRequiredInput {
  create: ReservationCreateInput
  connect: ReservationWhereUniqueInput
  update: ReservationUpdateDataInput
  upsert: ReservationUpsertNestedInput
}

input ReservationUpdateOneRequiredWithoutReceiptInput {
  create: ReservationCreateWithoutReceiptInput
  connect: ReservationWhereUniqueInput
  update: ReservationUpdateWithoutReceiptDataInput
  upsert: ReservationUpsertWithoutReceiptInput
}

input ReservationUpdateWithoutCustomerDataInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserUpdateOneRequiredInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
}

input ReservationUpdateWithoutReceiptDataInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  lastLocation: LocationUpdateOneInput
}

input ReservationUpdateWithWhereUniqueWithoutCustomerInput {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateWithoutCustomerDataInput!
}

input ReservationUpsertNestedInput {
  update: ReservationUpdateDataInput!
  create: ReservationCreateInput!
}

input ReservationUpsertWithoutReceiptInput {
  update: ReservationUpdateWithoutReceiptDataInput!
  create: ReservationCreateWithoutReceiptInput!
}

input ReservationUpsertWithWhereUniqueWithoutCustomerInput {
  where: ReservationWhereUniqueInput!
  update: ReservationUpdateWithoutCustomerDataInput!
  create: ReservationCreateWithoutCustomerInput!
}

input ReservationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReservationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ReservationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ReservationWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  reservationNumber: Int

  """
  All values that are not equal to given value.
  """
  reservationNumber_not: Int

  """
  All values that are contained in given list.
  """
  reservationNumber_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reservationNumber_not_in: [Int!]

  """
  All values less than the given value.
  """
  reservationNumber_lt: Int

  """
  All values less than or equal the given value.
  """
  reservationNumber_lte: Int

  """
  All values greater than the given value.
  """
  reservationNumber_gt: Int

  """
  All values greater than or equal the given value.
  """
  reservationNumber_gte: Int
  phase: ReservationPhase

  """
  All values that are not equal to given value.
  """
  phase_not: ReservationPhase

  """
  All values that are contained in given list.
  """
  phase_in: [ReservationPhase!]

  """
  All values that are not contained in given list.
  """
  phase_not_in: [ReservationPhase!]
  shipped: Boolean

  """
  All values that are not equal to given value.
  """
  shipped_not: Boolean
  status: ReservationStatus

  """
  All values that are not equal to given value.
  """
  status_not: ReservationStatus

  """
  All values that are contained in given list.
  """
  status_in: [ReservationStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [ReservationStatus!]
  shippedAt: DateTime

  """
  All values that are not equal to given value.
  """
  shippedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  shippedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  shippedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  shippedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  shippedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  shippedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  shippedAt_gte: DateTime
  receivedAt: DateTime

  """
  All values that are not equal to given value.
  """
  receivedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  receivedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  receivedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  receivedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  receivedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  receivedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  receivedAt_gte: DateTime
  reminderSentAt: DateTime

  """
  All values that are not equal to given value.
  """
  reminderSentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  reminderSentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  reminderSentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  reminderSentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  reminderSentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  reminderSentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  reminderSentAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  user: UserWhereInput
  customer: CustomerWhereInput
  sentPackage: PackageWhereInput
  returnedPackage: PackageWhereInput
  products_every: PhysicalProductWhereInput
  products_some: PhysicalProductWhereInput
  products_none: PhysicalProductWhereInput
  receipt: ReservationReceiptWhereInput
  lastLocation: LocationWhereInput
}

input ReservationWhereUniqueInput {
  id: ID
  reservationNumber: Int
}

type Size implements Node {
  id: ID!
  slug: String!
  productType: ProductType
  top: TopSize
  bottom: BottomSize
  display: String!
}

"""
A connection to a list of items.
"""
type SizeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SizeEdge]!
  aggregate: AggregateSize!
}

input SizeCreateInput {
  id: ID
  slug: String!
  productType: ProductType
  display: String!
  top: TopSizeCreateOneInput
  bottom: BottomSizeCreateOneInput
}

input SizeCreateManyInput {
  create: [SizeCreateInput!]
  connect: [SizeWhereUniqueInput!]
}

input SizeCreateOneInput {
  create: SizeCreateInput
  connect: SizeWhereUniqueInput
}

"""
An edge in a connection.
"""
type SizeEdge {
  """
  The item at the end of the edge.
  """
  node: Size!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SizeOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  productType_ASC
  productType_DESC
  display_ASC
  display_DESC
}

type SizePreviousValues {
  id: ID!
  slug: String!
  productType: ProductType
  display: String!
}

input SizeScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SizeScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SizeScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SizeScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  productType: ProductType

  """
  All values that are not equal to given value.
  """
  productType_not: ProductType

  """
  All values that are contained in given list.
  """
  productType_in: [ProductType!]

  """
  All values that are not contained in given list.
  """
  productType_not_in: [ProductType!]
  display: String

  """
  All values that are not equal to given value.
  """
  display_not: String

  """
  All values that are contained in given list.
  """
  display_in: [String!]

  """
  All values that are not contained in given list.
  """
  display_not_in: [String!]

  """
  All values less than the given value.
  """
  display_lt: String

  """
  All values less than or equal the given value.
  """
  display_lte: String

  """
  All values greater than the given value.
  """
  display_gt: String

  """
  All values greater than or equal the given value.
  """
  display_gte: String

  """
  All values containing the given string.
  """
  display_contains: String

  """
  All values not containing the given string.
  """
  display_not_contains: String

  """
  All values starting with the given string.
  """
  display_starts_with: String

  """
  All values not starting with the given string.
  """
  display_not_starts_with: String

  """
  All values ending with the given string.
  """
  display_ends_with: String

  """
  All values not ending with the given string.
  """
  display_not_ends_with: String
}

type SizeSubscriptionPayload {
  mutation: MutationType!
  node: Size
  updatedFields: [String!]
  previousValues: SizePreviousValues
}

input SizeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SizeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SizeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SizeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SizeWhereInput
}

input SizeUpdateDataInput {
  slug: String
  productType: ProductType
  display: String
  top: TopSizeUpdateOneInput
  bottom: BottomSizeUpdateOneInput
}

input SizeUpdateInput {
  slug: String
  productType: ProductType
  display: String
  top: TopSizeUpdateOneInput
  bottom: BottomSizeUpdateOneInput
}

input SizeUpdateManyDataInput {
  slug: String
  productType: ProductType
  display: String
}

input SizeUpdateManyInput {
  create: [SizeCreateInput!]
  connect: [SizeWhereUniqueInput!]
  set: [SizeWhereUniqueInput!]
  disconnect: [SizeWhereUniqueInput!]
  delete: [SizeWhereUniqueInput!]
  update: [SizeUpdateWithWhereUniqueNestedInput!]
  updateMany: [SizeUpdateManyWithWhereNestedInput!]
  deleteMany: [SizeScalarWhereInput!]
  upsert: [SizeUpsertWithWhereUniqueNestedInput!]
}

input SizeUpdateManyMutationInput {
  slug: String
  productType: ProductType
  display: String
}

input SizeUpdateManyWithWhereNestedInput {
  where: SizeScalarWhereInput!
  data: SizeUpdateManyDataInput!
}

input SizeUpdateOneInput {
  create: SizeCreateInput
  connect: SizeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SizeUpdateDataInput
  upsert: SizeUpsertNestedInput
}

input SizeUpdateWithWhereUniqueNestedInput {
  where: SizeWhereUniqueInput!
  data: SizeUpdateDataInput!
}

input SizeUpsertNestedInput {
  update: SizeUpdateDataInput!
  create: SizeCreateInput!
}

input SizeUpsertWithWhereUniqueNestedInput {
  where: SizeWhereUniqueInput!
  update: SizeUpdateDataInput!
  create: SizeCreateInput!
}

input SizeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SizeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SizeWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SizeWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  productType: ProductType

  """
  All values that are not equal to given value.
  """
  productType_not: ProductType

  """
  All values that are contained in given list.
  """
  productType_in: [ProductType!]

  """
  All values that are not contained in given list.
  """
  productType_not_in: [ProductType!]
  display: String

  """
  All values that are not equal to given value.
  """
  display_not: String

  """
  All values that are contained in given list.
  """
  display_in: [String!]

  """
  All values that are not contained in given list.
  """
  display_not_in: [String!]

  """
  All values less than the given value.
  """
  display_lt: String

  """
  All values less than or equal the given value.
  """
  display_lte: String

  """
  All values greater than the given value.
  """
  display_gt: String

  """
  All values greater than or equal the given value.
  """
  display_gte: String

  """
  All values containing the given string.
  """
  display_contains: String

  """
  All values not containing the given string.
  """
  display_not_contains: String

  """
  All values starting with the given string.
  """
  display_starts_with: String

  """
  All values not starting with the given string.
  """
  display_not_starts_with: String

  """
  All values ending with the given string.
  """
  display_ends_with: String

  """
  All values not ending with the given string.
  """
  display_not_ends_with: String
  top: TopSizeWhereInput
  bottom: BottomSizeWhereInput
}

input SizeWhereUniqueInput {
  id: ID
  slug: String
}

type SmsReceipt implements Node {
  id: ID!
  externalId: String
  body: String!
  mediaUrls: [String!]!
  status: SmsStatus!
  sentAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type SmsReceiptConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SmsReceiptEdge]!
  aggregate: AggregateSmsReceipt!
}

input SmsReceiptCreateInput {
  id: ID
  externalId: String
  body: String!
  status: SmsStatus!
  mediaUrls: SmsReceiptCreatemediaUrlsInput
}

input SmsReceiptCreateManyInput {
  create: [SmsReceiptCreateInput!]
  connect: [SmsReceiptWhereUniqueInput!]
}

input SmsReceiptCreatemediaUrlsInput {
  set: [String!]
}

"""
An edge in a connection.
"""
type SmsReceiptEdge {
  """
  The item at the end of the edge.
  """
  node: SmsReceipt!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SmsReceiptOrderByInput {
  id_ASC
  id_DESC
  externalId_ASC
  externalId_DESC
  body_ASC
  body_DESC
  status_ASC
  status_DESC
  sentAt_ASC
  sentAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SmsReceiptPreviousValues {
  id: ID!
  externalId: String
  body: String!
  mediaUrls: [String!]!
  status: SmsStatus!
  sentAt: DateTime!
  updatedAt: DateTime!
}

input SmsReceiptScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SmsReceiptScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SmsReceiptScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SmsReceiptScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  externalId: String

  """
  All values that are not equal to given value.
  """
  externalId_not: String

  """
  All values that are contained in given list.
  """
  externalId_in: [String!]

  """
  All values that are not contained in given list.
  """
  externalId_not_in: [String!]

  """
  All values less than the given value.
  """
  externalId_lt: String

  """
  All values less than or equal the given value.
  """
  externalId_lte: String

  """
  All values greater than the given value.
  """
  externalId_gt: String

  """
  All values greater than or equal the given value.
  """
  externalId_gte: String

  """
  All values containing the given string.
  """
  externalId_contains: String

  """
  All values not containing the given string.
  """
  externalId_not_contains: String

  """
  All values starting with the given string.
  """
  externalId_starts_with: String

  """
  All values not starting with the given string.
  """
  externalId_not_starts_with: String

  """
  All values ending with the given string.
  """
  externalId_ends_with: String

  """
  All values not ending with the given string.
  """
  externalId_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  status: SmsStatus

  """
  All values that are not equal to given value.
  """
  status_not: SmsStatus

  """
  All values that are contained in given list.
  """
  status_in: [SmsStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [SmsStatus!]
  sentAt: DateTime

  """
  All values that are not equal to given value.
  """
  sentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  sentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  sentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  sentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  sentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  sentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  sentAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type SmsReceiptSubscriptionPayload {
  mutation: MutationType!
  node: SmsReceipt
  updatedFields: [String!]
  previousValues: SmsReceiptPreviousValues
}

input SmsReceiptSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SmsReceiptSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SmsReceiptSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SmsReceiptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SmsReceiptWhereInput
}

input SmsReceiptUpdateDataInput {
  externalId: String
  body: String
  status: SmsStatus
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
}

input SmsReceiptUpdateInput {
  externalId: String
  body: String
  status: SmsStatus
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
}

input SmsReceiptUpdateManyDataInput {
  externalId: String
  body: String
  status: SmsStatus
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
}

input SmsReceiptUpdateManyInput {
  create: [SmsReceiptCreateInput!]
  connect: [SmsReceiptWhereUniqueInput!]
  set: [SmsReceiptWhereUniqueInput!]
  disconnect: [SmsReceiptWhereUniqueInput!]
  delete: [SmsReceiptWhereUniqueInput!]
  update: [SmsReceiptUpdateWithWhereUniqueNestedInput!]
  updateMany: [SmsReceiptUpdateManyWithWhereNestedInput!]
  deleteMany: [SmsReceiptScalarWhereInput!]
  upsert: [SmsReceiptUpsertWithWhereUniqueNestedInput!]
}

input SmsReceiptUpdateManyMutationInput {
  externalId: String
  body: String
  status: SmsStatus
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
}

input SmsReceiptUpdateManyWithWhereNestedInput {
  where: SmsReceiptScalarWhereInput!
  data: SmsReceiptUpdateManyDataInput!
}

input SmsReceiptUpdatemediaUrlsInput {
  set: [String!]
}

input SmsReceiptUpdateWithWhereUniqueNestedInput {
  where: SmsReceiptWhereUniqueInput!
  data: SmsReceiptUpdateDataInput!
}

input SmsReceiptUpsertWithWhereUniqueNestedInput {
  where: SmsReceiptWhereUniqueInput!
  update: SmsReceiptUpdateDataInput!
  create: SmsReceiptCreateInput!
}

input SmsReceiptWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SmsReceiptWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [SmsReceiptWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [SmsReceiptWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  externalId: String

  """
  All values that are not equal to given value.
  """
  externalId_not: String

  """
  All values that are contained in given list.
  """
  externalId_in: [String!]

  """
  All values that are not contained in given list.
  """
  externalId_not_in: [String!]

  """
  All values less than the given value.
  """
  externalId_lt: String

  """
  All values less than or equal the given value.
  """
  externalId_lte: String

  """
  All values greater than the given value.
  """
  externalId_gt: String

  """
  All values greater than or equal the given value.
  """
  externalId_gte: String

  """
  All values containing the given string.
  """
  externalId_contains: String

  """
  All values not containing the given string.
  """
  externalId_not_contains: String

  """
  All values starting with the given string.
  """
  externalId_starts_with: String

  """
  All values not starting with the given string.
  """
  externalId_not_starts_with: String

  """
  All values ending with the given string.
  """
  externalId_ends_with: String

  """
  All values not ending with the given string.
  """
  externalId_not_ends_with: String
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  status: SmsStatus

  """
  All values that are not equal to given value.
  """
  status_not: SmsStatus

  """
  All values that are contained in given list.
  """
  status_in: [SmsStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [SmsStatus!]
  sentAt: DateTime

  """
  All values that are not equal to given value.
  """
  sentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  sentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  sentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  sentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  sentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  sentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  sentAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input SmsReceiptWhereUniqueInput {
  id: ID
}

enum SmsStatus {
  Queued
  Sending
  Sent
  Failed
  Delivered
  Undelivered
  Receiving
  Received
  Accepted
  Scheduled
  Read
  PartiallyDelivered
}

type StylePreferences implements Node {
  id: ID!
  styles: [String!]!
  patterns: [String!]!
  colors: [String!]!
  brands: [String!]!
}

"""
A connection to a list of items.
"""
type StylePreferencesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [StylePreferencesEdge]!
  aggregate: AggregateStylePreferences!
}

input StylePreferencesCreatebrandsInput {
  set: [String!]
}

input StylePreferencesCreatecolorsInput {
  set: [String!]
}

input StylePreferencesCreateInput {
  id: ID
  styles: StylePreferencesCreatestylesInput
  patterns: StylePreferencesCreatepatternsInput
  colors: StylePreferencesCreatecolorsInput
  brands: StylePreferencesCreatebrandsInput
}

input StylePreferencesCreateOneInput {
  create: StylePreferencesCreateInput
  connect: StylePreferencesWhereUniqueInput
}

input StylePreferencesCreatepatternsInput {
  set: [String!]
}

input StylePreferencesCreatestylesInput {
  set: [String!]
}

"""
An edge in a connection.
"""
type StylePreferencesEdge {
  """
  The item at the end of the edge.
  """
  node: StylePreferences!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum StylePreferencesOrderByInput {
  id_ASC
  id_DESC
}

type StylePreferencesPreviousValues {
  id: ID!
  styles: [String!]!
  patterns: [String!]!
  colors: [String!]!
  brands: [String!]!
}

type StylePreferencesSubscriptionPayload {
  mutation: MutationType!
  node: StylePreferences
  updatedFields: [String!]
  previousValues: StylePreferencesPreviousValues
}

input StylePreferencesSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StylePreferencesSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StylePreferencesSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [StylePreferencesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StylePreferencesWhereInput
}

input StylePreferencesUpdatebrandsInput {
  set: [String!]
}

input StylePreferencesUpdatecolorsInput {
  set: [String!]
}

input StylePreferencesUpdateDataInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateManyMutationInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateOneInput {
  create: StylePreferencesCreateInput
  connect: StylePreferencesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StylePreferencesUpdateDataInput
  upsert: StylePreferencesUpsertNestedInput
}

input StylePreferencesUpdatepatternsInput {
  set: [String!]
}

input StylePreferencesUpdatestylesInput {
  set: [String!]
}

input StylePreferencesUpsertNestedInput {
  update: StylePreferencesUpdateDataInput!
  create: StylePreferencesCreateInput!
}

input StylePreferencesWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StylePreferencesWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StylePreferencesWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [StylePreferencesWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

input StylePreferencesWhereUniqueInput {
  id: ID
}

type StyleSubmission implements Node {
  id: ID!
  user: User!
  image: Image!
  location: Location
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  approved: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type StyleSubmissionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [StyleSubmissionEdge]!
  aggregate: AggregateStyleSubmission!
}

input StyleSubmissionCreateInput {
  id: ID
  approved: Boolean
  user: UserCreateOneWithoutStyleSubmissionsInput!
  image: ImageCreateOneInput!
  location: LocationCreateOneInput
  products: ProductCreateManyInput
}

input StyleSubmissionCreateManyWithoutUserInput {
  create: [StyleSubmissionCreateWithoutUserInput!]
  connect: [StyleSubmissionWhereUniqueInput!]
}

input StyleSubmissionCreateOneInput {
  create: StyleSubmissionCreateInput
  connect: StyleSubmissionWhereUniqueInput
}

input StyleSubmissionCreateWithoutUserInput {
  id: ID
  approved: Boolean
  image: ImageCreateOneInput!
  location: LocationCreateOneInput
  products: ProductCreateManyInput
}

"""
An edge in a connection.
"""
type StyleSubmissionEdge {
  """
  The item at the end of the edge.
  """
  node: StyleSubmission!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum StyleSubmissionOrderByInput {
  id_ASC
  id_DESC
  approved_ASC
  approved_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StyleSubmissionPreviousValues {
  id: ID!
  approved: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

>>>>>>> Rebase
type StyleSubmissionReport implements Node {
  id: ID!
  reporter: User!
  reported: StyleSubmission!
  status: StyleSubmissionReportStatus
  reportedAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type StyleSubmissionReportConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [StyleSubmissionReportEdge]!
  aggregate: AggregateStyleSubmissionReport!
}

input StyleSubmissionReportCreateInput {
  id: ID
  status: StyleSubmissionReportStatus
  reporter: UserCreateOneInput!
  reported: StyleSubmissionCreateOneInput!
}

"""
An edge in a connection.
"""
type StyleSubmissionReportEdge {
  """
  The item at the end of the edge.
  """
  node: StyleSubmissionReport!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum StyleSubmissionReportOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  reportedAt_ASC
  reportedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StyleSubmissionReportPreviousValues {
  id: ID!
  status: StyleSubmissionReportStatus
  reportedAt: DateTime!
  updatedAt: DateTime!
}

enum StyleSubmissionReportStatus {
  Pending
  Reviewed
}

type StyleSubmissionReportSubscriptionPayload {
  mutation: MutationType!
  node: StyleSubmissionReport
  updatedFields: [String!]
  previousValues: StyleSubmissionReportPreviousValues
}
>>>>>>> Update CommunityStyleReportStatus and finish image uploading

<<<<<<< HEAD
  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  status: SmsStatus
=======
input StyleSubmissionReportSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StyleSubmissionReportSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StyleSubmissionReportSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [StyleSubmissionReportSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StyleSubmissionReportWhereInput
}

input StyleSubmissionReportUpdateInput {
  status: StyleSubmissionReportStatus
  reporter: UserUpdateOneRequiredInput
  reported: StyleSubmissionUpdateOneRequiredInput
}

input StyleSubmissionReportUpdateManyMutationInput {
  status: StyleSubmissionReportStatus
}

input StyleSubmissionReportWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StyleSubmissionReportWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StyleSubmissionReportWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [StyleSubmissionReportWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  status: StyleSubmissionReportStatus

  """
  All values that are not equal to given value.
  """
  status_not: StyleSubmissionReportStatus

  """
  All values that are contained in given list.
  """
  status_in: [StyleSubmissionReportStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [StyleSubmissionReportStatus!]
  reportedAt: DateTime
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
  status_not: SmsStatus
=======
  reportedAt_not: DateTime
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
  status_in: [SmsStatus!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [SmsStatus!]
  sentAt: DateTime

  """
  All values that are not equal to given value.
  """
  sentAt_not: DateTime

  """
  All values that are contained in given list.
  """
  sentAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  sentAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  sentAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  sentAt_lte: DateTime

  """
  All values greater than the given value.
  """
  sentAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  sentAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input SmsReceiptWhereUniqueInput {
  id: ID
}

enum SmsStatus {
  Queued
  Sending
  Sent
  Failed
  Delivered
  Undelivered
  Receiving
  Received
  Accepted
  Scheduled
  Read
  PartiallyDelivered
}

<<<<<<< HEAD
type StylePreferences implements Node {
=======
<<<<<<< HEAD
type StylePreferences {
=======
type StylePreferences implements Node {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID!
  styles: [String!]!
  patterns: [String!]!
  colors: [String!]!
  brands: [String!]!
}

<<<<<<< HEAD
=======
<<<<<<< HEAD
type StylePreferencesConnection {
  pageInfo: PageInfo!
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
"""
A connection to a list of items.
"""
type StylePreferencesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
<<<<<<< HEAD
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  edges: [StylePreferencesEdge]!
  aggregate: AggregateStylePreferences!
}

input StylePreferencesCreatebrandsInput {
  set: [String!]
}

input StylePreferencesCreatecolorsInput {
  set: [String!]
}

input StylePreferencesCreateInput {
  id: ID
  styles: StylePreferencesCreatestylesInput
  patterns: StylePreferencesCreatepatternsInput
  colors: StylePreferencesCreatecolorsInput
  brands: StylePreferencesCreatebrandsInput
}

input StylePreferencesCreateOneInput {
  create: StylePreferencesCreateInput
  connect: StylePreferencesWhereUniqueInput
}

input StylePreferencesCreatepatternsInput {
  set: [String!]
}

input StylePreferencesCreatestylesInput {
  set: [String!]
}

<<<<<<< HEAD
=======
<<<<<<< HEAD
type StylePreferencesEdge {
  node: StylePreferences!
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
"""
An edge in a connection.
"""
type StylePreferencesEdge {
  """
  The item at the end of the edge.
  """
  node: StylePreferences!

  """
  A cursor for use in pagination.
  """
<<<<<<< HEAD
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  cursor: String!
}

enum StylePreferencesOrderByInput {
  id_ASC
  id_DESC
}

type StylePreferencesPreviousValues {
  id: ID!
  styles: [String!]!
  patterns: [String!]!
  colors: [String!]!
  brands: [String!]!
}

type StylePreferencesSubscriptionPayload {
<<<<<<< HEAD
=======
  mutation: MutationType!
  node: StylePreferences
  updatedFields: [String!]
  previousValues: StylePreferencesPreviousValues
}

input StylePreferencesSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StylePreferencesSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StylePreferencesSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [StylePreferencesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StylePreferencesWhereInput
}

input StylePreferencesUpdatebrandsInput {
  set: [String!]
}

input StylePreferencesUpdatecolorsInput {
  set: [String!]
}

input StylePreferencesUpdateDataInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateManyMutationInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateOneInput {
  create: StylePreferencesCreateInput
  connect: StylePreferencesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StylePreferencesUpdateDataInput
  upsert: StylePreferencesUpsertNestedInput
}

input StylePreferencesUpdatepatternsInput {
  set: [String!]
}

input StylePreferencesUpdatestylesInput {
  set: [String!]
}

input StylePreferencesUpsertNestedInput {
  update: StylePreferencesUpdateDataInput!
  create: StylePreferencesCreateInput!
}

input StylePreferencesWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StylePreferencesWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StylePreferencesWhereInput!]
=======
  reportedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  reportedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  reportedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  reportedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  reportedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  reportedAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  reporter: UserWhereInput
  reported: StyleSubmissionWhereInput
}

input StyleSubmissionReportWhereUniqueInput {
  id: ID
}

input StyleSubmissionScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StyleSubmissionScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StyleSubmissionScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [StyleSubmissionScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  approved: Boolean

  """
  All values that are not equal to given value.
  """
  approved_not: Boolean
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type StyleSubmissionSubscriptionPayload {
  mutation: MutationType!
  node: StyleSubmission
  updatedFields: [String!]
  previousValues: StyleSubmissionPreviousValues
}

input StyleSubmissionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StyleSubmissionSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StyleSubmissionSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [StyleSubmissionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StyleSubmissionWhereInput
}

input StyleSubmissionUpdateDataInput {
  approved: Boolean
  user: UserUpdateOneRequiredWithoutStyleSubmissionsInput
  image: ImageUpdateOneRequiredInput
  location: LocationUpdateOneInput
  products: ProductUpdateManyInput
}

input StyleSubmissionUpdateInput {
  approved: Boolean
  user: UserUpdateOneRequiredWithoutStyleSubmissionsInput
  image: ImageUpdateOneRequiredInput
  location: LocationUpdateOneInput
  products: ProductUpdateManyInput
}

input StyleSubmissionUpdateManyDataInput {
  approved: Boolean
}

input StyleSubmissionUpdateManyMutationInput {
  approved: Boolean
}

input StyleSubmissionUpdateManyWithoutUserInput {
  create: [StyleSubmissionCreateWithoutUserInput!]
  connect: [StyleSubmissionWhereUniqueInput!]
  set: [StyleSubmissionWhereUniqueInput!]
  disconnect: [StyleSubmissionWhereUniqueInput!]
  delete: [StyleSubmissionWhereUniqueInput!]
  update: [StyleSubmissionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StyleSubmissionUpdateManyWithWhereNestedInput!]
  deleteMany: [StyleSubmissionScalarWhereInput!]
  upsert: [StyleSubmissionUpsertWithWhereUniqueWithoutUserInput!]
}

input StyleSubmissionUpdateManyWithWhereNestedInput {
  where: StyleSubmissionScalarWhereInput!
  data: StyleSubmissionUpdateManyDataInput!
}

input StyleSubmissionUpdateOneRequiredInput {
  create: StyleSubmissionCreateInput
  connect: StyleSubmissionWhereUniqueInput
  update: StyleSubmissionUpdateDataInput
  upsert: StyleSubmissionUpsertNestedInput
}

input StyleSubmissionUpdateWithoutUserDataInput {
  approved: Boolean
  image: ImageUpdateOneRequiredInput
  location: LocationUpdateOneInput
  products: ProductUpdateManyInput
}

input StyleSubmissionUpdateWithWhereUniqueWithoutUserInput {
  where: StyleSubmissionWhereUniqueInput!
  data: StyleSubmissionUpdateWithoutUserDataInput!
}

input StyleSubmissionUpsertNestedInput {
  update: StyleSubmissionUpdateDataInput!
  create: StyleSubmissionCreateInput!
}

input StyleSubmissionUpsertWithWhereUniqueWithoutUserInput {
  where: StyleSubmissionWhereUniqueInput!
  update: StyleSubmissionUpdateWithoutUserDataInput!
  create: StyleSubmissionCreateWithoutUserInput!
}

input StyleSubmissionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StyleSubmissionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [StyleSubmissionWhereInput!]
>>>>>>> Rebase

  """
  Logical NOT on all given filters combined by AND.
  """
<<<<<<< HEAD
  NOT: [StylePreferencesWhereInput!]
=======
  NOT: [StyleSubmissionWhereInput!]
>>>>>>> Rebase
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
<<<<<<< HEAD
}

input StylePreferencesWhereUniqueInput {
  id: ID
}

<<<<<<< HEAD
=======
  approved: Boolean

  """
  All values that are not equal to given value.
  """
  approved_not: Boolean
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  user: UserWhereInput
  image: ImageWhereInput
  location: LocationWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input StyleSubmissionWhereUniqueInput {
  id: ID
}

>>>>>>> Rebase
type Subscription {
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  collectionGroup(
    where: CollectionGroupSubscriptionWhereInput
  ): CollectionGroupSubscriptionPayload
  homepageProductRail(
    where: HomepageProductRailSubscriptionWhereInput
  ): HomepageProductRailSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  productStatusChange(
    where: ProductStatusChangeSubscriptionWhereInput
  ): ProductStatusChangeSubscriptionPayload
  productMaterialCategory(
    where: ProductMaterialCategorySubscriptionWhereInput
  ): ProductMaterialCategorySubscriptionPayload
  productModel(
    where: ProductModelSubscriptionWhereInput
  ): ProductModelSubscriptionPayload
  physicalProductInventoryStatusChange(
    where: PhysicalProductInventoryStatusChangeSubscriptionWhereInput
  ): PhysicalProductInventoryStatusChangeSubscriptionPayload
  warehouseLocationConstraint(
    where: WarehouseLocationConstraintSubscriptionWhereInput
  ): WarehouseLocationConstraintSubscriptionPayload
  warehouseLocation(
    where: WarehouseLocationSubscriptionWhereInput
  ): WarehouseLocationSubscriptionPayload
  paymentPlan(
    where: PaymentPlanSubscriptionWhereInput
  ): PaymentPlanSubscriptionPayload
  emailReceipt(
    where: EmailReceiptSubscriptionWhereInput
  ): EmailReceiptSubscriptionPayload
<<<<<<< HEAD
=======
  styleSubmissionReport(
    where: StyleSubmissionReportSubscriptionWhereInput
  ): StyleSubmissionReportSubscriptionPayload
>>>>>>> Rebase
  bagItem(where: BagItemSubscriptionWhereInput): BagItemSubscriptionPayload
  customerMembership(
    where: CustomerMembershipSubscriptionWhereInput
  ): CustomerMembershipSubscriptionPayload
  pauseRequest(
    where: PauseRequestSubscriptionWhereInput
  ): PauseRequestSubscriptionPayload
  recentlyViewedProduct(
    where: RecentlyViewedProductSubscriptionWhereInput
  ): RecentlyViewedProductSubscriptionPayload
  reservationFeedback(
    where: ReservationFeedbackSubscriptionWhereInput
  ): ReservationFeedbackSubscriptionPayload
  productVariantFeedback(
    where: ProductVariantFeedbackSubscriptionWhereInput
  ): ProductVariantFeedbackSubscriptionPayload
  productVariantFeedbackQuestion(
    where: ProductVariantFeedbackQuestionSubscriptionWhereInput
  ): ProductVariantFeedbackQuestionSubscriptionPayload
  reservationReceipt(
    where: ReservationReceiptSubscriptionWhereInput
  ): ReservationReceiptSubscriptionPayload
  productRequest(
    where: ProductRequestSubscriptionWhereInput
  ): ProductRequestSubscriptionPayload
  productVariantWant(
    where: ProductVariantWantSubscriptionWhereInput
  ): ProductVariantWantSubscriptionPayload
  collection(
    where: CollectionSubscriptionWhereInput
  ): CollectionSubscriptionPayload
  pushNotificationReceipt(
    where: PushNotificationReceiptSubscriptionWhereInput
  ): PushNotificationReceiptSubscriptionPayload
  customerDetail(
    where: CustomerDetailSubscriptionWhereInput
  ): CustomerDetailSubscriptionPayload
  userPushNotificationInterest(
    where: UserPushNotificationInterestSubscriptionWhereInput
  ): UserPushNotificationInterestSubscriptionPayload
  billingInfo(
    where: BillingInfoSubscriptionWhereInput
  ): BillingInfoSubscriptionPayload
  reservationReceiptItem(
    where: ReservationReceiptItemSubscriptionWhereInput
  ): ReservationReceiptItemSubscriptionPayload
<<<<<<< HEAD
  smsReceipt(
    where: SmsReceiptSubscriptionWhereInput
  ): SmsReceiptSubscriptionPayload
  stylePreferences(
    where: StylePreferencesSubscriptionWhereInput
  ): StylePreferencesSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
=======
  stylePreferences(
    where: StylePreferencesSubscriptionWhereInput
  ): StylePreferencesSubscriptionPayload
>>>>>>> Rebase
  package(where: PackageSubscriptionWhereInput): PackageSubscriptionPayload
  size(where: SizeSubscriptionWhereInput): SizeSubscriptionPayload
  productFunction(
    where: ProductFunctionSubscriptionWhereInput
  ): ProductFunctionSubscriptionPayload
<<<<<<< HEAD
=======
  styleSubmission(
    where: StyleSubmissionSubscriptionWhereInput
  ): StyleSubmissionSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
>>>>>>> Rebase
  color(where: ColorSubscriptionWhereInput): ColorSubscriptionPayload
  topSize(where: TopSizeSubscriptionWhereInput): TopSizeSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  userPushNotification(
    where: UserPushNotificationSubscriptionWhereInput
  ): UserPushNotificationSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  bottomSize(
    where: BottomSizeSubscriptionWhereInput
  ): BottomSizeSubscriptionPayload
  packageTransitEvent(
    where: PackageTransitEventSubscriptionWhereInput
  ): PackageTransitEventSubscriptionPayload
  label(where: LabelSubscriptionWhereInput): LabelSubscriptionPayload
<<<<<<< HEAD
=======
  smsReceipt(
    where: SmsReceiptSubscriptionWhereInput
  ): SmsReceiptSubscriptionPayload
>>>>>>> Rebase
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  physicalProduct(
    where: PhysicalProductSubscriptionWhereInput
  ): PhysicalProductSubscriptionPayload
  productVariant(
    where: ProductVariantSubscriptionWhereInput
  ): ProductVariantSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  reservation(
    where: ReservationSubscriptionWhereInput
  ): ReservationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag implements Node {
<<<<<<< HEAD
=======
type StyleSubmission implements Node {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID!
  user: User!
  image: Image!
  location: Location
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  approved: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
<<<<<<< HEAD
type TagConnection {
=======
type StyleSubmissionConnection {
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
<<<<<<< HEAD
  edges: [TagEdge]!
  aggregate: AggregateTag!
=======
  edges: [StyleSubmissionEdge]!
  aggregate: AggregateStyleSubmission!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
}

input StyleSubmissionCreateInput {
  id: ID
  approved: Boolean
  user: UserCreateOneWithoutStyleSubmissionsInput!
  image: ImageCreateOneInput!
  location: LocationCreateOneInput
  products: ProductCreateManyInput
}

input StyleSubmissionCreateManyWithoutUserInput {
  create: [StyleSubmissionCreateWithoutUserInput!]
  connect: [StyleSubmissionWhereUniqueInput!]
}

input StyleSubmissionCreateOneInput {
  create: StyleSubmissionCreateInput
  connect: StyleSubmissionWhereUniqueInput
}

input StyleSubmissionCreateWithoutUserInput {
  id: ID
  approved: Boolean
  image: ImageCreateOneInput!
  location: LocationCreateOneInput
  products: ProductCreateManyInput
}

"""
An edge in a connection.
"""
<<<<<<< HEAD
type TagEdge {
  """
  The item at the end of the edge.
  """
  node: Tag!
=======
type StyleSubmissionEdge {
  """
  The item at the end of the edge.
  """
  node: StyleSubmission!
>>>>>>> Add CommunityStyle+Report datamodel and resolvers

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum StyleSubmissionOrderByInput {
  id_ASC
  id_DESC
  approved_ASC
  approved_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StyleSubmissionPreviousValues {
  id: ID!
  approved: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

<<<<<<< HEAD
input TagScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TagScalarWhereInput!]
=======
type StyleSubmissionReport implements Node {
  id: ID!
  reporter: User!
  reported: StyleSubmission!
  status: StyleSubmissionReportStatus
  reportedAt: DateTime!
=======
  id: ID!
  name: String!
  description: String
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product!]
  createdAt: DateTime!
>>>>>>> Rebase
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
<<<<<<< HEAD
type StyleSubmissionReportConnection {
=======
type TagConnection {
>>>>>>> Rebase
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
<<<<<<< HEAD
  edges: [StyleSubmissionReportEdge]!
  aggregate: AggregateStyleSubmissionReport!
}

input StyleSubmissionReportCreateInput {
  id: ID
  status: StyleSubmissionReportStatus
  reporter: UserCreateOneInput!
  reported: StyleSubmissionCreateOneInput!
=======
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
  description: String
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutProductsInput {
  id: ID
  name: String!
  description: String
>>>>>>> Rebase
}

"""
An edge in a connection.
"""
<<<<<<< HEAD
type StyleSubmissionReportEdge {
  """
  The item at the end of the edge.
  """
  node: StyleSubmissionReport!
=======
type TagEdge {
  """
  The item at the end of the edge.
  """
  node: Tag!
>>>>>>> Rebase

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

<<<<<<< HEAD
enum StyleSubmissionReportOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  reportedAt_ASC
  reportedAt_DESC
=======
enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
>>>>>>> Rebase
  updatedAt_ASC
  updatedAt_DESC
}

<<<<<<< HEAD
type StyleSubmissionReportPreviousValues {
  id: ID!
  status: StyleSubmissionReportStatus
  reportedAt: DateTime!
  updatedAt: DateTime!
}

enum StyleSubmissionReportStatus {
  AwaitingReview
  UnderReview
  Reviewed
}

type StyleSubmissionReportSubscriptionPayload {
  mutation: MutationType!
  node: StyleSubmissionReport
  updatedFields: [String!]
  previousValues: StyleSubmissionReportPreviousValues
}

input StyleSubmissionReportSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StyleSubmissionReportSubscriptionWhereInput!]
=======
type TagPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TagScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TagScalarWhereInput!]
>>>>>>> Rebase

  """
  Logical OR on all given filters.
  """
<<<<<<< HEAD
  OR: [StyleSubmissionReportSubscriptionWhereInput!]
=======
  OR: [TagScalarWhereInput!]
>>>>>>> Rebase

  """
  Logical NOT on all given filters combined by AND.
  """
<<<<<<< HEAD
  NOT: [StyleSubmissionReportSubscriptionWhereInput!]
=======
  NOT: [TagScalarWhereInput!]
  id: ID
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
<<<<<<< HEAD
  updatedFields_contains_some: [String!]
  node: StyleSubmissionReportWhereInput
}

input StyleSubmissionReportUpdateInput {
  status: StyleSubmissionReportStatus
  reporter: UserUpdateOneRequiredInput
  reported: StyleSubmissionUpdateOneRequiredInput
}

input StyleSubmissionReportUpdateManyMutationInput {
  status: StyleSubmissionReportStatus
}

input StyleSubmissionReportWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StyleSubmissionReportWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers

  """
  Logical OR on all given filters.
  """
<<<<<<< HEAD
  OR: [TagScalarWhereInput!]
=======
  OR: [StyleSubmissionReportWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers

  """
  Logical NOT on all given filters combined by AND.
  """
<<<<<<< HEAD
  NOT: [TagScalarWhereInput!]
=======
  NOT: [StyleSubmissionReportWhereInput!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
<<<<<<< HEAD
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
=======
  id_not_starts_with: I
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
<<<<<<< HEAD
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]
=======

  """
>>>>>>> Add CommunityStyle+Report datamodel and resolvers

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
=======
  status_not_in: [StyleSubmissionReportStatus!]
  reportedAt: DateTime
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
>>>>>>> Rebase

  """
  All values that are not equal to given value.
  """
<<<<<<< HEAD
<<<<<<< HEAD
  description_not: String
=======
  reportedAt_not: DateTime
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  name_not: String
>>>>>>> Rebase

  """
  All values that are contained in given list.
  """
<<<<<<< HEAD
<<<<<<< HEAD
  description_in: [String!]
=======
  reportedAt_in: [DateTime!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  name_in: [String!]
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
<<<<<<< HEAD
<<<<<<< HEAD
  description_not_in: [String!]
=======
  reportedAt_not_in: [DateTime!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  name_not_in: [String!]
>>>>>>> Rebase

  """
  All values less than the given value.
  """
<<<<<<< HEAD
<<<<<<< HEAD
  description_lt: String
=======
  reportedAt_lt: DateTime
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  name_lt: String
>>>>>>> Rebase

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
<<<<<<< HEAD
  description_lte: String
=======
  name_lte: String
>>>>>>> Rebase

  """
  All values greater than the given value.
  """
<<<<<<< HEAD
  description_gt: String
=======
  name_gt: String
>>>>>>> Rebase

  """
  All values greater than or equal the given value.
  """
<<<<<<< HEAD
  description_gte: String
=======
  name_gte: String
>>>>>>> Rebase

  """
  All values containing the given string.
  """
<<<<<<< HEAD
  description_contains: String
=======
  name_contains: String
>>>>>>> Rebase

  """
  All values not containing the given string.
  """
<<<<<<< HEAD
  description_not_contains: String
=======
  name_not_contains: String
>>>>>>> Rebase

  """
  All values starting with the given string.
  """
<<<<<<< HEAD
  description_starts_with: String
=======
  name_starts_with: String
>>>>>>> Rebase

  """
  All values not starting with the given string.
  """
<<<<<<< HEAD
  description_not_starts_with: String
=======
  name_not_starts_with: String
>>>>>>> Rebase

  """
  All values ending with the given string.
  """
<<<<<<< HEAD
  description_ends_with: String
=======
  name_ends_with: String
>>>>>>> Rebase

  """
  All values not ending with the given string.
  """
<<<<<<< HEAD
  description_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
=======
  reportedAt_lte: DateTime

  """
  """
  reportedAt_gte: DateTim
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

<<<<<<< HEAD
=======
  name_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

>>>>>>> Rebase
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}
=======
 All values greater than the given value.
  """
  updatedAt_gt: DateTime
>>>>>>> Add CommunityStyle+Report datamodel and resolvers

<<<<<<< HEAD
  """
  All values greater than or equal the given value.
  """
  upd: ID"

<<<<<<< HEAD
=======
type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

>>>>>>> Rebase
input TagSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TagSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TagSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}
=======
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
>>>>>>> Add CommunityStyle+Report datamodel and resolvers

<<<<<<< HEAD
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  id_contains: ID

  """
  All values not containing the given string.
  """
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  approved: Boolean

 All values that are not equal to given value.
  """
  approved_not: Boolean
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that w uyRepoamodel and resolvers
  mutation_in: [MutationType!]
  updatedFields_contains: String
  u"givotteelptionWheraubscript
input TagUpdateManyMutationInput {
  name: String
  description: String
}

input TagUpdateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  deleteMany: [TagScalarWhereInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutProductsInput!]
}

=======
input TagUpdateInput {
  name: String
  description: String
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
  description: String
}

input TagUpdateManyMutationInput {
  name: String
  description: String
}

input TagUpdateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  deleteMany: [TagScalarWhereInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutProductsInput!]
}

>>>>>>> Rebase
input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutProductsDataInput {
  name: String
  description: String
}

input TagUpdateWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutProductsDataInput!
<<<<<<< HEAD

input TagUpsertWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
<<<<<<< HEAD
=======
}

input TagUpsertWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
>>>>>>> Rebase
  update: TagUpdateWithoutProductsDataInput!
  create: TagCreateWithoutProductsInput!
}

input TagWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TagWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TagWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TagWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Rebase

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
<<<<<<< HEAD
=======
n name_lt: String
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String
<<<<<<< HEAD

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
=======
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
>>>>>>> Rebase
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
<<<<<<< HEAD
=======
  name_contains: Stringp_ng
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
>>>>>>> Rebase
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type TopSize implements Node {
  id: ID!
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

"""
A connection to a list of items.
"""
type TopSizeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TopSizeEdge]!
  aggregate: AggregateTopSize!
}

input TopSizeCreateInput {
  id: ID
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

input TopSizeCreateOneInput {
  create: TopSizeCreateInput
  connect: TopSizeWhereUniqueInput
}

"""
An edge in a connection.
"""
type TopSizeEdge {
  """
  The item at the end of the edge.
  """
  node: TopSize!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TopSizeOrderByInput {
  id_ASC
  id_DESC
  letter_ASC
  letter_DESC
  sleeve_ASC
  sleeve_DESC
  shoulder_ASC
  shoulder_DESC
  chest_ASC
  chest_DESC
  neck_ASC
  neck_DESC
  length_ASC
  length_DESC
}

type TopSizePreviousValues {
  id: ID!
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

type TopSizeSubscriptionPayload {
  mutation: MutationType!
  node: TopSize
  updatedFields: [String!]
  previousValues: TopSizePreviousValues
}

input TopSizeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TopSizeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TopSizeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TopSizeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TopSizeWhereInput
}

input TopSizeUpdateDataInput {
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

input TopSizeUpdateInput {
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

input TopSizeUpdateManyMutationInput {
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

input TopSizeUpdateOneInput {
  create: TopSizeCreateInput
  connect: TopSizeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TopSizeUpdateDataInput
  upsert: TopSizeUpsertNestedInput
}

input TopSizeUpsertNestedInput {
  update: TopSizeUpdateDataInput!
  create: TopSizeCreateInput!
}

input TopSizeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TopSizeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TopSizeWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TopSizeWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  letter: LetterSize

  """
  All values that are not equal to given value.
  """
  letter_not: LetterSize

  """
  All values that are contained in given list.
  """
  letter_in: [LetterSize!]

  """
  All values that are not contained in given list.
  """
  letter_not_in: [LetterSize!]
  sleeve: Float

  """
  All values that are not equal to given value.
  """
  sleeve_not: Float

  """
  All values that are contained in given list.
  """
  sleeve_in: [Float!]

  """
  All values that are not contained in given list.
  """
  sleeve_not_in: [Float!]

  """
  All values less than the given value.
  """
  sleeve_lt: Float

  """
  All values less than or equal the given value.
  """
  sleeve_lte: Float

  """
  All values greater than the given value.
  """
  sleeve_gt: Float

  """
  All values greater than or equal the given value.
  """
  sleeve_gte: Float
  shoulder: Float

  """
  All values that are not equal to given value.
  """
  shoulder_not: Float

  """
  All values that are contained in given list.
  """
  shoulder_in: [Float!]

  """
  All values that are not contained in given list.
  """
  shoulder_not_in: [Float!]

  """
  All values less than the given value.
  """
  shoulder_lt: Float

  """
  All values less than or equal the given value.
  """
  shoulder_lte: Float

  """
  All values greater than the given value.
  """
  shoulder_gt: Float

  """
  All values greater than or equal the given value.
  """
  shoulder_gte: Float
  chest: Float

  """
  All values that are not equal to given value.
  """
  chest_not: Float

  """
  All values that are contained in given list.
  """
  chest_in: [Float!]

  """
  All values that are not contained in given list.
  """
  chest_not_in: [Float!]

  """
  All values less than the given value.
  """
  chest_lt: Float

  """
  All values less than or equal the given value.
  """
  chest_lte: Float

  """
  All values greater than the given value.
  """
  chest_gt: Float

  """
  All values greater than or equal the given value.
  """
  chest_gte: Float
  neck: Float

  """
  All values that are not equal to given value.
  """
  neck_not: Float

  """
  All values that are contained in given list.
  """
  neck_in: [Float!]

  """
  All values that are not contained in given list.
  """
  neck_not_in: [Float!]

  """
  All values less than the given value.
  """
  neck_lt: Float

  """
  All values less than or equal the given value.
  """
  neck_lte: Float

  """
  All values greater than the given value.
  """
  neck_gt: Float

  """
  All values greater than or equal the given value.
  """
  neck_gte: Float
  length: Float

  """
  All values that are not equal to given value.
  """
  length_not: Float

  """
  All values that are contained in given list.
  """
  length_in: [Float!]

  """
  All values that are not contained in given list.
  """
  length_not_in: [Float!]

  """
  All values less than the given value.
  """
  length_lt: Float

  """
  All values less than or equal the given value.
  """
  length_lte: Float

  """
  All values greater than the given value.
  """
  length_gt: Float

  """
  All values greater than or equal the given value.
  """
  length_gte: Float
}

input TopSizeWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole!
  roles: [UserRole!]!
  pushNotificationStatus: PushNotificationStatus!
  pushNotifications(
    where: PushNotificationReceiptWhereInput
    orderBy: PushNotificationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PushNotificationReceipt!]
  pushNotification: UserPushNotification
  verificationStatus: UserVerificationStatus!
  verificationMethod: UserVerificationMethod!
  smsReceipts(
    where: SmsReceiptWhereInput
    orderBy: SmsReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [SmsReceipt!]
  styleSubmissions(
    where: StyleSubmissionWhereInput
    orderBy: StyleSubmissionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [StyleSubmission!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserCreaterolesInput
  pushNotifications: PushNotificationReceiptCreateManyWithoutUsersInput
  pushNotification: UserPushNotificationCreateOneInput
  smsReceipts: SmsReceiptCreateManyInput
  styleSubmissions: StyleSubmissionCreateManyWithoutUserInput
}

input UserCreateManyWithoutPushNotificationsInput {
  create: [UserCreateWithoutPushNotificationsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStyleSubmissionsInput {
  create: UserCreateWithoutStyleSubmissionsInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [UserRole!]
}

input UserCreateWithoutPushNotificationsInput {
  id: ID
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserCreaterolesInput
  pushNotification: UserPushNotificationCreateOneInput
  smsReceipts: SmsReceiptCreateManyInput
  styleSubmissions: StyleSubmissionCreateManyWithoutUserInput
}

input UserCreateWithoutStyleSubmissionsInput {
  id: ID
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserCreaterolesInput
  pushNotifications: PushNotificationReceiptCreateManyWithoutUsersInput
  pushNotification: UserPushNotificationCreateOneInput
  smsReceipts: SmsReceiptCreateManyInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  auth0Id_ASC
  auth0Id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  role_ASC
  role_DESC
  pushNotificationStatus_ASC
  pushNotificationStatus_DESC
  verificationStatus_ASC
  verificationStatus_DESC
  verificationMethod_ASC
  verificationMethod_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole!
  roles: [UserRole!]!
  pushNotificationStatus: PushNotificationStatus!
  verificationStatus: UserVerificationStatus!
  verificationMethod: UserVerificationMethod!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserPushNotification implements Node {
  id: ID!
  interests(
    where: UserPushNotificationInterestWhereInput
    orderBy: UserPushNotificationInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [UserPushNotificationInterest!]
  status: Boolean!
  history(
    where: PushNotificationReceiptWhereInput
    orderBy: PushNotificationReceiptOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PushNotificationReceipt!]
}

"""
A connection to a list of items.
"""
type UserPushNotificationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserPushNotificationEdge]!
  aggregate: AggregateUserPushNotification!
}

input UserPushNotificationCreateInput {
  id: ID
  status: Boolean
  interests: UserPushNotificationInterestCreateManyInput
  history: PushNotificationReceiptCreateManyInput
}

input UserPushNotificationCreateOneInput {
  create: UserPushNotificationCreateInput
  connect: UserPushNotificationWhereUniqueInput
}

"""
An edge in a connection.
"""
type UserPushNotificationEdge {
  """
  The item at the end of the edge.
  """
  node: UserPushNotification!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type UserPushNotificationInterest implements Node {
  id: ID!
  type: UserPushNotificationInterestType!
  value: String!
  user: User!
  status: Boolean!
}

"""
A connection to a list of items.
"""
type UserPushNotificationInterestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserPushNotificationInterestEdge]!
  aggregate: AggregateUserPushNotificationInterest!
}

input UserPushNotificationInterestCreateInput {
  id: ID
  type: UserPushNotificationInterestType!
  value: String!
  status: Boolean
  user: UserCreateOneInput!
}

input UserPushNotificationInterestCreateManyInput {
  create: [UserPushNotificationInterestCreateInput!]
  connect: [UserPushNotificationInterestWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type UserPushNotificationInterestEdge {
  """
  The item at the end of the edge.
  """
  node: UserPushNotificationInterest!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserPushNotificationInterestOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  value_ASC
  value_DESC
  status_ASC
  status_DESC
}

type UserPushNotificationInterestPreviousValues {
  id: ID!
  type: UserPushNotificationInterestType!
  value: String!
  status: Boolean!
}

input UserPushNotificationInterestScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserPushNotificationInterestScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserPushNotificationInterestScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserPushNotificationInterestScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  type: UserPushNotificationInterestType

  """
  All values that are not equal to given value.
  """
  type_not: UserPushNotificationInterestType

  """
  All values that are contained in given list.
  """
  type_in: [UserPushNotificationInterestType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [UserPushNotificationInterestType!]
  value: String

  """
  All values that are not equal to given value.
  """
  value_not: String

  """
  All values that are contained in given list.
  """
  value_in: [String!]

  """
  All values that are not contained in given list.
  """
  value_not_in: [String!]

  """
  All values less than the given value.
  """
  value_lt: String

  """
  All values less than or equal the given value.
  """
  value_lte: String

  """
  All values greater than the given value.
  """
  value_gt: String

  """
  All values greater than or equal the given value.
  """
  value_gte: String

  """
  All values containing the given string.
  """
  value_contains: String

  """
  All values not containing the given string.
  """
  value_not_contains: String

  """
  All values starting with the given string.
  """
  value_starts_with: String

  """
  All values not starting with the given string.
  """
  value_not_starts_with: String

  """
  All values ending with the given string.
  """
  value_ends_with: String

  """
  All values not ending with the given string.
  """
  value_not_ends_with: String
  status: Boolean

  """
  All values that are not equal to given value.
  """
  status_not: Boolean
}

type UserPushNotificationInterestSubscriptionPayload {
  mutation: MutationType!
  node: UserPushNotificationInterest
  updatedFields: [String!]
  previousValues: UserPushNotificationInterestPreviousValues
}

input UserPushNotificationInterestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserPushNotificationInterestSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserPushNotificationInterestSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserPushNotificationInterestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserPushNotificationInterestWhereInput
}

enum UserPushNotificationInterestType {
  General
  Blog
  Bag
  NewProduct
  Brand
}

input UserPushNotificationInterestUpdateDataInput {
  type: UserPushNotificationInterestType
  value: String
  status: Boolean
  user: UserUpdateOneRequiredInput
}

input UserPushNotificationInterestUpdateInput {
  type: UserPushNotificationInterestType
  value: String
  status: Boolean
  user: UserUpdateOneRequiredInput
}

input UserPushNotificationInterestUpdateManyDataInput {
  type: UserPushNotificationInterestType
  value: String
  status: Boolean
}

input UserPushNotificationInterestUpdateManyInput {
  create: [UserPushNotificationInterestCreateInput!]
  connect: [UserPushNotificationInterestWhereUniqueInput!]
  set: [UserPushNotificationInterestWhereUniqueInput!]
  disconnect: [UserPushNotificationInterestWhereUniqueInput!]
  delete: [UserPushNotificationInterestWhereUniqueInput!]
  update: [UserPushNotificationInterestUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserPushNotificationInterestUpdateManyWithWhereNestedInput!]
  deleteMany: [UserPushNotificationInterestScalarWhereInput!]
  upsert: [UserPushNotificationInterestUpsertWithWhereUniqueNestedInput!]
}

input UserPushNotificationInterestUpdateManyMutationInput {
  type: UserPushNotificationInterestType
  value: String
  status: Boolean
}

input UserPushNotificationInterestUpdateManyWithWhereNestedInput {
  where: UserPushNotificationInterestScalarWhereInput!
  data: UserPushNotificationInterestUpdateManyDataInput!
}

input UserPushNotificationInterestUpdateWithWhereUniqueNestedInput {
  where: UserPushNotificationInterestWhereUniqueInput!
  data: UserPushNotificationInterestUpdateDataInput!
}

input UserPushNotificationInterestUpsertWithWhereUniqueNestedInput {
  where: UserPushNotificationInterestWhereUniqueInput!
  update: UserPushNotificationInterestUpdateDataInput!
  create: UserPushNotificationInterestCreateInput!
}

input UserPushNotificationInterestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserPushNotificationInterestWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserPushNotificationInterestWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserPushNotificationInterestWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  type: UserPushNotificationInterestType

  """
  All values that are not equal to given value.
  """
  type_not: UserPushNotificationInterestType

  """
  All values that are contained in given list.
  """
  type_in: [UserPushNotificationInterestType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [UserPushNotificationInterestType!]
  value: String

  """
  All values that are not equal to given value.
  """
  value_not: String

  """
  All values that are contained in given list.
  """
  value_in: [String!]

  """
  All values that are not contained in given list.
  """
  value_not_in: [String!]

  """
  All values less than the given value.
  """
  value_lt: String

  """
  All values less than or equal the given value.
  """
  value_lte: String

  """
  All values greater than the given value.
  """
  value_gt: String

  """
  All values greater than or equal the given value.
  """
  value_gte: String

  """
  All values containing the given string.
  """
  value_contains: String

  """
  All values not containing the given string.
  """
  value_not_contains: String

  """
  All values starting with the given string.
  """
  value_starts_with: String

  """
  All values not starting with the given string.
  """
  value_not_starts_with: String

  """
  All values ending with the given string.
  """
  value_ends_with: String

  """
  All values not ending with the given string.
  """
  value_not_ends_with: String
  status: Boolean

  """
  All values that are not equal to given value.
  """
  status_not: Boolean
  user: UserWhereInput
}

input UserPushNotificationInterestWhereUniqueInput {
  id: ID
}

enum UserPushNotificationOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
}

type UserPushNotificationPreviousValues {
  id: ID!
  status: Boolean!
}

type UserPushNotificationSubscriptionPayload {
  mutation: MutationType!
  node: UserPushNotification
  updatedFields: [String!]
  previousValues: UserPushNotificationPreviousValues
}

input UserPushNotificationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserPushNotificationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserPushNotificationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserPushNotificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserPushNotificationWhereInput
}

input UserPushNotificationUpdateDataInput {
  status: Boolean
  interests: UserPushNotificationInterestUpdateManyInput
  history: PushNotificationReceiptUpdateManyInput
}

input UserPushNotificationUpdateInput {
  status: Boolean
  interests: UserPushNotificationInterestUpdateManyInput
  history: PushNotificationReceiptUpdateManyInput
}

input UserPushNotificationUpdateManyMutationInput {
  status: Boolean
}

input UserPushNotificationUpdateOneInput {
  create: UserPushNotificationCreateInput
  connect: UserPushNotificationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserPushNotificationUpdateDataInput
  upsert: UserPushNotificationUpsertNestedInput
}

input UserPushNotificationUpsertNestedInput {
  update: UserPushNotificationUpdateDataInput!
  create: UserPushNotificationCreateInput!
}

input UserPushNotificationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserPushNotificationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserPushNotificationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserPushNotificationWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  status: Boolean

  """
  All values that are not equal to given value.
  """
  status_not: Boolean
  interests_every: UserPushNotificationInterestWhereInput
  interests_some: UserPushNotificationInterestWhereInput
  interests_none: UserPushNotificationInterestWhereInput
  history_every: PushNotificationReceiptWhereInput
  history_some: PushNotificationReceiptWhereInput
  history_none: PushNotificationReceiptWhereInput
}

input UserPushNotificationWhereUniqueInput {
  id: ID
}

enum UserRole {
  Admin
  Customer
  Partner
}

input UserScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  auth0Id: String

  """
  All values that are not equal to given value.
  """
  auth0Id_not: String

  """
  All values that are contained in given list.
  """
  auth0Id_in: [String!]

  """
  All values that are not contained in given list.
  """
  auth0Id_not_in: [String!]

  """
  All values less than the given value.
  """
  auth0Id_lt: String

  """
  All values less than or equal the given value.
  """
  auth0Id_lte: String

  """
  All values greater than the given value.
  """
  auth0Id_gt: String

  """
  All values greater than or equal the given value.
  """
  auth0Id_gte: String

  """
  All values containing the given string.
  """
  auth0Id_contains: String

  """
  All values not containing the given string.
  """
  auth0Id_not_contains: String

  """
  All values starting with the given string.
  """
  auth0Id_starts_with: String

  """
  All values not starting with the given string.
  """
  auth0Id_not_starts_with: String

  """
  All values ending with the given string.
  """
  auth0Id_ends_with: String

  """
  All values not ending with the given string.
  """
  auth0Id_not_ends_with: String
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  firstName: String

  """
  All values that are not equal to given value.
  """
  firstName_not: String

  """
  All values that are contained in given list.
  """
  firstName_in: [String!]

  """
  All values that are not contained in given list.
  """
  firstName_not_in: [String!]

  """
  All values less than the given value.
  """
  firstName_lt: String

  """
  All values less than or equal the given value.
  """
  firstName_lte: String

  """
  All values greater than the given value.
  """
  firstName_gt: String

  """
  All values greater than or equal the given value.
  """
  firstName_gte: String

  """
  All values containing the given string.
  """
  firstName_contains: String

  """
  All values not containing the given string.
  """
  firstName_not_contains: String

  """
  All values starting with the given string.
  """
  firstName_starts_with: String

  """
  All values not starting with the given string.
  """
  firstName_not_starts_with: String

  """
  All values ending with the given string.
  """
  firstName_ends_with: String

  """
  All values not ending with the given string.
  """
  firstName_not_ends_with: String
  lastName: String

  """
  All values that are not equal to given value.
  """
  lastName_not: String

  """
  All values that are contained in given list.
  """
  lastName_in: [String!]

  """
  All values that are not contained in given list.
  """
  lastName_not_in: [String!]

  """
  All values less than the given value.
  """
  lastName_lt: String

  """
  All values less than or equal the given value.
  """
  lastName_lte: String

  """
  All values greater than the given value.
  """
  lastName_gt: String

  """
  All values greater than or equal the given value.
  """
  lastName_gte: String

  """
  All values containing the given string.
  """
  lastName_contains: String

  """
  All values not containing the given string.
  """
  lastName_not_contains: String

  """
  All values starting with the given string.
  """
  lastName_starts_with: String

  """
  All values not starting with the given string.
  """
  lastName_not_starts_with: String

  """
  All values ending with the given string.
  """
  lastName_ends_with: String

  """
  All values not ending with the given string.
  """
  lastName_not_ends_with: String
  role: UserRole

  """
  All values that are not equal to given value.
  """
  role_not: UserRole

  """
  All values that are contained in given list.
  """
  role_in: [UserRole!]

  """
  All values that are not contained in given list.
  """
  role_not_in: [UserRole!]
  pushNotificationStatus: PushNotificationStatus

  """
  All values that are not equal to given value.
  """
  pushNotificationStatus_not: PushNotificationStatus

  """
  All values that are contained in given list.
  """
  pushNotificationStatus_in: [PushNotificationStatus!]

  """
  All values that are not contained in given list.
  """
  pushNotificationStatus_not_in: [PushNotificationStatus!]
  verificationStatus: UserVerificationStatus

  """
  All values that are not equal to given value.
  """
  verificationStatus_not: UserVerificationStatus

  """
  All values that are contained in given list.
  """
  verificationStatus_in: [UserVerificationStatus!]

  """
  All values that are not contained in given list.
  """
  verificationStatus_not_in: [UserVerificationStatus!]
  verificationMethod: UserVerificationMethod

  """
  All values that are not equal to given value.
  """
  verificationMethod_not: UserVerificationMethod

  """
  All values that are contained in given list.
  """
  verificationMethod_in: [UserVerificationMethod!]

  """
  All values that are not contained in given list.
  """
  verificationMethod_not_in: [UserVerificationMethod!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserUpdaterolesInput
  pushNotifications: PushNotificationReceiptUpdateManyWithoutUsersInput
  pushNotification: UserPushNotificationUpdateOneInput
  smsReceipts: SmsReceiptUpdateManyInput
  styleSubmissions: StyleSubmissionUpdateManyWithoutUserInput
}

input UserUpdateInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserUpdaterolesInput
  pushNotifications: PushNotificationReceiptUpdateManyWithoutUsersInput
  pushNotification: UserPushNotificationUpdateOneInput
  smsReceipts: SmsReceiptUpdateManyInput
  styleSubmissions: StyleSubmissionUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserUpdaterolesInput
}

input UserUpdateManyMutationInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserUpdaterolesInput
}

input UserUpdateManyWithoutPushNotificationsInput {
  create: [UserCreateWithoutPushNotificationsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPushNotificationsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPushNotificationsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutStyleSubmissionsInput {
  create: UserCreateWithoutStyleSubmissionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutStyleSubmissionsDataInput
  upsert: UserUpsertWithoutStyleSubmissionsInput
}

input UserUpdaterolesInput {
  set: [UserRole!]
}

input UserUpdateWithoutPushNotificationsDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserUpdaterolesInput
  pushNotification: UserPushNotificationUpdateOneInput
  smsReceipts: SmsReceiptUpdateManyInput
  styleSubmissions: StyleSubmissionUpdateManyWithoutUserInput
}

input UserUpdateWithoutStyleSubmissionsDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  pushNotificationStatus: PushNotificationStatus
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  roles: UserUpdaterolesInput
  pushNotifications: PushNotificationReceiptUpdateManyWithoutUsersInput
  pushNotification: UserPushNotificationUpdateOneInput
  smsReceipts: SmsReceiptUpdateManyInput
}

input UserUpdateWithWhereUniqueWithoutPushNotificationsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPushNotificationsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutStyleSubmissionsInput {
  update: UserUpdateWithoutStyleSubmissionsDataInput!
  create: UserCreateWithoutStyleSubmissionsInput!
}

input UserUpsertWithWhereUniqueWithoutPushNotificationsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPushNotificationsDataInput!
  create: UserCreateWithoutPushNotificationsInput!
}

enum UserVerificationMethod {
  SMS
  Email
  None
}

enum UserVerificationStatus {
  Approved
  Denied
  Pending
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  auth0Id: String

  """
  All values that are not equal to given value.
  """
  auth0Id_not: String

  """
  All values that are contained in given list.
  """
  auth0Id_in: [String!]

  """
  All values that are not contained in given list.
  """
  auth0Id_not_in: [String!]

  """
  All values less than the given value.
  """
  auth0Id_lt: String

  """
  All values less than or equal the given value.
  """
  auth0Id_lte: String

  """
  All values greater than the given value.
  """
  auth0Id_gt: String

  """
  All values greater than or equal the given value.
  """
  auth0Id_gte: String

  """
  All values containing the given string.
  """
  auth0Id_contains: String

  """
  All values not containing the given string.
  """
  auth0Id_not_contains: String

  """
  All values starting with the given string.
  """
  auth0Id_starts_with: String

  """
  All values not starting with the given string.
  """
  auth0Id_not_starts_with: String

  """
  All values ending with the given string.
  """
  auth0Id_ends_with: String

  """
  All values not ending with the given string.
  """
  auth0Id_not_ends_with: String
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  firstName: String

  """
  All values that are not equal to given value.
  """
  firstName_not: String

  """
  All values that are contained in given list.
  """
  firstName_in: [String!]

  """
  All values that are not contained in given list.
  """
  firstName_not_in: [String!]

  """
  All values less than the given value.
  """
  firstName_lt: String

  """
  All values less than or equal the given value.
  """
  firstName_lte: String

  """
  All values greater than the given value.
  """
  firstName_gt: String

  """
  All values greater than or equal the given value.
  """
  firstName_gte: String

  """
  All values containing the given string.
  """
  firstName_contains: String

  """
  All values not containing the given string.
  """
  firstName_not_contains: String

  """
  All values starting with the given string.
  """
  firstName_starts_with: String

  """
  All values not starting with the given string.
  """
  firstName_not_starts_with: String

  """
  All values ending with the given string.
  """
  firstName_ends_with: String

  """
  All values not ending with the given string.
  """
  firstName_not_ends_with: String
  lastName: String

  """
  All values that are not equal to given value.
  """
  lastName_not: String

  """
  All values that are contained in given list.
  """
  lastName_in: [String!]

  """
  All values that are not contained in given list.
  """
  lastName_not_in: [String!]

  """
  All values less than the given value.
  """
  lastName_lt: String

  """
  All values less than or equal the given value.
  """
  lastName_lte: String

  """
  All values greater than the given value.
  """
  lastName_gt: String

  """
  All values greater than or equal the given value.
  """
  lastName_gte: String

  """
  All values containing the given string.
  """
  lastName_contains: String

  """
  All values not containing the given string.
  """
  lastName_not_contains: String

  """
  All values starting with the given string.
  """
  lastName_starts_with: String

  """
  All values not starting with the given string.
  """
  lastName_not_starts_with: String

  """
  All values ending with the given string.
  """
  lastName_ends_with: String

  """
  All values not ending with the given string.
  """
  lastName_not_ends_with: String
  role: UserRole

  """
  All values that are not equal to given value.
  """
  role_not: UserRole

  """
  All values that are contained in given list.
  """
  role_in: [UserRole!]

  """
  All values that are not contained in given list.
  """
  role_not_in: [UserRole!]
  pushNotificationStatus: PushNotificationStatus

  """
  All values that are not equal to given value.
  """
  pushNotificationStatus_not: PushNotificationStatus

  """
  All values that are contained in given list.
  """
  pushNotificationStatus_in: [PushNotificationStatus!]

  """
  All values that are not contained in given list.
  """
  pushNotificationStatus_not_in: [PushNotificationStatus!]
  verificationStatus: UserVerificationStatus

  """
  All values that are not equal to given value.
  """
  verificationStatus_not: UserVerificationStatus

  """
  All values that are contained in given list.
  """
  verificationStatus_in: [UserVerificationStatus!]

  """
  All values that are not contained in given list.
  """
  verificationStatus_not_in: [UserVerificationStatus!]
  verificationMethod: UserVerificationMethod

  """
  All values that are not equal to given value.
  """
  verificationMethod_not: UserVerificationMethod

  """
  All values that are contained in given list.
  """
  verificationMethod_in: [UserVerificationMethod!]

  """
  All values that are not contained in given list.
  """
  verificationMethod_not_in: [UserVerificationMethod!]
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  pushNotifications_every: PushNotificationReceiptWhereInput
  pushNotifications_some: PushNotificationReceiptWhereInput
  pushNotifications_none: PushNotificationReceiptWhereInput
  pushNotification: UserPushNotificationWhereInput
  smsReceipts_every: SmsReceiptWhereInput
  smsReceipts_some: SmsReceiptWhereInput
  smsReceipts_none: SmsReceiptWhereInput
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
=======
  styleSubmissions_every: StyleSubmissionWhereInput
  styleSubmissions_some: StyleSubmissionWhereInput
  styleSubmissions_none: StyleSubmissionWhereInput
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
  styleSubmissions_every: StyleSubmissionWhereInput
  styleSubmissions_some: StyleSubmissionWhereInput
  styleSubmissions_none: StyleSubmissionWhereInput
>>>>>>> Rebase
}

input UserWhereUniqueInput {
  id: ID
  auth0Id: String
  email: String
}

type WarehouseLocation implements Node {
  id: ID!
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  physicalProducts(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  constraints(
    where: WarehouseLocationConstraintWhereInput
    orderBy: WarehouseLocationConstraintOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [WarehouseLocationConstraint!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type WarehouseLocationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [WarehouseLocationEdge]!
  aggregate: AggregateWarehouseLocation!
}

type WarehouseLocationConstraint implements Node {
  id: ID!
  category: Category!
  limit: Int!
  locations(
    where: WarehouseLocationWhereInput
    orderBy: WarehouseLocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [WarehouseLocation!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type WarehouseLocationConstraintConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [WarehouseLocationConstraintEdge]!
  aggregate: AggregateWarehouseLocationConstraint!
}

input WarehouseLocationConstraintCreateInput {
  id: ID
  limit: Int!
  category: CategoryCreateOneInput!
  locations: WarehouseLocationCreateManyWithoutConstraintsInput
}

input WarehouseLocationConstraintCreateManyWithoutLocationsInput {
  create: [WarehouseLocationConstraintCreateWithoutLocationsInput!]
  connect: [WarehouseLocationConstraintWhereUniqueInput!]
}

input WarehouseLocationConstraintCreateWithoutLocationsInput {
  id: ID
  limit: Int!
  category: CategoryCreateOneInput!
}

"""
An edge in a connection.
"""
type WarehouseLocationConstraintEdge {
  """
  The item at the end of the edge.
  """
  node: WarehouseLocationConstraint!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WarehouseLocationConstraintOrderByInput {
  id_ASC
  id_DESC
  limit_ASC
  limit_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WarehouseLocationConstraintPreviousValues {
  id: ID!
  limit: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WarehouseLocationConstraintScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WarehouseLocationConstraintScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WarehouseLocationConstraintScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WarehouseLocationConstraintScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  limit: Int

  """
  All values that are not equal to given value.
  """
  limit_not: Int

  """
  All values that are contained in given list.
  """
  limit_in: [Int!]

  """
  All values that are not contained in given list.
  """
  limit_not_in: [Int!]

  """
  All values less than the given value.
  """
  limit_lt: Int

  """
  All values less than or equal the given value.
  """
  limit_lte: Int

  """
  All values greater than the given value.
  """
  limit_gt: Int

  """
  All values greater than or equal the given value.
  """
  limit_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type WarehouseLocationConstraintSubscriptionPayload {
  mutation: MutationType!
  node: WarehouseLocationConstraint
  updatedFields: [String!]
  previousValues: WarehouseLocationConstraintPreviousValues
}

input WarehouseLocationConstraintSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WarehouseLocationConstraintSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WarehouseLocationConstraintSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WarehouseLocationConstraintSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WarehouseLocationConstraintWhereInput
}

input WarehouseLocationConstraintUpdateInput {
  limit: Int
  category: CategoryUpdateOneRequiredInput
  locations: WarehouseLocationUpdateManyWithoutConstraintsInput
}

input WarehouseLocationConstraintUpdateManyDataInput {
  limit: Int
}

input WarehouseLocationConstraintUpdateManyMutationInput {
  limit: Int
}

input WarehouseLocationConstraintUpdateManyWithoutLocationsInput {
  create: [WarehouseLocationConstraintCreateWithoutLocationsInput!]
  connect: [WarehouseLocationConstraintWhereUniqueInput!]
  set: [WarehouseLocationConstraintWhereUniqueInput!]
  disconnect: [WarehouseLocationConstraintWhereUniqueInput!]
  delete: [WarehouseLocationConstraintWhereUniqueInput!]
  update: [WarehouseLocationConstraintUpdateWithWhereUniqueWithoutLocationsInput!]
  updateMany: [WarehouseLocationConstraintUpdateManyWithWhereNestedInput!]
  deleteMany: [WarehouseLocationConstraintScalarWhereInput!]
  upsert: [WarehouseLocationConstraintUpsertWithWhereUniqueWithoutLocationsInput!]
}

input WarehouseLocationConstraintUpdateManyWithWhereNestedInput {
  where: WarehouseLocationConstraintScalarWhereInput!
  data: WarehouseLocationConstraintUpdateManyDataInput!
}

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Rebase
input WarehouseLocationConstraintUpdateWithoutLocationsDataInput {
  limit: Int
  category: CategoryUpdateOneRequiredInput
}

<<<<<<< HEAD
=======
>>>>>>> Add CommunityStyle+Report datamodel and resolvers
=======
>>>>>>> Rebase
input WarehouseLocationConstraintUpdateWithWhereUniqueWithoutLocationsInput {
  where: WarehouseLocationConstraintWhereUniqueInput!
  data: WarehouseLocationConstraintUpdateWithoutLocationsDataInput!
}

input WarehouseLocationConstraintUpsertWithWhereUniqueWithoutLocationsInput {
  where: WarehouseLocationConstraintWhereUniqueInput!
  update: WarehouseLocationConstraintUpdateWithoutLocationsDataInput!
  create: WarehouseLocationConstraintCreateWithoutLocationsInput!
}

input WarehouseLocationConstraintWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WarehouseLocationConstraintWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WarehouseLocationConstraintWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WarehouseLocationConstraintWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  limit: Int

  """
  All values that are not equal to given value.
  """
  limit_not: Int

  """
  All values that are contained in given list.
  """
  limit_in: [Int!]

  """
  All values that are not contained in given list.
  """
  limit_not_in: [Int!]

  """
  All values less than the given value.
  """
  limit_lt: Int

  """
  All values less than or equal the given value.
  """
  limit_lte: Int

  """
  All values greater than the given value.
  """
  limit_gt: Int

  """
  All values greater than or equal the given value.
  """
  limit_gte: Int
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  category: CategoryWhereInput
  locations_every: WarehouseLocationWhereInput
  locations_some: WarehouseLocationWhereInput
  locations_none: WarehouseLocationWhereInput
}

input WarehouseLocationConstraintWhereUniqueInput {
  id: ID
}

input WarehouseLocationCreateInput {
  id: ID
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  physicalProducts: PhysicalProductCreateManyWithoutWarehouseLocationInput
  constraints: WarehouseLocationConstraintCreateManyWithoutLocationsInput
}

input WarehouseLocationCreateManyWithoutConstraintsInput {
  create: [WarehouseLocationCreateWithoutConstraintsInput!]
  connect: [WarehouseLocationWhereUniqueInput!]
}

input WarehouseLocationCreateOneWithoutPhysicalProductsInput {
  create: WarehouseLocationCreateWithoutPhysicalProductsInput
  connect: WarehouseLocationWhereUniqueInput
}

input WarehouseLocationCreateWithoutConstraintsInput {
  id: ID
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  physicalProducts: PhysicalProductCreateManyWithoutWarehouseLocationInput
}

input WarehouseLocationCreateWithoutPhysicalProductsInput {
  id: ID
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  constraints: WarehouseLocationConstraintCreateManyWithoutLocationsInput
}

"""
An edge in a connection.
"""
type WarehouseLocationEdge {
  """
  The item at the end of the edge.
  """
  node: WarehouseLocation!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WarehouseLocationOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  barcode_ASC
  barcode_DESC
  locationCode_ASC
  locationCode_DESC
  itemCode_ASC
  itemCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WarehouseLocationPreviousValues {
  id: ID!
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WarehouseLocationScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WarehouseLocationScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WarehouseLocationScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WarehouseLocationScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  type: WarehouseLocationType

  """
  All values that are not equal to given value.
  """
  type_not: WarehouseLocationType

  """
  All values that are contained in given list.
  """
  type_in: [WarehouseLocationType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [WarehouseLocationType!]
  barcode: String

  """
  All values that are not equal to given value.
  """
  barcode_not: String

  """
  All values that are contained in given list.
  """
  barcode_in: [String!]

  """
  All values that are not contained in given list.
  """
  barcode_not_in: [String!]

  """
  All values less than the given value.
  """
  barcode_lt: String

  """
  All values less than or equal the given value.
  """
  barcode_lte: String

  """
  All values greater than the given value.
  """
  barcode_gt: String

  """
  All values greater than or equal the given value.
  """
  barcode_gte: String

  """
  All values containing the given string.
  """
  barcode_contains: String

  """
  All values not containing the given string.
  """
  barcode_not_contains: String

  """
  All values starting with the given string.
  """
  barcode_starts_with: String

  """
  All values not starting with the given string.
  """
  barcode_not_starts_with: String

  """
  All values ending with the given string.
  """
  barcode_ends_with: String

  """
  All values not ending with the given string.
  """
  barcode_not_ends_with: String
  locationCode: String

  """
  All values that are not equal to given value.
  """
  locationCode_not: String

  """
  All values that are contained in given list.
  """
  locationCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  locationCode_not_in: [String!]

  """
  All values less than the given value.
  """
  locationCode_lt: String

  """
  All values less than or equal the given value.
  """
  locationCode_lte: String

  """
  All values greater than the given value.
  """
  locationCode_gt: String

  """
  All values greater than or equal the given value.
  """
  locationCode_gte: String

  """
  All values containing the given string.
  """
  locationCode_contains: String

  """
  All values not containing the given string.
  """
  locationCode_not_contains: String

  """
  All values starting with the given string.
  """
  locationCode_starts_with: String

  """
  All values not starting with the given string.
  """
  locationCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  locationCode_ends_with: String

  """
  All values not ending with the given string.
  """
  locationCode_not_ends_with: String
  itemCode: String

  """
  All values that are not equal to given value.
  """
  itemCode_not: String

  """
  All values that are contained in given list.
  """
  itemCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  itemCode_not_in: [String!]

  """
  All values less than the given value.
  """
  itemCode_lt: String

  """
  All values less than or equal the given value.
  """
  itemCode_lte: String

  """
  All values greater than the given value.
  """
  itemCode_gt: String

  """
  All values greater than or equal the given value.
  """
  itemCode_gte: String

  """
  All values containing the given string.
  """
  itemCode_contains: String

  """
  All values not containing the given string.
  """
  itemCode_not_contains: String

  """
  All values starting with the given string.
  """
  itemCode_starts_with: String

  """
  All values not starting with the given string.
  """
  itemCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  itemCode_ends_with: String

  """
  All values not ending with the given string.
  """
  itemCode_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type WarehouseLocationSubscriptionPayload {
  mutation: MutationType!
  node: WarehouseLocation
  updatedFields: [String!]
  previousValues: WarehouseLocationPreviousValues
}

input WarehouseLocationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WarehouseLocationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WarehouseLocationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WarehouseLocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WarehouseLocationWhereInput
}

enum WarehouseLocationType {
  Conveyor
  Rail
  Bin
}

input WarehouseLocationUpdateInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
  physicalProducts: PhysicalProductUpdateManyWithoutWarehouseLocationInput
  constraints: WarehouseLocationConstraintUpdateManyWithoutLocationsInput
}

input WarehouseLocationUpdateManyDataInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
}

input WarehouseLocationUpdateManyMutationInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
}

input WarehouseLocationUpdateManyWithoutConstraintsInput {
  create: [WarehouseLocationCreateWithoutConstraintsInput!]
  connect: [WarehouseLocationWhereUniqueInput!]
  set: [WarehouseLocationWhereUniqueInput!]
  disconnect: [WarehouseLocationWhereUniqueInput!]
  delete: [WarehouseLocationWhereUniqueInput!]
  update: [WarehouseLocationUpdateWithWhereUniqueWithoutConstraintsInput!]
  updateMany: [WarehouseLocationUpdateManyWithWhereNestedInput!]
  deleteMany: [WarehouseLocationScalarWhereInput!]
  upsert: [WarehouseLocationUpsertWithWhereUniqueWithoutConstraintsInput!]
}

input WarehouseLocationUpdateManyWithWhereNestedInput {
  where: WarehouseLocationScalarWhereInput!
  data: WarehouseLocationUpdateManyDataInput!
}

input WarehouseLocationUpdateOneWithoutPhysicalProductsInput {
  create: WarehouseLocationCreateWithoutPhysicalProductsInput
  connect: WarehouseLocationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WarehouseLocationUpdateWithoutPhysicalProductsDataInput
  upsert: WarehouseLocationUpsertWithoutPhysicalProductsInput
}

input WarehouseLocationUpdateWithoutConstraintsDataInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
  physicalProducts: PhysicalProductUpdateManyWithoutWarehouseLocationInput
}

input WarehouseLocationUpdateWithoutPhysicalProductsDataInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
  constraints: WarehouseLocationConstraintUpdateManyWithoutLocationsInput
}

input WarehouseLocationUpdateWithWhereUniqueWithoutConstraintsInput {
  where: WarehouseLocationWhereUniqueInput!
  data: WarehouseLocationUpdateWithoutConstraintsDataInput!
}

input WarehouseLocationUpsertWithoutPhysicalProductsInput {
  update: WarehouseLocationUpdateWithoutPhysicalProductsDataInput!
  create: WarehouseLocationCreateWithoutPhysicalProductsInput!
}

input WarehouseLocationUpsertWithWhereUniqueWithoutConstraintsInput {
  where: WarehouseLocationWhereUniqueInput!
  update: WarehouseLocationUpdateWithoutConstraintsDataInput!
  create: WarehouseLocationCreateWithoutConstraintsInput!
}

input WarehouseLocationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WarehouseLocationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WarehouseLocationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WarehouseLocationWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  type: WarehouseLocationType

  """
  All values that are not equal to given value.
  """
  type_not: WarehouseLocationType

  """
  All values that are contained in given list.
  """
  type_in: [WarehouseLocationType!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [WarehouseLocationType!]
  barcode: String

  """
  All values that are not equal to given value.
  """
  barcode_not: String

  """
  All values that are contained in given list.
  """
  barcode_in: [String!]

  """
  All values that are not contained in given list.
  """
  barcode_not_in: [String!]

  """
  All values less than the given value.
  """
  barcode_lt: String

  """
  All values less than or equal the given value.
  """
  barcode_lte: String

  """
  All values greater than the given value.
  """
  barcode_gt: String

  """
  All values greater than or equal the given value.
  """
  barcode_gte: String

  """
  All values containing the given string.
  """
  barcode_contains: String

  """
  All values not containing the given string.
  """
  barcode_not_contains: String

  """
  All values starting with the given string.
  """
  barcode_starts_with: String

  """
  All values not starting with the given string.
  """
  barcode_not_starts_with: String

  """
  All values ending with the given string.
  """
  barcode_ends_with: String

  """
  All values not ending with the given string.
  """
  barcode_not_ends_with: String
  locationCode: String

  """
  All values that are not equal to given value.
  """
  locationCode_not: String

  """
  All values that are contained in given list.
  """
  locationCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  locationCode_not_in: [String!]

  """
  All values less than the given value.
  """
  locationCode_lt: String

  """
  All values less than or equal the given value.
  """
  locationCode_lte: String

  """
  All values greater than the given value.
  """
  locationCode_gt: String

  """
  All values greater than or equal the given value.
  """
  locationCode_gte: String

  """
  All values containing the given string.
  """
  locationCode_contains: String

  """
  All values not containing the given string.
  """
  locationCode_not_contains: String

  """
  All values starting with the given string.
  """
  locationCode_starts_with: String

  """
  All values not starting with the given string.
  """
  locationCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  locationCode_ends_with: String

  """
  All values not ending with the given string.
  """
  locationCode_not_ends_with: String
  itemCode: String

  """
  All values that are not equal to given value.
  """
  itemCode_not: String

  """
  All values that are contained in given list.
  """
  itemCode_in: [String!]

  """
  All values that are not contained in given list.
  """
  itemCode_not_in: [String!]

  """
  All values less than the given value.
  """
  itemCode_lt: String

  """
  All values less than or equal the given value.
  """
  itemCode_lte: String

  """
  All values greater than the given value.
  """
  itemCode_gt: String

  """
  All values greater than or equal the given value.
  """
  itemCode_gte: String

  """
  All values containing the given string.
  """
  itemCode_contains: String

  """
  All values not containing the given string.
  """
  itemCode_not_contains: String

  """
  All values starting with the given string.
  """
  itemCode_starts_with: String

  """
  All values not starting with the given string.
  """
  itemCode_not_starts_with: String

  """
  All values ending with the given string.
  """
  itemCode_ends_with: String

  """
  All values not ending with the given string.
  """
  itemCode_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  physicalProducts_every: PhysicalProductWhereInput
  physicalProducts_some: PhysicalProductWhereInput
  physicalProducts_none: PhysicalProductWhereInput
  constraints_every: WarehouseLocationConstraintWhereInput
  constraints_some: WarehouseLocationConstraintWhereInput
  constraints_none: WarehouseLocationConstraintWhereInput
}

input WarehouseLocationWhereUniqueInput {
  id: ID
  barcode: String
}
