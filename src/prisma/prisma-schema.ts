// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type ActiveAdminUser {
  id: ID!
  admin: User!
}

type ActiveAdminUserConnection {
  pageInfo: PageInfo!
  edges: [ActiveAdminUserEdge]!
  aggregate: AggregateActiveAdminUser!
}

input ActiveAdminUserCreateInput {
  id: ID
  admin: UserCreateOneInput!
}

type ActiveAdminUserEdge {
  node: ActiveAdminUser!
  cursor: String!
}

enum ActiveAdminUserOrderByInput {
  id_ASC
  id_DESC
}

type ActiveAdminUserPreviousValues {
  id: ID!
}

type ActiveAdminUserSubscriptionPayload {
  mutation: MutationType!
  node: ActiveAdminUser
  updatedFields: [String!]
  previousValues: ActiveAdminUserPreviousValues
}

input ActiveAdminUserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActiveAdminUserWhereInput
  AND: [ActiveAdminUserSubscriptionWhereInput!]
  OR: [ActiveAdminUserSubscriptionWhereInput!]
  NOT: [ActiveAdminUserSubscriptionWhereInput!]
}

input ActiveAdminUserUpdateInput {
  admin: UserUpdateOneRequiredInput
}

input ActiveAdminUserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  admin: UserWhereInput
  AND: [ActiveAdminUserWhereInput!]
  OR: [ActiveAdminUserWhereInput!]
  NOT: [ActiveAdminUserWhereInput!]
}

input ActiveAdminUserWhereUniqueInput {
  id: ID
}

enum AdminAction {
  Insert
  Delete
  Update
  Truncate
}

type AdminActionLog {
  actionId: Int!
  entityId: String!
  tableName: String!
  activeAdminUser: User!
  triggeredAt: DateTime!
  action: AdminAction!
  rowData: Json!
  changedFields: Json
  statementOnly: Boolean!
  interpretedAt: DateTime
  interpretation: AdminActionLogInterpretation
}

type AdminActionLogConnection {
  pageInfo: PageInfo!
  edges: [AdminActionLogEdge]!
  aggregate: AggregateAdminActionLog!
}

input AdminActionLogCreateInput {
  actionId: Int
  entityId: String!
  tableName: String!
  activeAdminUser: UserCreateOneInput!
  triggeredAt: DateTime!
  action: AdminAction!
  rowData: Json!
  changedFields: Json
  statementOnly: Boolean!
  interpretedAt: DateTime
  interpretation: AdminActionLogInterpretationCreateOneWithoutLogInput
}

input AdminActionLogCreateOneWithoutInterpretationInput {
  create: AdminActionLogCreateWithoutInterpretationInput
  connect: AdminActionLogWhereUniqueInput
}

input AdminActionLogCreateWithoutInterpretationInput {
  actionId: Int
  entityId: String!
  tableName: String!
  activeAdminUser: UserCreateOneInput!
  triggeredAt: DateTime!
  action: AdminAction!
  rowData: Json!
  changedFields: Json
  statementOnly: Boolean!
  interpretedAt: DateTime
}

type AdminActionLogEdge {
  node: AdminActionLog!
  cursor: String!
}

type AdminActionLogInterpretation {
  id: ID!
  log: AdminActionLog!
  entityId: String!
  tableName: String!
  interpretation: String
  data: Json
}

type AdminActionLogInterpretationConnection {
  pageInfo: PageInfo!
  edges: [AdminActionLogInterpretationEdge]!
  aggregate: AggregateAdminActionLogInterpretation!
}

input AdminActionLogInterpretationCreateInput {
  id: ID
  log: AdminActionLogCreateOneWithoutInterpretationInput!
  entityId: String!
  tableName: String!
  interpretation: String
  data: Json
}

input AdminActionLogInterpretationCreateOneWithoutLogInput {
  create: AdminActionLogInterpretationCreateWithoutLogInput
  connect: AdminActionLogInterpretationWhereUniqueInput
}

input AdminActionLogInterpretationCreateWithoutLogInput {
  id: ID
  entityId: String!
  tableName: String!
  interpretation: String
  data: Json
}

type AdminActionLogInterpretationEdge {
  node: AdminActionLogInterpretation!
  cursor: String!
}

enum AdminActionLogInterpretationOrderByInput {
  id_ASC
  id_DESC
  entityId_ASC
  entityId_DESC
  tableName_ASC
  tableName_DESC
  interpretation_ASC
  interpretation_DESC
  data_ASC
  data_DESC
}

type AdminActionLogInterpretationPreviousValues {
  id: ID!
  entityId: String!
  tableName: String!
  interpretation: String
  data: Json
}

type AdminActionLogInterpretationSubscriptionPayload {
  mutation: MutationType!
  node: AdminActionLogInterpretation
  updatedFields: [String!]
  previousValues: AdminActionLogInterpretationPreviousValues
}

input AdminActionLogInterpretationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminActionLogInterpretationWhereInput
  AND: [AdminActionLogInterpretationSubscriptionWhereInput!]
  OR: [AdminActionLogInterpretationSubscriptionWhereInput!]
  NOT: [AdminActionLogInterpretationSubscriptionWhereInput!]
}

input AdminActionLogInterpretationUpdateInput {
  log: AdminActionLogUpdateOneRequiredWithoutInterpretationInput
  entityId: String
  tableName: String
  interpretation: String
  data: Json
}

input AdminActionLogInterpretationUpdateManyMutationInput {
  entityId: String
  tableName: String
  interpretation: String
  data: Json
}

input AdminActionLogInterpretationUpdateOneWithoutLogInput {
  create: AdminActionLogInterpretationCreateWithoutLogInput
  update: AdminActionLogInterpretationUpdateWithoutLogDataInput
  upsert: AdminActionLogInterpretationUpsertWithoutLogInput
  delete: Boolean
  disconnect: Boolean
  connect: AdminActionLogInterpretationWhereUniqueInput
}

input AdminActionLogInterpretationUpdateWithoutLogDataInput {
  entityId: String
  tableName: String
  interpretation: String
  data: Json
}

input AdminActionLogInterpretationUpsertWithoutLogInput {
  update: AdminActionLogInterpretationUpdateWithoutLogDataInput!
  create: AdminActionLogInterpretationCreateWithoutLogInput!
}

input AdminActionLogInterpretationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  log: AdminActionLogWhereInput
  entityId: String
  entityId_not: String
  entityId_in: [String!]
  entityId_not_in: [String!]
  entityId_lt: String
  entityId_lte: String
  entityId_gt: String
  entityId_gte: String
  entityId_contains: String
  entityId_not_contains: String
  entityId_starts_with: String
  entityId_not_starts_with: String
  entityId_ends_with: String
  entityId_not_ends_with: String
  tableName: String
  tableName_not: String
  tableName_in: [String!]
  tableName_not_in: [String!]
  tableName_lt: String
  tableName_lte: String
  tableName_gt: String
  tableName_gte: String
  tableName_contains: String
  tableName_not_contains: String
  tableName_starts_with: String
  tableName_not_starts_with: String
  tableName_ends_with: String
  tableName_not_ends_with: String
  interpretation: String
  interpretation_not: String
  interpretation_in: [String!]
  interpretation_not_in: [String!]
  interpretation_lt: String
  interpretation_lte: String
  interpretation_gt: String
  interpretation_gte: String
  interpretation_contains: String
  interpretation_not_contains: String
  interpretation_starts_with: String
  interpretation_not_starts_with: String
  interpretation_ends_with: String
  interpretation_not_ends_with: String
  AND: [AdminActionLogInterpretationWhereInput!]
  OR: [AdminActionLogInterpretationWhereInput!]
  NOT: [AdminActionLogInterpretationWhereInput!]
}

input AdminActionLogInterpretationWhereUniqueInput {
  id: ID
}

enum AdminActionLogOrderByInput {
  actionId_ASC
  actionId_DESC
  entityId_ASC
  entityId_DESC
  tableName_ASC
  tableName_DESC
  triggeredAt_ASC
  triggeredAt_DESC
  action_ASC
  action_DESC
  rowData_ASC
  rowData_DESC
  changedFields_ASC
  changedFields_DESC
  statementOnly_ASC
  statementOnly_DESC
  interpretedAt_ASC
  interpretedAt_DESC
}

type AdminActionLogPreviousValues {
  actionId: Int!
  entityId: String!
  tableName: String!
  triggeredAt: DateTime!
  action: AdminAction!
  rowData: Json!
  changedFields: Json
  statementOnly: Boolean!
  interpretedAt: DateTime
}

type AdminActionLogSubscriptionPayload {
  mutation: MutationType!
  node: AdminActionLog
  updatedFields: [String!]
  previousValues: AdminActionLogPreviousValues
}

input AdminActionLogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminActionLogWhereInput
  AND: [AdminActionLogSubscriptionWhereInput!]
  OR: [AdminActionLogSubscriptionWhereInput!]
  NOT: [AdminActionLogSubscriptionWhereInput!]
}

input AdminActionLogUpdateInput {
  entityId: String
  tableName: String
  activeAdminUser: UserUpdateOneRequiredInput
  triggeredAt: DateTime
  action: AdminAction
  rowData: Json
  changedFields: Json
  statementOnly: Boolean
  interpretedAt: DateTime
  interpretation: AdminActionLogInterpretationUpdateOneWithoutLogInput
}

input AdminActionLogUpdateManyMutationInput {
  entityId: String
  tableName: String
  triggeredAt: DateTime
  action: AdminAction
  rowData: Json
  changedFields: Json
  statementOnly: Boolean
  interpretedAt: DateTime
}

input AdminActionLogUpdateOneRequiredWithoutInterpretationInput {
  create: AdminActionLogCreateWithoutInterpretationInput
  update: AdminActionLogUpdateWithoutInterpretationDataInput
  upsert: AdminActionLogUpsertWithoutInterpretationInput
  connect: AdminActionLogWhereUniqueInput
}

input AdminActionLogUpdateWithoutInterpretationDataInput {
  entityId: String
  tableName: String
  activeAdminUser: UserUpdateOneRequiredInput
  triggeredAt: DateTime
  action: AdminAction
  rowData: Json
  changedFields: Json
  statementOnly: Boolean
  interpretedAt: DateTime
}

input AdminActionLogUpsertWithoutInterpretationInput {
  update: AdminActionLogUpdateWithoutInterpretationDataInput!
  create: AdminActionLogCreateWithoutInterpretationInput!
}

input AdminActionLogWhereInput {
  actionId: Int
  actionId_not: Int
  actionId_in: [Int!]
  actionId_not_in: [Int!]
  actionId_lt: Int
  actionId_lte: Int
  actionId_gt: Int
  actionId_gte: Int
  entityId: String
  entityId_not: String
  entityId_in: [String!]
  entityId_not_in: [String!]
  entityId_lt: String
  entityId_lte: String
  entityId_gt: String
  entityId_gte: String
  entityId_contains: String
  entityId_not_contains: String
  entityId_starts_with: String
  entityId_not_starts_with: String
  entityId_ends_with: String
  entityId_not_ends_with: String
  tableName: String
  tableName_not: String
  tableName_in: [String!]
  tableName_not_in: [String!]
  tableName_lt: String
  tableName_lte: String
  tableName_gt: String
  tableName_gte: String
  tableName_contains: String
  tableName_not_contains: String
  tableName_starts_with: String
  tableName_not_starts_with: String
  tableName_ends_with: String
  tableName_not_ends_with: String
  activeAdminUser: UserWhereInput
  triggeredAt: DateTime
  triggeredAt_not: DateTime
  triggeredAt_in: [DateTime!]
  triggeredAt_not_in: [DateTime!]
  triggeredAt_lt: DateTime
  triggeredAt_lte: DateTime
  triggeredAt_gt: DateTime
  triggeredAt_gte: DateTime
  action: AdminAction
  action_not: AdminAction
  action_in: [AdminAction!]
  action_not_in: [AdminAction!]
  statementOnly: Boolean
  statementOnly_not: Boolean
  interpretedAt: DateTime
  interpretedAt_not: DateTime
  interpretedAt_in: [DateTime!]
  interpretedAt_not_in: [DateTime!]
  interpretedAt_lt: DateTime
  interpretedAt_lte: DateTime
  interpretedAt_gt: DateTime
  interpretedAt_gte: DateTime
  interpretation: AdminActionLogInterpretationWhereInput
  AND: [AdminActionLogWhereInput!]
  OR: [AdminActionLogWhereInput!]
  NOT: [AdminActionLogWhereInput!]
}

input AdminActionLogWhereUniqueInput {
  actionId: Int
}

type AggregateActiveAdminUser {
  count: Int!
}

type AggregateAdminActionLog {
  count: Int!
}

type AggregateAdminActionLogInterpretation {
  count: Int!
}

type AggregateBagItem {
  count: Int!
}

type AggregateBillingInfo {
  count: Int!
}

type AggregateBlogPost {
  count: Int!
}

type AggregateBottomSize {
  count: Int!
}

type AggregateBrand {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateCollection {
  count: Int!
}

type AggregateColor {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateCustomerAdmissionsData {
  count: Int!
}

type AggregateCustomerDetail {
  count: Int!
}

type AggregateCustomerMembership {
  count: Int!
}

type AggregateCustomerMembershipSubscriptionData {
  count: Int!
}

type AggregateCustomerNotificationBarReceipt {
  count: Int!
}

type AggregateEmailReceipt {
  count: Int!
}

type AggregateFitPic {
  count: Int!
}

type AggregateFitPicReport {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateInterestedUser {
  count: Int!
}

type AggregateLabel {
  count: Int!
}

type AggregateLaunch {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderLineItem {
  count: Int!
}

type AggregatePackage {
  count: Int!
}

type AggregatePackageTransitEvent {
  count: Int!
}

type AggregatePauseRequest {
  count: Int!
}

type AggregatePaymentPlan {
  count: Int!
}

type AggregatePhysicalProduct {
  count: Int!
}

type AggregatePhysicalProductPrice {
  count: Int!
}

type AggregatePhysicalProductQualityReport {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductFunction {
  count: Int!
}

type AggregateProductMaterialCategory {
  count: Int!
}

type AggregateProductModel {
  count: Int!
}

type AggregateProductNotification {
  count: Int!
}

type AggregateProductRequest {
  count: Int!
}

type AggregateProductSeason {
  count: Int!
}

type AggregateProductTier {
  count: Int!
}

type AggregateProductVariant {
  count: Int!
}

type AggregateProductVariantFeedback {
  count: Int!
}

type AggregateProductVariantFeedbackQuestion {
  count: Int!
}

type AggregateProductVariantPrice {
  count: Int!
}

type AggregateProductVariantWant {
  count: Int!
}

type AggregatePushNotificationReceipt {
  count: Int!
}

type AggregateRecentlyViewedProduct {
  count: Int!
}

type AggregateReservation {
  count: Int!
}

type AggregateReservationFeedback {
  count: Int!
}

type AggregateReservationReceipt {
  count: Int!
}

type AggregateReservationReceiptItem {
  count: Int!
}

type AggregateSeason {
  count: Int!
}

type AggregateShippingMethod {
  count: Int!
}

type AggregateShippingOption {
  count: Int!
}

type AggregateShopifyProductVariant {
  count: Int!
}

type AggregateShopifyProductVariantSelectedOption {
  count: Int!
}

type AggregateShopifyShop {
  count: Int!
}

type AggregateSize {
  count: Int!
}

type AggregateSmsReceipt {
  count: Int!
}

type AggregateStylePreferences {
  count: Int!
}

type AggregateSyncTiming {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTopSize {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserDeviceData {
  count: Int!
}

type AggregateUserPushNotification {
  count: Int!
}

type AggregateUserPushNotificationInterest {
  count: Int!
}

type AggregateUTMData {
  count: Int!
}

type AggregateWarehouseLocation {
  count: Int!
}

type AggregateWarehouseLocationConstraint {
  count: Int!
}

type BagItem {
  id: ID!
  customer: Customer!
  productVariant: ProductVariant!
  position: Int
  saved: Boolean
  status: BagItemStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BagItemConnection {
  pageInfo: PageInfo!
  edges: [BagItemEdge]!
  aggregate: AggregateBagItem!
}

input BagItemCreateInput {
  id: ID
  customer: CustomerCreateOneWithoutBagItemsInput!
  productVariant: ProductVariantCreateOneInput!
  position: Int
  saved: Boolean
  status: BagItemStatus!
}

input BagItemCreateManyWithoutCustomerInput {
  create: [BagItemCreateWithoutCustomerInput!]
  connect: [BagItemWhereUniqueInput!]
}

input BagItemCreateWithoutCustomerInput {
  id: ID
  productVariant: ProductVariantCreateOneInput!
  position: Int
  saved: Boolean
  status: BagItemStatus!
}

type BagItemEdge {
  node: BagItem!
  cursor: String!
}

enum BagItemOrderByInput {
  id_ASC
  id_DESC
  position_ASC
  position_DESC
  saved_ASC
  saved_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BagItemPreviousValues {
  id: ID!
  position: Int
  saved: Boolean
  status: BagItemStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BagItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  saved: Boolean
  saved_not: Boolean
  status: BagItemStatus
  status_not: BagItemStatus
  status_in: [BagItemStatus!]
  status_not_in: [BagItemStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BagItemScalarWhereInput!]
  OR: [BagItemScalarWhereInput!]
  NOT: [BagItemScalarWhereInput!]
}

enum BagItemStatus {
  Added
  Reserved
  Received
}

type BagItemSubscriptionPayload {
  mutation: MutationType!
  node: BagItem
  updatedFields: [String!]
  previousValues: BagItemPreviousValues
}

input BagItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BagItemWhereInput
  AND: [BagItemSubscriptionWhereInput!]
  OR: [BagItemSubscriptionWhereInput!]
  NOT: [BagItemSubscriptionWhereInput!]
}

input BagItemUpdateInput {
  customer: CustomerUpdateOneRequiredWithoutBagItemsInput
  productVariant: ProductVariantUpdateOneRequiredInput
  position: Int
  saved: Boolean
  status: BagItemStatus
}

input BagItemUpdateManyDataInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
}

input BagItemUpdateManyMutationInput {
  position: Int
  saved: Boolean
  status: BagItemStatus
}

input BagItemUpdateManyWithoutCustomerInput {
  create: [BagItemCreateWithoutCustomerInput!]
  delete: [BagItemWhereUniqueInput!]
  connect: [BagItemWhereUniqueInput!]
  set: [BagItemWhereUniqueInput!]
  disconnect: [BagItemWhereUniqueInput!]
  update: [BagItemUpdateWithWhereUniqueWithoutCustomerInput!]
  upsert: [BagItemUpsertWithWhereUniqueWithoutCustomerInput!]
  deleteMany: [BagItemScalarWhereInput!]
  updateMany: [BagItemUpdateManyWithWhereNestedInput!]
}

input BagItemUpdateManyWithWhereNestedInput {
  where: BagItemScalarWhereInput!
  data: BagItemUpdateManyDataInput!
}

input BagItemUpdateWithoutCustomerDataInput {
  productVariant: ProductVariantUpdateOneRequiredInput
  position: Int
  saved: Boolean
  status: BagItemStatus
}

input BagItemUpdateWithWhereUniqueWithoutCustomerInput {
  where: BagItemWhereUniqueInput!
  data: BagItemUpdateWithoutCustomerDataInput!
}

input BagItemUpsertWithWhereUniqueWithoutCustomerInput {
  where: BagItemWhereUniqueInput!
  update: BagItemUpdateWithoutCustomerDataInput!
  create: BagItemCreateWithoutCustomerInput!
}

input BagItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  customer: CustomerWhereInput
  productVariant: ProductVariantWhereInput
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  saved: Boolean
  saved_not: Boolean
  status: BagItemStatus
  status_not: BagItemStatus
  status_in: [BagItemStatus!]
  status_not_in: [BagItemStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BagItemWhereInput!]
  OR: [BagItemWhereInput!]
  NOT: [BagItemWhereInput!]
}

input BagItemWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type BillingInfo {
  id: ID!
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BillingInfoConnection {
  pageInfo: PageInfo!
  edges: [BillingInfoEdge]!
  aggregate: AggregateBillingInfo!
}

input BillingInfoCreateInput {
  id: ID
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoCreateOneInput {
  create: BillingInfoCreateInput
  connect: BillingInfoWhereUniqueInput
}

type BillingInfoEdge {
  node: BillingInfo!
  cursor: String!
}

enum BillingInfoOrderByInput {
  id_ASC
  id_DESC
  brand_ASC
  brand_DESC
  name_ASC
  name_DESC
  last_digits_ASC
  last_digits_DESC
  expiration_month_ASC
  expiration_month_DESC
  expiration_year_ASC
  expiration_year_DESC
  street1_ASC
  street1_DESC
  street2_ASC
  street2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  country_ASC
  country_DESC
  postal_code_ASC
  postal_code_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BillingInfoPreviousValues {
  id: ID!
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BillingInfoSubscriptionPayload {
  mutation: MutationType!
  node: BillingInfo
  updatedFields: [String!]
  previousValues: BillingInfoPreviousValues
}

input BillingInfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BillingInfoWhereInput
  AND: [BillingInfoSubscriptionWhereInput!]
  OR: [BillingInfoSubscriptionWhereInput!]
  NOT: [BillingInfoSubscriptionWhereInput!]
}

input BillingInfoUpdateDataInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoUpdateInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoUpdateManyMutationInput {
  brand: String
  name: String
  last_digits: String
  expiration_month: Int
  expiration_year: Int
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

input BillingInfoUpdateOneInput {
  create: BillingInfoCreateInput
  update: BillingInfoUpdateDataInput
  upsert: BillingInfoUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BillingInfoWhereUniqueInput
}

input BillingInfoUpsertNestedInput {
  update: BillingInfoUpdateDataInput!
  create: BillingInfoCreateInput!
}

input BillingInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  brand: String
  brand_not: String
  brand_in: [String!]
  brand_not_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_gt: String
  brand_gte: String
  brand_contains: String
  brand_not_contains: String
  brand_starts_with: String
  brand_not_starts_with: String
  brand_ends_with: String
  brand_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  last_digits: String
  last_digits_not: String
  last_digits_in: [String!]
  last_digits_not_in: [String!]
  last_digits_lt: String
  last_digits_lte: String
  last_digits_gt: String
  last_digits_gte: String
  last_digits_contains: String
  last_digits_not_contains: String
  last_digits_starts_with: String
  last_digits_not_starts_with: String
  last_digits_ends_with: String
  last_digits_not_ends_with: String
  expiration_month: Int
  expiration_month_not: Int
  expiration_month_in: [Int!]
  expiration_month_not_in: [Int!]
  expiration_month_lt: Int
  expiration_month_lte: Int
  expiration_month_gt: Int
  expiration_month_gte: Int
  expiration_year: Int
  expiration_year_not: Int
  expiration_year_in: [Int!]
  expiration_year_not_in: [Int!]
  expiration_year_lt: Int
  expiration_year_lte: Int
  expiration_year_gt: Int
  expiration_year_gte: Int
  street1: String
  street1_not: String
  street1_in: [String!]
  street1_not_in: [String!]
  street1_lt: String
  street1_lte: String
  street1_gt: String
  street1_gte: String
  street1_contains: String
  street1_not_contains: String
  street1_starts_with: String
  street1_not_starts_with: String
  street1_ends_with: String
  street1_not_ends_with: String
  street2: String
  street2_not: String
  street2_in: [String!]
  street2_not_in: [String!]
  street2_lt: String
  street2_lte: String
  street2_gt: String
  street2_gte: String
  street2_contains: String
  street2_not_contains: String
  street2_starts_with: String
  street2_not_starts_with: String
  street2_ends_with: String
  street2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  postal_code: String
  postal_code_not: String
  postal_code_in: [String!]
  postal_code_not_in: [String!]
  postal_code_lt: String
  postal_code_lte: String
  postal_code_gt: String
  postal_code_gte: String
  postal_code_contains: String
  postal_code_not_contains: String
  postal_code_starts_with: String
  postal_code_not_starts_with: String
  postal_code_ends_with: String
  postal_code_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BillingInfoWhereInput!]
  OR: [BillingInfoWhereInput!]
  NOT: [BillingInfoWhereInput!]
}

input BillingInfoWhereUniqueInput {
  id: ID
}

type BlogPost {
  id: ID!
  webflowId: String!
  webflowCreatedAt: DateTime!
  webflowUpdatedAt: DateTime!
  slug: String!
  name: String
  body: String
  summary: String
  thumbnailURL: String
  imageURL: String
  imageAlt: String
  image: Image
  url: String
  tags: [String!]!
  author: String
  category: String
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedOn: DateTime!
}

type BlogPostConnection {
  pageInfo: PageInfo!
  edges: [BlogPostEdge]!
  aggregate: AggregateBlogPost!
}

input BlogPostCreateInput {
  id: ID
  webflowId: String!
  webflowCreatedAt: DateTime!
  webflowUpdatedAt: DateTime!
  slug: String!
  name: String
  body: String
  summary: String
  thumbnailURL: String
  imageURL: String
  imageAlt: String
  image: ImageCreateOneInput
  url: String
  tags: BlogPostCreatetagsInput
  author: String
  category: String
  publishedOn: DateTime!
}

input BlogPostCreatetagsInput {
  set: [String!]
}

type BlogPostEdge {
  node: BlogPost!
  cursor: String!
}

enum BlogPostOrderByInput {
  id_ASC
  id_DESC
  webflowId_ASC
  webflowId_DESC
  webflowCreatedAt_ASC
  webflowCreatedAt_DESC
  webflowUpdatedAt_ASC
  webflowUpdatedAt_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  body_ASC
  body_DESC
  summary_ASC
  summary_DESC
  thumbnailURL_ASC
  thumbnailURL_DESC
  imageURL_ASC
  imageURL_DESC
  imageAlt_ASC
  imageAlt_DESC
  url_ASC
  url_DESC
  author_ASC
  author_DESC
  category_ASC
  category_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedOn_ASC
  publishedOn_DESC
}

type BlogPostPreviousValues {
  id: ID!
  webflowId: String!
  webflowCreatedAt: DateTime!
  webflowUpdatedAt: DateTime!
  slug: String!
  name: String
  body: String
  summary: String
  thumbnailURL: String
  imageURL: String
  imageAlt: String
  url: String
  tags: [String!]!
  author: String
  category: String
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedOn: DateTime!
}

type BlogPostSubscriptionPayload {
  mutation: MutationType!
  node: BlogPost
  updatedFields: [String!]
  previousValues: BlogPostPreviousValues
}

input BlogPostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlogPostWhereInput
  AND: [BlogPostSubscriptionWhereInput!]
  OR: [BlogPostSubscriptionWhereInput!]
  NOT: [BlogPostSubscriptionWhereInput!]
}

input BlogPostUpdateInput {
  webflowId: String
  webflowCreatedAt: DateTime
  webflowUpdatedAt: DateTime
  slug: String
  name: String
  body: String
  summary: String
  thumbnailURL: String
  imageURL: String
  imageAlt: String
  image: ImageUpdateOneInput
  url: String
  tags: BlogPostUpdatetagsInput
  author: String
  category: String
  publishedOn: DateTime
}

input BlogPostUpdateManyMutationInput {
  webflowId: String
  webflowCreatedAt: DateTime
  webflowUpdatedAt: DateTime
  slug: String
  name: String
  body: String
  summary: String
  thumbnailURL: String
  imageURL: String
  imageAlt: String
  url: String
  tags: BlogPostUpdatetagsInput
  author: String
  category: String
  publishedOn: DateTime
}

input BlogPostUpdatetagsInput {
  set: [String!]
}

input BlogPostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  webflowId: String
  webflowId_not: String
  webflowId_in: [String!]
  webflowId_not_in: [String!]
  webflowId_lt: String
  webflowId_lte: String
  webflowId_gt: String
  webflowId_gte: String
  webflowId_contains: String
  webflowId_not_contains: String
  webflowId_starts_with: String
  webflowId_not_starts_with: String
  webflowId_ends_with: String
  webflowId_not_ends_with: String
  webflowCreatedAt: DateTime
  webflowCreatedAt_not: DateTime
  webflowCreatedAt_in: [DateTime!]
  webflowCreatedAt_not_in: [DateTime!]
  webflowCreatedAt_lt: DateTime
  webflowCreatedAt_lte: DateTime
  webflowCreatedAt_gt: DateTime
  webflowCreatedAt_gte: DateTime
  webflowUpdatedAt: DateTime
  webflowUpdatedAt_not: DateTime
  webflowUpdatedAt_in: [DateTime!]
  webflowUpdatedAt_not_in: [DateTime!]
  webflowUpdatedAt_lt: DateTime
  webflowUpdatedAt_lte: DateTime
  webflowUpdatedAt_gt: DateTime
  webflowUpdatedAt_gte: DateTime
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  thumbnailURL: String
  thumbnailURL_not: String
  thumbnailURL_in: [String!]
  thumbnailURL_not_in: [String!]
  thumbnailURL_lt: String
  thumbnailURL_lte: String
  thumbnailURL_gt: String
  thumbnailURL_gte: String
  thumbnailURL_contains: String
  thumbnailURL_not_contains: String
  thumbnailURL_starts_with: String
  thumbnailURL_not_starts_with: String
  thumbnailURL_ends_with: String
  thumbnailURL_not_ends_with: String
  imageURL: String
  imageURL_not: String
  imageURL_in: [String!]
  imageURL_not_in: [String!]
  imageURL_lt: String
  imageURL_lte: String
  imageURL_gt: String
  imageURL_gte: String
  imageURL_contains: String
  imageURL_not_contains: String
  imageURL_starts_with: String
  imageURL_not_starts_with: String
  imageURL_ends_with: String
  imageURL_not_ends_with: String
  imageAlt: String
  imageAlt_not: String
  imageAlt_in: [String!]
  imageAlt_not_in: [String!]
  imageAlt_lt: String
  imageAlt_lte: String
  imageAlt_gt: String
  imageAlt_gte: String
  imageAlt_contains: String
  imageAlt_not_contains: String
  imageAlt_starts_with: String
  imageAlt_not_starts_with: String
  imageAlt_ends_with: String
  imageAlt_not_ends_with: String
  image: ImageWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedOn: DateTime
  publishedOn_not: DateTime
  publishedOn_in: [DateTime!]
  publishedOn_not_in: [DateTime!]
  publishedOn_lt: DateTime
  publishedOn_lte: DateTime
  publishedOn_gt: DateTime
  publishedOn_gte: DateTime
  AND: [BlogPostWhereInput!]
  OR: [BlogPostWhereInput!]
  NOT: [BlogPostWhereInput!]
}

input BlogPostWhereUniqueInput {
  id: ID
}

type BottomSize {
  id: ID!
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

type BottomSizeConnection {
  pageInfo: PageInfo!
  edges: [BottomSizeEdge]!
  aggregate: AggregateBottomSize!
}

input BottomSizeCreateInput {
  id: ID
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeCreateOneInput {
  create: BottomSizeCreateInput
  connect: BottomSizeWhereUniqueInput
}

type BottomSizeEdge {
  node: BottomSize!
  cursor: String!
}

enum BottomSizeOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  value_ASC
  value_DESC
  waist_ASC
  waist_DESC
  rise_ASC
  rise_DESC
  hem_ASC
  hem_DESC
  inseam_ASC
  inseam_DESC
}

type BottomSizePreviousValues {
  id: ID!
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

type BottomSizeSubscriptionPayload {
  mutation: MutationType!
  node: BottomSize
  updatedFields: [String!]
  previousValues: BottomSizePreviousValues
}

input BottomSizeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BottomSizeWhereInput
  AND: [BottomSizeSubscriptionWhereInput!]
  OR: [BottomSizeSubscriptionWhereInput!]
  NOT: [BottomSizeSubscriptionWhereInput!]
}

enum BottomSizeType {
  WxL
  US
  EU
  JP
  Letter
}

input BottomSizeUpdateDataInput {
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeUpdateInput {
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeUpdateManyMutationInput {
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

input BottomSizeUpdateOneInput {
  create: BottomSizeCreateInput
  update: BottomSizeUpdateDataInput
  upsert: BottomSizeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BottomSizeWhereUniqueInput
}

input BottomSizeUpsertNestedInput {
  update: BottomSizeUpdateDataInput!
  create: BottomSizeCreateInput!
}

input BottomSizeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: BottomSizeType
  type_not: BottomSizeType
  type_in: [BottomSizeType!]
  type_not_in: [BottomSizeType!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  waist: Float
  waist_not: Float
  waist_in: [Float!]
  waist_not_in: [Float!]
  waist_lt: Float
  waist_lte: Float
  waist_gt: Float
  waist_gte: Float
  rise: Float
  rise_not: Float
  rise_in: [Float!]
  rise_not_in: [Float!]
  rise_lt: Float
  rise_lte: Float
  rise_gt: Float
  rise_gte: Float
  hem: Float
  hem_not: Float
  hem_in: [Float!]
  hem_not_in: [Float!]
  hem_lt: Float
  hem_lte: Float
  hem_gt: Float
  hem_gte: Float
  inseam: Float
  inseam_not: Float
  inseam_in: [Float!]
  inseam_not_in: [Float!]
  inseam_lt: Float
  inseam_lte: Float
  inseam_gt: Float
  inseam_gte: Float
  AND: [BottomSizeWhereInput!]
  OR: [BottomSizeWhereInput!]
  NOT: [BottomSizeWhereInput!]
}

input BottomSizeWhereUniqueInput {
  id: ID
}

type Brand {
  id: ID!
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean!
  logo: Json
  logoImage: Image
  name: String!
  designer: String
  basedIn: String
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  since: DateTime
  tier: BrandTier!
  published: Boolean!
  featured: Boolean!
  websiteUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  shopifyShop: ShopifyShop
}

type BrandConnection {
  pageInfo: PageInfo!
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  id: ID
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  logoImage: ImageCreateOneInput
  name: String!
  designer: String
  basedIn: String
  products: ProductCreateManyWithoutBrandInput
  images: ImageCreateManyInput
  since: DateTime
  tier: BrandTier!
  published: Boolean
  featured: Boolean
  websiteUrl: String
  shopifyShop: ShopifyShopCreateOneInput
}

input BrandCreateOneInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

input BrandCreateOneWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  connect: BrandWhereUniqueInput
}

input BrandCreateWithoutProductsInput {
  id: ID
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  logoImage: ImageCreateOneInput
  name: String!
  designer: String
  basedIn: String
  images: ImageCreateManyInput
  since: DateTime
  tier: BrandTier!
  published: Boolean
  featured: Boolean
  websiteUrl: String
  shopifyShop: ShopifyShopCreateOneInput
}

type BrandEdge {
  node: Brand!
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  brandCode_ASC
  brandCode_DESC
  description_ASC
  description_DESC
  isPrimaryBrand_ASC
  isPrimaryBrand_DESC
  logo_ASC
  logo_DESC
  name_ASC
  name_DESC
  designer_ASC
  designer_DESC
  basedIn_ASC
  basedIn_DESC
  since_ASC
  since_DESC
  tier_ASC
  tier_DESC
  published_ASC
  published_DESC
  featured_ASC
  featured_DESC
  websiteUrl_ASC
  websiteUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BrandPreviousValues {
  id: ID!
  slug: String!
  brandCode: String!
  description: String
  isPrimaryBrand: Boolean!
  logo: Json
  name: String!
  designer: String
  basedIn: String
  since: DateTime
  tier: BrandTier!
  published: Boolean!
  featured: Boolean!
  websiteUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
  AND: [BrandSubscriptionWhereInput!]
  OR: [BrandSubscriptionWhereInput!]
  NOT: [BrandSubscriptionWhereInput!]
}

enum BrandTier {
  Tier0
  Tier1
  Tier2
  Niche
  Upcoming
  Retro
  Boutique
  Local
  Discovery
}

input BrandUpdateDataInput {
  slug: String
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  logoImage: ImageUpdateOneInput
  name: String
  designer: String
  basedIn: String
  products: ProductUpdateManyWithoutBrandInput
  images: ImageUpdateManyInput
  since: DateTime
  tier: BrandTier
  published: Boolean
  featured: Boolean
  websiteUrl: String
  shopifyShop: ShopifyShopUpdateOneInput
}

input BrandUpdateInput {
  slug: String
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  logoImage: ImageUpdateOneInput
  name: String
  designer: String
  basedIn: String
  products: ProductUpdateManyWithoutBrandInput
  images: ImageUpdateManyInput
  since: DateTime
  tier: BrandTier
  published: Boolean
  featured: Boolean
  websiteUrl: String
  shopifyShop: ShopifyShopUpdateOneInput
}

input BrandUpdateManyMutationInput {
  slug: String
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  name: String
  designer: String
  basedIn: String
  since: DateTime
  tier: BrandTier
  published: Boolean
  featured: Boolean
  websiteUrl: String
}

input BrandUpdateOneInput {
  create: BrandCreateInput
  update: BrandUpdateDataInput
  upsert: BrandUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BrandWhereUniqueInput
}

input BrandUpdateOneRequiredWithoutProductsInput {
  create: BrandCreateWithoutProductsInput
  update: BrandUpdateWithoutProductsDataInput
  upsert: BrandUpsertWithoutProductsInput
  connect: BrandWhereUniqueInput
}

input BrandUpdateWithoutProductsDataInput {
  slug: String
  brandCode: String
  description: String
  isPrimaryBrand: Boolean
  logo: Json
  logoImage: ImageUpdateOneInput
  name: String
  designer: String
  basedIn: String
  images: ImageUpdateManyInput
  since: DateTime
  tier: BrandTier
  published: Boolean
  featured: Boolean
  websiteUrl: String
  shopifyShop: ShopifyShopUpdateOneInput
}

input BrandUpsertNestedInput {
  update: BrandUpdateDataInput!
  create: BrandCreateInput!
}

input BrandUpsertWithoutProductsInput {
  update: BrandUpdateWithoutProductsDataInput!
  create: BrandCreateWithoutProductsInput!
}

input BrandWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  brandCode: String
  brandCode_not: String
  brandCode_in: [String!]
  brandCode_not_in: [String!]
  brandCode_lt: String
  brandCode_lte: String
  brandCode_gt: String
  brandCode_gte: String
  brandCode_contains: String
  brandCode_not_contains: String
  brandCode_starts_with: String
  brandCode_not_starts_with: String
  brandCode_ends_with: String
  brandCode_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isPrimaryBrand: Boolean
  isPrimaryBrand_not: Boolean
  logoImage: ImageWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  designer: String
  designer_not: String
  designer_in: [String!]
  designer_not_in: [String!]
  designer_lt: String
  designer_lte: String
  designer_gt: String
  designer_gte: String
  designer_contains: String
  designer_not_contains: String
  designer_starts_with: String
  designer_not_starts_with: String
  designer_ends_with: String
  designer_not_ends_with: String
  basedIn: String
  basedIn_not: String
  basedIn_in: [String!]
  basedIn_not_in: [String!]
  basedIn_lt: String
  basedIn_lte: String
  basedIn_gt: String
  basedIn_gte: String
  basedIn_contains: String
  basedIn_not_contains: String
  basedIn_starts_with: String
  basedIn_not_starts_with: String
  basedIn_ends_with: String
  basedIn_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
  since: DateTime
  since_not: DateTime
  since_in: [DateTime!]
  since_not_in: [DateTime!]
  since_lt: DateTime
  since_lte: DateTime
  since_gt: DateTime
  since_gte: DateTime
  tier: BrandTier
  tier_not: BrandTier
  tier_in: [BrandTier!]
  tier_not_in: [BrandTier!]
  published: Boolean
  published_not: Boolean
  featured: Boolean
  featured_not: Boolean
  websiteUrl: String
  websiteUrl_not: String
  websiteUrl_in: [String!]
  websiteUrl_not_in: [String!]
  websiteUrl_lt: String
  websiteUrl_lte: String
  websiteUrl_gt: String
  websiteUrl_gte: String
  websiteUrl_contains: String
  websiteUrl_not_contains: String
  websiteUrl_starts_with: String
  websiteUrl_not_starts_with: String
  websiteUrl_ends_with: String
  websiteUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  shopifyShop: ShopifyShopWhereInput
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
}

input BrandWhereUniqueInput {
  id: ID
  slug: String
  brandCode: String
}

type Category {
  id: ID!
  slug: String!
  name: String!
  image: Json
  description: String
  visible: Boolean!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  children(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  updatedAt: DateTime
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  slug: String!
  name: String!
  image: Json
  description: String
  visible: Boolean
  products: ProductCreateManyWithoutCategoryInput
  children: CategoryCreateManyWithoutChildrenInput
}

input CategoryCreateManyWithoutChildrenInput {
  create: [CategoryCreateWithoutChildrenInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutChildrenInput {
  id: ID
  slug: String!
  name: String!
  image: Json
  description: String
  visible: Boolean
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutProductsInput {
  id: ID
  slug: String!
  name: String!
  image: Json
  description: String
  visible: Boolean
  children: CategoryCreateManyWithoutChildrenInput
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  description_ASC
  description_DESC
  visible_ASC
  visible_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  slug: String!
  name: String!
  image: Json
  description: String
  visible: Boolean!
  updatedAt: DateTime
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  visible: Boolean
  visible_not: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateDataInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
  products: ProductUpdateManyWithoutCategoryInput
  children: CategoryUpdateManyWithoutChildrenInput
}

input CategoryUpdateInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
  products: ProductUpdateManyWithoutCategoryInput
  children: CategoryUpdateManyWithoutChildrenInput
}

input CategoryUpdateManyDataInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
}

input CategoryUpdateManyMutationInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
}

input CategoryUpdateManyWithoutChildrenInput {
  create: [CategoryCreateWithoutChildrenInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutChildrenInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutChildrenInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateOneRequiredInput {
  create: CategoryCreateInput
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateOneRequiredWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  update: CategoryUpdateWithoutProductsDataInput
  upsert: CategoryUpsertWithoutProductsInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutChildrenDataInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutProductsDataInput {
  slug: String
  name: String
  image: Json
  description: String
  visible: Boolean
  children: CategoryUpdateManyWithoutChildrenInput
}

input CategoryUpdateWithWhereUniqueWithoutChildrenInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutChildrenDataInput!
}

input CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryUpsertWithoutProductsInput {
  update: CategoryUpdateWithoutProductsDataInput!
  create: CategoryCreateWithoutProductsInput!
}

input CategoryUpsertWithWhereUniqueWithoutChildrenInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutChildrenDataInput!
  create: CategoryCreateWithoutChildrenInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  visible: Boolean
  visible_not: Boolean
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  children_every: CategoryWhereInput
  children_some: CategoryWhereInput
  children_none: CategoryWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
  name: String
}

type Collection {
  id: ID!
  slug: String!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  title: String
  subTitle: String
  displayTextOverlay: Boolean!
  textOverlayColor: String
  descriptions: [String!]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  published: Boolean!
  placements: [CollectionPlacement!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

type CollectionConnection {
  pageInfo: PageInfo!
  edges: [CollectionEdge]!
  aggregate: AggregateCollection!
}

input CollectionCreatedescriptionsInput {
  set: [String!]
}

input CollectionCreateInput {
  id: ID
  slug: String!
  images: ImageCreateManyInput
  title: String
  subTitle: String
  displayTextOverlay: Boolean
  textOverlayColor: String
  descriptions: CollectionCreatedescriptionsInput
  products: ProductCreateManyInput
  published: Boolean
  placements: CollectionCreateplacementsInput
}

input CollectionCreateOneInput {
  create: CollectionCreateInput
  connect: CollectionWhereUniqueInput
}

input CollectionCreateplacementsInput {
  set: [CollectionPlacement!]
}

type CollectionEdge {
  node: Collection!
  cursor: String!
}

enum CollectionOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  subTitle_ASC
  subTitle_DESC
  displayTextOverlay_ASC
  displayTextOverlay_DESC
  textOverlayColor_ASC
  textOverlayColor_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum CollectionPlacement {
  Homepage
}

type CollectionPreviousValues {
  id: ID!
  slug: String!
  title: String
  subTitle: String
  displayTextOverlay: Boolean!
  textOverlayColor: String
  descriptions: [String!]!
  published: Boolean!
  placements: [CollectionPlacement!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

type CollectionSubscriptionPayload {
  mutation: MutationType!
  node: Collection
  updatedFields: [String!]
  previousValues: CollectionPreviousValues
}

input CollectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CollectionWhereInput
  AND: [CollectionSubscriptionWhereInput!]
  OR: [CollectionSubscriptionWhereInput!]
  NOT: [CollectionSubscriptionWhereInput!]
}

input CollectionUpdateDataInput {
  slug: String
  images: ImageUpdateManyInput
  title: String
  subTitle: String
  displayTextOverlay: Boolean
  textOverlayColor: String
  descriptions: CollectionUpdatedescriptionsInput
  products: ProductUpdateManyInput
  published: Boolean
  placements: CollectionUpdateplacementsInput
}

input CollectionUpdatedescriptionsInput {
  set: [String!]
}

input CollectionUpdateInput {
  slug: String
  images: ImageUpdateManyInput
  title: String
  subTitle: String
  displayTextOverlay: Boolean
  textOverlayColor: String
  descriptions: CollectionUpdatedescriptionsInput
  products: ProductUpdateManyInput
  published: Boolean
  placements: CollectionUpdateplacementsInput
}

input CollectionUpdateManyMutationInput {
  slug: String
  title: String
  subTitle: String
  displayTextOverlay: Boolean
  textOverlayColor: String
  descriptions: CollectionUpdatedescriptionsInput
  published: Boolean
  placements: CollectionUpdateplacementsInput
}

input CollectionUpdateOneInput {
  create: CollectionCreateInput
  update: CollectionUpdateDataInput
  upsert: CollectionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CollectionWhereUniqueInput
}

input CollectionUpdateplacementsInput {
  set: [CollectionPlacement!]
}

input CollectionUpsertNestedInput {
  update: CollectionUpdateDataInput!
  create: CollectionCreateInput!
}

input CollectionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  subTitle: String
  subTitle_not: String
  subTitle_in: [String!]
  subTitle_not_in: [String!]
  subTitle_lt: String
  subTitle_lte: String
  subTitle_gt: String
  subTitle_gte: String
  subTitle_contains: String
  subTitle_not_contains: String
  subTitle_starts_with: String
  subTitle_not_starts_with: String
  subTitle_ends_with: String
  subTitle_not_ends_with: String
  displayTextOverlay: Boolean
  displayTextOverlay_not: Boolean
  textOverlayColor: String
  textOverlayColor_not: String
  textOverlayColor_in: [String!]
  textOverlayColor_not_in: [String!]
  textOverlayColor_lt: String
  textOverlayColor_lte: String
  textOverlayColor_gt: String
  textOverlayColor_gte: String
  textOverlayColor_contains: String
  textOverlayColor_not_contains: String
  textOverlayColor_starts_with: String
  textOverlayColor_not_starts_with: String
  textOverlayColor_ends_with: String
  textOverlayColor_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
}

input CollectionWhereUniqueInput {
  id: ID
  slug: String
}

type Color {
  id: ID!
  slug: String!
  name: String!
  colorCode: String!
  hexCode: String!
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant!]
}

type ColorConnection {
  pageInfo: PageInfo!
  edges: [ColorEdge]!
  aggregate: AggregateColor!
}

input ColorCreateInput {
  id: ID
  slug: String!
  name: String!
  colorCode: String!
  hexCode: String!
  productVariants: ProductVariantCreateManyWithoutColorInput
}

input ColorCreateOneInput {
  create: ColorCreateInput
  connect: ColorWhereUniqueInput
}

input ColorCreateOneWithoutProductVariantsInput {
  create: ColorCreateWithoutProductVariantsInput
  connect: ColorWhereUniqueInput
}

input ColorCreateWithoutProductVariantsInput {
  id: ID
  slug: String!
  name: String!
  colorCode: String!
  hexCode: String!
}

type ColorEdge {
  node: Color!
  cursor: String!
}

enum ColorOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  colorCode_ASC
  colorCode_DESC
  hexCode_ASC
  hexCode_DESC
}

type ColorPreviousValues {
  id: ID!
  slug: String!
  name: String!
  colorCode: String!
  hexCode: String!
}

type ColorSubscriptionPayload {
  mutation: MutationType!
  node: Color
  updatedFields: [String!]
  previousValues: ColorPreviousValues
}

input ColorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ColorWhereInput
  AND: [ColorSubscriptionWhereInput!]
  OR: [ColorSubscriptionWhereInput!]
  NOT: [ColorSubscriptionWhereInput!]
}

input ColorUpdateDataInput {
  slug: String
  name: String
  colorCode: String
  hexCode: String
  productVariants: ProductVariantUpdateManyWithoutColorInput
}

input ColorUpdateInput {
  slug: String
  name: String
  colorCode: String
  hexCode: String
  productVariants: ProductVariantUpdateManyWithoutColorInput
}

input ColorUpdateManyMutationInput {
  slug: String
  name: String
  colorCode: String
  hexCode: String
}

input ColorUpdateOneInput {
  create: ColorCreateInput
  update: ColorUpdateDataInput
  upsert: ColorUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ColorWhereUniqueInput
}

input ColorUpdateOneRequiredInput {
  create: ColorCreateInput
  update: ColorUpdateDataInput
  upsert: ColorUpsertNestedInput
  connect: ColorWhereUniqueInput
}

input ColorUpdateOneRequiredWithoutProductVariantsInput {
  create: ColorCreateWithoutProductVariantsInput
  update: ColorUpdateWithoutProductVariantsDataInput
  upsert: ColorUpsertWithoutProductVariantsInput
  connect: ColorWhereUniqueInput
}

input ColorUpdateWithoutProductVariantsDataInput {
  slug: String
  name: String
  colorCode: String
  hexCode: String
}

input ColorUpsertNestedInput {
  update: ColorUpdateDataInput!
  create: ColorCreateInput!
}

input ColorUpsertWithoutProductVariantsInput {
  update: ColorUpdateWithoutProductVariantsDataInput!
  create: ColorCreateWithoutProductVariantsInput!
}

input ColorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  colorCode: String
  colorCode_not: String
  colorCode_in: [String!]
  colorCode_not_in: [String!]
  colorCode_lt: String
  colorCode_lte: String
  colorCode_gt: String
  colorCode_gte: String
  colorCode_contains: String
  colorCode_not_contains: String
  colorCode_starts_with: String
  colorCode_not_starts_with: String
  colorCode_ends_with: String
  colorCode_not_ends_with: String
  hexCode: String
  hexCode_not: String
  hexCode_in: [String!]
  hexCode_not_in: [String!]
  hexCode_lt: String
  hexCode_lte: String
  hexCode_gt: String
  hexCode_gte: String
  hexCode_contains: String
  hexCode_not_contains: String
  hexCode_starts_with: String
  hexCode_not_starts_with: String
  hexCode_ends_with: String
  hexCode_not_ends_with: String
  productVariants_every: ProductVariantWhereInput
  productVariants_some: ProductVariantWhereInput
  productVariants_none: ProductVariantWhereInput
  AND: [ColorWhereInput!]
  OR: [ColorWhereInput!]
  NOT: [ColorWhereInput!]
}

input ColorWhereUniqueInput {
  id: ID
  slug: String
  colorCode: String
}

type Customer {
  id: ID!
  user: User!
  status: CustomerStatus
  detail: CustomerDetail
  billingInfo: BillingInfo
  plan: Plan
  membership: CustomerMembership
  bagItems(where: BagItemWhereInput, orderBy: BagItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BagItem!]
  reservations(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reservation!]
  referralLink: String
  referrerId: String
  referrer: Customer
  referrees(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer!]
  emailedProducts(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  admissions: CustomerAdmissionsData
  authorizedAt: DateTime
  utm: UTMData
  notificationBarReceipts(where: CustomerNotificationBarReceiptWhereInput, orderBy: CustomerNotificationBarReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerNotificationBarReceipt!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerAdmissionsData {
  id: ID!
  inServiceableZipcode: Boolean!
  admissable: Boolean!
  inAdmissableReason: InAdmissableReason
  allAccessEnabled: Boolean!
  customer: Customer!
  authorizationsCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  authorizationWindowClosesAt: DateTime
}

type CustomerAdmissionsDataConnection {
  pageInfo: PageInfo!
  edges: [CustomerAdmissionsDataEdge]!
  aggregate: AggregateCustomerAdmissionsData!
}

input CustomerAdmissionsDataCreateInput {
  id: ID
  inServiceableZipcode: Boolean!
  admissable: Boolean!
  inAdmissableReason: InAdmissableReason
  allAccessEnabled: Boolean
  customer: CustomerCreateOneWithoutAdmissionsInput!
  authorizationsCount: Int!
  authorizationWindowClosesAt: DateTime
}

input CustomerAdmissionsDataCreateOneWithoutCustomerInput {
  create: CustomerAdmissionsDataCreateWithoutCustomerInput
  connect: CustomerAdmissionsDataWhereUniqueInput
}

input CustomerAdmissionsDataCreateWithoutCustomerInput {
  id: ID
  inServiceableZipcode: Boolean!
  admissable: Boolean!
  inAdmissableReason: InAdmissableReason
  allAccessEnabled: Boolean
  authorizationsCount: Int!
  authorizationWindowClosesAt: DateTime
}

type CustomerAdmissionsDataEdge {
  node: CustomerAdmissionsData!
  cursor: String!
}

enum CustomerAdmissionsDataOrderByInput {
  id_ASC
  id_DESC
  inServiceableZipcode_ASC
  inServiceableZipcode_DESC
  admissable_ASC
  admissable_DESC
  inAdmissableReason_ASC
  inAdmissableReason_DESC
  allAccessEnabled_ASC
  allAccessEnabled_DESC
  authorizationsCount_ASC
  authorizationsCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  authorizationWindowClosesAt_ASC
  authorizationWindowClosesAt_DESC
}

type CustomerAdmissionsDataPreviousValues {
  id: ID!
  inServiceableZipcode: Boolean!
  admissable: Boolean!
  inAdmissableReason: InAdmissableReason
  allAccessEnabled: Boolean!
  authorizationsCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  authorizationWindowClosesAt: DateTime
}

type CustomerAdmissionsDataSubscriptionPayload {
  mutation: MutationType!
  node: CustomerAdmissionsData
  updatedFields: [String!]
  previousValues: CustomerAdmissionsDataPreviousValues
}

input CustomerAdmissionsDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerAdmissionsDataWhereInput
  AND: [CustomerAdmissionsDataSubscriptionWhereInput!]
  OR: [CustomerAdmissionsDataSubscriptionWhereInput!]
  NOT: [CustomerAdmissionsDataSubscriptionWhereInput!]
}

input CustomerAdmissionsDataUpdateInput {
  inServiceableZipcode: Boolean
  admissable: Boolean
  inAdmissableReason: InAdmissableReason
  allAccessEnabled: Boolean
  customer: CustomerUpdateOneRequiredWithoutAdmissionsInput
  authorizationsCount: Int
  authorizationWindowClosesAt: DateTime
}

input CustomerAdmissionsDataUpdateManyMutationInput {
  inServiceableZipcode: Boolean
  admissable: Boolean
  inAdmissableReason: InAdmissableReason
  allAccessEnabled: Boolean
  authorizationsCount: Int
  authorizationWindowClosesAt: DateTime
}

input CustomerAdmissionsDataUpdateOneWithoutCustomerInput {
  create: CustomerAdmissionsDataCreateWithoutCustomerInput
  update: CustomerAdmissionsDataUpdateWithoutCustomerDataInput
  upsert: CustomerAdmissionsDataUpsertWithoutCustomerInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerAdmissionsDataWhereUniqueInput
}

input CustomerAdmissionsDataUpdateWithoutCustomerDataInput {
  inServiceableZipcode: Boolean
  admissable: Boolean
  inAdmissableReason: InAdmissableReason
  allAccessEnabled: Boolean
  authorizationsCount: Int
  authorizationWindowClosesAt: DateTime
}

input CustomerAdmissionsDataUpsertWithoutCustomerInput {
  update: CustomerAdmissionsDataUpdateWithoutCustomerDataInput!
  create: CustomerAdmissionsDataCreateWithoutCustomerInput!
}

input CustomerAdmissionsDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  inServiceableZipcode: Boolean
  inServiceableZipcode_not: Boolean
  admissable: Boolean
  admissable_not: Boolean
  inAdmissableReason: InAdmissableReason
  inAdmissableReason_not: InAdmissableReason
  inAdmissableReason_in: [InAdmissableReason!]
  inAdmissableReason_not_in: [InAdmissableReason!]
  allAccessEnabled: Boolean
  allAccessEnabled_not: Boolean
  customer: CustomerWhereInput
  authorizationsCount: Int
  authorizationsCount_not: Int
  authorizationsCount_in: [Int!]
  authorizationsCount_not_in: [Int!]
  authorizationsCount_lt: Int
  authorizationsCount_lte: Int
  authorizationsCount_gt: Int
  authorizationsCount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  authorizationWindowClosesAt: DateTime
  authorizationWindowClosesAt_not: DateTime
  authorizationWindowClosesAt_in: [DateTime!]
  authorizationWindowClosesAt_not_in: [DateTime!]
  authorizationWindowClosesAt_lt: DateTime
  authorizationWindowClosesAt_lte: DateTime
  authorizationWindowClosesAt_gt: DateTime
  authorizationWindowClosesAt_gte: DateTime
  AND: [CustomerAdmissionsDataWhereInput!]
  OR: [CustomerAdmissionsDataWhereInput!]
  NOT: [CustomerAdmissionsDataWhereInput!]
}

input CustomerAdmissionsDataWhereUniqueInput {
  id: ID
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerCreateOneWithoutReferreesInput
  referrees: CustomerCreateManyWithoutReferrerInput
  emailedProducts: ProductCreateManyInput
  admissions: CustomerAdmissionsDataCreateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataCreateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptCreateManyWithoutCustomerInput
}

input CustomerCreateManyWithoutReferrerInput {
  create: [CustomerCreateWithoutReferrerInput!]
  connect: [CustomerWhereUniqueInput!]
}

input CustomerCreateOneInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutAdmissionsInput {
  create: CustomerCreateWithoutAdmissionsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutBagItemsInput {
  create: CustomerCreateWithoutBagItemsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutMembershipInput {
  create: CustomerCreateWithoutMembershipInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutNotificationBarReceiptsInput {
  create: CustomerCreateWithoutNotificationBarReceiptsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutReferreesInput {
  create: CustomerCreateWithoutReferreesInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutReservationsInput {
  create: CustomerCreateWithoutReservationsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutUtmInput {
  create: CustomerCreateWithoutUtmInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutAdmissionsInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerCreateOneWithoutReferreesInput
  referrees: CustomerCreateManyWithoutReferrerInput
  emailedProducts: ProductCreateManyInput
  authorizedAt: DateTime
  utm: UTMDataCreateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptCreateManyWithoutCustomerInput
}

input CustomerCreateWithoutBagItemsInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerCreateOneWithoutReferreesInput
  referrees: CustomerCreateManyWithoutReferrerInput
  emailedProducts: ProductCreateManyInput
  admissions: CustomerAdmissionsDataCreateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataCreateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptCreateManyWithoutCustomerInput
}

input CustomerCreateWithoutMembershipInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerCreateOneWithoutReferreesInput
  referrees: CustomerCreateManyWithoutReferrerInput
  emailedProducts: ProductCreateManyInput
  admissions: CustomerAdmissionsDataCreateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataCreateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptCreateManyWithoutCustomerInput
}

input CustomerCreateWithoutNotificationBarReceiptsInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerCreateOneWithoutReferreesInput
  referrees: CustomerCreateManyWithoutReferrerInput
  emailedProducts: ProductCreateManyInput
  admissions: CustomerAdmissionsDataCreateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataCreateOneWithoutCustomerInput
}

input CustomerCreateWithoutReferreesInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerCreateOneWithoutReferreesInput
  emailedProducts: ProductCreateManyInput
  admissions: CustomerAdmissionsDataCreateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataCreateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptCreateManyWithoutCustomerInput
}

input CustomerCreateWithoutReferrerInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrees: CustomerCreateManyWithoutReferrerInput
  emailedProducts: ProductCreateManyInput
  admissions: CustomerAdmissionsDataCreateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataCreateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptCreateManyWithoutCustomerInput
}

input CustomerCreateWithoutReservationsInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerCreateOneWithoutReferreesInput
  referrees: CustomerCreateManyWithoutReferrerInput
  emailedProducts: ProductCreateManyInput
  admissions: CustomerAdmissionsDataCreateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataCreateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptCreateManyWithoutCustomerInput
}

input CustomerCreateWithoutUtmInput {
  id: ID
  user: UserCreateOneInput!
  status: CustomerStatus
  detail: CustomerDetailCreateOneInput
  billingInfo: BillingInfoCreateOneInput
  plan: Plan
  membership: CustomerMembershipCreateOneWithoutCustomerInput
  bagItems: BagItemCreateManyWithoutCustomerInput
  reservations: ReservationCreateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerCreateOneWithoutReferreesInput
  referrees: CustomerCreateManyWithoutReferrerInput
  emailedProducts: ProductCreateManyInput
  admissions: CustomerAdmissionsDataCreateOneWithoutCustomerInput
  authorizedAt: DateTime
  notificationBarReceipts: CustomerNotificationBarReceiptCreateManyWithoutCustomerInput
}

type CustomerDetail {
  id: ID!
  phoneNumber: String
  birthday: DateTime
  height: Int
  weight: [Int!]!
  bodyType: String
  averageTopSize: String
  topSizes: [String!]!
  averageWaistSize: String
  waistSizes: [Int!]!
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  styles: [CustomerStyle!]!
  commuteStyle: String
  stylePreferences: StylePreferences
  shippingAddress: Location
  phoneOS: String
  insureShipment: Boolean!
  instagramHandle: String
  discoveryReference: String
  impactId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerDetailConnection {
  pageInfo: PageInfo!
  edges: [CustomerDetailEdge]!
  aggregate: AggregateCustomerDetail!
}

input CustomerDetailCreateInput {
  id: ID
  phoneNumber: String
  birthday: DateTime
  height: Int
  weight: CustomerDetailCreateweightInput
  bodyType: String
  averageTopSize: String
  topSizes: CustomerDetailCreatetopSizesInput
  averageWaistSize: String
  waistSizes: CustomerDetailCreatewaistSizesInput
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  styles: CustomerDetailCreatestylesInput
  commuteStyle: String
  stylePreferences: StylePreferencesCreateOneInput
  shippingAddress: LocationCreateOneInput
  phoneOS: String
  insureShipment: Boolean
  instagramHandle: String
  discoveryReference: String
  impactId: String
}

input CustomerDetailCreateOneInput {
  create: CustomerDetailCreateInput
  connect: CustomerDetailWhereUniqueInput
}

input CustomerDetailCreatestylesInput {
  set: [CustomerStyle!]
}

input CustomerDetailCreatetopSizesInput {
  set: [String!]
}

input CustomerDetailCreatewaistSizesInput {
  set: [Int!]
}

input CustomerDetailCreateweightInput {
  set: [Int!]
}

type CustomerDetailEdge {
  node: CustomerDetail!
  cursor: String!
}

enum CustomerDetailOrderByInput {
  id_ASC
  id_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  birthday_ASC
  birthday_DESC
  height_ASC
  height_DESC
  bodyType_ASC
  bodyType_DESC
  averageTopSize_ASC
  averageTopSize_DESC
  averageWaistSize_ASC
  averageWaistSize_DESC
  averagePantLength_ASC
  averagePantLength_DESC
  preferredPronouns_ASC
  preferredPronouns_DESC
  profession_ASC
  profession_DESC
  partyFrequency_ASC
  partyFrequency_DESC
  travelFrequency_ASC
  travelFrequency_DESC
  shoppingFrequency_ASC
  shoppingFrequency_DESC
  averageSpend_ASC
  averageSpend_DESC
  style_ASC
  style_DESC
  commuteStyle_ASC
  commuteStyle_DESC
  phoneOS_ASC
  phoneOS_DESC
  insureShipment_ASC
  insureShipment_DESC
  instagramHandle_ASC
  instagramHandle_DESC
  discoveryReference_ASC
  discoveryReference_DESC
  impactId_ASC
  impactId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerDetailPreviousValues {
  id: ID!
  phoneNumber: String
  birthday: DateTime
  height: Int
  weight: [Int!]!
  bodyType: String
  averageTopSize: String
  topSizes: [String!]!
  averageWaistSize: String
  waistSizes: [Int!]!
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  styles: [CustomerStyle!]!
  commuteStyle: String
  phoneOS: String
  insureShipment: Boolean!
  instagramHandle: String
  discoveryReference: String
  impactId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerDetailSubscriptionPayload {
  mutation: MutationType!
  node: CustomerDetail
  updatedFields: [String!]
  previousValues: CustomerDetailPreviousValues
}

input CustomerDetailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerDetailWhereInput
  AND: [CustomerDetailSubscriptionWhereInput!]
  OR: [CustomerDetailSubscriptionWhereInput!]
  NOT: [CustomerDetailSubscriptionWhereInput!]
}

input CustomerDetailUpdateDataInput {
  phoneNumber: String
  birthday: DateTime
  height: Int
  weight: CustomerDetailUpdateweightInput
  bodyType: String
  averageTopSize: String
  topSizes: CustomerDetailUpdatetopSizesInput
  averageWaistSize: String
  waistSizes: CustomerDetailUpdatewaistSizesInput
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  styles: CustomerDetailUpdatestylesInput
  commuteStyle: String
  stylePreferences: StylePreferencesUpdateOneInput
  shippingAddress: LocationUpdateOneInput
  phoneOS: String
  insureShipment: Boolean
  instagramHandle: String
  discoveryReference: String
  impactId: String
}

input CustomerDetailUpdateInput {
  phoneNumber: String
  birthday: DateTime
  height: Int
  weight: CustomerDetailUpdateweightInput
  bodyType: String
  averageTopSize: String
  topSizes: CustomerDetailUpdatetopSizesInput
  averageWaistSize: String
  waistSizes: CustomerDetailUpdatewaistSizesInput
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  styles: CustomerDetailUpdatestylesInput
  commuteStyle: String
  stylePreferences: StylePreferencesUpdateOneInput
  shippingAddress: LocationUpdateOneInput
  phoneOS: String
  insureShipment: Boolean
  instagramHandle: String
  discoveryReference: String
  impactId: String
}

input CustomerDetailUpdateManyMutationInput {
  phoneNumber: String
  birthday: DateTime
  height: Int
  weight: CustomerDetailUpdateweightInput
  bodyType: String
  averageTopSize: String
  topSizes: CustomerDetailUpdatetopSizesInput
  averageWaistSize: String
  waistSizes: CustomerDetailUpdatewaistSizesInput
  averagePantLength: String
  preferredPronouns: String
  profession: String
  partyFrequency: String
  travelFrequency: String
  shoppingFrequency: String
  averageSpend: String
  style: String
  styles: CustomerDetailUpdatestylesInput
  commuteStyle: String
  phoneOS: String
  insureShipment: Boolean
  instagramHandle: String
  discoveryReference: String
  impactId: String
}

input CustomerDetailUpdateOneInput {
  create: CustomerDetailCreateInput
  update: CustomerDetailUpdateDataInput
  upsert: CustomerDetailUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerDetailWhereUniqueInput
}

input CustomerDetailUpdatestylesInput {
  set: [CustomerStyle!]
}

input CustomerDetailUpdatetopSizesInput {
  set: [String!]
}

input CustomerDetailUpdatewaistSizesInput {
  set: [Int!]
}

input CustomerDetailUpdateweightInput {
  set: [Int!]
}

input CustomerDetailUpsertNestedInput {
  update: CustomerDetailUpdateDataInput!
  create: CustomerDetailCreateInput!
}

input CustomerDetailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  height: Int
  height_not: Int
  height_in: [Int!]
  height_not_in: [Int!]
  height_lt: Int
  height_lte: Int
  height_gt: Int
  height_gte: Int
  bodyType: String
  bodyType_not: String
  bodyType_in: [String!]
  bodyType_not_in: [String!]
  bodyType_lt: String
  bodyType_lte: String
  bodyType_gt: String
  bodyType_gte: String
  bodyType_contains: String
  bodyType_not_contains: String
  bodyType_starts_with: String
  bodyType_not_starts_with: String
  bodyType_ends_with: String
  bodyType_not_ends_with: String
  averageTopSize: String
  averageTopSize_not: String
  averageTopSize_in: [String!]
  averageTopSize_not_in: [String!]
  averageTopSize_lt: String
  averageTopSize_lte: String
  averageTopSize_gt: String
  averageTopSize_gte: String
  averageTopSize_contains: String
  averageTopSize_not_contains: String
  averageTopSize_starts_with: String
  averageTopSize_not_starts_with: String
  averageTopSize_ends_with: String
  averageTopSize_not_ends_with: String
  averageWaistSize: String
  averageWaistSize_not: String
  averageWaistSize_in: [String!]
  averageWaistSize_not_in: [String!]
  averageWaistSize_lt: String
  averageWaistSize_lte: String
  averageWaistSize_gt: String
  averageWaistSize_gte: String
  averageWaistSize_contains: String
  averageWaistSize_not_contains: String
  averageWaistSize_starts_with: String
  averageWaistSize_not_starts_with: String
  averageWaistSize_ends_with: String
  averageWaistSize_not_ends_with: String
  averagePantLength: String
  averagePantLength_not: String
  averagePantLength_in: [String!]
  averagePantLength_not_in: [String!]
  averagePantLength_lt: String
  averagePantLength_lte: String
  averagePantLength_gt: String
  averagePantLength_gte: String
  averagePantLength_contains: String
  averagePantLength_not_contains: String
  averagePantLength_starts_with: String
  averagePantLength_not_starts_with: String
  averagePantLength_ends_with: String
  averagePantLength_not_ends_with: String
  preferredPronouns: String
  preferredPronouns_not: String
  preferredPronouns_in: [String!]
  preferredPronouns_not_in: [String!]
  preferredPronouns_lt: String
  preferredPronouns_lte: String
  preferredPronouns_gt: String
  preferredPronouns_gte: String
  preferredPronouns_contains: String
  preferredPronouns_not_contains: String
  preferredPronouns_starts_with: String
  preferredPronouns_not_starts_with: String
  preferredPronouns_ends_with: String
  preferredPronouns_not_ends_with: String
  profession: String
  profession_not: String
  profession_in: [String!]
  profession_not_in: [String!]
  profession_lt: String
  profession_lte: String
  profession_gt: String
  profession_gte: String
  profession_contains: String
  profession_not_contains: String
  profession_starts_with: String
  profession_not_starts_with: String
  profession_ends_with: String
  profession_not_ends_with: String
  partyFrequency: String
  partyFrequency_not: String
  partyFrequency_in: [String!]
  partyFrequency_not_in: [String!]
  partyFrequency_lt: String
  partyFrequency_lte: String
  partyFrequency_gt: String
  partyFrequency_gte: String
  partyFrequency_contains: String
  partyFrequency_not_contains: String
  partyFrequency_starts_with: String
  partyFrequency_not_starts_with: String
  partyFrequency_ends_with: String
  partyFrequency_not_ends_with: String
  travelFrequency: String
  travelFrequency_not: String
  travelFrequency_in: [String!]
  travelFrequency_not_in: [String!]
  travelFrequency_lt: String
  travelFrequency_lte: String
  travelFrequency_gt: String
  travelFrequency_gte: String
  travelFrequency_contains: String
  travelFrequency_not_contains: String
  travelFrequency_starts_with: String
  travelFrequency_not_starts_with: String
  travelFrequency_ends_with: String
  travelFrequency_not_ends_with: String
  shoppingFrequency: String
  shoppingFrequency_not: String
  shoppingFrequency_in: [String!]
  shoppingFrequency_not_in: [String!]
  shoppingFrequency_lt: String
  shoppingFrequency_lte: String
  shoppingFrequency_gt: String
  shoppingFrequency_gte: String
  shoppingFrequency_contains: String
  shoppingFrequency_not_contains: String
  shoppingFrequency_starts_with: String
  shoppingFrequency_not_starts_with: String
  shoppingFrequency_ends_with: String
  shoppingFrequency_not_ends_with: String
  averageSpend: String
  averageSpend_not: String
  averageSpend_in: [String!]
  averageSpend_not_in: [String!]
  averageSpend_lt: String
  averageSpend_lte: String
  averageSpend_gt: String
  averageSpend_gte: String
  averageSpend_contains: String
  averageSpend_not_contains: String
  averageSpend_starts_with: String
  averageSpend_not_starts_with: String
  averageSpend_ends_with: String
  averageSpend_not_ends_with: String
  style: String
  style_not: String
  style_in: [String!]
  style_not_in: [String!]
  style_lt: String
  style_lte: String
  style_gt: String
  style_gte: String
  style_contains: String
  style_not_contains: String
  style_starts_with: String
  style_not_starts_with: String
  style_ends_with: String
  style_not_ends_with: String
  commuteStyle: String
  commuteStyle_not: String
  commuteStyle_in: [String!]
  commuteStyle_not_in: [String!]
  commuteStyle_lt: String
  commuteStyle_lte: String
  commuteStyle_gt: String
  commuteStyle_gte: String
  commuteStyle_contains: String
  commuteStyle_not_contains: String
  commuteStyle_starts_with: String
  commuteStyle_not_starts_with: String
  commuteStyle_ends_with: String
  commuteStyle_not_ends_with: String
  stylePreferences: StylePreferencesWhereInput
  shippingAddress: LocationWhereInput
  phoneOS: String
  phoneOS_not: String
  phoneOS_in: [String!]
  phoneOS_not_in: [String!]
  phoneOS_lt: String
  phoneOS_lte: String
  phoneOS_gt: String
  phoneOS_gte: String
  phoneOS_contains: String
  phoneOS_not_contains: String
  phoneOS_starts_with: String
  phoneOS_not_starts_with: String
  phoneOS_ends_with: String
  phoneOS_not_ends_with: String
  insureShipment: Boolean
  insureShipment_not: Boolean
  instagramHandle: String
  instagramHandle_not: String
  instagramHandle_in: [String!]
  instagramHandle_not_in: [String!]
  instagramHandle_lt: String
  instagramHandle_lte: String
  instagramHandle_gt: String
  instagramHandle_gte: String
  instagramHandle_contains: String
  instagramHandle_not_contains: String
  instagramHandle_starts_with: String
  instagramHandle_not_starts_with: String
  instagramHandle_ends_with: String
  instagramHandle_not_ends_with: String
  discoveryReference: String
  discoveryReference_not: String
  discoveryReference_in: [String!]
  discoveryReference_not_in: [String!]
  discoveryReference_lt: String
  discoveryReference_lte: String
  discoveryReference_gt: String
  discoveryReference_gte: String
  discoveryReference_contains: String
  discoveryReference_not_contains: String
  discoveryReference_starts_with: String
  discoveryReference_not_starts_with: String
  discoveryReference_ends_with: String
  discoveryReference_not_ends_with: String
  impactId: String
  impactId_not: String
  impactId_in: [String!]
  impactId_not_in: [String!]
  impactId_lt: String
  impactId_lte: String
  impactId_gt: String
  impactId_gte: String
  impactId_contains: String
  impactId_not_contains: String
  impactId_starts_with: String
  impactId_not_starts_with: String
  impactId_ends_with: String
  impactId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CustomerDetailWhereInput!]
  OR: [CustomerDetailWhereInput!]
  NOT: [CustomerDetailWhereInput!]
}

input CustomerDetailWhereUniqueInput {
  id: ID
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

type CustomerMembership {
  id: ID!
  plan: PaymentPlan
  subscriptionId: String!
  subscription: CustomerMembershipSubscriptionData
  customer: Customer!
  pauseRequests(where: PauseRequestWhereInput, orderBy: PauseRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PauseRequest!]
  giftId: String
}

type CustomerMembershipConnection {
  pageInfo: PageInfo!
  edges: [CustomerMembershipEdge]!
  aggregate: AggregateCustomerMembership!
}

input CustomerMembershipCreateInput {
  id: ID
  plan: PaymentPlanCreateOneInput
  subscriptionId: String!
  subscription: CustomerMembershipSubscriptionDataCreateOneInput
  customer: CustomerCreateOneWithoutMembershipInput!
  pauseRequests: PauseRequestCreateManyWithoutMembershipInput
  giftId: String
}

input CustomerMembershipCreateOneWithoutCustomerInput {
  create: CustomerMembershipCreateWithoutCustomerInput
  connect: CustomerMembershipWhereUniqueInput
}

input CustomerMembershipCreateOneWithoutPauseRequestsInput {
  create: CustomerMembershipCreateWithoutPauseRequestsInput
  connect: CustomerMembershipWhereUniqueInput
}

input CustomerMembershipCreateWithoutCustomerInput {
  id: ID
  plan: PaymentPlanCreateOneInput
  subscriptionId: String!
  subscription: CustomerMembershipSubscriptionDataCreateOneInput
  pauseRequests: PauseRequestCreateManyWithoutMembershipInput
  giftId: String
}

input CustomerMembershipCreateWithoutPauseRequestsInput {
  id: ID
  plan: PaymentPlanCreateOneInput
  subscriptionId: String!
  subscription: CustomerMembershipSubscriptionDataCreateOneInput
  customer: CustomerCreateOneWithoutMembershipInput!
  giftId: String
}

type CustomerMembershipEdge {
  node: CustomerMembership!
  cursor: String!
}

enum CustomerMembershipOrderByInput {
  id_ASC
  id_DESC
  subscriptionId_ASC
  subscriptionId_DESC
  giftId_ASC
  giftId_DESC
}

type CustomerMembershipPreviousValues {
  id: ID!
  subscriptionId: String!
  giftId: String
}

type CustomerMembershipSubscriptionData {
  id: ID!
  planID: String!
  subscriptionId: String!
  currentTermStart: DateTime!
  currentTermEnd: DateTime!
  nextBillingAt: DateTime
  status: String!
  planPrice: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerMembershipSubscriptionDataConnection {
  pageInfo: PageInfo!
  edges: [CustomerMembershipSubscriptionDataEdge]!
  aggregate: AggregateCustomerMembershipSubscriptionData!
}

input CustomerMembershipSubscriptionDataCreateInput {
  id: ID
  planID: String!
  subscriptionId: String!
  currentTermStart: DateTime!
  currentTermEnd: DateTime!
  nextBillingAt: DateTime
  status: String!
  planPrice: Int!
}

input CustomerMembershipSubscriptionDataCreateOneInput {
  create: CustomerMembershipSubscriptionDataCreateInput
  connect: CustomerMembershipSubscriptionDataWhereUniqueInput
}

type CustomerMembershipSubscriptionDataEdge {
  node: CustomerMembershipSubscriptionData!
  cursor: String!
}

enum CustomerMembershipSubscriptionDataOrderByInput {
  id_ASC
  id_DESC
  planID_ASC
  planID_DESC
  subscriptionId_ASC
  subscriptionId_DESC
  currentTermStart_ASC
  currentTermStart_DESC
  currentTermEnd_ASC
  currentTermEnd_DESC
  nextBillingAt_ASC
  nextBillingAt_DESC
  status_ASC
  status_DESC
  planPrice_ASC
  planPrice_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerMembershipSubscriptionDataPreviousValues {
  id: ID!
  planID: String!
  subscriptionId: String!
  currentTermStart: DateTime!
  currentTermEnd: DateTime!
  nextBillingAt: DateTime
  status: String!
  planPrice: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerMembershipSubscriptionDataSubscriptionPayload {
  mutation: MutationType!
  node: CustomerMembershipSubscriptionData
  updatedFields: [String!]
  previousValues: CustomerMembershipSubscriptionDataPreviousValues
}

input CustomerMembershipSubscriptionDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerMembershipSubscriptionDataWhereInput
  AND: [CustomerMembershipSubscriptionDataSubscriptionWhereInput!]
  OR: [CustomerMembershipSubscriptionDataSubscriptionWhereInput!]
  NOT: [CustomerMembershipSubscriptionDataSubscriptionWhereInput!]
}

input CustomerMembershipSubscriptionDataUpdateDataInput {
  planID: String
  subscriptionId: String
  currentTermStart: DateTime
  currentTermEnd: DateTime
  nextBillingAt: DateTime
  status: String
  planPrice: Int
}

input CustomerMembershipSubscriptionDataUpdateInput {
  planID: String
  subscriptionId: String
  currentTermStart: DateTime
  currentTermEnd: DateTime
  nextBillingAt: DateTime
  status: String
  planPrice: Int
}

input CustomerMembershipSubscriptionDataUpdateManyMutationInput {
  planID: String
  subscriptionId: String
  currentTermStart: DateTime
  currentTermEnd: DateTime
  nextBillingAt: DateTime
  status: String
  planPrice: Int
}

input CustomerMembershipSubscriptionDataUpdateOneInput {
  create: CustomerMembershipSubscriptionDataCreateInput
  update: CustomerMembershipSubscriptionDataUpdateDataInput
  upsert: CustomerMembershipSubscriptionDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerMembershipSubscriptionDataWhereUniqueInput
}

input CustomerMembershipSubscriptionDataUpsertNestedInput {
  update: CustomerMembershipSubscriptionDataUpdateDataInput!
  create: CustomerMembershipSubscriptionDataCreateInput!
}

input CustomerMembershipSubscriptionDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  planID: String
  planID_not: String
  planID_in: [String!]
  planID_not_in: [String!]
  planID_lt: String
  planID_lte: String
  planID_gt: String
  planID_gte: String
  planID_contains: String
  planID_not_contains: String
  planID_starts_with: String
  planID_not_starts_with: String
  planID_ends_with: String
  planID_not_ends_with: String
  subscriptionId: String
  subscriptionId_not: String
  subscriptionId_in: [String!]
  subscriptionId_not_in: [String!]
  subscriptionId_lt: String
  subscriptionId_lte: String
  subscriptionId_gt: String
  subscriptionId_gte: String
  subscriptionId_contains: String
  subscriptionId_not_contains: String
  subscriptionId_starts_with: String
  subscriptionId_not_starts_with: String
  subscriptionId_ends_with: String
  subscriptionId_not_ends_with: String
  currentTermStart: DateTime
  currentTermStart_not: DateTime
  currentTermStart_in: [DateTime!]
  currentTermStart_not_in: [DateTime!]
  currentTermStart_lt: DateTime
  currentTermStart_lte: DateTime
  currentTermStart_gt: DateTime
  currentTermStart_gte: DateTime
  currentTermEnd: DateTime
  currentTermEnd_not: DateTime
  currentTermEnd_in: [DateTime!]
  currentTermEnd_not_in: [DateTime!]
  currentTermEnd_lt: DateTime
  currentTermEnd_lte: DateTime
  currentTermEnd_gt: DateTime
  currentTermEnd_gte: DateTime
  nextBillingAt: DateTime
  nextBillingAt_not: DateTime
  nextBillingAt_in: [DateTime!]
  nextBillingAt_not_in: [DateTime!]
  nextBillingAt_lt: DateTime
  nextBillingAt_lte: DateTime
  nextBillingAt_gt: DateTime
  nextBillingAt_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  planPrice: Int
  planPrice_not: Int
  planPrice_in: [Int!]
  planPrice_not_in: [Int!]
  planPrice_lt: Int
  planPrice_lte: Int
  planPrice_gt: Int
  planPrice_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CustomerMembershipSubscriptionDataWhereInput!]
  OR: [CustomerMembershipSubscriptionDataWhereInput!]
  NOT: [CustomerMembershipSubscriptionDataWhereInput!]
}

input CustomerMembershipSubscriptionDataWhereUniqueInput {
  id: ID
}

type CustomerMembershipSubscriptionPayload {
  mutation: MutationType!
  node: CustomerMembership
  updatedFields: [String!]
  previousValues: CustomerMembershipPreviousValues
}

input CustomerMembershipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerMembershipWhereInput
  AND: [CustomerMembershipSubscriptionWhereInput!]
  OR: [CustomerMembershipSubscriptionWhereInput!]
  NOT: [CustomerMembershipSubscriptionWhereInput!]
}

input CustomerMembershipUpdateInput {
  plan: PaymentPlanUpdateOneInput
  subscriptionId: String
  subscription: CustomerMembershipSubscriptionDataUpdateOneInput
  customer: CustomerUpdateOneRequiredWithoutMembershipInput
  pauseRequests: PauseRequestUpdateManyWithoutMembershipInput
  giftId: String
}

input CustomerMembershipUpdateManyMutationInput {
  subscriptionId: String
  giftId: String
}

input CustomerMembershipUpdateOneRequiredWithoutPauseRequestsInput {
  create: CustomerMembershipCreateWithoutPauseRequestsInput
  update: CustomerMembershipUpdateWithoutPauseRequestsDataInput
  upsert: CustomerMembershipUpsertWithoutPauseRequestsInput
  connect: CustomerMembershipWhereUniqueInput
}

input CustomerMembershipUpdateOneWithoutCustomerInput {
  create: CustomerMembershipCreateWithoutCustomerInput
  update: CustomerMembershipUpdateWithoutCustomerDataInput
  upsert: CustomerMembershipUpsertWithoutCustomerInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerMembershipWhereUniqueInput
}

input CustomerMembershipUpdateWithoutCustomerDataInput {
  plan: PaymentPlanUpdateOneInput
  subscriptionId: String
  subscription: CustomerMembershipSubscriptionDataUpdateOneInput
  pauseRequests: PauseRequestUpdateManyWithoutMembershipInput
  giftId: String
}

input CustomerMembershipUpdateWithoutPauseRequestsDataInput {
  plan: PaymentPlanUpdateOneInput
  subscriptionId: String
  subscription: CustomerMembershipSubscriptionDataUpdateOneInput
  customer: CustomerUpdateOneRequiredWithoutMembershipInput
  giftId: String
}

input CustomerMembershipUpsertWithoutCustomerInput {
  update: CustomerMembershipUpdateWithoutCustomerDataInput!
  create: CustomerMembershipCreateWithoutCustomerInput!
}

input CustomerMembershipUpsertWithoutPauseRequestsInput {
  update: CustomerMembershipUpdateWithoutPauseRequestsDataInput!
  create: CustomerMembershipCreateWithoutPauseRequestsInput!
}

input CustomerMembershipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  plan: PaymentPlanWhereInput
  subscriptionId: String
  subscriptionId_not: String
  subscriptionId_in: [String!]
  subscriptionId_not_in: [String!]
  subscriptionId_lt: String
  subscriptionId_lte: String
  subscriptionId_gt: String
  subscriptionId_gte: String
  subscriptionId_contains: String
  subscriptionId_not_contains: String
  subscriptionId_starts_with: String
  subscriptionId_not_starts_with: String
  subscriptionId_ends_with: String
  subscriptionId_not_ends_with: String
  subscription: CustomerMembershipSubscriptionDataWhereInput
  customer: CustomerWhereInput
  pauseRequests_every: PauseRequestWhereInput
  pauseRequests_some: PauseRequestWhereInput
  pauseRequests_none: PauseRequestWhereInput
  giftId: String
  giftId_not: String
  giftId_in: [String!]
  giftId_not_in: [String!]
  giftId_lt: String
  giftId_lte: String
  giftId_gt: String
  giftId_gte: String
  giftId_contains: String
  giftId_not_contains: String
  giftId_starts_with: String
  giftId_not_starts_with: String
  giftId_ends_with: String
  giftId_not_ends_with: String
  AND: [CustomerMembershipWhereInput!]
  OR: [CustomerMembershipWhereInput!]
  NOT: [CustomerMembershipWhereInput!]
}

input CustomerMembershipWhereUniqueInput {
  id: ID
}

type CustomerNotificationBarReceipt {
  id: ID!
  notificationBarId: NotificationBarID!
  viewCount: Int!
  clickCount: Int!
  customer: Customer!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerNotificationBarReceiptConnection {
  pageInfo: PageInfo!
  edges: [CustomerNotificationBarReceiptEdge]!
  aggregate: AggregateCustomerNotificationBarReceipt!
}

input CustomerNotificationBarReceiptCreateInput {
  id: ID
  notificationBarId: NotificationBarID!
  viewCount: Int
  clickCount: Int
  customer: CustomerCreateOneWithoutNotificationBarReceiptsInput!
}

input CustomerNotificationBarReceiptCreateManyWithoutCustomerInput {
  create: [CustomerNotificationBarReceiptCreateWithoutCustomerInput!]
  connect: [CustomerNotificationBarReceiptWhereUniqueInput!]
}

input CustomerNotificationBarReceiptCreateWithoutCustomerInput {
  id: ID
  notificationBarId: NotificationBarID!
  viewCount: Int
  clickCount: Int
}

type CustomerNotificationBarReceiptEdge {
  node: CustomerNotificationBarReceipt!
  cursor: String!
}

enum CustomerNotificationBarReceiptOrderByInput {
  id_ASC
  id_DESC
  notificationBarId_ASC
  notificationBarId_DESC
  viewCount_ASC
  viewCount_DESC
  clickCount_ASC
  clickCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerNotificationBarReceiptPreviousValues {
  id: ID!
  notificationBarId: NotificationBarID!
  viewCount: Int!
  clickCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CustomerNotificationBarReceiptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  notificationBarId: NotificationBarID
  notificationBarId_not: NotificationBarID
  notificationBarId_in: [NotificationBarID!]
  notificationBarId_not_in: [NotificationBarID!]
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  clickCount: Int
  clickCount_not: Int
  clickCount_in: [Int!]
  clickCount_not_in: [Int!]
  clickCount_lt: Int
  clickCount_lte: Int
  clickCount_gt: Int
  clickCount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CustomerNotificationBarReceiptScalarWhereInput!]
  OR: [CustomerNotificationBarReceiptScalarWhereInput!]
  NOT: [CustomerNotificationBarReceiptScalarWhereInput!]
}

type CustomerNotificationBarReceiptSubscriptionPayload {
  mutation: MutationType!
  node: CustomerNotificationBarReceipt
  updatedFields: [String!]
  previousValues: CustomerNotificationBarReceiptPreviousValues
}

input CustomerNotificationBarReceiptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerNotificationBarReceiptWhereInput
  AND: [CustomerNotificationBarReceiptSubscriptionWhereInput!]
  OR: [CustomerNotificationBarReceiptSubscriptionWhereInput!]
  NOT: [CustomerNotificationBarReceiptSubscriptionWhereInput!]
}

input CustomerNotificationBarReceiptUpdateInput {
  notificationBarId: NotificationBarID
  viewCount: Int
  clickCount: Int
  customer: CustomerUpdateOneRequiredWithoutNotificationBarReceiptsInput
}

input CustomerNotificationBarReceiptUpdateManyDataInput {
  notificationBarId: NotificationBarID
  viewCount: Int
  clickCount: Int
}

input CustomerNotificationBarReceiptUpdateManyMutationInput {
  notificationBarId: NotificationBarID
  viewCount: Int
  clickCount: Int
}

input CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput {
  create: [CustomerNotificationBarReceiptCreateWithoutCustomerInput!]
  delete: [CustomerNotificationBarReceiptWhereUniqueInput!]
  connect: [CustomerNotificationBarReceiptWhereUniqueInput!]
  set: [CustomerNotificationBarReceiptWhereUniqueInput!]
  disconnect: [CustomerNotificationBarReceiptWhereUniqueInput!]
  update: [CustomerNotificationBarReceiptUpdateWithWhereUniqueWithoutCustomerInput!]
  upsert: [CustomerNotificationBarReceiptUpsertWithWhereUniqueWithoutCustomerInput!]
  deleteMany: [CustomerNotificationBarReceiptScalarWhereInput!]
  updateMany: [CustomerNotificationBarReceiptUpdateManyWithWhereNestedInput!]
}

input CustomerNotificationBarReceiptUpdateManyWithWhereNestedInput {
  where: CustomerNotificationBarReceiptScalarWhereInput!
  data: CustomerNotificationBarReceiptUpdateManyDataInput!
}

input CustomerNotificationBarReceiptUpdateWithoutCustomerDataInput {
  notificationBarId: NotificationBarID
  viewCount: Int
  clickCount: Int
}

input CustomerNotificationBarReceiptUpdateWithWhereUniqueWithoutCustomerInput {
  where: CustomerNotificationBarReceiptWhereUniqueInput!
  data: CustomerNotificationBarReceiptUpdateWithoutCustomerDataInput!
}

input CustomerNotificationBarReceiptUpsertWithWhereUniqueWithoutCustomerInput {
  where: CustomerNotificationBarReceiptWhereUniqueInput!
  update: CustomerNotificationBarReceiptUpdateWithoutCustomerDataInput!
  create: CustomerNotificationBarReceiptCreateWithoutCustomerInput!
}

input CustomerNotificationBarReceiptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  notificationBarId: NotificationBarID
  notificationBarId_not: NotificationBarID
  notificationBarId_in: [NotificationBarID!]
  notificationBarId_not_in: [NotificationBarID!]
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  clickCount: Int
  clickCount_not: Int
  clickCount_in: [Int!]
  clickCount_not_in: [Int!]
  clickCount_lt: Int
  clickCount_lte: Int
  clickCount_gt: Int
  clickCount_gte: Int
  customer: CustomerWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CustomerNotificationBarReceiptWhereInput!]
  OR: [CustomerNotificationBarReceiptWhereInput!]
  NOT: [CustomerNotificationBarReceiptWhereInput!]
}

input CustomerNotificationBarReceiptWhereUniqueInput {
  id: ID
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  plan_ASC
  plan_DESC
  referralLink_ASC
  referralLink_DESC
  referrerId_ASC
  referrerId_DESC
  authorizedAt_ASC
  authorizedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  status: CustomerStatus
  plan: Plan
  referralLink: String
  referrerId: String
  authorizedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CustomerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: CustomerStatus
  status_not: CustomerStatus
  status_in: [CustomerStatus!]
  status_not_in: [CustomerStatus!]
  plan: Plan
  plan_not: Plan
  plan_in: [Plan!]
  plan_not_in: [Plan!]
  referralLink: String
  referralLink_not: String
  referralLink_in: [String!]
  referralLink_not_in: [String!]
  referralLink_lt: String
  referralLink_lte: String
  referralLink_gt: String
  referralLink_gte: String
  referralLink_contains: String
  referralLink_not_contains: String
  referralLink_starts_with: String
  referralLink_not_starts_with: String
  referralLink_ends_with: String
  referralLink_not_ends_with: String
  referrerId: String
  referrerId_not: String
  referrerId_in: [String!]
  referrerId_not_in: [String!]
  referrerId_lt: String
  referrerId_lte: String
  referrerId_gt: String
  referrerId_gte: String
  referrerId_contains: String
  referrerId_not_contains: String
  referrerId_starts_with: String
  referrerId_not_starts_with: String
  referrerId_ends_with: String
  referrerId_not_ends_with: String
  authorizedAt: DateTime
  authorizedAt_not: DateTime
  authorizedAt_in: [DateTime!]
  authorizedAt_not_in: [DateTime!]
  authorizedAt_lt: DateTime
  authorizedAt_lte: DateTime
  authorizedAt_gt: DateTime
  authorizedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CustomerScalarWhereInput!]
  OR: [CustomerScalarWhereInput!]
  NOT: [CustomerScalarWhereInput!]
}

enum CustomerStatus {
  Invited
  Created
  Waitlisted
  Authorized
  Active
  Suspended
  PaymentFailed
  Paused
  Deactivated
}

enum CustomerStyle {
  AvantGarde
  Bold
  Classic
  Minimalist
  Streetwear
  Techwear
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  NOT: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateManyDataInput {
  status: CustomerStatus
  plan: Plan
  referralLink: String
  referrerId: String
  authorizedAt: DateTime
}

input CustomerUpdateManyMutationInput {
  status: CustomerStatus
  plan: Plan
  referralLink: String
  referrerId: String
  authorizedAt: DateTime
}

input CustomerUpdateManyWithoutReferrerInput {
  create: [CustomerCreateWithoutReferrerInput!]
  delete: [CustomerWhereUniqueInput!]
  connect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  disconnect: [CustomerWhereUniqueInput!]
  update: [CustomerUpdateWithWhereUniqueWithoutReferrerInput!]
  upsert: [CustomerUpsertWithWhereUniqueWithoutReferrerInput!]
  deleteMany: [CustomerScalarWhereInput!]
  updateMany: [CustomerUpdateManyWithWhereNestedInput!]
}

input CustomerUpdateManyWithWhereNestedInput {
  where: CustomerScalarWhereInput!
  data: CustomerUpdateManyDataInput!
}

input CustomerUpdateOneRequiredInput {
  create: CustomerCreateInput
  update: CustomerUpdateDataInput
  upsert: CustomerUpsertNestedInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneRequiredWithoutAdmissionsInput {
  create: CustomerCreateWithoutAdmissionsInput
  update: CustomerUpdateWithoutAdmissionsDataInput
  upsert: CustomerUpsertWithoutAdmissionsInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneRequiredWithoutBagItemsInput {
  create: CustomerCreateWithoutBagItemsInput
  update: CustomerUpdateWithoutBagItemsDataInput
  upsert: CustomerUpsertWithoutBagItemsInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneRequiredWithoutMembershipInput {
  create: CustomerCreateWithoutMembershipInput
  update: CustomerUpdateWithoutMembershipDataInput
  upsert: CustomerUpsertWithoutMembershipInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneRequiredWithoutNotificationBarReceiptsInput {
  create: CustomerCreateWithoutNotificationBarReceiptsInput
  update: CustomerUpdateWithoutNotificationBarReceiptsDataInput
  upsert: CustomerUpsertWithoutNotificationBarReceiptsInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneRequiredWithoutReservationsInput {
  create: CustomerCreateWithoutReservationsInput
  update: CustomerUpdateWithoutReservationsDataInput
  upsert: CustomerUpsertWithoutReservationsInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneRequiredWithoutUtmInput {
  create: CustomerCreateWithoutUtmInput
  update: CustomerUpdateWithoutUtmDataInput
  upsert: CustomerUpsertWithoutUtmInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneWithoutReferreesInput {
  create: CustomerCreateWithoutReferreesInput
  update: CustomerUpdateWithoutReferreesDataInput
  upsert: CustomerUpsertWithoutReferreesInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateWithoutAdmissionsDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithoutBagItemsDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithoutMembershipDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithoutNotificationBarReceiptsDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
}

input CustomerUpdateWithoutReferreesDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithoutReferrerDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithoutReservationsDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  utm: UTMDataUpdateOneWithoutCustomerInput
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithoutUtmDataInput {
  user: UserUpdateOneRequiredInput
  status: CustomerStatus
  detail: CustomerDetailUpdateOneInput
  billingInfo: BillingInfoUpdateOneInput
  plan: Plan
  membership: CustomerMembershipUpdateOneWithoutCustomerInput
  bagItems: BagItemUpdateManyWithoutCustomerInput
  reservations: ReservationUpdateManyWithoutCustomerInput
  referralLink: String
  referrerId: String
  referrer: CustomerUpdateOneWithoutReferreesInput
  referrees: CustomerUpdateManyWithoutReferrerInput
  emailedProducts: ProductUpdateManyInput
  admissions: CustomerAdmissionsDataUpdateOneWithoutCustomerInput
  authorizedAt: DateTime
  notificationBarReceipts: CustomerNotificationBarReceiptUpdateManyWithoutCustomerInput
}

input CustomerUpdateWithWhereUniqueWithoutReferrerInput {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateWithoutReferrerDataInput!
}

input CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput!
  create: CustomerCreateInput!
}

input CustomerUpsertWithoutAdmissionsInput {
  update: CustomerUpdateWithoutAdmissionsDataInput!
  create: CustomerCreateWithoutAdmissionsInput!
}

input CustomerUpsertWithoutBagItemsInput {
  update: CustomerUpdateWithoutBagItemsDataInput!
  create: CustomerCreateWithoutBagItemsInput!
}

input CustomerUpsertWithoutMembershipInput {
  update: CustomerUpdateWithoutMembershipDataInput!
  create: CustomerCreateWithoutMembershipInput!
}

input CustomerUpsertWithoutNotificationBarReceiptsInput {
  update: CustomerUpdateWithoutNotificationBarReceiptsDataInput!
  create: CustomerCreateWithoutNotificationBarReceiptsInput!
}

input CustomerUpsertWithoutReferreesInput {
  update: CustomerUpdateWithoutReferreesDataInput!
  create: CustomerCreateWithoutReferreesInput!
}

input CustomerUpsertWithoutReservationsInput {
  update: CustomerUpdateWithoutReservationsDataInput!
  create: CustomerCreateWithoutReservationsInput!
}

input CustomerUpsertWithoutUtmInput {
  update: CustomerUpdateWithoutUtmDataInput!
  create: CustomerCreateWithoutUtmInput!
}

input CustomerUpsertWithWhereUniqueWithoutReferrerInput {
  where: CustomerWhereUniqueInput!
  update: CustomerUpdateWithoutReferrerDataInput!
  create: CustomerCreateWithoutReferrerInput!
}

input CustomerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  status: CustomerStatus
  status_not: CustomerStatus
  status_in: [CustomerStatus!]
  status_not_in: [CustomerStatus!]
  detail: CustomerDetailWhereInput
  billingInfo: BillingInfoWhereInput
  plan: Plan
  plan_not: Plan
  plan_in: [Plan!]
  plan_not_in: [Plan!]
  membership: CustomerMembershipWhereInput
  bagItems_every: BagItemWhereInput
  bagItems_some: BagItemWhereInput
  bagItems_none: BagItemWhereInput
  reservations_every: ReservationWhereInput
  reservations_some: ReservationWhereInput
  reservations_none: ReservationWhereInput
  referralLink: String
  referralLink_not: String
  referralLink_in: [String!]
  referralLink_not_in: [String!]
  referralLink_lt: String
  referralLink_lte: String
  referralLink_gt: String
  referralLink_gte: String
  referralLink_contains: String
  referralLink_not_contains: String
  referralLink_starts_with: String
  referralLink_not_starts_with: String
  referralLink_ends_with: String
  referralLink_not_ends_with: String
  referrerId: String
  referrerId_not: String
  referrerId_in: [String!]
  referrerId_not_in: [String!]
  referrerId_lt: String
  referrerId_lte: String
  referrerId_gt: String
  referrerId_gte: String
  referrerId_contains: String
  referrerId_not_contains: String
  referrerId_starts_with: String
  referrerId_not_starts_with: String
  referrerId_ends_with: String
  referrerId_not_ends_with: String
  referrer: CustomerWhereInput
  referrees_every: CustomerWhereInput
  referrees_some: CustomerWhereInput
  referrees_none: CustomerWhereInput
  emailedProducts_every: ProductWhereInput
  emailedProducts_some: ProductWhereInput
  emailedProducts_none: ProductWhereInput
  admissions: CustomerAdmissionsDataWhereInput
  authorizedAt: DateTime
  authorizedAt_not: DateTime
  authorizedAt_in: [DateTime!]
  authorizedAt_not_in: [DateTime!]
  authorizedAt_lt: DateTime
  authorizedAt_lte: DateTime
  authorizedAt_gt: DateTime
  authorizedAt_gte: DateTime
  utm: UTMDataWhereInput
  notificationBarReceipts_every: CustomerNotificationBarReceiptWhereInput
  notificationBarReceipts_some: CustomerNotificationBarReceiptWhereInput
  notificationBarReceipts_none: CustomerNotificationBarReceiptWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

input CustomerWhereUniqueInput {
  id: ID
  referralLink: String
}

scalar DateTime

enum EmailId {
  CompleteAccount
  BuyUsedOrderConfirmation
  DaySevenAuthorizationFollowup
  DaySixAuthorizationFollowup
  DayFiveAuthorizationFollowup
  DayFourAuthorizationFollowup
  DayThreeAuthorizationFollowup
  DayTwoAuthorizationFollowup
  FreeToReserve
  Paused
  PriorityAccess
  ReferralConfirmation
  ReservationConfirmation
  ReservationReturnConfirmation
  ResumeConfirmation
  ResumeReminder
  ReturnReminder
  Rewaitlisted
  SubmittedEmail
  TwentyFourHourAuthorizationFollowup
  Waitlisted
  WelcomeToSeasons
  UnpaidMembership
  ReturnToGoodStanding
}

type EmailReceipt {
  id: ID!
  emailId: EmailId!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmailReceiptConnection {
  pageInfo: PageInfo!
  edges: [EmailReceiptEdge]!
  aggregate: AggregateEmailReceipt!
}

input EmailReceiptCreateInput {
  id: ID
  emailId: EmailId!
  user: UserCreateOneWithoutEmailsInput!
}

input EmailReceiptCreateManyWithoutUserInput {
  create: [EmailReceiptCreateWithoutUserInput!]
  connect: [EmailReceiptWhereUniqueInput!]
}

input EmailReceiptCreateWithoutUserInput {
  id: ID
  emailId: EmailId!
}

type EmailReceiptEdge {
  node: EmailReceipt!
  cursor: String!
}

enum EmailReceiptOrderByInput {
  id_ASC
  id_DESC
  emailId_ASC
  emailId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmailReceiptPreviousValues {
  id: ID!
  emailId: EmailId!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EmailReceiptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  emailId: EmailId
  emailId_not: EmailId
  emailId_in: [EmailId!]
  emailId_not_in: [EmailId!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [EmailReceiptScalarWhereInput!]
  OR: [EmailReceiptScalarWhereInput!]
  NOT: [EmailReceiptScalarWhereInput!]
}

type EmailReceiptSubscriptionPayload {
  mutation: MutationType!
  node: EmailReceipt
  updatedFields: [String!]
  previousValues: EmailReceiptPreviousValues
}

input EmailReceiptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmailReceiptWhereInput
  AND: [EmailReceiptSubscriptionWhereInput!]
  OR: [EmailReceiptSubscriptionWhereInput!]
  NOT: [EmailReceiptSubscriptionWhereInput!]
}

input EmailReceiptUpdateInput {
  emailId: EmailId
  user: UserUpdateOneRequiredWithoutEmailsInput
}

input EmailReceiptUpdateManyDataInput {
  emailId: EmailId
}

input EmailReceiptUpdateManyMutationInput {
  emailId: EmailId
}

input EmailReceiptUpdateManyWithoutUserInput {
  create: [EmailReceiptCreateWithoutUserInput!]
  delete: [EmailReceiptWhereUniqueInput!]
  connect: [EmailReceiptWhereUniqueInput!]
  set: [EmailReceiptWhereUniqueInput!]
  disconnect: [EmailReceiptWhereUniqueInput!]
  update: [EmailReceiptUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EmailReceiptUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [EmailReceiptScalarWhereInput!]
  updateMany: [EmailReceiptUpdateManyWithWhereNestedInput!]
}

input EmailReceiptUpdateManyWithWhereNestedInput {
  where: EmailReceiptScalarWhereInput!
  data: EmailReceiptUpdateManyDataInput!
}

input EmailReceiptUpdateWithoutUserDataInput {
  emailId: EmailId
}

input EmailReceiptUpdateWithWhereUniqueWithoutUserInput {
  where: EmailReceiptWhereUniqueInput!
  data: EmailReceiptUpdateWithoutUserDataInput!
}

input EmailReceiptUpsertWithWhereUniqueWithoutUserInput {
  where: EmailReceiptWhereUniqueInput!
  update: EmailReceiptUpdateWithoutUserDataInput!
  create: EmailReceiptCreateWithoutUserInput!
}

input EmailReceiptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  emailId: EmailId
  emailId_not: EmailId
  emailId_in: [EmailId!]
  emailId_not_in: [EmailId!]
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [EmailReceiptWhereInput!]
  OR: [EmailReceiptWhereInput!]
  NOT: [EmailReceiptWhereInput!]
}

input EmailReceiptWhereUniqueInput {
  id: ID
}

type FitPic {
  id: ID!
  image: Image!
  includeInstagramHandle: Boolean!
  location: Location
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  reports(where: FitPicReportWhereInput, orderBy: FitPicReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FitPicReport!]
  status: FitPicStatus!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FitPicConnection {
  pageInfo: PageInfo!
  edges: [FitPicEdge]!
  aggregate: AggregateFitPic!
}

input FitPicCreateInput {
  id: ID
  image: ImageCreateOneInput!
  includeInstagramHandle: Boolean
  location: LocationCreateOneInput
  products: ProductCreateManyInput
  reports: FitPicReportCreateManyWithoutReportedInput
  status: FitPicStatus
  user: UserCreateOneWithoutFitPicsInput!
}

input FitPicCreateManyWithoutUserInput {
  create: [FitPicCreateWithoutUserInput!]
  connect: [FitPicWhereUniqueInput!]
}

input FitPicCreateOneWithoutReportsInput {
  create: FitPicCreateWithoutReportsInput
  connect: FitPicWhereUniqueInput
}

input FitPicCreateWithoutReportsInput {
  id: ID
  image: ImageCreateOneInput!
  includeInstagramHandle: Boolean
  location: LocationCreateOneInput
  products: ProductCreateManyInput
  status: FitPicStatus
  user: UserCreateOneWithoutFitPicsInput!
}

input FitPicCreateWithoutUserInput {
  id: ID
  image: ImageCreateOneInput!
  includeInstagramHandle: Boolean
  location: LocationCreateOneInput
  products: ProductCreateManyInput
  reports: FitPicReportCreateManyWithoutReportedInput
  status: FitPicStatus
}

type FitPicEdge {
  node: FitPic!
  cursor: String!
}

enum FitPicOrderByInput {
  id_ASC
  id_DESC
  includeInstagramHandle_ASC
  includeInstagramHandle_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FitPicPreviousValues {
  id: ID!
  includeInstagramHandle: Boolean!
  status: FitPicStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FitPicReport {
  id: ID!
  reporter: User!
  reported: FitPic!
  status: FitPicReportStatus!
  reportedAt: DateTime!
  updatedAt: DateTime!
}

type FitPicReportConnection {
  pageInfo: PageInfo!
  edges: [FitPicReportEdge]!
  aggregate: AggregateFitPicReport!
}

input FitPicReportCreateInput {
  id: ID
  reporter: UserCreateOneInput!
  reported: FitPicCreateOneWithoutReportsInput!
  status: FitPicReportStatus
}

input FitPicReportCreateManyWithoutReportedInput {
  create: [FitPicReportCreateWithoutReportedInput!]
  connect: [FitPicReportWhereUniqueInput!]
}

input FitPicReportCreateWithoutReportedInput {
  id: ID
  reporter: UserCreateOneInput!
  status: FitPicReportStatus
}

type FitPicReportEdge {
  node: FitPicReport!
  cursor: String!
}

enum FitPicReportOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  reportedAt_ASC
  reportedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FitPicReportPreviousValues {
  id: ID!
  status: FitPicReportStatus!
  reportedAt: DateTime!
  updatedAt: DateTime!
}

input FitPicReportScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: FitPicReportStatus
  status_not: FitPicReportStatus
  status_in: [FitPicReportStatus!]
  status_not_in: [FitPicReportStatus!]
  reportedAt: DateTime
  reportedAt_not: DateTime
  reportedAt_in: [DateTime!]
  reportedAt_not_in: [DateTime!]
  reportedAt_lt: DateTime
  reportedAt_lte: DateTime
  reportedAt_gt: DateTime
  reportedAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FitPicReportScalarWhereInput!]
  OR: [FitPicReportScalarWhereInput!]
  NOT: [FitPicReportScalarWhereInput!]
}

enum FitPicReportStatus {
  Pending
  Reviewed
}

type FitPicReportSubscriptionPayload {
  mutation: MutationType!
  node: FitPicReport
  updatedFields: [String!]
  previousValues: FitPicReportPreviousValues
}

input FitPicReportSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FitPicReportWhereInput
  AND: [FitPicReportSubscriptionWhereInput!]
  OR: [FitPicReportSubscriptionWhereInput!]
  NOT: [FitPicReportSubscriptionWhereInput!]
}

input FitPicReportUpdateInput {
  reporter: UserUpdateOneRequiredInput
  reported: FitPicUpdateOneRequiredWithoutReportsInput
  status: FitPicReportStatus
}

input FitPicReportUpdateManyDataInput {
  status: FitPicReportStatus
}

input FitPicReportUpdateManyMutationInput {
  status: FitPicReportStatus
}

input FitPicReportUpdateManyWithoutReportedInput {
  create: [FitPicReportCreateWithoutReportedInput!]
  delete: [FitPicReportWhereUniqueInput!]
  connect: [FitPicReportWhereUniqueInput!]
  set: [FitPicReportWhereUniqueInput!]
  disconnect: [FitPicReportWhereUniqueInput!]
  update: [FitPicReportUpdateWithWhereUniqueWithoutReportedInput!]
  upsert: [FitPicReportUpsertWithWhereUniqueWithoutReportedInput!]
  deleteMany: [FitPicReportScalarWhereInput!]
  updateMany: [FitPicReportUpdateManyWithWhereNestedInput!]
}

input FitPicReportUpdateManyWithWhereNestedInput {
  where: FitPicReportScalarWhereInput!
  data: FitPicReportUpdateManyDataInput!
}

input FitPicReportUpdateWithoutReportedDataInput {
  reporter: UserUpdateOneRequiredInput
  status: FitPicReportStatus
}

input FitPicReportUpdateWithWhereUniqueWithoutReportedInput {
  where: FitPicReportWhereUniqueInput!
  data: FitPicReportUpdateWithoutReportedDataInput!
}

input FitPicReportUpsertWithWhereUniqueWithoutReportedInput {
  where: FitPicReportWhereUniqueInput!
  update: FitPicReportUpdateWithoutReportedDataInput!
  create: FitPicReportCreateWithoutReportedInput!
}

input FitPicReportWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  reporter: UserWhereInput
  reported: FitPicWhereInput
  status: FitPicReportStatus
  status_not: FitPicReportStatus
  status_in: [FitPicReportStatus!]
  status_not_in: [FitPicReportStatus!]
  reportedAt: DateTime
  reportedAt_not: DateTime
  reportedAt_in: [DateTime!]
  reportedAt_not_in: [DateTime!]
  reportedAt_lt: DateTime
  reportedAt_lte: DateTime
  reportedAt_gt: DateTime
  reportedAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FitPicReportWhereInput!]
  OR: [FitPicReportWhereInput!]
  NOT: [FitPicReportWhereInput!]
}

input FitPicReportWhereUniqueInput {
  id: ID
}

input FitPicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  includeInstagramHandle: Boolean
  includeInstagramHandle_not: Boolean
  status: FitPicStatus
  status_not: FitPicStatus
  status_in: [FitPicStatus!]
  status_not_in: [FitPicStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FitPicScalarWhereInput!]
  OR: [FitPicScalarWhereInput!]
  NOT: [FitPicScalarWhereInput!]
}

enum FitPicStatus {
  Submitted
  Published
  Unpublished
}

type FitPicSubscriptionPayload {
  mutation: MutationType!
  node: FitPic
  updatedFields: [String!]
  previousValues: FitPicPreviousValues
}

input FitPicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FitPicWhereInput
  AND: [FitPicSubscriptionWhereInput!]
  OR: [FitPicSubscriptionWhereInput!]
  NOT: [FitPicSubscriptionWhereInput!]
}

input FitPicUpdateInput {
  image: ImageUpdateOneRequiredInput
  includeInstagramHandle: Boolean
  location: LocationUpdateOneInput
  products: ProductUpdateManyInput
  reports: FitPicReportUpdateManyWithoutReportedInput
  status: FitPicStatus
  user: UserUpdateOneRequiredWithoutFitPicsInput
}

input FitPicUpdateManyDataInput {
  includeInstagramHandle: Boolean
  status: FitPicStatus
}

input FitPicUpdateManyMutationInput {
  includeInstagramHandle: Boolean
  status: FitPicStatus
}

input FitPicUpdateManyWithoutUserInput {
  create: [FitPicCreateWithoutUserInput!]
  delete: [FitPicWhereUniqueInput!]
  connect: [FitPicWhereUniqueInput!]
  set: [FitPicWhereUniqueInput!]
  disconnect: [FitPicWhereUniqueInput!]
  update: [FitPicUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [FitPicUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [FitPicScalarWhereInput!]
  updateMany: [FitPicUpdateManyWithWhereNestedInput!]
}

input FitPicUpdateManyWithWhereNestedInput {
  where: FitPicScalarWhereInput!
  data: FitPicUpdateManyDataInput!
}

input FitPicUpdateOneRequiredWithoutReportsInput {
  create: FitPicCreateWithoutReportsInput
  update: FitPicUpdateWithoutReportsDataInput
  upsert: FitPicUpsertWithoutReportsInput
  connect: FitPicWhereUniqueInput
}

input FitPicUpdateWithoutReportsDataInput {
  image: ImageUpdateOneRequiredInput
  includeInstagramHandle: Boolean
  location: LocationUpdateOneInput
  products: ProductUpdateManyInput
  status: FitPicStatus
  user: UserUpdateOneRequiredWithoutFitPicsInput
}

input FitPicUpdateWithoutUserDataInput {
  image: ImageUpdateOneRequiredInput
  includeInstagramHandle: Boolean
  location: LocationUpdateOneInput
  products: ProductUpdateManyInput
  reports: FitPicReportUpdateManyWithoutReportedInput
  status: FitPicStatus
}

input FitPicUpdateWithWhereUniqueWithoutUserInput {
  where: FitPicWhereUniqueInput!
  data: FitPicUpdateWithoutUserDataInput!
}

input FitPicUpsertWithoutReportsInput {
  update: FitPicUpdateWithoutReportsDataInput!
  create: FitPicCreateWithoutReportsInput!
}

input FitPicUpsertWithWhereUniqueWithoutUserInput {
  where: FitPicWhereUniqueInput!
  update: FitPicUpdateWithoutUserDataInput!
  create: FitPicCreateWithoutUserInput!
}

input FitPicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image: ImageWhereInput
  includeInstagramHandle: Boolean
  includeInstagramHandle_not: Boolean
  location: LocationWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  reports_every: FitPicReportWhereInput
  reports_some: FitPicReportWhereInput
  reports_none: FitPicReportWhereInput
  status: FitPicStatus
  status_not: FitPicStatus
  status_in: [FitPicStatus!]
  status_not_in: [FitPicStatus!]
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FitPicWhereInput!]
  OR: [FitPicWhereInput!]
  NOT: [FitPicWhereInput!]
}

input FitPicWhereUniqueInput {
  id: ID
}

type Image {
  id: ID!
  caption: String
  url: String!
  alt: String
  height: Int
  width: Int
  title: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  caption: String
  url: String!
  alt: String
  height: Int
  width: Int
  title: String
}

input ImageCreateManyInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageCreateOneInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type ImageEdge {
  node: Image!
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  caption_ASC
  caption_DESC
  url_ASC
  url_DESC
  alt_ASC
  alt_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImagePreviousValues {
  id: ID!
  caption: String
  url: String!
  alt: String
  height: Int
  width: Int
  title: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  alt: String
  alt_not: String
  alt_in: [String!]
  alt_not_in: [String!]
  alt_lt: String
  alt_lte: String
  alt_gt: String
  alt_gte: String
  alt_contains: String
  alt_not_contains: String
  alt_starts_with: String
  alt_not_starts_with: String
  alt_ends_with: String
  alt_not_ends_with: String
  height: Int
  height_not: Int
  height_in: [Int!]
  height_not_in: [Int!]
  height_lt: Int
  height_lte: Int
  height_gt: Int
  height_gte: Int
  width: Int
  width_not: Int
  width_in: [Int!]
  width_not_in: [Int!]
  width_lt: Int
  width_lte: Int
  width_gt: Int
  width_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
  AND: [ImageSubscriptionWhereInput!]
  OR: [ImageSubscriptionWhereInput!]
  NOT: [ImageSubscriptionWhereInput!]
}

input ImageUpdateDataInput {
  caption: String
  url: String
  alt: String
  height: Int
  width: Int
  title: String
}

input ImageUpdateInput {
  caption: String
  url: String
  alt: String
  height: Int
  width: Int
  title: String
}

input ImageUpdateManyDataInput {
  caption: String
  url: String
  alt: String
  height: Int
  width: Int
  title: String
}

input ImageUpdateManyInput {
  create: [ImageCreateInput!]
  update: [ImageUpdateWithWhereUniqueNestedInput!]
  upsert: [ImageUpsertWithWhereUniqueNestedInput!]
  delete: [ImageWhereUniqueInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
}

input ImageUpdateManyMutationInput {
  caption: String
  url: String
  alt: String
  height: Int
  width: Int
  title: String
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateOneInput {
  create: ImageCreateInput
  update: ImageUpdateDataInput
  upsert: ImageUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ImageWhereUniqueInput
}

input ImageUpdateOneRequiredInput {
  create: ImageCreateInput
  update: ImageUpdateDataInput
  upsert: ImageUpsertNestedInput
  connect: ImageWhereUniqueInput
}

input ImageUpdateWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateDataInput!
}

input ImageUpsertNestedInput {
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageUpsertWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  alt: String
  alt_not: String
  alt_in: [String!]
  alt_not_in: [String!]
  alt_lt: String
  alt_lte: String
  alt_gt: String
  alt_gte: String
  alt_contains: String
  alt_not_contains: String
  alt_starts_with: String
  alt_not_starts_with: String
  alt_ends_with: String
  alt_not_ends_with: String
  height: Int
  height_not: Int
  height_in: [Int!]
  height_not_in: [Int!]
  height_lt: Int
  height_lte: Int
  height_gt: Int
  height_gte: Int
  width: Int
  width_not: Int
  width_in: [Int!]
  width_not_in: [Int!]
  width_lt: Int
  width_lte: Int
  width_gt: Int
  width_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
}

input ImageWhereUniqueInput {
  id: ID
  url: String
}

enum InAdmissableReason {
  Untriageable
  UnsupportedPlatform
  AutomaticAdmissionsFlagOff
  UnserviceableZipcode
  InsufficientInventory
  OpsThresholdExceeded
}

type InterestedUser {
  id: ID!
  email: String!
  zipcode: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InterestedUserConnection {
  pageInfo: PageInfo!
  edges: [InterestedUserEdge]!
  aggregate: AggregateInterestedUser!
}

input InterestedUserCreateInput {
  id: ID
  email: String!
  zipcode: String
}

type InterestedUserEdge {
  node: InterestedUser!
  cursor: String!
}

enum InterestedUserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  zipcode_ASC
  zipcode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InterestedUserPreviousValues {
  id: ID!
  email: String!
  zipcode: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InterestedUserSubscriptionPayload {
  mutation: MutationType!
  node: InterestedUser
  updatedFields: [String!]
  previousValues: InterestedUserPreviousValues
}

input InterestedUserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InterestedUserWhereInput
  AND: [InterestedUserSubscriptionWhereInput!]
  OR: [InterestedUserSubscriptionWhereInput!]
  NOT: [InterestedUserSubscriptionWhereInput!]
}

input InterestedUserUpdateInput {
  email: String
  zipcode: String
}

input InterestedUserUpdateManyMutationInput {
  email: String
  zipcode: String
}

input InterestedUserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  zipcode: String
  zipcode_not: String
  zipcode_in: [String!]
  zipcode_not_in: [String!]
  zipcode_lt: String
  zipcode_lte: String
  zipcode_gt: String
  zipcode_gte: String
  zipcode_contains: String
  zipcode_not_contains: String
  zipcode_starts_with: String
  zipcode_not_starts_with: String
  zipcode_ends_with: String
  zipcode_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [InterestedUserWhereInput!]
  OR: [InterestedUserWhereInput!]
  NOT: [InterestedUserWhereInput!]
}

input InterestedUserWhereUniqueInput {
  id: ID
}

enum InventoryStatus {
  NonReservable
  Reservable
  Reserved
  Stored
  Offloaded
}

scalar Json

type Label {
  id: ID!
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

type LabelConnection {
  pageInfo: PageInfo!
  edges: [LabelEdge]!
  aggregate: AggregateLabel!
}

input LabelCreateInput {
  id: ID
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

input LabelCreateOneInput {
  create: LabelCreateInput
  connect: LabelWhereUniqueInput
}

type LabelEdge {
  node: Label!
  cursor: String!
}

enum LabelOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  trackingNumber_ASC
  trackingNumber_DESC
  trackingURL_ASC
  trackingURL_DESC
}

type LabelPreviousValues {
  id: ID!
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

type LabelSubscriptionPayload {
  mutation: MutationType!
  node: Label
  updatedFields: [String!]
  previousValues: LabelPreviousValues
}

input LabelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LabelWhereInput
  AND: [LabelSubscriptionWhereInput!]
  OR: [LabelSubscriptionWhereInput!]
  NOT: [LabelSubscriptionWhereInput!]
}

input LabelUpdateDataInput {
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

input LabelUpdateInput {
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

input LabelUpdateManyMutationInput {
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

input LabelUpdateOneRequiredInput {
  create: LabelCreateInput
  update: LabelUpdateDataInput
  upsert: LabelUpsertNestedInput
  connect: LabelWhereUniqueInput
}

input LabelUpsertNestedInput {
  update: LabelUpdateDataInput!
  create: LabelCreateInput!
}

input LabelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  trackingNumber: String
  trackingNumber_not: String
  trackingNumber_in: [String!]
  trackingNumber_not_in: [String!]
  trackingNumber_lt: String
  trackingNumber_lte: String
  trackingNumber_gt: String
  trackingNumber_gte: String
  trackingNumber_contains: String
  trackingNumber_not_contains: String
  trackingNumber_starts_with: String
  trackingNumber_not_starts_with: String
  trackingNumber_ends_with: String
  trackingNumber_not_ends_with: String
  trackingURL: String
  trackingURL_not: String
  trackingURL_in: [String!]
  trackingURL_not_in: [String!]
  trackingURL_lt: String
  trackingURL_lte: String
  trackingURL_gt: String
  trackingURL_gte: String
  trackingURL_contains: String
  trackingURL_not_contains: String
  trackingURL_starts_with: String
  trackingURL_not_starts_with: String
  trackingURL_ends_with: String
  trackingURL_not_ends_with: String
  AND: [LabelWhereInput!]
  OR: [LabelWhereInput!]
  NOT: [LabelWhereInput!]
}

input LabelWhereUniqueInput {
  id: ID
}

type Launch {
  id: ID!
  brand: Brand
  published: Boolean!
  collection: Collection
  launchAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LaunchConnection {
  pageInfo: PageInfo!
  edges: [LaunchEdge]!
  aggregate: AggregateLaunch!
}

input LaunchCreateInput {
  id: ID
  brand: BrandCreateOneInput
  published: Boolean
  collection: CollectionCreateOneInput
  launchAt: DateTime!
}

type LaunchEdge {
  node: Launch!
  cursor: String!
}

enum LaunchOrderByInput {
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  launchAt_ASC
  launchAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LaunchPreviousValues {
  id: ID!
  published: Boolean!
  launchAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LaunchSubscriptionPayload {
  mutation: MutationType!
  node: Launch
  updatedFields: [String!]
  previousValues: LaunchPreviousValues
}

input LaunchSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LaunchWhereInput
  AND: [LaunchSubscriptionWhereInput!]
  OR: [LaunchSubscriptionWhereInput!]
  NOT: [LaunchSubscriptionWhereInput!]
}

input LaunchUpdateInput {
  brand: BrandUpdateOneInput
  published: Boolean
  collection: CollectionUpdateOneInput
  launchAt: DateTime
}

input LaunchUpdateManyMutationInput {
  published: Boolean
  launchAt: DateTime
}

input LaunchWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  brand: BrandWhereInput
  published: Boolean
  published_not: Boolean
  collection: CollectionWhereInput
  launchAt: DateTime
  launchAt_not: DateTime
  launchAt_in: [DateTime!]
  launchAt_not_in: [DateTime!]
  launchAt_lt: DateTime
  launchAt_lte: DateTime
  launchAt_gt: DateTime
  launchAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LaunchWhereInput!]
  OR: [LaunchWhereInput!]
  NOT: [LaunchWhereInput!]
}

input LaunchWhereUniqueInput {
  id: ID
}

enum LetterSize {
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

type Location {
  id: ID!
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String!
  locationType: LocationType
  user: User
  lat: Float
  lng: Float
  physicalProducts(where: PhysicalProductWhereInput, orderBy: PhysicalProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProduct!]
  shippingOptions(where: ShippingOptionWhereInput, orderBy: ShippingOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShippingOption!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  id: ID
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String!
  locationType: LocationType
  user: UserCreateOneInput
  lat: Float
  lng: Float
  physicalProducts: PhysicalProductCreateManyWithoutLocationInput
  shippingOptions: ShippingOptionCreateManyWithoutDestinationInput
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOneWithoutPhysicalProductsInput {
  create: LocationCreateWithoutPhysicalProductsInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOneWithoutShippingOptionsInput {
  create: LocationCreateWithoutShippingOptionsInput
  connect: LocationWhereUniqueInput
}

input LocationCreateWithoutPhysicalProductsInput {
  id: ID
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String!
  locationType: LocationType
  user: UserCreateOneInput
  lat: Float
  lng: Float
  shippingOptions: ShippingOptionCreateManyWithoutDestinationInput
}

input LocationCreateWithoutShippingOptionsInput {
  id: ID
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String!
  locationType: LocationType
  user: UserCreateOneInput
  lat: Float
  lng: Float
  physicalProducts: PhysicalProductCreateManyWithoutLocationInput
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  company_ASC
  company_DESC
  description_ASC
  description_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  state_ASC
  state_DESC
  zipCode_ASC
  zipCode_DESC
  locationType_ASC
  locationType_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LocationPreviousValues {
  id: ID!
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String!
  locationType: LocationType
  lat: Float
  lng: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  NOT: [LocationSubscriptionWhereInput!]
}

enum LocationType {
  Office
  Warehouse
  Cleaner
  Customer
}

input LocationUpdateDataInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String
  locationType: LocationType
  user: UserUpdateOneInput
  lat: Float
  lng: Float
  physicalProducts: PhysicalProductUpdateManyWithoutLocationInput
  shippingOptions: ShippingOptionUpdateManyWithoutDestinationInput
}

input LocationUpdateInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String
  locationType: LocationType
  user: UserUpdateOneInput
  lat: Float
  lng: Float
  physicalProducts: PhysicalProductUpdateManyWithoutLocationInput
  shippingOptions: ShippingOptionUpdateManyWithoutDestinationInput
}

input LocationUpdateManyMutationInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String
  locationType: LocationType
  lat: Float
  lng: Float
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: LocationWhereUniqueInput
}

input LocationUpdateOneRequiredInput {
  create: LocationCreateInput
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
  connect: LocationWhereUniqueInput
}

input LocationUpdateOneWithoutPhysicalProductsInput {
  create: LocationCreateWithoutPhysicalProductsInput
  update: LocationUpdateWithoutPhysicalProductsDataInput
  upsert: LocationUpsertWithoutPhysicalProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: LocationWhereUniqueInput
}

input LocationUpdateOneWithoutShippingOptionsInput {
  create: LocationCreateWithoutShippingOptionsInput
  update: LocationUpdateWithoutShippingOptionsDataInput
  upsert: LocationUpsertWithoutShippingOptionsInput
  delete: Boolean
  disconnect: Boolean
  connect: LocationWhereUniqueInput
}

input LocationUpdateWithoutPhysicalProductsDataInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String
  locationType: LocationType
  user: UserUpdateOneInput
  lat: Float
  lng: Float
  shippingOptions: ShippingOptionUpdateManyWithoutDestinationInput
}

input LocationUpdateWithoutShippingOptionsDataInput {
  slug: String
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  country: String
  state: String
  zipCode: String
  locationType: LocationType
  user: UserUpdateOneInput
  lat: Float
  lng: Float
  physicalProducts: PhysicalProductUpdateManyWithoutLocationInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationUpsertWithoutPhysicalProductsInput {
  update: LocationUpdateWithoutPhysicalProductsDataInput!
  create: LocationCreateWithoutPhysicalProductsInput!
}

input LocationUpsertWithoutShippingOptionsInput {
  update: LocationUpdateWithoutShippingOptionsDataInput!
  create: LocationCreateWithoutShippingOptionsInput!
}

input LocationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  company: String
  company_not: String
  company_in: [String!]
  company_not_in: [String!]
  company_lt: String
  company_lte: String
  company_gt: String
  company_gte: String
  company_contains: String
  company_not_contains: String
  company_starts_with: String
  company_not_starts_with: String
  company_ends_with: String
  company_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  address1: String
  address1_not: String
  address1_in: [String!]
  address1_not_in: [String!]
  address1_lt: String
  address1_lte: String
  address1_gt: String
  address1_gte: String
  address1_contains: String
  address1_not_contains: String
  address1_starts_with: String
  address1_not_starts_with: String
  address1_ends_with: String
  address1_not_ends_with: String
  address2: String
  address2_not: String
  address2_in: [String!]
  address2_not_in: [String!]
  address2_lt: String
  address2_lte: String
  address2_gt: String
  address2_gte: String
  address2_contains: String
  address2_not_contains: String
  address2_starts_with: String
  address2_not_starts_with: String
  address2_ends_with: String
  address2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zipCode: String
  zipCode_not: String
  zipCode_in: [String!]
  zipCode_not_in: [String!]
  zipCode_lt: String
  zipCode_lte: String
  zipCode_gt: String
  zipCode_gte: String
  zipCode_contains: String
  zipCode_not_contains: String
  zipCode_starts_with: String
  zipCode_not_starts_with: String
  zipCode_ends_with: String
  zipCode_not_ends_with: String
  locationType: LocationType
  locationType_not: LocationType
  locationType_in: [LocationType!]
  locationType_not_in: [LocationType!]
  user: UserWhereInput
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  lng: Float
  lng_not: Float
  lng_in: [Float!]
  lng_not_in: [Float!]
  lng_lt: Float
  lng_lte: Float
  lng_gt: Float
  lng_gte: Float
  physicalProducts_every: PhysicalProductWhereInput
  physicalProducts_some: PhysicalProductWhereInput
  physicalProducts_none: PhysicalProductWhereInput
  shippingOptions_every: ShippingOptionWhereInput
  shippingOptions_some: ShippingOptionWhereInput
  shippingOptions_none: ShippingOptionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
}

input LocationWhereUniqueInput {
  id: ID
  slug: String
}

scalar Long

type Mutation {
  createActiveAdminUser(data: ActiveAdminUserCreateInput!): ActiveAdminUser!
  updateActiveAdminUser(data: ActiveAdminUserUpdateInput!, where: ActiveAdminUserWhereUniqueInput!): ActiveAdminUser
  upsertActiveAdminUser(where: ActiveAdminUserWhereUniqueInput!, create: ActiveAdminUserCreateInput!, update: ActiveAdminUserUpdateInput!): ActiveAdminUser!
  deleteActiveAdminUser(where: ActiveAdminUserWhereUniqueInput!): ActiveAdminUser
  deleteManyActiveAdminUsers(where: ActiveAdminUserWhereInput): BatchPayload!
  createAdminActionLog(data: AdminActionLogCreateInput!): AdminActionLog!
  updateAdminActionLog(data: AdminActionLogUpdateInput!, where: AdminActionLogWhereUniqueInput!): AdminActionLog
  updateManyAdminActionLogs(data: AdminActionLogUpdateManyMutationInput!, where: AdminActionLogWhereInput): BatchPayload!
  upsertAdminActionLog(where: AdminActionLogWhereUniqueInput!, create: AdminActionLogCreateInput!, update: AdminActionLogUpdateInput!): AdminActionLog!
  deleteAdminActionLog(where: AdminActionLogWhereUniqueInput!): AdminActionLog
  deleteManyAdminActionLogs(where: AdminActionLogWhereInput): BatchPayload!
  createAdminActionLogInterpretation(data: AdminActionLogInterpretationCreateInput!): AdminActionLogInterpretation!
  updateAdminActionLogInterpretation(data: AdminActionLogInterpretationUpdateInput!, where: AdminActionLogInterpretationWhereUniqueInput!): AdminActionLogInterpretation
  updateManyAdminActionLogInterpretations(data: AdminActionLogInterpretationUpdateManyMutationInput!, where: AdminActionLogInterpretationWhereInput): BatchPayload!
  upsertAdminActionLogInterpretation(where: AdminActionLogInterpretationWhereUniqueInput!, create: AdminActionLogInterpretationCreateInput!, update: AdminActionLogInterpretationUpdateInput!): AdminActionLogInterpretation!
  deleteAdminActionLogInterpretation(where: AdminActionLogInterpretationWhereUniqueInput!): AdminActionLogInterpretation
  deleteManyAdminActionLogInterpretations(where: AdminActionLogInterpretationWhereInput): BatchPayload!
  createBagItem(data: BagItemCreateInput!): BagItem!
  updateBagItem(data: BagItemUpdateInput!, where: BagItemWhereUniqueInput!): BagItem
  updateManyBagItems(data: BagItemUpdateManyMutationInput!, where: BagItemWhereInput): BatchPayload!
  upsertBagItem(where: BagItemWhereUniqueInput!, create: BagItemCreateInput!, update: BagItemUpdateInput!): BagItem!
  deleteBagItem(where: BagItemWhereUniqueInput!): BagItem
  deleteManyBagItems(where: BagItemWhereInput): BatchPayload!
  createBillingInfo(data: BillingInfoCreateInput!): BillingInfo!
  updateBillingInfo(data: BillingInfoUpdateInput!, where: BillingInfoWhereUniqueInput!): BillingInfo
  updateManyBillingInfoes(data: BillingInfoUpdateManyMutationInput!, where: BillingInfoWhereInput): BatchPayload!
  upsertBillingInfo(where: BillingInfoWhereUniqueInput!, create: BillingInfoCreateInput!, update: BillingInfoUpdateInput!): BillingInfo!
  deleteBillingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  deleteManyBillingInfoes(where: BillingInfoWhereInput): BatchPayload!
  createBlogPost(data: BlogPostCreateInput!): BlogPost!
  updateBlogPost(data: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost
  updateManyBlogPosts(data: BlogPostUpdateManyMutationInput!, where: BlogPostWhereInput): BatchPayload!
  upsertBlogPost(where: BlogPostWhereUniqueInput!, create: BlogPostCreateInput!, update: BlogPostUpdateInput!): BlogPost!
  deleteBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  deleteManyBlogPosts(where: BlogPostWhereInput): BatchPayload!
  createBottomSize(data: BottomSizeCreateInput!): BottomSize!
  updateBottomSize(data: BottomSizeUpdateInput!, where: BottomSizeWhereUniqueInput!): BottomSize
  updateManyBottomSizes(data: BottomSizeUpdateManyMutationInput!, where: BottomSizeWhereInput): BatchPayload!
  upsertBottomSize(where: BottomSizeWhereUniqueInput!, create: BottomSizeCreateInput!, update: BottomSizeUpdateInput!): BottomSize!
  deleteBottomSize(where: BottomSizeWhereUniqueInput!): BottomSize
  deleteManyBottomSizes(where: BottomSizeWhereInput): BatchPayload!
  createBrand(data: BrandCreateInput!): Brand!
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateManyBrands(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): BatchPayload!
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createCollection(data: CollectionCreateInput!): Collection!
  updateCollection(data: CollectionUpdateInput!, where: CollectionWhereUniqueInput!): Collection
  updateManyCollections(data: CollectionUpdateManyMutationInput!, where: CollectionWhereInput): BatchPayload!
  upsertCollection(where: CollectionWhereUniqueInput!, create: CollectionCreateInput!, update: CollectionUpdateInput!): Collection!
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteManyCollections(where: CollectionWhereInput): BatchPayload!
  createColor(data: ColorCreateInput!): Color!
  updateColor(data: ColorUpdateInput!, where: ColorWhereUniqueInput!): Color
  updateManyColors(data: ColorUpdateManyMutationInput!, where: ColorWhereInput): BatchPayload!
  upsertColor(where: ColorWhereUniqueInput!, create: ColorCreateInput!, update: ColorUpdateInput!): Color!
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteManyColors(where: ColorWhereInput): BatchPayload!
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createCustomerAdmissionsData(data: CustomerAdmissionsDataCreateInput!): CustomerAdmissionsData!
  updateCustomerAdmissionsData(data: CustomerAdmissionsDataUpdateInput!, where: CustomerAdmissionsDataWhereUniqueInput!): CustomerAdmissionsData
  updateManyCustomerAdmissionsDatas(data: CustomerAdmissionsDataUpdateManyMutationInput!, where: CustomerAdmissionsDataWhereInput): BatchPayload!
  upsertCustomerAdmissionsData(where: CustomerAdmissionsDataWhereUniqueInput!, create: CustomerAdmissionsDataCreateInput!, update: CustomerAdmissionsDataUpdateInput!): CustomerAdmissionsData!
  deleteCustomerAdmissionsData(where: CustomerAdmissionsDataWhereUniqueInput!): CustomerAdmissionsData
  deleteManyCustomerAdmissionsDatas(where: CustomerAdmissionsDataWhereInput): BatchPayload!
  createCustomerDetail(data: CustomerDetailCreateInput!): CustomerDetail!
  updateCustomerDetail(data: CustomerDetailUpdateInput!, where: CustomerDetailWhereUniqueInput!): CustomerDetail
  updateManyCustomerDetails(data: CustomerDetailUpdateManyMutationInput!, where: CustomerDetailWhereInput): BatchPayload!
  upsertCustomerDetail(where: CustomerDetailWhereUniqueInput!, create: CustomerDetailCreateInput!, update: CustomerDetailUpdateInput!): CustomerDetail!
  deleteCustomerDetail(where: CustomerDetailWhereUniqueInput!): CustomerDetail
  deleteManyCustomerDetails(where: CustomerDetailWhereInput): BatchPayload!
  createCustomerMembership(data: CustomerMembershipCreateInput!): CustomerMembership!
  updateCustomerMembership(data: CustomerMembershipUpdateInput!, where: CustomerMembershipWhereUniqueInput!): CustomerMembership
  updateManyCustomerMemberships(data: CustomerMembershipUpdateManyMutationInput!, where: CustomerMembershipWhereInput): BatchPayload!
  upsertCustomerMembership(where: CustomerMembershipWhereUniqueInput!, create: CustomerMembershipCreateInput!, update: CustomerMembershipUpdateInput!): CustomerMembership!
  deleteCustomerMembership(where: CustomerMembershipWhereUniqueInput!): CustomerMembership
  deleteManyCustomerMemberships(where: CustomerMembershipWhereInput): BatchPayload!
  createCustomerMembershipSubscriptionData(data: CustomerMembershipSubscriptionDataCreateInput!): CustomerMembershipSubscriptionData!
  updateCustomerMembershipSubscriptionData(data: CustomerMembershipSubscriptionDataUpdateInput!, where: CustomerMembershipSubscriptionDataWhereUniqueInput!): CustomerMembershipSubscriptionData
  updateManyCustomerMembershipSubscriptionDatas(data: CustomerMembershipSubscriptionDataUpdateManyMutationInput!, where: CustomerMembershipSubscriptionDataWhereInput): BatchPayload!
  upsertCustomerMembershipSubscriptionData(where: CustomerMembershipSubscriptionDataWhereUniqueInput!, create: CustomerMembershipSubscriptionDataCreateInput!, update: CustomerMembershipSubscriptionDataUpdateInput!): CustomerMembershipSubscriptionData!
  deleteCustomerMembershipSubscriptionData(where: CustomerMembershipSubscriptionDataWhereUniqueInput!): CustomerMembershipSubscriptionData
  deleteManyCustomerMembershipSubscriptionDatas(where: CustomerMembershipSubscriptionDataWhereInput): BatchPayload!
  createCustomerNotificationBarReceipt(data: CustomerNotificationBarReceiptCreateInput!): CustomerNotificationBarReceipt!
  updateCustomerNotificationBarReceipt(data: CustomerNotificationBarReceiptUpdateInput!, where: CustomerNotificationBarReceiptWhereUniqueInput!): CustomerNotificationBarReceipt
  updateManyCustomerNotificationBarReceipts(data: CustomerNotificationBarReceiptUpdateManyMutationInput!, where: CustomerNotificationBarReceiptWhereInput): BatchPayload!
  upsertCustomerNotificationBarReceipt(where: CustomerNotificationBarReceiptWhereUniqueInput!, create: CustomerNotificationBarReceiptCreateInput!, update: CustomerNotificationBarReceiptUpdateInput!): CustomerNotificationBarReceipt!
  deleteCustomerNotificationBarReceipt(where: CustomerNotificationBarReceiptWhereUniqueInput!): CustomerNotificationBarReceipt
  deleteManyCustomerNotificationBarReceipts(where: CustomerNotificationBarReceiptWhereInput): BatchPayload!
  createEmailReceipt(data: EmailReceiptCreateInput!): EmailReceipt!
  updateEmailReceipt(data: EmailReceiptUpdateInput!, where: EmailReceiptWhereUniqueInput!): EmailReceipt
  updateManyEmailReceipts(data: EmailReceiptUpdateManyMutationInput!, where: EmailReceiptWhereInput): BatchPayload!
  upsertEmailReceipt(where: EmailReceiptWhereUniqueInput!, create: EmailReceiptCreateInput!, update: EmailReceiptUpdateInput!): EmailReceipt!
  deleteEmailReceipt(where: EmailReceiptWhereUniqueInput!): EmailReceipt
  deleteManyEmailReceipts(where: EmailReceiptWhereInput): BatchPayload!
  createFitPic(data: FitPicCreateInput!): FitPic!
  updateFitPic(data: FitPicUpdateInput!, where: FitPicWhereUniqueInput!): FitPic
  updateManyFitPics(data: FitPicUpdateManyMutationInput!, where: FitPicWhereInput): BatchPayload!
  upsertFitPic(where: FitPicWhereUniqueInput!, create: FitPicCreateInput!, update: FitPicUpdateInput!): FitPic!
  deleteFitPic(where: FitPicWhereUniqueInput!): FitPic
  deleteManyFitPics(where: FitPicWhereInput): BatchPayload!
  createFitPicReport(data: FitPicReportCreateInput!): FitPicReport!
  updateFitPicReport(data: FitPicReportUpdateInput!, where: FitPicReportWhereUniqueInput!): FitPicReport
  updateManyFitPicReports(data: FitPicReportUpdateManyMutationInput!, where: FitPicReportWhereInput): BatchPayload!
  upsertFitPicReport(where: FitPicReportWhereUniqueInput!, create: FitPicReportCreateInput!, update: FitPicReportUpdateInput!): FitPicReport!
  deleteFitPicReport(where: FitPicReportWhereUniqueInput!): FitPicReport
  deleteManyFitPicReports(where: FitPicReportWhereInput): BatchPayload!
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  createInterestedUser(data: InterestedUserCreateInput!): InterestedUser!
  updateInterestedUser(data: InterestedUserUpdateInput!, where: InterestedUserWhereUniqueInput!): InterestedUser
  updateManyInterestedUsers(data: InterestedUserUpdateManyMutationInput!, where: InterestedUserWhereInput): BatchPayload!
  upsertInterestedUser(where: InterestedUserWhereUniqueInput!, create: InterestedUserCreateInput!, update: InterestedUserUpdateInput!): InterestedUser!
  deleteInterestedUser(where: InterestedUserWhereUniqueInput!): InterestedUser
  deleteManyInterestedUsers(where: InterestedUserWhereInput): BatchPayload!
  createLabel(data: LabelCreateInput!): Label!
  updateLabel(data: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label
  updateManyLabels(data: LabelUpdateManyMutationInput!, where: LabelWhereInput): BatchPayload!
  upsertLabel(where: LabelWhereUniqueInput!, create: LabelCreateInput!, update: LabelUpdateInput!): Label!
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteManyLabels(where: LabelWhereInput): BatchPayload!
  createLaunch(data: LaunchCreateInput!): Launch!
  updateLaunch(data: LaunchUpdateInput!, where: LaunchWhereUniqueInput!): Launch
  updateManyLaunches(data: LaunchUpdateManyMutationInput!, where: LaunchWhereInput): BatchPayload!
  upsertLaunch(where: LaunchWhereUniqueInput!, create: LaunchCreateInput!, update: LaunchUpdateInput!): Launch!
  deleteLaunch(where: LaunchWhereUniqueInput!): Launch
  deleteManyLaunches(where: LaunchWhereInput): BatchPayload!
  createLocation(data: LocationCreateInput!): Location!
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderLineItem(data: OrderLineItemCreateInput!): OrderLineItem!
  updateOrderLineItem(data: OrderLineItemUpdateInput!, where: OrderLineItemWhereUniqueInput!): OrderLineItem
  updateManyOrderLineItems(data: OrderLineItemUpdateManyMutationInput!, where: OrderLineItemWhereInput): BatchPayload!
  upsertOrderLineItem(where: OrderLineItemWhereUniqueInput!, create: OrderLineItemCreateInput!, update: OrderLineItemUpdateInput!): OrderLineItem!
  deleteOrderLineItem(where: OrderLineItemWhereUniqueInput!): OrderLineItem
  deleteManyOrderLineItems(where: OrderLineItemWhereInput): BatchPayload!
  createPackage(data: PackageCreateInput!): Package!
  updatePackage(data: PackageUpdateInput!, where: PackageWhereUniqueInput!): Package
  updateManyPackages(data: PackageUpdateManyMutationInput!, where: PackageWhereInput): BatchPayload!
  upsertPackage(where: PackageWhereUniqueInput!, create: PackageCreateInput!, update: PackageUpdateInput!): Package!
  deletePackage(where: PackageWhereUniqueInput!): Package
  deleteManyPackages(where: PackageWhereInput): BatchPayload!
  createPackageTransitEvent(data: PackageTransitEventCreateInput!): PackageTransitEvent!
  updatePackageTransitEvent(data: PackageTransitEventUpdateInput!, where: PackageTransitEventWhereUniqueInput!): PackageTransitEvent
  updateManyPackageTransitEvents(data: PackageTransitEventUpdateManyMutationInput!, where: PackageTransitEventWhereInput): BatchPayload!
  upsertPackageTransitEvent(where: PackageTransitEventWhereUniqueInput!, create: PackageTransitEventCreateInput!, update: PackageTransitEventUpdateInput!): PackageTransitEvent!
  deletePackageTransitEvent(where: PackageTransitEventWhereUniqueInput!): PackageTransitEvent
  deleteManyPackageTransitEvents(where: PackageTransitEventWhereInput): BatchPayload!
  createPauseRequest(data: PauseRequestCreateInput!): PauseRequest!
  updatePauseRequest(data: PauseRequestUpdateInput!, where: PauseRequestWhereUniqueInput!): PauseRequest
  updateManyPauseRequests(data: PauseRequestUpdateManyMutationInput!, where: PauseRequestWhereInput): BatchPayload!
  upsertPauseRequest(where: PauseRequestWhereUniqueInput!, create: PauseRequestCreateInput!, update: PauseRequestUpdateInput!): PauseRequest!
  deletePauseRequest(where: PauseRequestWhereUniqueInput!): PauseRequest
  deleteManyPauseRequests(where: PauseRequestWhereInput): BatchPayload!
  createPaymentPlan(data: PaymentPlanCreateInput!): PaymentPlan!
  updatePaymentPlan(data: PaymentPlanUpdateInput!, where: PaymentPlanWhereUniqueInput!): PaymentPlan
  updateManyPaymentPlans(data: PaymentPlanUpdateManyMutationInput!, where: PaymentPlanWhereInput): BatchPayload!
  upsertPaymentPlan(where: PaymentPlanWhereUniqueInput!, create: PaymentPlanCreateInput!, update: PaymentPlanUpdateInput!): PaymentPlan!
  deletePaymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  deleteManyPaymentPlans(where: PaymentPlanWhereInput): BatchPayload!
  createPhysicalProduct(data: PhysicalProductCreateInput!): PhysicalProduct!
  updatePhysicalProduct(data: PhysicalProductUpdateInput!, where: PhysicalProductWhereUniqueInput!): PhysicalProduct
  updateManyPhysicalProducts(data: PhysicalProductUpdateManyMutationInput!, where: PhysicalProductWhereInput): BatchPayload!
  upsertPhysicalProduct(where: PhysicalProductWhereUniqueInput!, create: PhysicalProductCreateInput!, update: PhysicalProductUpdateInput!): PhysicalProduct!
  deletePhysicalProduct(where: PhysicalProductWhereUniqueInput!): PhysicalProduct
  deleteManyPhysicalProducts(where: PhysicalProductWhereInput): BatchPayload!
  createPhysicalProductPrice(data: PhysicalProductPriceCreateInput!): PhysicalProductPrice!
  updatePhysicalProductPrice(data: PhysicalProductPriceUpdateInput!, where: PhysicalProductPriceWhereUniqueInput!): PhysicalProductPrice
  updateManyPhysicalProductPrices(data: PhysicalProductPriceUpdateManyMutationInput!, where: PhysicalProductPriceWhereInput): BatchPayload!
  upsertPhysicalProductPrice(where: PhysicalProductPriceWhereUniqueInput!, create: PhysicalProductPriceCreateInput!, update: PhysicalProductPriceUpdateInput!): PhysicalProductPrice!
  deletePhysicalProductPrice(where: PhysicalProductPriceWhereUniqueInput!): PhysicalProductPrice
  deleteManyPhysicalProductPrices(where: PhysicalProductPriceWhereInput): BatchPayload!
  createPhysicalProductQualityReport(data: PhysicalProductQualityReportCreateInput!): PhysicalProductQualityReport!
  updatePhysicalProductQualityReport(data: PhysicalProductQualityReportUpdateInput!, where: PhysicalProductQualityReportWhereUniqueInput!): PhysicalProductQualityReport
  updateManyPhysicalProductQualityReports(data: PhysicalProductQualityReportUpdateManyMutationInput!, where: PhysicalProductQualityReportWhereInput): BatchPayload!
  upsertPhysicalProductQualityReport(where: PhysicalProductQualityReportWhereUniqueInput!, create: PhysicalProductQualityReportCreateInput!, update: PhysicalProductQualityReportUpdateInput!): PhysicalProductQualityReport!
  deletePhysicalProductQualityReport(where: PhysicalProductQualityReportWhereUniqueInput!): PhysicalProductQualityReport
  deleteManyPhysicalProductQualityReports(where: PhysicalProductQualityReportWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductFunction(data: ProductFunctionCreateInput!): ProductFunction!
  updateProductFunction(data: ProductFunctionUpdateInput!, where: ProductFunctionWhereUniqueInput!): ProductFunction
  updateManyProductFunctions(data: ProductFunctionUpdateManyMutationInput!, where: ProductFunctionWhereInput): BatchPayload!
  upsertProductFunction(where: ProductFunctionWhereUniqueInput!, create: ProductFunctionCreateInput!, update: ProductFunctionUpdateInput!): ProductFunction!
  deleteProductFunction(where: ProductFunctionWhereUniqueInput!): ProductFunction
  deleteManyProductFunctions(where: ProductFunctionWhereInput): BatchPayload!
  createProductMaterialCategory(data: ProductMaterialCategoryCreateInput!): ProductMaterialCategory!
  updateProductMaterialCategory(data: ProductMaterialCategoryUpdateInput!, where: ProductMaterialCategoryWhereUniqueInput!): ProductMaterialCategory
  updateManyProductMaterialCategories(data: ProductMaterialCategoryUpdateManyMutationInput!, where: ProductMaterialCategoryWhereInput): BatchPayload!
  upsertProductMaterialCategory(where: ProductMaterialCategoryWhereUniqueInput!, create: ProductMaterialCategoryCreateInput!, update: ProductMaterialCategoryUpdateInput!): ProductMaterialCategory!
  deleteProductMaterialCategory(where: ProductMaterialCategoryWhereUniqueInput!): ProductMaterialCategory
  deleteManyProductMaterialCategories(where: ProductMaterialCategoryWhereInput): BatchPayload!
  createProductModel(data: ProductModelCreateInput!): ProductModel!
  updateProductModel(data: ProductModelUpdateInput!, where: ProductModelWhereUniqueInput!): ProductModel
  updateManyProductModels(data: ProductModelUpdateManyMutationInput!, where: ProductModelWhereInput): BatchPayload!
  upsertProductModel(where: ProductModelWhereUniqueInput!, create: ProductModelCreateInput!, update: ProductModelUpdateInput!): ProductModel!
  deleteProductModel(where: ProductModelWhereUniqueInput!): ProductModel
  deleteManyProductModels(where: ProductModelWhereInput): BatchPayload!
  createProductNotification(data: ProductNotificationCreateInput!): ProductNotification!
  updateProductNotification(data: ProductNotificationUpdateInput!, where: ProductNotificationWhereUniqueInput!): ProductNotification
  updateManyProductNotifications(data: ProductNotificationUpdateManyMutationInput!, where: ProductNotificationWhereInput): BatchPayload!
  upsertProductNotification(where: ProductNotificationWhereUniqueInput!, create: ProductNotificationCreateInput!, update: ProductNotificationUpdateInput!): ProductNotification!
  deleteProductNotification(where: ProductNotificationWhereUniqueInput!): ProductNotification
  deleteManyProductNotifications(where: ProductNotificationWhereInput): BatchPayload!
  createProductRequest(data: ProductRequestCreateInput!): ProductRequest!
  updateProductRequest(data: ProductRequestUpdateInput!, where: ProductRequestWhereUniqueInput!): ProductRequest
  updateManyProductRequests(data: ProductRequestUpdateManyMutationInput!, where: ProductRequestWhereInput): BatchPayload!
  upsertProductRequest(where: ProductRequestWhereUniqueInput!, create: ProductRequestCreateInput!, update: ProductRequestUpdateInput!): ProductRequest!
  deleteProductRequest(where: ProductRequestWhereUniqueInput!): ProductRequest
  deleteManyProductRequests(where: ProductRequestWhereInput): BatchPayload!
  createProductSeason(data: ProductSeasonCreateInput!): ProductSeason!
  updateProductSeason(data: ProductSeasonUpdateInput!, where: ProductSeasonWhereUniqueInput!): ProductSeason
  updateManyProductSeasons(data: ProductSeasonUpdateManyMutationInput!, where: ProductSeasonWhereInput): BatchPayload!
  upsertProductSeason(where: ProductSeasonWhereUniqueInput!, create: ProductSeasonCreateInput!, update: ProductSeasonUpdateInput!): ProductSeason!
  deleteProductSeason(where: ProductSeasonWhereUniqueInput!): ProductSeason
  deleteManyProductSeasons(where: ProductSeasonWhereInput): BatchPayload!
  createProductTier(data: ProductTierCreateInput!): ProductTier!
  updateProductTier(data: ProductTierUpdateInput!, where: ProductTierWhereUniqueInput!): ProductTier
  updateManyProductTiers(data: ProductTierUpdateManyMutationInput!, where: ProductTierWhereInput): BatchPayload!
  upsertProductTier(where: ProductTierWhereUniqueInput!, create: ProductTierCreateInput!, update: ProductTierUpdateInput!): ProductTier!
  deleteProductTier(where: ProductTierWhereUniqueInput!): ProductTier
  deleteManyProductTiers(where: ProductTierWhereInput): BatchPayload!
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant!
  updateProductVariant(data: ProductVariantUpdateInput!, where: ProductVariantWhereUniqueInput!): ProductVariant
  updateManyProductVariants(data: ProductVariantUpdateManyMutationInput!, where: ProductVariantWhereInput): BatchPayload!
  upsertProductVariant(where: ProductVariantWhereUniqueInput!, create: ProductVariantCreateInput!, update: ProductVariantUpdateInput!): ProductVariant!
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteManyProductVariants(where: ProductVariantWhereInput): BatchPayload!
  createProductVariantFeedback(data: ProductVariantFeedbackCreateInput!): ProductVariantFeedback!
  updateProductVariantFeedback(data: ProductVariantFeedbackUpdateInput!, where: ProductVariantFeedbackWhereUniqueInput!): ProductVariantFeedback
  updateManyProductVariantFeedbacks(data: ProductVariantFeedbackUpdateManyMutationInput!, where: ProductVariantFeedbackWhereInput): BatchPayload!
  upsertProductVariantFeedback(where: ProductVariantFeedbackWhereUniqueInput!, create: ProductVariantFeedbackCreateInput!, update: ProductVariantFeedbackUpdateInput!): ProductVariantFeedback!
  deleteProductVariantFeedback(where: ProductVariantFeedbackWhereUniqueInput!): ProductVariantFeedback
  deleteManyProductVariantFeedbacks(where: ProductVariantFeedbackWhereInput): BatchPayload!
  createProductVariantFeedbackQuestion(data: ProductVariantFeedbackQuestionCreateInput!): ProductVariantFeedbackQuestion!
  updateProductVariantFeedbackQuestion(data: ProductVariantFeedbackQuestionUpdateInput!, where: ProductVariantFeedbackQuestionWhereUniqueInput!): ProductVariantFeedbackQuestion
  updateManyProductVariantFeedbackQuestions(data: ProductVariantFeedbackQuestionUpdateManyMutationInput!, where: ProductVariantFeedbackQuestionWhereInput): BatchPayload!
  upsertProductVariantFeedbackQuestion(where: ProductVariantFeedbackQuestionWhereUniqueInput!, create: ProductVariantFeedbackQuestionCreateInput!, update: ProductVariantFeedbackQuestionUpdateInput!): ProductVariantFeedbackQuestion!
  deleteProductVariantFeedbackQuestion(where: ProductVariantFeedbackQuestionWhereUniqueInput!): ProductVariantFeedbackQuestion
  deleteManyProductVariantFeedbackQuestions(where: ProductVariantFeedbackQuestionWhereInput): BatchPayload!
  createProductVariantPrice(data: ProductVariantPriceCreateInput!): ProductVariantPrice!
  updateProductVariantPrice(data: ProductVariantPriceUpdateInput!, where: ProductVariantPriceWhereUniqueInput!): ProductVariantPrice
  updateManyProductVariantPrices(data: ProductVariantPriceUpdateManyMutationInput!, where: ProductVariantPriceWhereInput): BatchPayload!
  upsertProductVariantPrice(where: ProductVariantPriceWhereUniqueInput!, create: ProductVariantPriceCreateInput!, update: ProductVariantPriceUpdateInput!): ProductVariantPrice!
  deleteProductVariantPrice(where: ProductVariantPriceWhereUniqueInput!): ProductVariantPrice
  deleteManyProductVariantPrices(where: ProductVariantPriceWhereInput): BatchPayload!
  createProductVariantWant(data: ProductVariantWantCreateInput!): ProductVariantWant!
  updateProductVariantWant(data: ProductVariantWantUpdateInput!, where: ProductVariantWantWhereUniqueInput!): ProductVariantWant
  updateManyProductVariantWants(data: ProductVariantWantUpdateManyMutationInput!, where: ProductVariantWantWhereInput): BatchPayload!
  upsertProductVariantWant(where: ProductVariantWantWhereUniqueInput!, create: ProductVariantWantCreateInput!, update: ProductVariantWantUpdateInput!): ProductVariantWant!
  deleteProductVariantWant(where: ProductVariantWantWhereUniqueInput!): ProductVariantWant
  deleteManyProductVariantWants(where: ProductVariantWantWhereInput): BatchPayload!
  createPushNotificationReceipt(data: PushNotificationReceiptCreateInput!): PushNotificationReceipt!
  updatePushNotificationReceipt(data: PushNotificationReceiptUpdateInput!, where: PushNotificationReceiptWhereUniqueInput!): PushNotificationReceipt
  updateManyPushNotificationReceipts(data: PushNotificationReceiptUpdateManyMutationInput!, where: PushNotificationReceiptWhereInput): BatchPayload!
  upsertPushNotificationReceipt(where: PushNotificationReceiptWhereUniqueInput!, create: PushNotificationReceiptCreateInput!, update: PushNotificationReceiptUpdateInput!): PushNotificationReceipt!
  deletePushNotificationReceipt(where: PushNotificationReceiptWhereUniqueInput!): PushNotificationReceipt
  deleteManyPushNotificationReceipts(where: PushNotificationReceiptWhereInput): BatchPayload!
  createRecentlyViewedProduct(data: RecentlyViewedProductCreateInput!): RecentlyViewedProduct!
  updateRecentlyViewedProduct(data: RecentlyViewedProductUpdateInput!, where: RecentlyViewedProductWhereUniqueInput!): RecentlyViewedProduct
  updateManyRecentlyViewedProducts(data: RecentlyViewedProductUpdateManyMutationInput!, where: RecentlyViewedProductWhereInput): BatchPayload!
  upsertRecentlyViewedProduct(where: RecentlyViewedProductWhereUniqueInput!, create: RecentlyViewedProductCreateInput!, update: RecentlyViewedProductUpdateInput!): RecentlyViewedProduct!
  deleteRecentlyViewedProduct(where: RecentlyViewedProductWhereUniqueInput!): RecentlyViewedProduct
  deleteManyRecentlyViewedProducts(where: RecentlyViewedProductWhereInput): BatchPayload!
  createReservation(data: ReservationCreateInput!): Reservation!
  updateReservation(data: ReservationUpdateInput!, where: ReservationWhereUniqueInput!): Reservation
  updateManyReservations(data: ReservationUpdateManyMutationInput!, where: ReservationWhereInput): BatchPayload!
  upsertReservation(where: ReservationWhereUniqueInput!, create: ReservationCreateInput!, update: ReservationUpdateInput!): Reservation!
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteManyReservations(where: ReservationWhereInput): BatchPayload!
  createReservationFeedback(data: ReservationFeedbackCreateInput!): ReservationFeedback!
  updateReservationFeedback(data: ReservationFeedbackUpdateInput!, where: ReservationFeedbackWhereUniqueInput!): ReservationFeedback
  updateManyReservationFeedbacks(data: ReservationFeedbackUpdateManyMutationInput!, where: ReservationFeedbackWhereInput): BatchPayload!
  upsertReservationFeedback(where: ReservationFeedbackWhereUniqueInput!, create: ReservationFeedbackCreateInput!, update: ReservationFeedbackUpdateInput!): ReservationFeedback!
  deleteReservationFeedback(where: ReservationFeedbackWhereUniqueInput!): ReservationFeedback
  deleteManyReservationFeedbacks(where: ReservationFeedbackWhereInput): BatchPayload!
  createReservationReceipt(data: ReservationReceiptCreateInput!): ReservationReceipt!
  updateReservationReceipt(data: ReservationReceiptUpdateInput!, where: ReservationReceiptWhereUniqueInput!): ReservationReceipt
  upsertReservationReceipt(where: ReservationReceiptWhereUniqueInput!, create: ReservationReceiptCreateInput!, update: ReservationReceiptUpdateInput!): ReservationReceipt!
  deleteReservationReceipt(where: ReservationReceiptWhereUniqueInput!): ReservationReceipt
  deleteManyReservationReceipts(where: ReservationReceiptWhereInput): BatchPayload!
  createReservationReceiptItem(data: ReservationReceiptItemCreateInput!): ReservationReceiptItem!
  updateReservationReceiptItem(data: ReservationReceiptItemUpdateInput!, where: ReservationReceiptItemWhereUniqueInput!): ReservationReceiptItem
  updateManyReservationReceiptItems(data: ReservationReceiptItemUpdateManyMutationInput!, where: ReservationReceiptItemWhereInput): BatchPayload!
  upsertReservationReceiptItem(where: ReservationReceiptItemWhereUniqueInput!, create: ReservationReceiptItemCreateInput!, update: ReservationReceiptItemUpdateInput!): ReservationReceiptItem!
  deleteReservationReceiptItem(where: ReservationReceiptItemWhereUniqueInput!): ReservationReceiptItem
  deleteManyReservationReceiptItems(where: ReservationReceiptItemWhereInput): BatchPayload!
  createSeason(data: SeasonCreateInput!): Season!
  updateSeason(data: SeasonUpdateInput!, where: SeasonWhereUniqueInput!): Season
  updateManySeasons(data: SeasonUpdateManyMutationInput!, where: SeasonWhereInput): BatchPayload!
  upsertSeason(where: SeasonWhereUniqueInput!, create: SeasonCreateInput!, update: SeasonUpdateInput!): Season!
  deleteSeason(where: SeasonWhereUniqueInput!): Season
  deleteManySeasons(where: SeasonWhereInput): BatchPayload!
  createShippingMethod(data: ShippingMethodCreateInput!): ShippingMethod!
  updateShippingMethod(data: ShippingMethodUpdateInput!, where: ShippingMethodWhereUniqueInput!): ShippingMethod
  updateManyShippingMethods(data: ShippingMethodUpdateManyMutationInput!, where: ShippingMethodWhereInput): BatchPayload!
  upsertShippingMethod(where: ShippingMethodWhereUniqueInput!, create: ShippingMethodCreateInput!, update: ShippingMethodUpdateInput!): ShippingMethod!
  deleteShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  deleteManyShippingMethods(where: ShippingMethodWhereInput): BatchPayload!
  createShippingOption(data: ShippingOptionCreateInput!): ShippingOption!
  updateShippingOption(data: ShippingOptionUpdateInput!, where: ShippingOptionWhereUniqueInput!): ShippingOption
  updateManyShippingOptions(data: ShippingOptionUpdateManyMutationInput!, where: ShippingOptionWhereInput): BatchPayload!
  upsertShippingOption(where: ShippingOptionWhereUniqueInput!, create: ShippingOptionCreateInput!, update: ShippingOptionUpdateInput!): ShippingOption!
  deleteShippingOption(where: ShippingOptionWhereUniqueInput!): ShippingOption
  deleteManyShippingOptions(where: ShippingOptionWhereInput): BatchPayload!
  createShopifyProductVariant(data: ShopifyProductVariantCreateInput!): ShopifyProductVariant!
  updateShopifyProductVariant(data: ShopifyProductVariantUpdateInput!, where: ShopifyProductVariantWhereUniqueInput!): ShopifyProductVariant
  updateManyShopifyProductVariants(data: ShopifyProductVariantUpdateManyMutationInput!, where: ShopifyProductVariantWhereInput): BatchPayload!
  upsertShopifyProductVariant(where: ShopifyProductVariantWhereUniqueInput!, create: ShopifyProductVariantCreateInput!, update: ShopifyProductVariantUpdateInput!): ShopifyProductVariant!
  deleteShopifyProductVariant(where: ShopifyProductVariantWhereUniqueInput!): ShopifyProductVariant
  deleteManyShopifyProductVariants(where: ShopifyProductVariantWhereInput): BatchPayload!
  createShopifyProductVariantSelectedOption(data: ShopifyProductVariantSelectedOptionCreateInput!): ShopifyProductVariantSelectedOption!
  updateShopifyProductVariantSelectedOption(data: ShopifyProductVariantSelectedOptionUpdateInput!, where: ShopifyProductVariantSelectedOptionWhereUniqueInput!): ShopifyProductVariantSelectedOption
  updateManyShopifyProductVariantSelectedOptions(data: ShopifyProductVariantSelectedOptionUpdateManyMutationInput!, where: ShopifyProductVariantSelectedOptionWhereInput): BatchPayload!
  upsertShopifyProductVariantSelectedOption(where: ShopifyProductVariantSelectedOptionWhereUniqueInput!, create: ShopifyProductVariantSelectedOptionCreateInput!, update: ShopifyProductVariantSelectedOptionUpdateInput!): ShopifyProductVariantSelectedOption!
  deleteShopifyProductVariantSelectedOption(where: ShopifyProductVariantSelectedOptionWhereUniqueInput!): ShopifyProductVariantSelectedOption
  deleteManyShopifyProductVariantSelectedOptions(where: ShopifyProductVariantSelectedOptionWhereInput): BatchPayload!
  createShopifyShop(data: ShopifyShopCreateInput!): ShopifyShop!
  updateShopifyShop(data: ShopifyShopUpdateInput!, where: ShopifyShopWhereUniqueInput!): ShopifyShop
  updateManyShopifyShops(data: ShopifyShopUpdateManyMutationInput!, where: ShopifyShopWhereInput): BatchPayload!
  upsertShopifyShop(where: ShopifyShopWhereUniqueInput!, create: ShopifyShopCreateInput!, update: ShopifyShopUpdateInput!): ShopifyShop!
  deleteShopifyShop(where: ShopifyShopWhereUniqueInput!): ShopifyShop
  deleteManyShopifyShops(where: ShopifyShopWhereInput): BatchPayload!
  createSize(data: SizeCreateInput!): Size!
  updateSize(data: SizeUpdateInput!, where: SizeWhereUniqueInput!): Size
  updateManySizes(data: SizeUpdateManyMutationInput!, where: SizeWhereInput): BatchPayload!
  upsertSize(where: SizeWhereUniqueInput!, create: SizeCreateInput!, update: SizeUpdateInput!): Size!
  deleteSize(where: SizeWhereUniqueInput!): Size
  deleteManySizes(where: SizeWhereInput): BatchPayload!
  createSmsReceipt(data: SmsReceiptCreateInput!): SmsReceipt!
  updateSmsReceipt(data: SmsReceiptUpdateInput!, where: SmsReceiptWhereUniqueInput!): SmsReceipt
  updateManySmsReceipts(data: SmsReceiptUpdateManyMutationInput!, where: SmsReceiptWhereInput): BatchPayload!
  upsertSmsReceipt(where: SmsReceiptWhereUniqueInput!, create: SmsReceiptCreateInput!, update: SmsReceiptUpdateInput!): SmsReceipt!
  deleteSmsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  deleteManySmsReceipts(where: SmsReceiptWhereInput): BatchPayload!
  createStylePreferences(data: StylePreferencesCreateInput!): StylePreferences!
  updateStylePreferences(data: StylePreferencesUpdateInput!, where: StylePreferencesWhereUniqueInput!): StylePreferences
  updateManyStylePreferenceses(data: StylePreferencesUpdateManyMutationInput!, where: StylePreferencesWhereInput): BatchPayload!
  upsertStylePreferences(where: StylePreferencesWhereUniqueInput!, create: StylePreferencesCreateInput!, update: StylePreferencesUpdateInput!): StylePreferences!
  deleteStylePreferences(where: StylePreferencesWhereUniqueInput!): StylePreferences
  deleteManyStylePreferenceses(where: StylePreferencesWhereInput): BatchPayload!
  createSyncTiming(data: SyncTimingCreateInput!): SyncTiming!
  updateSyncTiming(data: SyncTimingUpdateInput!, where: SyncTimingWhereUniqueInput!): SyncTiming
  updateManySyncTimings(data: SyncTimingUpdateManyMutationInput!, where: SyncTimingWhereInput): BatchPayload!
  upsertSyncTiming(where: SyncTimingWhereUniqueInput!, create: SyncTimingCreateInput!, update: SyncTimingUpdateInput!): SyncTiming!
  deleteSyncTiming(where: SyncTimingWhereUniqueInput!): SyncTiming
  deleteManySyncTimings(where: SyncTimingWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createTopSize(data: TopSizeCreateInput!): TopSize!
  updateTopSize(data: TopSizeUpdateInput!, where: TopSizeWhereUniqueInput!): TopSize
  updateManyTopSizes(data: TopSizeUpdateManyMutationInput!, where: TopSizeWhereInput): BatchPayload!
  upsertTopSize(where: TopSizeWhereUniqueInput!, create: TopSizeCreateInput!, update: TopSizeUpdateInput!): TopSize!
  deleteTopSize(where: TopSizeWhereUniqueInput!): TopSize
  deleteManyTopSizes(where: TopSizeWhereInput): BatchPayload!
  createUTMData(data: UTMDataCreateInput!): UTMData!
  updateUTMData(data: UTMDataUpdateInput!, where: UTMDataWhereUniqueInput!): UTMData
  updateManyUTMDatas(data: UTMDataUpdateManyMutationInput!, where: UTMDataWhereInput): BatchPayload!
  upsertUTMData(where: UTMDataWhereUniqueInput!, create: UTMDataCreateInput!, update: UTMDataUpdateInput!): UTMData!
  deleteUTMData(where: UTMDataWhereUniqueInput!): UTMData
  deleteManyUTMDatas(where: UTMDataWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserDeviceData(data: UserDeviceDataCreateInput!): UserDeviceData!
  updateUserDeviceData(data: UserDeviceDataUpdateInput!, where: UserDeviceDataWhereUniqueInput!): UserDeviceData
  updateManyUserDeviceDatas(data: UserDeviceDataUpdateManyMutationInput!, where: UserDeviceDataWhereInput): BatchPayload!
  upsertUserDeviceData(where: UserDeviceDataWhereUniqueInput!, create: UserDeviceDataCreateInput!, update: UserDeviceDataUpdateInput!): UserDeviceData!
  deleteUserDeviceData(where: UserDeviceDataWhereUniqueInput!): UserDeviceData
  deleteManyUserDeviceDatas(where: UserDeviceDataWhereInput): BatchPayload!
  createUserPushNotification(data: UserPushNotificationCreateInput!): UserPushNotification!
  updateUserPushNotification(data: UserPushNotificationUpdateInput!, where: UserPushNotificationWhereUniqueInput!): UserPushNotification
  updateManyUserPushNotifications(data: UserPushNotificationUpdateManyMutationInput!, where: UserPushNotificationWhereInput): BatchPayload!
  upsertUserPushNotification(where: UserPushNotificationWhereUniqueInput!, create: UserPushNotificationCreateInput!, update: UserPushNotificationUpdateInput!): UserPushNotification!
  deleteUserPushNotification(where: UserPushNotificationWhereUniqueInput!): UserPushNotification
  deleteManyUserPushNotifications(where: UserPushNotificationWhereInput): BatchPayload!
  createUserPushNotificationInterest(data: UserPushNotificationInterestCreateInput!): UserPushNotificationInterest!
  updateUserPushNotificationInterest(data: UserPushNotificationInterestUpdateInput!, where: UserPushNotificationInterestWhereUniqueInput!): UserPushNotificationInterest
  updateManyUserPushNotificationInterests(data: UserPushNotificationInterestUpdateManyMutationInput!, where: UserPushNotificationInterestWhereInput): BatchPayload!
  upsertUserPushNotificationInterest(where: UserPushNotificationInterestWhereUniqueInput!, create: UserPushNotificationInterestCreateInput!, update: UserPushNotificationInterestUpdateInput!): UserPushNotificationInterest!
  deleteUserPushNotificationInterest(where: UserPushNotificationInterestWhereUniqueInput!): UserPushNotificationInterest
  deleteManyUserPushNotificationInterests(where: UserPushNotificationInterestWhereInput): BatchPayload!
  createWarehouseLocation(data: WarehouseLocationCreateInput!): WarehouseLocation!
  updateWarehouseLocation(data: WarehouseLocationUpdateInput!, where: WarehouseLocationWhereUniqueInput!): WarehouseLocation
  updateManyWarehouseLocations(data: WarehouseLocationUpdateManyMutationInput!, where: WarehouseLocationWhereInput): BatchPayload!
  upsertWarehouseLocation(where: WarehouseLocationWhereUniqueInput!, create: WarehouseLocationCreateInput!, update: WarehouseLocationUpdateInput!): WarehouseLocation!
  deleteWarehouseLocation(where: WarehouseLocationWhereUniqueInput!): WarehouseLocation
  deleteManyWarehouseLocations(where: WarehouseLocationWhereInput): BatchPayload!
  createWarehouseLocationConstraint(data: WarehouseLocationConstraintCreateInput!): WarehouseLocationConstraint!
  updateWarehouseLocationConstraint(data: WarehouseLocationConstraintUpdateInput!, where: WarehouseLocationConstraintWhereUniqueInput!): WarehouseLocationConstraint
  updateManyWarehouseLocationConstraints(data: WarehouseLocationConstraintUpdateManyMutationInput!, where: WarehouseLocationConstraintWhereInput): BatchPayload!
  upsertWarehouseLocationConstraint(where: WarehouseLocationConstraintWhereUniqueInput!, create: WarehouseLocationConstraintCreateInput!, update: WarehouseLocationConstraintUpdateInput!): WarehouseLocationConstraint!
  deleteWarehouseLocationConstraint(where: WarehouseLocationConstraintWhereUniqueInput!): WarehouseLocationConstraint
  deleteManyWarehouseLocationConstraints(where: WarehouseLocationConstraintWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

enum NotificationBarID {
  PastDueInvoice
  TestDismissable
  AuthorizedReminder
}

type Order {
  id: ID!
  externalID: ID
  customer: Customer!
  sentPackage: Package
  lineItems(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLineItem!]
  orderNumber: String!
  type: OrderType!
  status: OrderStatus!
  subTotal: Int
  total: Int
  cancelReason: OrderCancelReason
  couponID: String
  paymentStatus: OrderPaymentStatus!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OrderCancelReason {
  Customer
  Declined
  Fraud
  Inventory
  Other
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  externalID: ID
  customer: CustomerCreateOneInput!
  sentPackage: PackageCreateOneInput
  lineItems: OrderLineItemCreateManyInput
  orderNumber: String!
  type: OrderType!
  status: OrderStatus
  subTotal: Int
  total: Int
  cancelReason: OrderCancelReason
  couponID: String
  paymentStatus: OrderPaymentStatus
  note: String
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type OrderLineItem {
  id: ID!
  recordID: ID!
  recordType: OrderLineItemRecordType!
  needShipping: Boolean
  taxRate: Float
  taxName: String
  taxPercentage: Float
  taxPrice: Int
  price: Int!
  currencyCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderLineItemConnection {
  pageInfo: PageInfo!
  edges: [OrderLineItemEdge]!
  aggregate: AggregateOrderLineItem!
}

input OrderLineItemCreateInput {
  id: ID
  recordID: ID!
  recordType: OrderLineItemRecordType!
  needShipping: Boolean
  taxRate: Float
  taxName: String
  taxPercentage: Float
  taxPrice: Int
  price: Int!
  currencyCode: String!
}

input OrderLineItemCreateManyInput {
  create: [OrderLineItemCreateInput!]
  connect: [OrderLineItemWhereUniqueInput!]
}

type OrderLineItemEdge {
  node: OrderLineItem!
  cursor: String!
}

enum OrderLineItemOrderByInput {
  id_ASC
  id_DESC
  recordID_ASC
  recordID_DESC
  recordType_ASC
  recordType_DESC
  needShipping_ASC
  needShipping_DESC
  taxRate_ASC
  taxRate_DESC
  taxName_ASC
  taxName_DESC
  taxPercentage_ASC
  taxPercentage_DESC
  taxPrice_ASC
  taxPrice_DESC
  price_ASC
  price_DESC
  currencyCode_ASC
  currencyCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderLineItemPreviousValues {
  id: ID!
  recordID: ID!
  recordType: OrderLineItemRecordType!
  needShipping: Boolean
  taxRate: Float
  taxName: String
  taxPercentage: Float
  taxPrice: Int
  price: Int!
  currencyCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OrderLineItemRecordType {
  PhysicalProduct
  ProductVariant
  ExternalProduct
  Package
}

input OrderLineItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  recordID: ID
  recordID_not: ID
  recordID_in: [ID!]
  recordID_not_in: [ID!]
  recordID_lt: ID
  recordID_lte: ID
  recordID_gt: ID
  recordID_gte: ID
  recordID_contains: ID
  recordID_not_contains: ID
  recordID_starts_with: ID
  recordID_not_starts_with: ID
  recordID_ends_with: ID
  recordID_not_ends_with: ID
  recordType: OrderLineItemRecordType
  recordType_not: OrderLineItemRecordType
  recordType_in: [OrderLineItemRecordType!]
  recordType_not_in: [OrderLineItemRecordType!]
  needShipping: Boolean
  needShipping_not: Boolean
  taxRate: Float
  taxRate_not: Float
  taxRate_in: [Float!]
  taxRate_not_in: [Float!]
  taxRate_lt: Float
  taxRate_lte: Float
  taxRate_gt: Float
  taxRate_gte: Float
  taxName: String
  taxName_not: String
  taxName_in: [String!]
  taxName_not_in: [String!]
  taxName_lt: String
  taxName_lte: String
  taxName_gt: String
  taxName_gte: String
  taxName_contains: String
  taxName_not_contains: String
  taxName_starts_with: String
  taxName_not_starts_with: String
  taxName_ends_with: String
  taxName_not_ends_with: String
  taxPercentage: Float
  taxPercentage_not: Float
  taxPercentage_in: [Float!]
  taxPercentage_not_in: [Float!]
  taxPercentage_lt: Float
  taxPercentage_lte: Float
  taxPercentage_gt: Float
  taxPercentage_gte: Float
  taxPrice: Int
  taxPrice_not: Int
  taxPrice_in: [Int!]
  taxPrice_not_in: [Int!]
  taxPrice_lt: Int
  taxPrice_lte: Int
  taxPrice_gt: Int
  taxPrice_gte: Int
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  currencyCode: String
  currencyCode_not: String
  currencyCode_in: [String!]
  currencyCode_not_in: [String!]
  currencyCode_lt: String
  currencyCode_lte: String
  currencyCode_gt: String
  currencyCode_gte: String
  currencyCode_contains: String
  currencyCode_not_contains: String
  currencyCode_starts_with: String
  currencyCode_not_starts_with: String
  currencyCode_ends_with: String
  currencyCode_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderLineItemScalarWhereInput!]
  OR: [OrderLineItemScalarWhereInput!]
  NOT: [OrderLineItemScalarWhereInput!]
}

type OrderLineItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderLineItem
  updatedFields: [String!]
  previousValues: OrderLineItemPreviousValues
}

input OrderLineItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderLineItemWhereInput
  AND: [OrderLineItemSubscriptionWhereInput!]
  OR: [OrderLineItemSubscriptionWhereInput!]
  NOT: [OrderLineItemSubscriptionWhereInput!]
}

input OrderLineItemUpdateDataInput {
  recordID: ID
  recordType: OrderLineItemRecordType
  needShipping: Boolean
  taxRate: Float
  taxName: String
  taxPercentage: Float
  taxPrice: Int
  price: Int
  currencyCode: String
}

input OrderLineItemUpdateInput {
  recordID: ID
  recordType: OrderLineItemRecordType
  needShipping: Boolean
  taxRate: Float
  taxName: String
  taxPercentage: Float
  taxPrice: Int
  price: Int
  currencyCode: String
}

input OrderLineItemUpdateManyDataInput {
  recordID: ID
  recordType: OrderLineItemRecordType
  needShipping: Boolean
  taxRate: Float
  taxName: String
  taxPercentage: Float
  taxPrice: Int
  price: Int
  currencyCode: String
}

input OrderLineItemUpdateManyInput {
  create: [OrderLineItemCreateInput!]
  update: [OrderLineItemUpdateWithWhereUniqueNestedInput!]
  upsert: [OrderLineItemUpsertWithWhereUniqueNestedInput!]
  delete: [OrderLineItemWhereUniqueInput!]
  connect: [OrderLineItemWhereUniqueInput!]
  set: [OrderLineItemWhereUniqueInput!]
  disconnect: [OrderLineItemWhereUniqueInput!]
  deleteMany: [OrderLineItemScalarWhereInput!]
  updateMany: [OrderLineItemUpdateManyWithWhereNestedInput!]
}

input OrderLineItemUpdateManyMutationInput {
  recordID: ID
  recordType: OrderLineItemRecordType
  needShipping: Boolean
  taxRate: Float
  taxName: String
  taxPercentage: Float
  taxPrice: Int
  price: Int
  currencyCode: String
}

input OrderLineItemUpdateManyWithWhereNestedInput {
  where: OrderLineItemScalarWhereInput!
  data: OrderLineItemUpdateManyDataInput!
}

input OrderLineItemUpdateWithWhereUniqueNestedInput {
  where: OrderLineItemWhereUniqueInput!
  data: OrderLineItemUpdateDataInput!
}

input OrderLineItemUpsertWithWhereUniqueNestedInput {
  where: OrderLineItemWhereUniqueInput!
  update: OrderLineItemUpdateDataInput!
  create: OrderLineItemCreateInput!
}

input OrderLineItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  recordID: ID
  recordID_not: ID
  recordID_in: [ID!]
  recordID_not_in: [ID!]
  recordID_lt: ID
  recordID_lte: ID
  recordID_gt: ID
  recordID_gte: ID
  recordID_contains: ID
  recordID_not_contains: ID
  recordID_starts_with: ID
  recordID_not_starts_with: ID
  recordID_ends_with: ID
  recordID_not_ends_with: ID
  recordType: OrderLineItemRecordType
  recordType_not: OrderLineItemRecordType
  recordType_in: [OrderLineItemRecordType!]
  recordType_not_in: [OrderLineItemRecordType!]
  needShipping: Boolean
  needShipping_not: Boolean
  taxRate: Float
  taxRate_not: Float
  taxRate_in: [Float!]
  taxRate_not_in: [Float!]
  taxRate_lt: Float
  taxRate_lte: Float
  taxRate_gt: Float
  taxRate_gte: Float
  taxName: String
  taxName_not: String
  taxName_in: [String!]
  taxName_not_in: [String!]
  taxName_lt: String
  taxName_lte: String
  taxName_gt: String
  taxName_gte: String
  taxName_contains: String
  taxName_not_contains: String
  taxName_starts_with: String
  taxName_not_starts_with: String
  taxName_ends_with: String
  taxName_not_ends_with: String
  taxPercentage: Float
  taxPercentage_not: Float
  taxPercentage_in: [Float!]
  taxPercentage_not_in: [Float!]
  taxPercentage_lt: Float
  taxPercentage_lte: Float
  taxPercentage_gt: Float
  taxPercentage_gte: Float
  taxPrice: Int
  taxPrice_not: Int
  taxPrice_in: [Int!]
  taxPrice_not_in: [Int!]
  taxPrice_lt: Int
  taxPrice_lte: Int
  taxPrice_gt: Int
  taxPrice_gte: Int
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  currencyCode: String
  currencyCode_not: String
  currencyCode_in: [String!]
  currencyCode_not_in: [String!]
  currencyCode_lt: String
  currencyCode_lte: String
  currencyCode_gt: String
  currencyCode_gte: String
  currencyCode_contains: String
  currencyCode_not_contains: String
  currencyCode_starts_with: String
  currencyCode_not_starts_with: String
  currencyCode_ends_with: String
  currencyCode_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderLineItemWhereInput!]
  OR: [OrderLineItemWhereInput!]
  NOT: [OrderLineItemWhereInput!]
}

input OrderLineItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  externalID_ASC
  externalID_DESC
  orderNumber_ASC
  orderNumber_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  subTotal_ASC
  subTotal_DESC
  total_ASC
  total_DESC
  cancelReason_ASC
  cancelReason_DESC
  couponID_ASC
  couponID_DESC
  paymentStatus_ASC
  paymentStatus_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum OrderPaymentStatus {
  Paid
  PartiallyPaid
  Refunded
  NotPaid
}

type OrderPreviousValues {
  id: ID!
  externalID: ID
  orderNumber: String!
  type: OrderType!
  status: OrderStatus!
  subTotal: Int
  total: Int
  cancelReason: OrderCancelReason
  couponID: String
  paymentStatus: OrderPaymentStatus!
  note: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OrderStatus {
  Drafted
  Submitted
  Fulfilled
  Returned
  Cancelled
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

enum OrderType {
  Used
  New
}

input OrderUpdateInput {
  externalID: ID
  customer: CustomerUpdateOneRequiredInput
  sentPackage: PackageUpdateOneInput
  lineItems: OrderLineItemUpdateManyInput
  orderNumber: String
  type: OrderType
  status: OrderStatus
  subTotal: Int
  total: Int
  cancelReason: OrderCancelReason
  couponID: String
  paymentStatus: OrderPaymentStatus
  note: String
}

input OrderUpdateManyMutationInput {
  externalID: ID
  orderNumber: String
  type: OrderType
  status: OrderStatus
  subTotal: Int
  total: Int
  cancelReason: OrderCancelReason
  couponID: String
  paymentStatus: OrderPaymentStatus
  note: String
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  externalID: ID
  externalID_not: ID
  externalID_in: [ID!]
  externalID_not_in: [ID!]
  externalID_lt: ID
  externalID_lte: ID
  externalID_gt: ID
  externalID_gte: ID
  externalID_contains: ID
  externalID_not_contains: ID
  externalID_starts_with: ID
  externalID_not_starts_with: ID
  externalID_ends_with: ID
  externalID_not_ends_with: ID
  customer: CustomerWhereInput
  sentPackage: PackageWhereInput
  lineItems_every: OrderLineItemWhereInput
  lineItems_some: OrderLineItemWhereInput
  lineItems_none: OrderLineItemWhereInput
  orderNumber: String
  orderNumber_not: String
  orderNumber_in: [String!]
  orderNumber_not_in: [String!]
  orderNumber_lt: String
  orderNumber_lte: String
  orderNumber_gt: String
  orderNumber_gte: String
  orderNumber_contains: String
  orderNumber_not_contains: String
  orderNumber_starts_with: String
  orderNumber_not_starts_with: String
  orderNumber_ends_with: String
  orderNumber_not_ends_with: String
  type: OrderType
  type_not: OrderType
  type_in: [OrderType!]
  type_not_in: [OrderType!]
  status: OrderStatus
  status_not: OrderStatus
  status_in: [OrderStatus!]
  status_not_in: [OrderStatus!]
  subTotal: Int
  subTotal_not: Int
  subTotal_in: [Int!]
  subTotal_not_in: [Int!]
  subTotal_lt: Int
  subTotal_lte: Int
  subTotal_gt: Int
  subTotal_gte: Int
  total: Int
  total_not: Int
  total_in: [Int!]
  total_not_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  cancelReason: OrderCancelReason
  cancelReason_not: OrderCancelReason
  cancelReason_in: [OrderCancelReason!]
  cancelReason_not_in: [OrderCancelReason!]
  couponID: String
  couponID_not: String
  couponID_in: [String!]
  couponID_not_in: [String!]
  couponID_lt: String
  couponID_lte: String
  couponID_gt: String
  couponID_gte: String
  couponID_contains: String
  couponID_not_contains: String
  couponID_starts_with: String
  couponID_not_starts_with: String
  couponID_ends_with: String
  couponID_not_ends_with: String
  paymentStatus: OrderPaymentStatus
  paymentStatus_not: OrderPaymentStatus
  paymentStatus_in: [OrderPaymentStatus!]
  paymentStatus_not_in: [OrderPaymentStatus!]
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
  orderNumber: String
}

type Package {
  id: ID!
  items(where: PhysicalProductWhereInput, orderBy: PhysicalProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProduct!]
  transactionID: String!
  shippingLabel: Label!
  fromAddress: Location!
  toAddress: Location!
  weight: Float
  cost: Int
  events(where: PackageTransitEventWhereInput, orderBy: PackageTransitEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PackageTransitEvent!]
  status: PackageStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PackageConnection {
  pageInfo: PageInfo!
  edges: [PackageEdge]!
  aggregate: AggregatePackage!
}

input PackageCreateInput {
  id: ID
  items: PhysicalProductCreateManyInput
  transactionID: String!
  shippingLabel: LabelCreateOneInput!
  fromAddress: LocationCreateOneInput!
  toAddress: LocationCreateOneInput!
  weight: Float
  cost: Int
  events: PackageTransitEventCreateManyWithoutPackageInput
  status: PackageStatus
}

input PackageCreateOneInput {
  create: PackageCreateInput
  connect: PackageWhereUniqueInput
}

input PackageCreateOneWithoutEventsInput {
  create: PackageCreateWithoutEventsInput
  connect: PackageWhereUniqueInput
}

input PackageCreateWithoutEventsInput {
  id: ID
  items: PhysicalProductCreateManyInput
  transactionID: String!
  shippingLabel: LabelCreateOneInput!
  fromAddress: LocationCreateOneInput!
  toAddress: LocationCreateOneInput!
  weight: Float
  cost: Int
  status: PackageStatus
}

type PackageEdge {
  node: Package!
  cursor: String!
}

enum PackageOrderByInput {
  id_ASC
  id_DESC
  transactionID_ASC
  transactionID_DESC
  weight_ASC
  weight_DESC
  cost_ASC
  cost_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PackagePreviousValues {
  id: ID!
  transactionID: String!
  weight: Float
  cost: Int
  status: PackageStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum PackageStatus {
  Queued
  Shipped
  Delivered
  Blocked
  Received
  Cancelled
}

type PackageSubscriptionPayload {
  mutation: MutationType!
  node: Package
  updatedFields: [String!]
  previousValues: PackagePreviousValues
}

input PackageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PackageWhereInput
  AND: [PackageSubscriptionWhereInput!]
  OR: [PackageSubscriptionWhereInput!]
  NOT: [PackageSubscriptionWhereInput!]
}

type PackageTransitEvent {
  id: ID!
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  package: Package!
  reservation: Reservation
  data: Json!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PackageTransitEventConnection {
  pageInfo: PageInfo!
  edges: [PackageTransitEventEdge]!
  aggregate: AggregatePackageTransitEvent!
}

input PackageTransitEventCreateInput {
  id: ID
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  package: PackageCreateOneWithoutEventsInput!
  reservation: ReservationCreateOneWithoutPackageEventsInput
  data: Json!
}

input PackageTransitEventCreateManyWithoutPackageInput {
  create: [PackageTransitEventCreateWithoutPackageInput!]
  connect: [PackageTransitEventWhereUniqueInput!]
}

input PackageTransitEventCreateManyWithoutReservationInput {
  create: [PackageTransitEventCreateWithoutReservationInput!]
  connect: [PackageTransitEventWhereUniqueInput!]
}

input PackageTransitEventCreateWithoutPackageInput {
  id: ID
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  reservation: ReservationCreateOneWithoutPackageEventsInput
  data: Json!
}

input PackageTransitEventCreateWithoutReservationInput {
  id: ID
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  package: PackageCreateOneWithoutEventsInput!
  data: Json!
}

type PackageTransitEventEdge {
  node: PackageTransitEvent!
  cursor: String!
}

enum PackageTransitEventOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  subStatus_ASC
  subStatus_DESC
  data_ASC
  data_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PackageTransitEventPreviousValues {
  id: ID!
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  data: Json!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PackageTransitEventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: PackageTransitEventStatus
  status_not: PackageTransitEventStatus
  status_in: [PackageTransitEventStatus!]
  status_not_in: [PackageTransitEventStatus!]
  subStatus: PackageTransitEventSubStatus
  subStatus_not: PackageTransitEventSubStatus
  subStatus_in: [PackageTransitEventSubStatus!]
  subStatus_not_in: [PackageTransitEventSubStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PackageTransitEventScalarWhereInput!]
  OR: [PackageTransitEventScalarWhereInput!]
  NOT: [PackageTransitEventScalarWhereInput!]
}

enum PackageTransitEventStatus {
  Delivered
  Failure
  PreTransit
  Returned
  Transit
  Unknown
}

type PackageTransitEventSubscriptionPayload {
  mutation: MutationType!
  node: PackageTransitEvent
  updatedFields: [String!]
  previousValues: PackageTransitEventPreviousValues
}

input PackageTransitEventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PackageTransitEventWhereInput
  AND: [PackageTransitEventSubscriptionWhereInput!]
  OR: [PackageTransitEventSubscriptionWhereInput!]
  NOT: [PackageTransitEventSubscriptionWhereInput!]
}

enum PackageTransitEventSubStatus {
  AddressIssue
  ContactCarrier
  Delayed
  Delivered
  DeliveryAttempted
  DeliveryRescheduled
  DeliveryScheduled
  InformationReceived
  LocationInaccessible
  NoticeLeft
  Other
  OutForDelivery
  PackageAccepted
  PackageArrived
  PackageDamaged
  PackageDeparted
  PackageDisposed
  PackageForwarded
  PackageHeld
  PackageLost
  PackageProcessed
  PackageProcessing
  PackageUnclaimed
  PackageUndeliverable
  PickupAvailable
  RescheduleDelivery
  ReturnToSender
}

input PackageTransitEventUpdateInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  package: PackageUpdateOneRequiredWithoutEventsInput
  reservation: ReservationUpdateOneWithoutPackageEventsInput
  data: Json
}

input PackageTransitEventUpdateManyDataInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  data: Json
}

input PackageTransitEventUpdateManyMutationInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  data: Json
}

input PackageTransitEventUpdateManyWithoutPackageInput {
  create: [PackageTransitEventCreateWithoutPackageInput!]
  delete: [PackageTransitEventWhereUniqueInput!]
  connect: [PackageTransitEventWhereUniqueInput!]
  set: [PackageTransitEventWhereUniqueInput!]
  disconnect: [PackageTransitEventWhereUniqueInput!]
  update: [PackageTransitEventUpdateWithWhereUniqueWithoutPackageInput!]
  upsert: [PackageTransitEventUpsertWithWhereUniqueWithoutPackageInput!]
  deleteMany: [PackageTransitEventScalarWhereInput!]
  updateMany: [PackageTransitEventUpdateManyWithWhereNestedInput!]
}

input PackageTransitEventUpdateManyWithoutReservationInput {
  create: [PackageTransitEventCreateWithoutReservationInput!]
  delete: [PackageTransitEventWhereUniqueInput!]
  connect: [PackageTransitEventWhereUniqueInput!]
  set: [PackageTransitEventWhereUniqueInput!]
  disconnect: [PackageTransitEventWhereUniqueInput!]
  update: [PackageTransitEventUpdateWithWhereUniqueWithoutReservationInput!]
  upsert: [PackageTransitEventUpsertWithWhereUniqueWithoutReservationInput!]
  deleteMany: [PackageTransitEventScalarWhereInput!]
  updateMany: [PackageTransitEventUpdateManyWithWhereNestedInput!]
}

input PackageTransitEventUpdateManyWithWhereNestedInput {
  where: PackageTransitEventScalarWhereInput!
  data: PackageTransitEventUpdateManyDataInput!
}

input PackageTransitEventUpdateWithoutPackageDataInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  reservation: ReservationUpdateOneWithoutPackageEventsInput
  data: Json
}

input PackageTransitEventUpdateWithoutReservationDataInput {
  status: PackageTransitEventStatus
  subStatus: PackageTransitEventSubStatus
  package: PackageUpdateOneRequiredWithoutEventsInput
  data: Json
}

input PackageTransitEventUpdateWithWhereUniqueWithoutPackageInput {
  where: PackageTransitEventWhereUniqueInput!
  data: PackageTransitEventUpdateWithoutPackageDataInput!
}

input PackageTransitEventUpdateWithWhereUniqueWithoutReservationInput {
  where: PackageTransitEventWhereUniqueInput!
  data: PackageTransitEventUpdateWithoutReservationDataInput!
}

input PackageTransitEventUpsertWithWhereUniqueWithoutPackageInput {
  where: PackageTransitEventWhereUniqueInput!
  update: PackageTransitEventUpdateWithoutPackageDataInput!
  create: PackageTransitEventCreateWithoutPackageInput!
}

input PackageTransitEventUpsertWithWhereUniqueWithoutReservationInput {
  where: PackageTransitEventWhereUniqueInput!
  update: PackageTransitEventUpdateWithoutReservationDataInput!
  create: PackageTransitEventCreateWithoutReservationInput!
}

input PackageTransitEventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: PackageTransitEventStatus
  status_not: PackageTransitEventStatus
  status_in: [PackageTransitEventStatus!]
  status_not_in: [PackageTransitEventStatus!]
  subStatus: PackageTransitEventSubStatus
  subStatus_not: PackageTransitEventSubStatus
  subStatus_in: [PackageTransitEventSubStatus!]
  subStatus_not_in: [PackageTransitEventSubStatus!]
  package: PackageWhereInput
  reservation: ReservationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PackageTransitEventWhereInput!]
  OR: [PackageTransitEventWhereInput!]
  NOT: [PackageTransitEventWhereInput!]
}

input PackageTransitEventWhereUniqueInput {
  id: ID
}

input PackageUpdateDataInput {
  items: PhysicalProductUpdateManyInput
  transactionID: String
  shippingLabel: LabelUpdateOneRequiredInput
  fromAddress: LocationUpdateOneRequiredInput
  toAddress: LocationUpdateOneRequiredInput
  weight: Float
  cost: Int
  events: PackageTransitEventUpdateManyWithoutPackageInput
  status: PackageStatus
}

input PackageUpdateInput {
  items: PhysicalProductUpdateManyInput
  transactionID: String
  shippingLabel: LabelUpdateOneRequiredInput
  fromAddress: LocationUpdateOneRequiredInput
  toAddress: LocationUpdateOneRequiredInput
  weight: Float
  cost: Int
  events: PackageTransitEventUpdateManyWithoutPackageInput
  status: PackageStatus
}

input PackageUpdateManyMutationInput {
  transactionID: String
  weight: Float
  cost: Int
  status: PackageStatus
}

input PackageUpdateOneInput {
  create: PackageCreateInput
  update: PackageUpdateDataInput
  upsert: PackageUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PackageWhereUniqueInput
}

input PackageUpdateOneRequiredWithoutEventsInput {
  create: PackageCreateWithoutEventsInput
  update: PackageUpdateWithoutEventsDataInput
  upsert: PackageUpsertWithoutEventsInput
  connect: PackageWhereUniqueInput
}

input PackageUpdateWithoutEventsDataInput {
  items: PhysicalProductUpdateManyInput
  transactionID: String
  shippingLabel: LabelUpdateOneRequiredInput
  fromAddress: LocationUpdateOneRequiredInput
  toAddress: LocationUpdateOneRequiredInput
  weight: Float
  cost: Int
  status: PackageStatus
}

input PackageUpsertNestedInput {
  update: PackageUpdateDataInput!
  create: PackageCreateInput!
}

input PackageUpsertWithoutEventsInput {
  update: PackageUpdateWithoutEventsDataInput!
  create: PackageCreateWithoutEventsInput!
}

input PackageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  items_every: PhysicalProductWhereInput
  items_some: PhysicalProductWhereInput
  items_none: PhysicalProductWhereInput
  transactionID: String
  transactionID_not: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_lt: String
  transactionID_lte: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_starts_with: String
  transactionID_not_starts_with: String
  transactionID_ends_with: String
  transactionID_not_ends_with: String
  shippingLabel: LabelWhereInput
  fromAddress: LocationWhereInput
  toAddress: LocationWhereInput
  weight: Float
  weight_not: Float
  weight_in: [Float!]
  weight_not_in: [Float!]
  weight_lt: Float
  weight_lte: Float
  weight_gt: Float
  weight_gte: Float
  cost: Int
  cost_not: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  cost_lt: Int
  cost_lte: Int
  cost_gt: Int
  cost_gte: Int
  events_every: PackageTransitEventWhereInput
  events_some: PackageTransitEventWhereInput
  events_none: PackageTransitEventWhereInput
  status: PackageStatus
  status_not: PackageStatus
  status_in: [PackageStatus!]
  status_not_in: [PackageStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PackageWhereInput!]
  OR: [PackageWhereInput!]
  NOT: [PackageWhereInput!]
}

input PackageWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PauseRequest {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pausePending: Boolean!
  pauseType: PauseType!
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean!
  membership: CustomerMembership!
}

type PauseRequestConnection {
  pageInfo: PageInfo!
  edges: [PauseRequestEdge]!
  aggregate: AggregatePauseRequest!
}

input PauseRequestCreateInput {
  id: ID
  pausePending: Boolean!
  pauseType: PauseType
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
  membership: CustomerMembershipCreateOneWithoutPauseRequestsInput!
}

input PauseRequestCreateManyWithoutMembershipInput {
  create: [PauseRequestCreateWithoutMembershipInput!]
  connect: [PauseRequestWhereUniqueInput!]
}

input PauseRequestCreateWithoutMembershipInput {
  id: ID
  pausePending: Boolean!
  pauseType: PauseType
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
}

type PauseRequestEdge {
  node: PauseRequest!
  cursor: String!
}

enum PauseRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  pausePending_ASC
  pausePending_DESC
  pauseType_ASC
  pauseType_DESC
  pauseDate_ASC
  pauseDate_DESC
  resumeDate_ASC
  resumeDate_DESC
  notified_ASC
  notified_DESC
}

type PauseRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pausePending: Boolean!
  pauseType: PauseType!
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean!
}

input PauseRequestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  pausePending: Boolean
  pausePending_not: Boolean
  pauseType: PauseType
  pauseType_not: PauseType
  pauseType_in: [PauseType!]
  pauseType_not_in: [PauseType!]
  pauseDate: DateTime
  pauseDate_not: DateTime
  pauseDate_in: [DateTime!]
  pauseDate_not_in: [DateTime!]
  pauseDate_lt: DateTime
  pauseDate_lte: DateTime
  pauseDate_gt: DateTime
  pauseDate_gte: DateTime
  resumeDate: DateTime
  resumeDate_not: DateTime
  resumeDate_in: [DateTime!]
  resumeDate_not_in: [DateTime!]
  resumeDate_lt: DateTime
  resumeDate_lte: DateTime
  resumeDate_gt: DateTime
  resumeDate_gte: DateTime
  notified: Boolean
  notified_not: Boolean
  AND: [PauseRequestScalarWhereInput!]
  OR: [PauseRequestScalarWhereInput!]
  NOT: [PauseRequestScalarWhereInput!]
}

type PauseRequestSubscriptionPayload {
  mutation: MutationType!
  node: PauseRequest
  updatedFields: [String!]
  previousValues: PauseRequestPreviousValues
}

input PauseRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PauseRequestWhereInput
  AND: [PauseRequestSubscriptionWhereInput!]
  OR: [PauseRequestSubscriptionWhereInput!]
  NOT: [PauseRequestSubscriptionWhereInput!]
}

input PauseRequestUpdateInput {
  pausePending: Boolean
  pauseType: PauseType
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
  membership: CustomerMembershipUpdateOneRequiredWithoutPauseRequestsInput
}

input PauseRequestUpdateManyDataInput {
  pausePending: Boolean
  pauseType: PauseType
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
}

input PauseRequestUpdateManyMutationInput {
  pausePending: Boolean
  pauseType: PauseType
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
}

input PauseRequestUpdateManyWithoutMembershipInput {
  create: [PauseRequestCreateWithoutMembershipInput!]
  delete: [PauseRequestWhereUniqueInput!]
  connect: [PauseRequestWhereUniqueInput!]
  set: [PauseRequestWhereUniqueInput!]
  disconnect: [PauseRequestWhereUniqueInput!]
  update: [PauseRequestUpdateWithWhereUniqueWithoutMembershipInput!]
  upsert: [PauseRequestUpsertWithWhereUniqueWithoutMembershipInput!]
  deleteMany: [PauseRequestScalarWhereInput!]
  updateMany: [PauseRequestUpdateManyWithWhereNestedInput!]
}

input PauseRequestUpdateManyWithWhereNestedInput {
  where: PauseRequestScalarWhereInput!
  data: PauseRequestUpdateManyDataInput!
}

input PauseRequestUpdateWithoutMembershipDataInput {
  pausePending: Boolean
  pauseType: PauseType
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean
}

input PauseRequestUpdateWithWhereUniqueWithoutMembershipInput {
  where: PauseRequestWhereUniqueInput!
  data: PauseRequestUpdateWithoutMembershipDataInput!
}

input PauseRequestUpsertWithWhereUniqueWithoutMembershipInput {
  where: PauseRequestWhereUniqueInput!
  update: PauseRequestUpdateWithoutMembershipDataInput!
  create: PauseRequestCreateWithoutMembershipInput!
}

input PauseRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  pausePending: Boolean
  pausePending_not: Boolean
  pauseType: PauseType
  pauseType_not: PauseType
  pauseType_in: [PauseType!]
  pauseType_not_in: [PauseType!]
  pauseDate: DateTime
  pauseDate_not: DateTime
  pauseDate_in: [DateTime!]
  pauseDate_not_in: [DateTime!]
  pauseDate_lt: DateTime
  pauseDate_lte: DateTime
  pauseDate_gt: DateTime
  pauseDate_gte: DateTime
  resumeDate: DateTime
  resumeDate_not: DateTime
  resumeDate_in: [DateTime!]
  resumeDate_not_in: [DateTime!]
  resumeDate_lt: DateTime
  resumeDate_lte: DateTime
  resumeDate_gt: DateTime
  resumeDate_gte: DateTime
  notified: Boolean
  notified_not: Boolean
  membership: CustomerMembershipWhereInput
  AND: [PauseRequestWhereInput!]
  OR: [PauseRequestWhereInput!]
  NOT: [PauseRequestWhereInput!]
}

input PauseRequestWhereUniqueInput {
  id: ID
}

enum PauseType {
  WithItems
  WithoutItems
}

type PaymentPlan {
  id: ID!
  description: String
  planID: String!
  status: String
  name: String
  price: Int
  itemCount: Int
  tagline: String
  tier: PaymentPlanTier
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentPlanConnection {
  pageInfo: PageInfo!
  edges: [PaymentPlanEdge]!
  aggregate: AggregatePaymentPlan!
}

input PaymentPlanCreateInput {
  id: ID
  description: String
  planID: String!
  status: String
  name: String
  price: Int
  itemCount: Int
  tagline: String
  tier: PaymentPlanTier
}

input PaymentPlanCreateOneInput {
  create: PaymentPlanCreateInput
  connect: PaymentPlanWhereUniqueInput
}

type PaymentPlanEdge {
  node: PaymentPlan!
  cursor: String!
}

enum PaymentPlanOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  planID_ASC
  planID_DESC
  status_ASC
  status_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  itemCount_ASC
  itemCount_DESC
  tagline_ASC
  tagline_DESC
  tier_ASC
  tier_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentPlanPreviousValues {
  id: ID!
  description: String
  planID: String!
  status: String
  name: String
  price: Int
  itemCount: Int
  tagline: String
  tier: PaymentPlanTier
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentPlanSubscriptionPayload {
  mutation: MutationType!
  node: PaymentPlan
  updatedFields: [String!]
  previousValues: PaymentPlanPreviousValues
}

input PaymentPlanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentPlanWhereInput
  AND: [PaymentPlanSubscriptionWhereInput!]
  OR: [PaymentPlanSubscriptionWhereInput!]
  NOT: [PaymentPlanSubscriptionWhereInput!]
}

enum PaymentPlanTier {
  Essential
  AllAccess
  Pause
}

input PaymentPlanUpdateDataInput {
  description: String
  planID: String
  status: String
  name: String
  price: Int
  itemCount: Int
  tagline: String
  tier: PaymentPlanTier
}

input PaymentPlanUpdateInput {
  description: String
  planID: String
  status: String
  name: String
  price: Int
  itemCount: Int
  tagline: String
  tier: PaymentPlanTier
}

input PaymentPlanUpdateManyMutationInput {
  description: String
  planID: String
  status: String
  name: String
  price: Int
  itemCount: Int
  tagline: String
  tier: PaymentPlanTier
}

input PaymentPlanUpdateOneInput {
  create: PaymentPlanCreateInput
  update: PaymentPlanUpdateDataInput
  upsert: PaymentPlanUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PaymentPlanWhereUniqueInput
}

input PaymentPlanUpsertNestedInput {
  update: PaymentPlanUpdateDataInput!
  create: PaymentPlanCreateInput!
}

input PaymentPlanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  planID: String
  planID_not: String
  planID_in: [String!]
  planID_not_in: [String!]
  planID_lt: String
  planID_lte: String
  planID_gt: String
  planID_gte: String
  planID_contains: String
  planID_not_contains: String
  planID_starts_with: String
  planID_not_starts_with: String
  planID_ends_with: String
  planID_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  itemCount: Int
  itemCount_not: Int
  itemCount_in: [Int!]
  itemCount_not_in: [Int!]
  itemCount_lt: Int
  itemCount_lte: Int
  itemCount_gt: Int
  itemCount_gte: Int
  tagline: String
  tagline_not: String
  tagline_in: [String!]
  tagline_not_in: [String!]
  tagline_lt: String
  tagline_lte: String
  tagline_gt: String
  tagline_gte: String
  tagline_contains: String
  tagline_not_contains: String
  tagline_starts_with: String
  tagline_not_starts_with: String
  tagline_ends_with: String
  tagline_not_ends_with: String
  tier: PaymentPlanTier
  tier_not: PaymentPlanTier
  tier_in: [PaymentPlanTier!]
  tier_not_in: [PaymentPlanTier!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PaymentPlanWhereInput!]
  OR: [PaymentPlanWhereInput!]
  NOT: [PaymentPlanWhereInput!]
}

input PaymentPlanWhereUniqueInput {
  id: ID
  planID: String
}

enum PhotographyStatus {
  Done
  InProgress
  ReadyForEditing
  ReadyToShoot
  Steam
}

type PhysicalProduct {
  id: ID!
  seasonsUID: String!
  location: Location
  productVariant: ProductVariant!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  warehouseLocation: WarehouseLocation
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPrice
  reports(where: PhysicalProductQualityReportWhereInput, orderBy: PhysicalProductQualityReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProductQualityReport!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhysicalProductConnection {
  pageInfo: PageInfo!
  edges: [PhysicalProductEdge]!
  aggregate: AggregatePhysicalProduct!
}

input PhysicalProductCreateInput {
  id: ID
  seasonsUID: String!
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceCreateOneInput
  reports: PhysicalProductQualityReportCreateManyWithoutPhysicalProductInput
}

input PhysicalProductCreateManyInput {
  create: [PhysicalProductCreateInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutLocationInput {
  create: [PhysicalProductCreateWithoutLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutProductVariantInput {
  create: [PhysicalProductCreateWithoutProductVariantInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateManyWithoutWarehouseLocationInput {
  create: [PhysicalProductCreateWithoutWarehouseLocationInput!]
  connect: [PhysicalProductWhereUniqueInput!]
}

input PhysicalProductCreateOneInput {
  create: PhysicalProductCreateInput
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductCreateOneWithoutReportsInput {
  create: PhysicalProductCreateWithoutReportsInput
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductCreateWithoutLocationInput {
  id: ID
  seasonsUID: String!
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceCreateOneInput
  reports: PhysicalProductQualityReportCreateManyWithoutPhysicalProductInput
}

input PhysicalProductCreateWithoutProductVariantInput {
  id: ID
  seasonsUID: String!
  location: LocationCreateOneWithoutPhysicalProductsInput
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceCreateOneInput
  reports: PhysicalProductQualityReportCreateManyWithoutPhysicalProductInput
}

input PhysicalProductCreateWithoutReportsInput {
  id: ID
  seasonsUID: String!
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  warehouseLocation: WarehouseLocationCreateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceCreateOneInput
}

input PhysicalProductCreateWithoutWarehouseLocationInput {
  id: ID
  seasonsUID: String!
  location: LocationCreateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantCreateOneWithoutPhysicalProductsInput!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceCreateOneInput
  reports: PhysicalProductQualityReportCreateManyWithoutPhysicalProductInput
}

enum PhysicalProductDamageType {
  BarcodeMissing
  ButtonMissing
  Stain
  Smell
  Tear
  Other
}

type PhysicalProductEdge {
  node: PhysicalProduct!
  cursor: String!
}

enum PhysicalProductOffloadMethod {
  SoldToUser
  SoldToThirdParty
  ReturnedToVendor
  Recycled
  Unknown
}

enum PhysicalProductOrderByInput {
  id_ASC
  id_DESC
  seasonsUID_ASC
  seasonsUID_DESC
  inventoryStatus_ASC
  inventoryStatus_DESC
  productStatus_ASC
  productStatus_DESC
  offloadMethod_ASC
  offloadMethod_DESC
  offloadNotes_ASC
  offloadNotes_DESC
  sequenceNumber_ASC
  sequenceNumber_DESC
  barcoded_ASC
  barcoded_DESC
  dateOrdered_ASC
  dateOrdered_DESC
  dateReceived_ASC
  dateReceived_DESC
  unitCost_ASC
  unitCost_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhysicalProductPreviousValues {
  id: ID!
  seasonsUID: String!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhysicalProductPrice {
  id: ID!
  buyUsedEnabled: Boolean!
  buyUsedPrice: Float
}

type PhysicalProductPriceConnection {
  pageInfo: PageInfo!
  edges: [PhysicalProductPriceEdge]!
  aggregate: AggregatePhysicalProductPrice!
}

input PhysicalProductPriceCreateInput {
  id: ID
  buyUsedEnabled: Boolean
  buyUsedPrice: Float
}

input PhysicalProductPriceCreateOneInput {
  create: PhysicalProductPriceCreateInput
  connect: PhysicalProductPriceWhereUniqueInput
}

type PhysicalProductPriceEdge {
  node: PhysicalProductPrice!
  cursor: String!
}

enum PhysicalProductPriceOrderByInput {
  id_ASC
  id_DESC
  buyUsedEnabled_ASC
  buyUsedEnabled_DESC
  buyUsedPrice_ASC
  buyUsedPrice_DESC
}

type PhysicalProductPricePreviousValues {
  id: ID!
  buyUsedEnabled: Boolean!
  buyUsedPrice: Float
}

type PhysicalProductPriceSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalProductPrice
  updatedFields: [String!]
  previousValues: PhysicalProductPricePreviousValues
}

input PhysicalProductPriceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PhysicalProductPriceWhereInput
  AND: [PhysicalProductPriceSubscriptionWhereInput!]
  OR: [PhysicalProductPriceSubscriptionWhereInput!]
  NOT: [PhysicalProductPriceSubscriptionWhereInput!]
}

input PhysicalProductPriceUpdateDataInput {
  buyUsedEnabled: Boolean
  buyUsedPrice: Float
}

input PhysicalProductPriceUpdateInput {
  buyUsedEnabled: Boolean
  buyUsedPrice: Float
}

input PhysicalProductPriceUpdateManyMutationInput {
  buyUsedEnabled: Boolean
  buyUsedPrice: Float
}

input PhysicalProductPriceUpdateOneInput {
  create: PhysicalProductPriceCreateInput
  update: PhysicalProductPriceUpdateDataInput
  upsert: PhysicalProductPriceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PhysicalProductPriceWhereUniqueInput
}

input PhysicalProductPriceUpsertNestedInput {
  update: PhysicalProductPriceUpdateDataInput!
  create: PhysicalProductPriceCreateInput!
}

input PhysicalProductPriceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  buyUsedEnabled: Boolean
  buyUsedEnabled_not: Boolean
  buyUsedPrice: Float
  buyUsedPrice_not: Float
  buyUsedPrice_in: [Float!]
  buyUsedPrice_not_in: [Float!]
  buyUsedPrice_lt: Float
  buyUsedPrice_lte: Float
  buyUsedPrice_gt: Float
  buyUsedPrice_gte: Float
  AND: [PhysicalProductPriceWhereInput!]
  OR: [PhysicalProductPriceWhereInput!]
  NOT: [PhysicalProductPriceWhereInput!]
}

input PhysicalProductPriceWhereUniqueInput {
  id: ID
}

type PhysicalProductQualityReport {
  id: ID!
  user: User!
  damageType: PhysicalProductDamageType
  damageTypes: [PhysicalProductDamageType!]!
  notes: String
  physicalProduct: PhysicalProduct!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhysicalProductQualityReportConnection {
  pageInfo: PageInfo!
  edges: [PhysicalProductQualityReportEdge]!
  aggregate: AggregatePhysicalProductQualityReport!
}

input PhysicalProductQualityReportCreatedamageTypesInput {
  set: [PhysicalProductDamageType!]
}

input PhysicalProductQualityReportCreateInput {
  id: ID
  user: UserCreateOneInput!
  damageType: PhysicalProductDamageType
  damageTypes: PhysicalProductQualityReportCreatedamageTypesInput
  notes: String
  physicalProduct: PhysicalProductCreateOneWithoutReportsInput!
}

input PhysicalProductQualityReportCreateManyWithoutPhysicalProductInput {
  create: [PhysicalProductQualityReportCreateWithoutPhysicalProductInput!]
  connect: [PhysicalProductQualityReportWhereUniqueInput!]
}

input PhysicalProductQualityReportCreateWithoutPhysicalProductInput {
  id: ID
  user: UserCreateOneInput!
  damageType: PhysicalProductDamageType
  damageTypes: PhysicalProductQualityReportCreatedamageTypesInput
  notes: String
}

type PhysicalProductQualityReportEdge {
  node: PhysicalProductQualityReport!
  cursor: String!
}

enum PhysicalProductQualityReportOrderByInput {
  id_ASC
  id_DESC
  damageType_ASC
  damageType_DESC
  notes_ASC
  notes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhysicalProductQualityReportPreviousValues {
  id: ID!
  damageType: PhysicalProductDamageType
  damageTypes: [PhysicalProductDamageType!]!
  notes: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhysicalProductQualityReportScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  damageType: PhysicalProductDamageType
  damageType_not: PhysicalProductDamageType
  damageType_in: [PhysicalProductDamageType!]
  damageType_not_in: [PhysicalProductDamageType!]
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PhysicalProductQualityReportScalarWhereInput!]
  OR: [PhysicalProductQualityReportScalarWhereInput!]
  NOT: [PhysicalProductQualityReportScalarWhereInput!]
}

type PhysicalProductQualityReportSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalProductQualityReport
  updatedFields: [String!]
  previousValues: PhysicalProductQualityReportPreviousValues
}

input PhysicalProductQualityReportSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PhysicalProductQualityReportWhereInput
  AND: [PhysicalProductQualityReportSubscriptionWhereInput!]
  OR: [PhysicalProductQualityReportSubscriptionWhereInput!]
  NOT: [PhysicalProductQualityReportSubscriptionWhereInput!]
}

input PhysicalProductQualityReportUpdatedamageTypesInput {
  set: [PhysicalProductDamageType!]
}

input PhysicalProductQualityReportUpdateInput {
  user: UserUpdateOneRequiredInput
  damageType: PhysicalProductDamageType
  damageTypes: PhysicalProductQualityReportUpdatedamageTypesInput
  notes: String
  physicalProduct: PhysicalProductUpdateOneRequiredWithoutReportsInput
}

input PhysicalProductQualityReportUpdateManyDataInput {
  damageType: PhysicalProductDamageType
  damageTypes: PhysicalProductQualityReportUpdatedamageTypesInput
  notes: String
}

input PhysicalProductQualityReportUpdateManyMutationInput {
  damageType: PhysicalProductDamageType
  damageTypes: PhysicalProductQualityReportUpdatedamageTypesInput
  notes: String
}

input PhysicalProductQualityReportUpdateManyWithoutPhysicalProductInput {
  create: [PhysicalProductQualityReportCreateWithoutPhysicalProductInput!]
  delete: [PhysicalProductQualityReportWhereUniqueInput!]
  connect: [PhysicalProductQualityReportWhereUniqueInput!]
  set: [PhysicalProductQualityReportWhereUniqueInput!]
  disconnect: [PhysicalProductQualityReportWhereUniqueInput!]
  update: [PhysicalProductQualityReportUpdateWithWhereUniqueWithoutPhysicalProductInput!]
  upsert: [PhysicalProductQualityReportUpsertWithWhereUniqueWithoutPhysicalProductInput!]
  deleteMany: [PhysicalProductQualityReportScalarWhereInput!]
  updateMany: [PhysicalProductQualityReportUpdateManyWithWhereNestedInput!]
}

input PhysicalProductQualityReportUpdateManyWithWhereNestedInput {
  where: PhysicalProductQualityReportScalarWhereInput!
  data: PhysicalProductQualityReportUpdateManyDataInput!
}

input PhysicalProductQualityReportUpdateWithoutPhysicalProductDataInput {
  user: UserUpdateOneRequiredInput
  damageType: PhysicalProductDamageType
  damageTypes: PhysicalProductQualityReportUpdatedamageTypesInput
  notes: String
}

input PhysicalProductQualityReportUpdateWithWhereUniqueWithoutPhysicalProductInput {
  where: PhysicalProductQualityReportWhereUniqueInput!
  data: PhysicalProductQualityReportUpdateWithoutPhysicalProductDataInput!
}

input PhysicalProductQualityReportUpsertWithWhereUniqueWithoutPhysicalProductInput {
  where: PhysicalProductQualityReportWhereUniqueInput!
  update: PhysicalProductQualityReportUpdateWithoutPhysicalProductDataInput!
  create: PhysicalProductQualityReportCreateWithoutPhysicalProductInput!
}

input PhysicalProductQualityReportWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  damageType: PhysicalProductDamageType
  damageType_not: PhysicalProductDamageType
  damageType_in: [PhysicalProductDamageType!]
  damageType_not_in: [PhysicalProductDamageType!]
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  physicalProduct: PhysicalProductWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PhysicalProductQualityReportWhereInput!]
  OR: [PhysicalProductQualityReportWhereInput!]
  NOT: [PhysicalProductQualityReportWhereInput!]
}

input PhysicalProductQualityReportWhereUniqueInput {
  id: ID
}

input PhysicalProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  seasonsUID: String
  seasonsUID_not: String
  seasonsUID_in: [String!]
  seasonsUID_not_in: [String!]
  seasonsUID_lt: String
  seasonsUID_lte: String
  seasonsUID_gt: String
  seasonsUID_gte: String
  seasonsUID_contains: String
  seasonsUID_not_contains: String
  seasonsUID_starts_with: String
  seasonsUID_not_starts_with: String
  seasonsUID_ends_with: String
  seasonsUID_not_ends_with: String
  inventoryStatus: InventoryStatus
  inventoryStatus_not: InventoryStatus
  inventoryStatus_in: [InventoryStatus!]
  inventoryStatus_not_in: [InventoryStatus!]
  productStatus: PhysicalProductStatus
  productStatus_not: PhysicalProductStatus
  productStatus_in: [PhysicalProductStatus!]
  productStatus_not_in: [PhysicalProductStatus!]
  offloadMethod: PhysicalProductOffloadMethod
  offloadMethod_not: PhysicalProductOffloadMethod
  offloadMethod_in: [PhysicalProductOffloadMethod!]
  offloadMethod_not_in: [PhysicalProductOffloadMethod!]
  offloadNotes: String
  offloadNotes_not: String
  offloadNotes_in: [String!]
  offloadNotes_not_in: [String!]
  offloadNotes_lt: String
  offloadNotes_lte: String
  offloadNotes_gt: String
  offloadNotes_gte: String
  offloadNotes_contains: String
  offloadNotes_not_contains: String
  offloadNotes_starts_with: String
  offloadNotes_not_starts_with: String
  offloadNotes_ends_with: String
  offloadNotes_not_ends_with: String
  sequenceNumber: Int
  sequenceNumber_not: Int
  sequenceNumber_in: [Int!]
  sequenceNumber_not_in: [Int!]
  sequenceNumber_lt: Int
  sequenceNumber_lte: Int
  sequenceNumber_gt: Int
  sequenceNumber_gte: Int
  barcoded: Boolean
  barcoded_not: Boolean
  dateOrdered: DateTime
  dateOrdered_not: DateTime
  dateOrdered_in: [DateTime!]
  dateOrdered_not_in: [DateTime!]
  dateOrdered_lt: DateTime
  dateOrdered_lte: DateTime
  dateOrdered_gt: DateTime
  dateOrdered_gte: DateTime
  dateReceived: DateTime
  dateReceived_not: DateTime
  dateReceived_in: [DateTime!]
  dateReceived_not_in: [DateTime!]
  dateReceived_lt: DateTime
  dateReceived_lte: DateTime
  dateReceived_gt: DateTime
  dateReceived_gte: DateTime
  unitCost: Float
  unitCost_not: Float
  unitCost_in: [Float!]
  unitCost_not_in: [Float!]
  unitCost_lt: Float
  unitCost_lte: Float
  unitCost_gt: Float
  unitCost_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PhysicalProductScalarWhereInput!]
  OR: [PhysicalProductScalarWhereInput!]
  NOT: [PhysicalProductScalarWhereInput!]
}

enum PhysicalProductStatus {
  New
  Used
  Dirty
  Damaged
  PermanentlyDamaged
  Clean
  Lost
  Sold
}

type PhysicalProductSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalProduct
  updatedFields: [String!]
  previousValues: PhysicalProductPreviousValues
}

input PhysicalProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PhysicalProductWhereInput
  AND: [PhysicalProductSubscriptionWhereInput!]
  OR: [PhysicalProductSubscriptionWhereInput!]
  NOT: [PhysicalProductSubscriptionWhereInput!]
}

input PhysicalProductUpdateDataInput {
  seasonsUID: String
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceUpdateOneInput
  reports: PhysicalProductQualityReportUpdateManyWithoutPhysicalProductInput
}

input PhysicalProductUpdateInput {
  seasonsUID: String
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceUpdateOneInput
  reports: PhysicalProductQualityReportUpdateManyWithoutPhysicalProductInput
}

input PhysicalProductUpdateManyDataInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
}

input PhysicalProductUpdateManyInput {
  create: [PhysicalProductCreateInput!]
  update: [PhysicalProductUpdateWithWhereUniqueNestedInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueNestedInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
}

input PhysicalProductUpdateManyMutationInput {
  seasonsUID: String
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
}

input PhysicalProductUpdateManyWithoutLocationInput {
  create: [PhysicalProductCreateWithoutLocationInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutLocationInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutLocationInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
}

input PhysicalProductUpdateManyWithoutProductVariantInput {
  create: [PhysicalProductCreateWithoutProductVariantInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
}

input PhysicalProductUpdateManyWithoutWarehouseLocationInput {
  create: [PhysicalProductCreateWithoutWarehouseLocationInput!]
  delete: [PhysicalProductWhereUniqueInput!]
  connect: [PhysicalProductWhereUniqueInput!]
  set: [PhysicalProductWhereUniqueInput!]
  disconnect: [PhysicalProductWhereUniqueInput!]
  update: [PhysicalProductUpdateWithWhereUniqueWithoutWarehouseLocationInput!]
  upsert: [PhysicalProductUpsertWithWhereUniqueWithoutWarehouseLocationInput!]
  deleteMany: [PhysicalProductScalarWhereInput!]
  updateMany: [PhysicalProductUpdateManyWithWhereNestedInput!]
}

input PhysicalProductUpdateManyWithWhereNestedInput {
  where: PhysicalProductScalarWhereInput!
  data: PhysicalProductUpdateManyDataInput!
}

input PhysicalProductUpdateOneInput {
  create: PhysicalProductCreateInput
  update: PhysicalProductUpdateDataInput
  upsert: PhysicalProductUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductUpdateOneRequiredInput {
  create: PhysicalProductCreateInput
  update: PhysicalProductUpdateDataInput
  upsert: PhysicalProductUpsertNestedInput
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductUpdateOneRequiredWithoutReportsInput {
  create: PhysicalProductCreateWithoutReportsInput
  update: PhysicalProductUpdateWithoutReportsDataInput
  upsert: PhysicalProductUpsertWithoutReportsInput
  connect: PhysicalProductWhereUniqueInput
}

input PhysicalProductUpdateWithoutLocationDataInput {
  seasonsUID: String
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceUpdateOneInput
  reports: PhysicalProductQualityReportUpdateManyWithoutPhysicalProductInput
}

input PhysicalProductUpdateWithoutProductVariantDataInput {
  seasonsUID: String
  location: LocationUpdateOneWithoutPhysicalProductsInput
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceUpdateOneInput
  reports: PhysicalProductQualityReportUpdateManyWithoutPhysicalProductInput
}

input PhysicalProductUpdateWithoutReportsDataInput {
  seasonsUID: String
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  warehouseLocation: WarehouseLocationUpdateOneWithoutPhysicalProductsInput
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceUpdateOneInput
}

input PhysicalProductUpdateWithoutWarehouseLocationDataInput {
  seasonsUID: String
  location: LocationUpdateOneWithoutPhysicalProductsInput
  productVariant: ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput
  inventoryStatus: InventoryStatus
  productStatus: PhysicalProductStatus
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int
  barcoded: Boolean
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  price: PhysicalProductPriceUpdateOneInput
  reports: PhysicalProductQualityReportUpdateManyWithoutPhysicalProductInput
}

input PhysicalProductUpdateWithWhereUniqueNestedInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutLocationInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutLocationDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutProductVariantInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutProductVariantDataInput!
}

input PhysicalProductUpdateWithWhereUniqueWithoutWarehouseLocationInput {
  where: PhysicalProductWhereUniqueInput!
  data: PhysicalProductUpdateWithoutWarehouseLocationDataInput!
}

input PhysicalProductUpsertNestedInput {
  update: PhysicalProductUpdateDataInput!
  create: PhysicalProductCreateInput!
}

input PhysicalProductUpsertWithoutReportsInput {
  update: PhysicalProductUpdateWithoutReportsDataInput!
  create: PhysicalProductCreateWithoutReportsInput!
}

input PhysicalProductUpsertWithWhereUniqueNestedInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateDataInput!
  create: PhysicalProductCreateInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutLocationInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutLocationDataInput!
  create: PhysicalProductCreateWithoutLocationInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutProductVariantInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutProductVariantDataInput!
  create: PhysicalProductCreateWithoutProductVariantInput!
}

input PhysicalProductUpsertWithWhereUniqueWithoutWarehouseLocationInput {
  where: PhysicalProductWhereUniqueInput!
  update: PhysicalProductUpdateWithoutWarehouseLocationDataInput!
  create: PhysicalProductCreateWithoutWarehouseLocationInput!
}

input PhysicalProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  seasonsUID: String
  seasonsUID_not: String
  seasonsUID_in: [String!]
  seasonsUID_not_in: [String!]
  seasonsUID_lt: String
  seasonsUID_lte: String
  seasonsUID_gt: String
  seasonsUID_gte: String
  seasonsUID_contains: String
  seasonsUID_not_contains: String
  seasonsUID_starts_with: String
  seasonsUID_not_starts_with: String
  seasonsUID_ends_with: String
  seasonsUID_not_ends_with: String
  location: LocationWhereInput
  productVariant: ProductVariantWhereInput
  inventoryStatus: InventoryStatus
  inventoryStatus_not: InventoryStatus
  inventoryStatus_in: [InventoryStatus!]
  inventoryStatus_not_in: [InventoryStatus!]
  productStatus: PhysicalProductStatus
  productStatus_not: PhysicalProductStatus
  productStatus_in: [PhysicalProductStatus!]
  productStatus_not_in: [PhysicalProductStatus!]
  offloadMethod: PhysicalProductOffloadMethod
  offloadMethod_not: PhysicalProductOffloadMethod
  offloadMethod_in: [PhysicalProductOffloadMethod!]
  offloadMethod_not_in: [PhysicalProductOffloadMethod!]
  offloadNotes: String
  offloadNotes_not: String
  offloadNotes_in: [String!]
  offloadNotes_not_in: [String!]
  offloadNotes_lt: String
  offloadNotes_lte: String
  offloadNotes_gt: String
  offloadNotes_gte: String
  offloadNotes_contains: String
  offloadNotes_not_contains: String
  offloadNotes_starts_with: String
  offloadNotes_not_starts_with: String
  offloadNotes_ends_with: String
  offloadNotes_not_ends_with: String
  sequenceNumber: Int
  sequenceNumber_not: Int
  sequenceNumber_in: [Int!]
  sequenceNumber_not_in: [Int!]
  sequenceNumber_lt: Int
  sequenceNumber_lte: Int
  sequenceNumber_gt: Int
  sequenceNumber_gte: Int
  warehouseLocation: WarehouseLocationWhereInput
  barcoded: Boolean
  barcoded_not: Boolean
  dateOrdered: DateTime
  dateOrdered_not: DateTime
  dateOrdered_in: [DateTime!]
  dateOrdered_not_in: [DateTime!]
  dateOrdered_lt: DateTime
  dateOrdered_lte: DateTime
  dateOrdered_gt: DateTime
  dateOrdered_gte: DateTime
  dateReceived: DateTime
  dateReceived_not: DateTime
  dateReceived_in: [DateTime!]
  dateReceived_not_in: [DateTime!]
  dateReceived_lt: DateTime
  dateReceived_lte: DateTime
  dateReceived_gt: DateTime
  dateReceived_gte: DateTime
  unitCost: Float
  unitCost_not: Float
  unitCost_in: [Float!]
  unitCost_not_in: [Float!]
  unitCost_lt: Float
  unitCost_lte: Float
  unitCost_gt: Float
  unitCost_gte: Float
  price: PhysicalProductPriceWhereInput
  reports_every: PhysicalProductQualityReportWhereInput
  reports_some: PhysicalProductQualityReportWhereInput
  reports_none: PhysicalProductQualityReportWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PhysicalProductWhereInput!]
  OR: [PhysicalProductWhereInput!]
  NOT: [PhysicalProductWhereInput!]
}

input PhysicalProductWhereUniqueInput {
  id: ID
  seasonsUID: String
}

enum Plan {
  AllAccess
  Essential
}

type Product {
  id: ID!
  architecture: ProductArchitecture
  brand: Brand!
  category: Category!
  color: Color!
  description: String
  externalURL: String
  functions(where: ProductFunctionWhereInput, orderBy: ProductFunctionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductFunction!]
  buyNewEnabled: Boolean!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  innerMaterials: [String!]!
  materialCategory: ProductMaterialCategory
  model: ProductModel
  modelSize: Size
  name: String!
  outerMaterials: [String!]!
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeason
  secondaryColor: Color
  slug: String!
  status: ProductStatus
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  tier: ProductTier
  type: ProductType
  variants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ProductArchitecture {
  Fashion
  Showstopper
  Staple
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateinnerMaterialsInput {
  set: [String!]
}

input ProductCreateInput {
  id: ID
  architecture: ProductArchitecture
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  color: ColorCreateOneInput!
  description: String
  externalURL: String
  functions: ProductFunctionCreateManyInput
  buyNewEnabled: Boolean
  images: ImageCreateManyInput
  innerMaterials: ProductCreateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  name: String!
  outerMaterials: ProductCreateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonCreateOneInput
  secondaryColor: ColorCreateOneInput
  slug: String!
  status: ProductStatus
  tags: TagCreateManyWithoutProductsInput
  tier: ProductTierCreateOneInput
  type: ProductType
  variants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateManyInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutMaterialCategoryInput {
  create: [ProductCreateWithoutMaterialCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutModelInput {
  create: [ProductCreateWithoutModelInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateouterMaterialsInput {
  set: [String!]
}

input ProductCreateWithoutBrandInput {
  id: ID
  architecture: ProductArchitecture
  category: CategoryCreateOneWithoutProductsInput!
  color: ColorCreateOneInput!
  description: String
  externalURL: String
  functions: ProductFunctionCreateManyInput
  buyNewEnabled: Boolean
  images: ImageCreateManyInput
  innerMaterials: ProductCreateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  name: String!
  outerMaterials: ProductCreateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonCreateOneInput
  secondaryColor: ColorCreateOneInput
  slug: String!
  status: ProductStatus
  tags: TagCreateManyWithoutProductsInput
  tier: ProductTierCreateOneInput
  type: ProductType
  variants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutCategoryInput {
  id: ID
  architecture: ProductArchitecture
  brand: BrandCreateOneWithoutProductsInput!
  color: ColorCreateOneInput!
  description: String
  externalURL: String
  functions: ProductFunctionCreateManyInput
  buyNewEnabled: Boolean
  images: ImageCreateManyInput
  innerMaterials: ProductCreateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  name: String!
  outerMaterials: ProductCreateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonCreateOneInput
  secondaryColor: ColorCreateOneInput
  slug: String!
  status: ProductStatus
  tags: TagCreateManyWithoutProductsInput
  tier: ProductTierCreateOneInput
  type: ProductType
  variants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutMaterialCategoryInput {
  id: ID
  architecture: ProductArchitecture
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  color: ColorCreateOneInput!
  description: String
  externalURL: String
  functions: ProductFunctionCreateManyInput
  buyNewEnabled: Boolean
  images: ImageCreateManyInput
  innerMaterials: ProductCreateinnerMaterialsInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  name: String!
  outerMaterials: ProductCreateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonCreateOneInput
  secondaryColor: ColorCreateOneInput
  slug: String!
  status: ProductStatus
  tags: TagCreateManyWithoutProductsInput
  tier: ProductTierCreateOneInput
  type: ProductType
  variants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutModelInput {
  id: ID
  architecture: ProductArchitecture
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  color: ColorCreateOneInput!
  description: String
  externalURL: String
  functions: ProductFunctionCreateManyInput
  buyNewEnabled: Boolean
  images: ImageCreateManyInput
  innerMaterials: ProductCreateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  name: String!
  outerMaterials: ProductCreateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonCreateOneInput
  secondaryColor: ColorCreateOneInput
  slug: String!
  status: ProductStatus
  tags: TagCreateManyWithoutProductsInput
  tier: ProductTierCreateOneInput
  type: ProductType
  variants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutTagsInput {
  id: ID
  architecture: ProductArchitecture
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  color: ColorCreateOneInput!
  description: String
  externalURL: String
  functions: ProductFunctionCreateManyInput
  buyNewEnabled: Boolean
  images: ImageCreateManyInput
  innerMaterials: ProductCreateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  name: String!
  outerMaterials: ProductCreateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonCreateOneInput
  secondaryColor: ColorCreateOneInput
  slug: String!
  status: ProductStatus
  tier: ProductTierCreateOneInput
  type: ProductType
  variants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutVariantsInput {
  id: ID
  architecture: ProductArchitecture
  brand: BrandCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput!
  color: ColorCreateOneInput!
  description: String
  externalURL: String
  functions: ProductFunctionCreateManyInput
  buyNewEnabled: Boolean
  images: ImageCreateManyInput
  innerMaterials: ProductCreateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryCreateOneWithoutProductsInput
  model: ProductModelCreateOneWithoutProductsInput
  modelSize: SizeCreateOneInput
  name: String!
  outerMaterials: ProductCreateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonCreateOneInput
  secondaryColor: ColorCreateOneInput
  slug: String!
  status: ProductStatus
  tags: TagCreateManyWithoutProductsInput
  tier: ProductTierCreateOneInput
  type: ProductType
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductFit {
  RunsBig
  TrueToSize
  RunsSmall
}

type ProductFunction {
  id: ID!
  name: String
}

type ProductFunctionConnection {
  pageInfo: PageInfo!
  edges: [ProductFunctionEdge]!
  aggregate: AggregateProductFunction!
}

input ProductFunctionCreateInput {
  id: ID
  name: String
}

input ProductFunctionCreateManyInput {
  create: [ProductFunctionCreateInput!]
  connect: [ProductFunctionWhereUniqueInput!]
}

type ProductFunctionEdge {
  node: ProductFunction!
  cursor: String!
}

enum ProductFunctionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ProductFunctionPreviousValues {
  id: ID!
  name: String
}

input ProductFunctionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ProductFunctionScalarWhereInput!]
  OR: [ProductFunctionScalarWhereInput!]
  NOT: [ProductFunctionScalarWhereInput!]
}

type ProductFunctionSubscriptionPayload {
  mutation: MutationType!
  node: ProductFunction
  updatedFields: [String!]
  previousValues: ProductFunctionPreviousValues
}

input ProductFunctionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductFunctionWhereInput
  AND: [ProductFunctionSubscriptionWhereInput!]
  OR: [ProductFunctionSubscriptionWhereInput!]
  NOT: [ProductFunctionSubscriptionWhereInput!]
}

input ProductFunctionUpdateDataInput {
  name: String
}

input ProductFunctionUpdateInput {
  name: String
}

input ProductFunctionUpdateManyDataInput {
  name: String
}

input ProductFunctionUpdateManyInput {
  create: [ProductFunctionCreateInput!]
  update: [ProductFunctionUpdateWithWhereUniqueNestedInput!]
  upsert: [ProductFunctionUpsertWithWhereUniqueNestedInput!]
  delete: [ProductFunctionWhereUniqueInput!]
  connect: [ProductFunctionWhereUniqueInput!]
  set: [ProductFunctionWhereUniqueInput!]
  disconnect: [ProductFunctionWhereUniqueInput!]
  deleteMany: [ProductFunctionScalarWhereInput!]
  updateMany: [ProductFunctionUpdateManyWithWhereNestedInput!]
}

input ProductFunctionUpdateManyMutationInput {
  name: String
}

input ProductFunctionUpdateManyWithWhereNestedInput {
  where: ProductFunctionScalarWhereInput!
  data: ProductFunctionUpdateManyDataInput!
}

input ProductFunctionUpdateWithWhereUniqueNestedInput {
  where: ProductFunctionWhereUniqueInput!
  data: ProductFunctionUpdateDataInput!
}

input ProductFunctionUpsertWithWhereUniqueNestedInput {
  where: ProductFunctionWhereUniqueInput!
  update: ProductFunctionUpdateDataInput!
  create: ProductFunctionCreateInput!
}

input ProductFunctionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ProductFunctionWhereInput!]
  OR: [ProductFunctionWhereInput!]
  NOT: [ProductFunctionWhereInput!]
}

input ProductFunctionWhereUniqueInput {
  id: ID
  name: String
}

type ProductMaterialCategory {
  id: ID!
  slug: String!
  lifeExpectancy: Float!
  category: Category!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type ProductMaterialCategoryConnection {
  pageInfo: PageInfo!
  edges: [ProductMaterialCategoryEdge]!
  aggregate: AggregateProductMaterialCategory!
}

input ProductMaterialCategoryCreateInput {
  id: ID
  slug: String!
  lifeExpectancy: Float!
  category: CategoryCreateOneInput!
  products: ProductCreateManyWithoutMaterialCategoryInput
}

input ProductMaterialCategoryCreateOneWithoutProductsInput {
  create: ProductMaterialCategoryCreateWithoutProductsInput
  connect: ProductMaterialCategoryWhereUniqueInput
}

input ProductMaterialCategoryCreateWithoutProductsInput {
  id: ID
  slug: String!
  lifeExpectancy: Float!
  category: CategoryCreateOneInput!
}

type ProductMaterialCategoryEdge {
  node: ProductMaterialCategory!
  cursor: String!
}

enum ProductMaterialCategoryOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  lifeExpectancy_ASC
  lifeExpectancy_DESC
}

type ProductMaterialCategoryPreviousValues {
  id: ID!
  slug: String!
  lifeExpectancy: Float!
}

type ProductMaterialCategorySubscriptionPayload {
  mutation: MutationType!
  node: ProductMaterialCategory
  updatedFields: [String!]
  previousValues: ProductMaterialCategoryPreviousValues
}

input ProductMaterialCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductMaterialCategoryWhereInput
  AND: [ProductMaterialCategorySubscriptionWhereInput!]
  OR: [ProductMaterialCategorySubscriptionWhereInput!]
  NOT: [ProductMaterialCategorySubscriptionWhereInput!]
}

input ProductMaterialCategoryUpdateInput {
  slug: String
  lifeExpectancy: Float
  category: CategoryUpdateOneRequiredInput
  products: ProductUpdateManyWithoutMaterialCategoryInput
}

input ProductMaterialCategoryUpdateManyMutationInput {
  slug: String
  lifeExpectancy: Float
}

input ProductMaterialCategoryUpdateOneWithoutProductsInput {
  create: ProductMaterialCategoryCreateWithoutProductsInput
  update: ProductMaterialCategoryUpdateWithoutProductsDataInput
  upsert: ProductMaterialCategoryUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductMaterialCategoryWhereUniqueInput
}

input ProductMaterialCategoryUpdateWithoutProductsDataInput {
  slug: String
  lifeExpectancy: Float
  category: CategoryUpdateOneRequiredInput
}

input ProductMaterialCategoryUpsertWithoutProductsInput {
  update: ProductMaterialCategoryUpdateWithoutProductsDataInput!
  create: ProductMaterialCategoryCreateWithoutProductsInput!
}

input ProductMaterialCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  lifeExpectancy: Float
  lifeExpectancy_not: Float
  lifeExpectancy_in: [Float!]
  lifeExpectancy_not_in: [Float!]
  lifeExpectancy_lt: Float
  lifeExpectancy_lte: Float
  lifeExpectancy_gt: Float
  lifeExpectancy_gte: Float
  category: CategoryWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [ProductMaterialCategoryWhereInput!]
  OR: [ProductMaterialCategoryWhereInput!]
  NOT: [ProductMaterialCategoryWhereInput!]
}

input ProductMaterialCategoryWhereUniqueInput {
  id: ID
  slug: String
}

type ProductModel {
  id: ID!
  name: String!
  height: Float!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type ProductModelConnection {
  pageInfo: PageInfo!
  edges: [ProductModelEdge]!
  aggregate: AggregateProductModel!
}

input ProductModelCreateInput {
  id: ID
  name: String!
  height: Float!
  products: ProductCreateManyWithoutModelInput
}

input ProductModelCreateOneWithoutProductsInput {
  create: ProductModelCreateWithoutProductsInput
  connect: ProductModelWhereUniqueInput
}

input ProductModelCreateWithoutProductsInput {
  id: ID
  name: String!
  height: Float!
}

type ProductModelEdge {
  node: ProductModel!
  cursor: String!
}

enum ProductModelOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  height_ASC
  height_DESC
}

type ProductModelPreviousValues {
  id: ID!
  name: String!
  height: Float!
}

type ProductModelSubscriptionPayload {
  mutation: MutationType!
  node: ProductModel
  updatedFields: [String!]
  previousValues: ProductModelPreviousValues
}

input ProductModelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductModelWhereInput
  AND: [ProductModelSubscriptionWhereInput!]
  OR: [ProductModelSubscriptionWhereInput!]
  NOT: [ProductModelSubscriptionWhereInput!]
}

input ProductModelUpdateInput {
  name: String
  height: Float
  products: ProductUpdateManyWithoutModelInput
}

input ProductModelUpdateManyMutationInput {
  name: String
  height: Float
}

input ProductModelUpdateOneWithoutProductsInput {
  create: ProductModelCreateWithoutProductsInput
  update: ProductModelUpdateWithoutProductsDataInput
  upsert: ProductModelUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductModelWhereUniqueInput
}

input ProductModelUpdateWithoutProductsDataInput {
  name: String
  height: Float
}

input ProductModelUpsertWithoutProductsInput {
  update: ProductModelUpdateWithoutProductsDataInput!
  create: ProductModelCreateWithoutProductsInput!
}

input ProductModelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [ProductModelWhereInput!]
  OR: [ProductModelWhereInput!]
  NOT: [ProductModelWhereInput!]
}

input ProductModelWhereUniqueInput {
  id: ID
  name: String
}

type ProductNotification {
  id: ID!
  type: ProductNotificationType!
  customer: Customer!
  physicalProduct: PhysicalProduct
  productVariant: ProductVariant
  shouldNotify: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductNotificationConnection {
  pageInfo: PageInfo!
  edges: [ProductNotificationEdge]!
  aggregate: AggregateProductNotification!
}

input ProductNotificationCreateInput {
  id: ID
  type: ProductNotificationType!
  customer: CustomerCreateOneInput!
  physicalProduct: PhysicalProductCreateOneInput
  productVariant: ProductVariantCreateOneInput
  shouldNotify: Boolean
}

type ProductNotificationEdge {
  node: ProductNotification!
  cursor: String!
}

enum ProductNotificationOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  shouldNotify_ASC
  shouldNotify_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductNotificationPreviousValues {
  id: ID!
  type: ProductNotificationType!
  shouldNotify: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductNotificationSubscriptionPayload {
  mutation: MutationType!
  node: ProductNotification
  updatedFields: [String!]
  previousValues: ProductNotificationPreviousValues
}

input ProductNotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductNotificationWhereInput
  AND: [ProductNotificationSubscriptionWhereInput!]
  OR: [ProductNotificationSubscriptionWhereInput!]
  NOT: [ProductNotificationSubscriptionWhereInput!]
}

enum ProductNotificationType {
  Restock
  AvailableForPurchase
}

input ProductNotificationUpdateInput {
  type: ProductNotificationType
  customer: CustomerUpdateOneRequiredInput
  physicalProduct: PhysicalProductUpdateOneInput
  productVariant: ProductVariantUpdateOneInput
  shouldNotify: Boolean
}

input ProductNotificationUpdateManyMutationInput {
  type: ProductNotificationType
  shouldNotify: Boolean
}

input ProductNotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: ProductNotificationType
  type_not: ProductNotificationType
  type_in: [ProductNotificationType!]
  type_not_in: [ProductNotificationType!]
  customer: CustomerWhereInput
  physicalProduct: PhysicalProductWhereInput
  productVariant: ProductVariantWhereInput
  shouldNotify: Boolean
  shouldNotify_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductNotificationWhereInput!]
  OR: [ProductNotificationWhereInput!]
  NOT: [ProductNotificationWhereInput!]
}

input ProductNotificationWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  architecture_ASC
  architecture_DESC
  description_ASC
  description_DESC
  externalURL_ASC
  externalURL_DESC
  buyNewEnabled_ASC
  buyNewEnabled_DESC
  name_ASC
  name_DESC
  photographyStatus_ASC
  photographyStatus_DESC
  productFit_ASC
  productFit_DESC
  publishedAt_ASC
  publishedAt_DESC
  retailPrice_ASC
  retailPrice_DESC
  slug_ASC
  slug_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  architecture: ProductArchitecture
  description: String
  externalURL: String
  buyNewEnabled: Boolean!
  innerMaterials: [String!]!
  name: String!
  outerMaterials: [String!]!
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  slug: String!
  status: ProductStatus
  type: ProductType
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductRequest {
  id: ID!
  brand: String
  description: String
  images: [String!]!
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String!
  sku: String
  url: String!
  user: User!
}

type ProductRequestConnection {
  pageInfo: PageInfo!
  edges: [ProductRequestEdge]!
  aggregate: AggregateProductRequest!
}

input ProductRequestCreateimagesInput {
  set: [String!]
}

input ProductRequestCreateInput {
  id: ID
  brand: String
  description: String
  images: ProductRequestCreateimagesInput
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String!
  sku: String
  url: String!
  user: UserCreateOneInput!
}

type ProductRequestEdge {
  node: ProductRequest!
  cursor: String!
}

enum ProductRequestOrderByInput {
  id_ASC
  id_DESC
  brand_ASC
  brand_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  priceCurrency_ASC
  priceCurrency_DESC
  productID_ASC
  productID_DESC
  reason_ASC
  reason_DESC
  sku_ASC
  sku_DESC
  url_ASC
  url_DESC
}

type ProductRequestPreviousValues {
  id: ID!
  brand: String
  description: String
  images: [String!]!
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String!
  sku: String
  url: String!
}

type ProductRequestSubscriptionPayload {
  mutation: MutationType!
  node: ProductRequest
  updatedFields: [String!]
  previousValues: ProductRequestPreviousValues
}

input ProductRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductRequestWhereInput
  AND: [ProductRequestSubscriptionWhereInput!]
  OR: [ProductRequestSubscriptionWhereInput!]
  NOT: [ProductRequestSubscriptionWhereInput!]
}

input ProductRequestUpdateimagesInput {
  set: [String!]
}

input ProductRequestUpdateInput {
  brand: String
  description: String
  images: ProductRequestUpdateimagesInput
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String
  sku: String
  url: String
  user: UserUpdateOneRequiredInput
}

input ProductRequestUpdateManyMutationInput {
  brand: String
  description: String
  images: ProductRequestUpdateimagesInput
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String
  sku: String
  url: String
}

input ProductRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  brand: String
  brand_not: String
  brand_in: [String!]
  brand_not_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_gt: String
  brand_gte: String
  brand_contains: String
  brand_not_contains: String
  brand_starts_with: String
  brand_not_starts_with: String
  brand_ends_with: String
  brand_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  priceCurrency: String
  priceCurrency_not: String
  priceCurrency_in: [String!]
  priceCurrency_not_in: [String!]
  priceCurrency_lt: String
  priceCurrency_lte: String
  priceCurrency_gt: String
  priceCurrency_gte: String
  priceCurrency_contains: String
  priceCurrency_not_contains: String
  priceCurrency_starts_with: String
  priceCurrency_not_starts_with: String
  priceCurrency_ends_with: String
  priceCurrency_not_ends_with: String
  productID: String
  productID_not: String
  productID_in: [String!]
  productID_not_in: [String!]
  productID_lt: String
  productID_lte: String
  productID_gt: String
  productID_gte: String
  productID_contains: String
  productID_not_contains: String
  productID_starts_with: String
  productID_not_starts_with: String
  productID_ends_with: String
  productID_not_ends_with: String
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  sku: String
  sku_not: String
  sku_in: [String!]
  sku_not_in: [String!]
  sku_lt: String
  sku_lte: String
  sku_gt: String
  sku_gte: String
  sku_contains: String
  sku_not_contains: String
  sku_starts_with: String
  sku_not_starts_with: String
  sku_ends_with: String
  sku_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  user: UserWhereInput
  AND: [ProductRequestWhereInput!]
  OR: [ProductRequestWhereInput!]
  NOT: [ProductRequestWhereInput!]
}

input ProductRequestWhereUniqueInput {
  id: ID
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  architecture: ProductArchitecture
  architecture_not: ProductArchitecture
  architecture_in: [ProductArchitecture!]
  architecture_not_in: [ProductArchitecture!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  externalURL: String
  externalURL_not: String
  externalURL_in: [String!]
  externalURL_not_in: [String!]
  externalURL_lt: String
  externalURL_lte: String
  externalURL_gt: String
  externalURL_gte: String
  externalURL_contains: String
  externalURL_not_contains: String
  externalURL_starts_with: String
  externalURL_not_starts_with: String
  externalURL_ends_with: String
  externalURL_not_ends_with: String
  buyNewEnabled: Boolean
  buyNewEnabled_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  photographyStatus: PhotographyStatus
  photographyStatus_not: PhotographyStatus
  photographyStatus_in: [PhotographyStatus!]
  photographyStatus_not_in: [PhotographyStatus!]
  productFit: ProductFit
  productFit_not: ProductFit
  productFit_in: [ProductFit!]
  productFit_not_in: [ProductFit!]
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  retailPrice: Int
  retailPrice_not: Int
  retailPrice_in: [Int!]
  retailPrice_not_in: [Int!]
  retailPrice_lt: Int
  retailPrice_lte: Int
  retailPrice_gt: Int
  retailPrice_gte: Int
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  status: ProductStatus
  status_not: ProductStatus
  status_in: [ProductStatus!]
  status_not_in: [ProductStatus!]
  type: ProductType
  type_not: ProductType
  type_in: [ProductType!]
  type_not_in: [ProductType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSeason {
  id: ID!
  vendorSeason: Season
  internalSeason: Season
  wearableSeasons: [SeasonString!]!
}

type ProductSeasonConnection {
  pageInfo: PageInfo!
  edges: [ProductSeasonEdge]!
  aggregate: AggregateProductSeason!
}

input ProductSeasonCreateInput {
  id: ID
  vendorSeason: SeasonCreateOneInput
  internalSeason: SeasonCreateOneInput
  wearableSeasons: ProductSeasonCreatewearableSeasonsInput
}

input ProductSeasonCreateOneInput {
  create: ProductSeasonCreateInput
  connect: ProductSeasonWhereUniqueInput
}

input ProductSeasonCreatewearableSeasonsInput {
  set: [SeasonString!]
}

type ProductSeasonEdge {
  node: ProductSeason!
  cursor: String!
}

enum ProductSeasonOrderByInput {
  id_ASC
  id_DESC
}

type ProductSeasonPreviousValues {
  id: ID!
  wearableSeasons: [SeasonString!]!
}

type ProductSeasonSubscriptionPayload {
  mutation: MutationType!
  node: ProductSeason
  updatedFields: [String!]
  previousValues: ProductSeasonPreviousValues
}

input ProductSeasonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductSeasonWhereInput
  AND: [ProductSeasonSubscriptionWhereInput!]
  OR: [ProductSeasonSubscriptionWhereInput!]
  NOT: [ProductSeasonSubscriptionWhereInput!]
}

input ProductSeasonUpdateDataInput {
  vendorSeason: SeasonUpdateOneInput
  internalSeason: SeasonUpdateOneInput
  wearableSeasons: ProductSeasonUpdatewearableSeasonsInput
}

input ProductSeasonUpdateInput {
  vendorSeason: SeasonUpdateOneInput
  internalSeason: SeasonUpdateOneInput
  wearableSeasons: ProductSeasonUpdatewearableSeasonsInput
}

input ProductSeasonUpdateManyMutationInput {
  wearableSeasons: ProductSeasonUpdatewearableSeasonsInput
}

input ProductSeasonUpdateOneInput {
  create: ProductSeasonCreateInput
  update: ProductSeasonUpdateDataInput
  upsert: ProductSeasonUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductSeasonWhereUniqueInput
}

input ProductSeasonUpdatewearableSeasonsInput {
  set: [SeasonString!]
}

input ProductSeasonUpsertNestedInput {
  update: ProductSeasonUpdateDataInput!
  create: ProductSeasonCreateInput!
}

input ProductSeasonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  vendorSeason: SeasonWhereInput
  internalSeason: SeasonWhereInput
  AND: [ProductSeasonWhereInput!]
  OR: [ProductSeasonWhereInput!]
  NOT: [ProductSeasonWhereInput!]
}

input ProductSeasonWhereUniqueInput {
  id: ID
}

enum ProductStatus {
  Available
  NotAvailable
  Stored
  Offloaded
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

type ProductTier {
  id: ID!
  tier: ProductTierName!
  price: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductTierConnection {
  pageInfo: PageInfo!
  edges: [ProductTierEdge]!
  aggregate: AggregateProductTier!
}

input ProductTierCreateInput {
  id: ID
  tier: ProductTierName!
  price: Int!
}

input ProductTierCreateOneInput {
  create: ProductTierCreateInput
  connect: ProductTierWhereUniqueInput
}

type ProductTierEdge {
  node: ProductTier!
  cursor: String!
}

enum ProductTierName {
  Standard
  Luxury
}

enum ProductTierOrderByInput {
  id_ASC
  id_DESC
  tier_ASC
  tier_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductTierPreviousValues {
  id: ID!
  tier: ProductTierName!
  price: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductTierSubscriptionPayload {
  mutation: MutationType!
  node: ProductTier
  updatedFields: [String!]
  previousValues: ProductTierPreviousValues
}

input ProductTierSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductTierWhereInput
  AND: [ProductTierSubscriptionWhereInput!]
  OR: [ProductTierSubscriptionWhereInput!]
  NOT: [ProductTierSubscriptionWhereInput!]
}

input ProductTierUpdateDataInput {
  tier: ProductTierName
  price: Int
}

input ProductTierUpdateInput {
  tier: ProductTierName
  price: Int
}

input ProductTierUpdateManyMutationInput {
  tier: ProductTierName
  price: Int
}

input ProductTierUpdateOneInput {
  create: ProductTierCreateInput
  update: ProductTierUpdateDataInput
  upsert: ProductTierUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductTierWhereUniqueInput
}

input ProductTierUpsertNestedInput {
  update: ProductTierUpdateDataInput!
  create: ProductTierCreateInput!
}

input ProductTierWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tier: ProductTierName
  tier_not: ProductTierName
  tier_in: [ProductTierName!]
  tier_not_in: [ProductTierName!]
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductTierWhereInput!]
  OR: [ProductTierWhereInput!]
  NOT: [ProductTierWhereInput!]
}

input ProductTierWhereUniqueInput {
  id: ID
}

enum ProductType {
  Top
  Bottom
  Accessory
  Shoe
}

input ProductUpdateDataInput {
  architecture: ProductArchitecture
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  color: ColorUpdateOneRequiredInput
  description: String
  externalURL: String
  functions: ProductFunctionUpdateManyInput
  buyNewEnabled: Boolean
  images: ImageUpdateManyInput
  innerMaterials: ProductUpdateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonUpdateOneInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  tags: TagUpdateManyWithoutProductsInput
  tier: ProductTierUpdateOneInput
  type: ProductType
  variants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateinnerMaterialsInput {
  set: [String!]
}

input ProductUpdateInput {
  architecture: ProductArchitecture
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  color: ColorUpdateOneRequiredInput
  description: String
  externalURL: String
  functions: ProductFunctionUpdateManyInput
  buyNewEnabled: Boolean
  images: ImageUpdateManyInput
  innerMaterials: ProductUpdateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonUpdateOneInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  tags: TagUpdateManyWithoutProductsInput
  tier: ProductTierUpdateOneInput
  type: ProductType
  variants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  architecture: ProductArchitecture
  description: String
  externalURL: String
  buyNewEnabled: Boolean
  innerMaterials: ProductUpdateinnerMaterialsInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  slug: String
  status: ProductStatus
  type: ProductType
}

input ProductUpdateManyInput {
  create: [ProductCreateInput!]
  update: [ProductUpdateWithWhereUniqueNestedInput!]
  upsert: [ProductUpsertWithWhereUniqueNestedInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyMutationInput {
  architecture: ProductArchitecture
  description: String
  externalURL: String
  buyNewEnabled: Boolean
  innerMaterials: ProductUpdateinnerMaterialsInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  slug: String
  status: ProductStatus
  type: ProductType
}

input ProductUpdateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutBrandInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutMaterialCategoryInput {
  create: [ProductCreateWithoutMaterialCategoryInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutMaterialCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutMaterialCategoryInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutModelInput {
  create: [ProductCreateWithoutModelInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutModelInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutModelInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateOneRequiredWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  update: ProductUpdateWithoutVariantsDataInput
  upsert: ProductUpsertWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateouterMaterialsInput {
  set: [String!]
}

input ProductUpdateWithoutBrandDataInput {
  architecture: ProductArchitecture
  category: CategoryUpdateOneRequiredWithoutProductsInput
  color: ColorUpdateOneRequiredInput
  description: String
  externalURL: String
  functions: ProductFunctionUpdateManyInput
  buyNewEnabled: Boolean
  images: ImageUpdateManyInput
  innerMaterials: ProductUpdateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonUpdateOneInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  tags: TagUpdateManyWithoutProductsInput
  tier: ProductTierUpdateOneInput
  type: ProductType
  variants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutCategoryDataInput {
  architecture: ProductArchitecture
  brand: BrandUpdateOneRequiredWithoutProductsInput
  color: ColorUpdateOneRequiredInput
  description: String
  externalURL: String
  functions: ProductFunctionUpdateManyInput
  buyNewEnabled: Boolean
  images: ImageUpdateManyInput
  innerMaterials: ProductUpdateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonUpdateOneInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  tags: TagUpdateManyWithoutProductsInput
  tier: ProductTierUpdateOneInput
  type: ProductType
  variants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutMaterialCategoryDataInput {
  architecture: ProductArchitecture
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  color: ColorUpdateOneRequiredInput
  description: String
  externalURL: String
  functions: ProductFunctionUpdateManyInput
  buyNewEnabled: Boolean
  images: ImageUpdateManyInput
  innerMaterials: ProductUpdateinnerMaterialsInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonUpdateOneInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  tags: TagUpdateManyWithoutProductsInput
  tier: ProductTierUpdateOneInput
  type: ProductType
  variants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutModelDataInput {
  architecture: ProductArchitecture
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  color: ColorUpdateOneRequiredInput
  description: String
  externalURL: String
  functions: ProductFunctionUpdateManyInput
  buyNewEnabled: Boolean
  images: ImageUpdateManyInput
  innerMaterials: ProductUpdateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonUpdateOneInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  tags: TagUpdateManyWithoutProductsInput
  tier: ProductTierUpdateOneInput
  type: ProductType
  variants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutTagsDataInput {
  architecture: ProductArchitecture
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  color: ColorUpdateOneRequiredInput
  description: String
  externalURL: String
  functions: ProductFunctionUpdateManyInput
  buyNewEnabled: Boolean
  images: ImageUpdateManyInput
  innerMaterials: ProductUpdateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonUpdateOneInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  tier: ProductTierUpdateOneInput
  type: ProductType
  variants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutVariantsDataInput {
  architecture: ProductArchitecture
  brand: BrandUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneRequiredWithoutProductsInput
  color: ColorUpdateOneRequiredInput
  description: String
  externalURL: String
  functions: ProductFunctionUpdateManyInput
  buyNewEnabled: Boolean
  images: ImageUpdateManyInput
  innerMaterials: ProductUpdateinnerMaterialsInput
  materialCategory: ProductMaterialCategoryUpdateOneWithoutProductsInput
  model: ProductModelUpdateOneWithoutProductsInput
  modelSize: SizeUpdateOneInput
  name: String
  outerMaterials: ProductUpdateouterMaterialsInput
  photographyStatus: PhotographyStatus
  productFit: ProductFit
  publishedAt: DateTime
  retailPrice: Int
  season: ProductSeasonUpdateOneInput
  secondaryColor: ColorUpdateOneInput
  slug: String
  status: ProductStatus
  tags: TagUpdateManyWithoutProductsInput
  tier: ProductTierUpdateOneInput
  type: ProductType
}

input ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateDataInput!
}

input ProductUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutBrandDataInput!
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpdateWithWhereUniqueWithoutMaterialCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutMaterialCategoryDataInput!
}

input ProductUpdateWithWhereUniqueWithoutModelInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutModelDataInput!
}

input ProductUpdateWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutTagsDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput!
  create: ProductCreateWithoutVariantsInput!
}

input ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutBrandDataInput!
  create: ProductCreateWithoutBrandInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductUpsertWithWhereUniqueWithoutMaterialCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutMaterialCategoryDataInput!
  create: ProductCreateWithoutMaterialCategoryInput!
}

input ProductUpsertWithWhereUniqueWithoutModelInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutModelDataInput!
  create: ProductCreateWithoutModelInput!
}

input ProductUpsertWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutTagsDataInput!
  create: ProductCreateWithoutTagsInput!
}

type ProductVariant {
  id: ID!
  sku: String
  displayShort: String!
  color: Color!
  internalSize: Size
  manufacturerSizes(where: SizeWhereInput, orderBy: SizeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Size!]
  weight: Float
  height: Float
  productID: String!
  product: Product!
  retailPrice: Float
  price: ProductVariantPrice
  shopifyProductVariant: ShopifyProductVariant
  physicalProducts(where: PhysicalProductWhereInput, orderBy: PhysicalProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProduct!]
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductVariantConnection {
  pageInfo: PageInfo!
  edges: [ProductVariantEdge]!
  aggregate: AggregateProductVariant!
}

input ProductVariantCreateInput {
  id: ID
  sku: String
  displayShort: String!
  color: ColorCreateOneWithoutProductVariantsInput!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  weight: Float
  height: Float
  productID: String!
  product: ProductCreateOneWithoutVariantsInput!
  retailPrice: Float
  price: ProductVariantPriceCreateOneInput
  shopifyProductVariant: ShopifyProductVariantCreateOneWithoutProductVariantInput
  physicalProducts: PhysicalProductCreateManyWithoutProductVariantInput
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
}

input ProductVariantCreateManyWithoutColorInput {
  create: [ProductVariantCreateWithoutColorInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductVariantCreateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductVariantCreateOneInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantCreateOneWithoutPhysicalProductsInput {
  create: ProductVariantCreateWithoutPhysicalProductsInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantCreateOneWithoutShopifyProductVariantInput {
  create: ProductVariantCreateWithoutShopifyProductVariantInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantCreateWithoutColorInput {
  id: ID
  sku: String
  displayShort: String!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  weight: Float
  height: Float
  productID: String!
  product: ProductCreateOneWithoutVariantsInput!
  retailPrice: Float
  price: ProductVariantPriceCreateOneInput
  shopifyProductVariant: ShopifyProductVariantCreateOneWithoutProductVariantInput
  physicalProducts: PhysicalProductCreateManyWithoutProductVariantInput
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
}

input ProductVariantCreateWithoutPhysicalProductsInput {
  id: ID
  sku: String
  displayShort: String!
  color: ColorCreateOneWithoutProductVariantsInput!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  weight: Float
  height: Float
  productID: String!
  product: ProductCreateOneWithoutVariantsInput!
  retailPrice: Float
  price: ProductVariantPriceCreateOneInput
  shopifyProductVariant: ShopifyProductVariantCreateOneWithoutProductVariantInput
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
}

input ProductVariantCreateWithoutProductInput {
  id: ID
  sku: String
  displayShort: String!
  color: ColorCreateOneWithoutProductVariantsInput!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  weight: Float
  height: Float
  productID: String!
  retailPrice: Float
  price: ProductVariantPriceCreateOneInput
  shopifyProductVariant: ShopifyProductVariantCreateOneWithoutProductVariantInput
  physicalProducts: PhysicalProductCreateManyWithoutProductVariantInput
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
}

input ProductVariantCreateWithoutShopifyProductVariantInput {
  id: ID
  sku: String
  displayShort: String!
  color: ColorCreateOneWithoutProductVariantsInput!
  internalSize: SizeCreateOneInput
  manufacturerSizes: SizeCreateManyInput
  weight: Float
  height: Float
  productID: String!
  product: ProductCreateOneWithoutVariantsInput!
  retailPrice: Float
  price: ProductVariantPriceCreateOneInput
  physicalProducts: PhysicalProductCreateManyWithoutProductVariantInput
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
}

type ProductVariantEdge {
  node: ProductVariant!
  cursor: String!
}

type ProductVariantFeedback {
  id: ID!
  isCompleted: Boolean!
  questions(where: ProductVariantFeedbackQuestionWhereInput, orderBy: ProductVariantFeedbackQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariantFeedbackQuestion!]
  reservationFeedback: ReservationFeedback!
  variant: ProductVariant!
}

type ProductVariantFeedbackConnection {
  pageInfo: PageInfo!
  edges: [ProductVariantFeedbackEdge]!
  aggregate: AggregateProductVariantFeedback!
}

input ProductVariantFeedbackCreateInput {
  id: ID
  isCompleted: Boolean!
  questions: ProductVariantFeedbackQuestionCreateManyWithoutVariantFeedbackInput
  reservationFeedback: ReservationFeedbackCreateOneWithoutFeedbacksInput!
  variant: ProductVariantCreateOneInput!
}

input ProductVariantFeedbackCreateManyWithoutReservationFeedbackInput {
  create: [ProductVariantFeedbackCreateWithoutReservationFeedbackInput!]
  connect: [ProductVariantFeedbackWhereUniqueInput!]
}

input ProductVariantFeedbackCreateOneWithoutQuestionsInput {
  create: ProductVariantFeedbackCreateWithoutQuestionsInput
  connect: ProductVariantFeedbackWhereUniqueInput
}

input ProductVariantFeedbackCreateWithoutQuestionsInput {
  id: ID
  isCompleted: Boolean!
  reservationFeedback: ReservationFeedbackCreateOneWithoutFeedbacksInput!
  variant: ProductVariantCreateOneInput!
}

input ProductVariantFeedbackCreateWithoutReservationFeedbackInput {
  id: ID
  isCompleted: Boolean!
  questions: ProductVariantFeedbackQuestionCreateManyWithoutVariantFeedbackInput
  variant: ProductVariantCreateOneInput!
}

type ProductVariantFeedbackEdge {
  node: ProductVariantFeedback!
  cursor: String!
}

enum ProductVariantFeedbackOrderByInput {
  id_ASC
  id_DESC
  isCompleted_ASC
  isCompleted_DESC
}

type ProductVariantFeedbackPreviousValues {
  id: ID!
  isCompleted: Boolean!
}

type ProductVariantFeedbackQuestion {
  id: ID!
  options: [String!]!
  question: String!
  responses: [String!]!
  type: QuestionType!
  variantFeedback: ProductVariantFeedback!
}

type ProductVariantFeedbackQuestionConnection {
  pageInfo: PageInfo!
  edges: [ProductVariantFeedbackQuestionEdge]!
  aggregate: AggregateProductVariantFeedbackQuestion!
}

input ProductVariantFeedbackQuestionCreateInput {
  id: ID
  options: ProductVariantFeedbackQuestionCreateoptionsInput
  question: String!
  responses: ProductVariantFeedbackQuestionCreateresponsesInput
  type: QuestionType!
  variantFeedback: ProductVariantFeedbackCreateOneWithoutQuestionsInput!
}

input ProductVariantFeedbackQuestionCreateManyWithoutVariantFeedbackInput {
  create: [ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput!]
  connect: [ProductVariantFeedbackQuestionWhereUniqueInput!]
}

input ProductVariantFeedbackQuestionCreateoptionsInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionCreateresponsesInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput {
  id: ID
  options: ProductVariantFeedbackQuestionCreateoptionsInput
  question: String!
  responses: ProductVariantFeedbackQuestionCreateresponsesInput
  type: QuestionType!
}

type ProductVariantFeedbackQuestionEdge {
  node: ProductVariantFeedbackQuestion!
  cursor: String!
}

enum ProductVariantFeedbackQuestionOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  type_ASC
  type_DESC
}

type ProductVariantFeedbackQuestionPreviousValues {
  id: ID!
  options: [String!]!
  question: String!
  responses: [String!]!
  type: QuestionType!
}

input ProductVariantFeedbackQuestionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  type: QuestionType
  type_not: QuestionType
  type_in: [QuestionType!]
  type_not_in: [QuestionType!]
  AND: [ProductVariantFeedbackQuestionScalarWhereInput!]
  OR: [ProductVariantFeedbackQuestionScalarWhereInput!]
  NOT: [ProductVariantFeedbackQuestionScalarWhereInput!]
}

type ProductVariantFeedbackQuestionSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantFeedbackQuestion
  updatedFields: [String!]
  previousValues: ProductVariantFeedbackQuestionPreviousValues
}

input ProductVariantFeedbackQuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductVariantFeedbackQuestionWhereInput
  AND: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]
  OR: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]
  NOT: [ProductVariantFeedbackQuestionSubscriptionWhereInput!]
}

input ProductVariantFeedbackQuestionUpdateInput {
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  question: String
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
  type: QuestionType
  variantFeedback: ProductVariantFeedbackUpdateOneRequiredWithoutQuestionsInput
}

input ProductVariantFeedbackQuestionUpdateManyDataInput {
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  question: String
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
  type: QuestionType
}

input ProductVariantFeedbackQuestionUpdateManyMutationInput {
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  question: String
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
  type: QuestionType
}

input ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput {
  create: [ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput!]
  delete: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  connect: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  set: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  disconnect: [ProductVariantFeedbackQuestionWhereUniqueInput!]
  update: [ProductVariantFeedbackQuestionUpdateWithWhereUniqueWithoutVariantFeedbackInput!]
  upsert: [ProductVariantFeedbackQuestionUpsertWithWhereUniqueWithoutVariantFeedbackInput!]
  deleteMany: [ProductVariantFeedbackQuestionScalarWhereInput!]
  updateMany: [ProductVariantFeedbackQuestionUpdateManyWithWhereNestedInput!]
}

input ProductVariantFeedbackQuestionUpdateManyWithWhereNestedInput {
  where: ProductVariantFeedbackQuestionScalarWhereInput!
  data: ProductVariantFeedbackQuestionUpdateManyDataInput!
}

input ProductVariantFeedbackQuestionUpdateoptionsInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionUpdateresponsesInput {
  set: [String!]
}

input ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput {
  options: ProductVariantFeedbackQuestionUpdateoptionsInput
  question: String
  responses: ProductVariantFeedbackQuestionUpdateresponsesInput
  type: QuestionType
}

input ProductVariantFeedbackQuestionUpdateWithWhereUniqueWithoutVariantFeedbackInput {
  where: ProductVariantFeedbackQuestionWhereUniqueInput!
  data: ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput!
}

input ProductVariantFeedbackQuestionUpsertWithWhereUniqueWithoutVariantFeedbackInput {
  where: ProductVariantFeedbackQuestionWhereUniqueInput!
  update: ProductVariantFeedbackQuestionUpdateWithoutVariantFeedbackDataInput!
  create: ProductVariantFeedbackQuestionCreateWithoutVariantFeedbackInput!
}

input ProductVariantFeedbackQuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  type: QuestionType
  type_not: QuestionType
  type_in: [QuestionType!]
  type_not_in: [QuestionType!]
  variantFeedback: ProductVariantFeedbackWhereInput
  AND: [ProductVariantFeedbackQuestionWhereInput!]
  OR: [ProductVariantFeedbackQuestionWhereInput!]
  NOT: [ProductVariantFeedbackQuestionWhereInput!]
}

input ProductVariantFeedbackQuestionWhereUniqueInput {
  id: ID
}

input ProductVariantFeedbackScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isCompleted: Boolean
  isCompleted_not: Boolean
  AND: [ProductVariantFeedbackScalarWhereInput!]
  OR: [ProductVariantFeedbackScalarWhereInput!]
  NOT: [ProductVariantFeedbackScalarWhereInput!]
}

type ProductVariantFeedbackSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantFeedback
  updatedFields: [String!]
  previousValues: ProductVariantFeedbackPreviousValues
}

input ProductVariantFeedbackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductVariantFeedbackWhereInput
  AND: [ProductVariantFeedbackSubscriptionWhereInput!]
  OR: [ProductVariantFeedbackSubscriptionWhereInput!]
  NOT: [ProductVariantFeedbackSubscriptionWhereInput!]
}

input ProductVariantFeedbackUpdateInput {
  isCompleted: Boolean
  questions: ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput
  reservationFeedback: ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateManyDataInput {
  isCompleted: Boolean
}

input ProductVariantFeedbackUpdateManyMutationInput {
  isCompleted: Boolean
}

input ProductVariantFeedbackUpdateManyWithoutReservationFeedbackInput {
  create: [ProductVariantFeedbackCreateWithoutReservationFeedbackInput!]
  delete: [ProductVariantFeedbackWhereUniqueInput!]
  connect: [ProductVariantFeedbackWhereUniqueInput!]
  set: [ProductVariantFeedbackWhereUniqueInput!]
  disconnect: [ProductVariantFeedbackWhereUniqueInput!]
  update: [ProductVariantFeedbackUpdateWithWhereUniqueWithoutReservationFeedbackInput!]
  upsert: [ProductVariantFeedbackUpsertWithWhereUniqueWithoutReservationFeedbackInput!]
  deleteMany: [ProductVariantFeedbackScalarWhereInput!]
  updateMany: [ProductVariantFeedbackUpdateManyWithWhereNestedInput!]
}

input ProductVariantFeedbackUpdateManyWithWhereNestedInput {
  where: ProductVariantFeedbackScalarWhereInput!
  data: ProductVariantFeedbackUpdateManyDataInput!
}

input ProductVariantFeedbackUpdateOneRequiredWithoutQuestionsInput {
  create: ProductVariantFeedbackCreateWithoutQuestionsInput
  update: ProductVariantFeedbackUpdateWithoutQuestionsDataInput
  upsert: ProductVariantFeedbackUpsertWithoutQuestionsInput
  connect: ProductVariantFeedbackWhereUniqueInput
}

input ProductVariantFeedbackUpdateWithoutQuestionsDataInput {
  isCompleted: Boolean
  reservationFeedback: ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput {
  isCompleted: Boolean
  questions: ProductVariantFeedbackQuestionUpdateManyWithoutVariantFeedbackInput
  variant: ProductVariantUpdateOneRequiredInput
}

input ProductVariantFeedbackUpdateWithWhereUniqueWithoutReservationFeedbackInput {
  where: ProductVariantFeedbackWhereUniqueInput!
  data: ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput!
}

input ProductVariantFeedbackUpsertWithoutQuestionsInput {
  update: ProductVariantFeedbackUpdateWithoutQuestionsDataInput!
  create: ProductVariantFeedbackCreateWithoutQuestionsInput!
}

input ProductVariantFeedbackUpsertWithWhereUniqueWithoutReservationFeedbackInput {
  where: ProductVariantFeedbackWhereUniqueInput!
  update: ProductVariantFeedbackUpdateWithoutReservationFeedbackDataInput!
  create: ProductVariantFeedbackCreateWithoutReservationFeedbackInput!
}

input ProductVariantFeedbackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isCompleted: Boolean
  isCompleted_not: Boolean
  questions_every: ProductVariantFeedbackQuestionWhereInput
  questions_some: ProductVariantFeedbackQuestionWhereInput
  questions_none: ProductVariantFeedbackQuestionWhereInput
  reservationFeedback: ReservationFeedbackWhereInput
  variant: ProductVariantWhereInput
  AND: [ProductVariantFeedbackWhereInput!]
  OR: [ProductVariantFeedbackWhereInput!]
  NOT: [ProductVariantFeedbackWhereInput!]
}

input ProductVariantFeedbackWhereUniqueInput {
  id: ID
}

enum ProductVariantOrderByInput {
  id_ASC
  id_DESC
  sku_ASC
  sku_DESC
  displayShort_ASC
  displayShort_DESC
  weight_ASC
  weight_DESC
  height_ASC
  height_DESC
  productID_ASC
  productID_DESC
  retailPrice_ASC
  retailPrice_DESC
  total_ASC
  total_DESC
  reservable_ASC
  reservable_DESC
  reserved_ASC
  reserved_DESC
  nonReservable_ASC
  nonReservable_DESC
  offloaded_ASC
  offloaded_DESC
  stored_ASC
  stored_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductVariantPreviousValues {
  id: ID!
  sku: String
  displayShort: String!
  weight: Float
  height: Float
  productID: String!
  retailPrice: Float
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductVariantPrice {
  id: ID!
  retailPrice: Float
}

type ProductVariantPriceConnection {
  pageInfo: PageInfo!
  edges: [ProductVariantPriceEdge]!
  aggregate: AggregateProductVariantPrice!
}

input ProductVariantPriceCreateInput {
  id: ID
  retailPrice: Float
}

input ProductVariantPriceCreateOneInput {
  create: ProductVariantPriceCreateInput
  connect: ProductVariantPriceWhereUniqueInput
}

type ProductVariantPriceEdge {
  node: ProductVariantPrice!
  cursor: String!
}

enum ProductVariantPriceOrderByInput {
  id_ASC
  id_DESC
  retailPrice_ASC
  retailPrice_DESC
}

type ProductVariantPricePreviousValues {
  id: ID!
  retailPrice: Float
}

type ProductVariantPriceSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantPrice
  updatedFields: [String!]
  previousValues: ProductVariantPricePreviousValues
}

input ProductVariantPriceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductVariantPriceWhereInput
  AND: [ProductVariantPriceSubscriptionWhereInput!]
  OR: [ProductVariantPriceSubscriptionWhereInput!]
  NOT: [ProductVariantPriceSubscriptionWhereInput!]
}

input ProductVariantPriceUpdateDataInput {
  retailPrice: Float
}

input ProductVariantPriceUpdateInput {
  retailPrice: Float
}

input ProductVariantPriceUpdateManyMutationInput {
  retailPrice: Float
}

input ProductVariantPriceUpdateOneInput {
  create: ProductVariantPriceCreateInput
  update: ProductVariantPriceUpdateDataInput
  upsert: ProductVariantPriceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductVariantPriceWhereUniqueInput
}

input ProductVariantPriceUpsertNestedInput {
  update: ProductVariantPriceUpdateDataInput!
  create: ProductVariantPriceCreateInput!
}

input ProductVariantPriceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  retailPrice: Float
  retailPrice_not: Float
  retailPrice_in: [Float!]
  retailPrice_not_in: [Float!]
  retailPrice_lt: Float
  retailPrice_lte: Float
  retailPrice_gt: Float
  retailPrice_gte: Float
  AND: [ProductVariantPriceWhereInput!]
  OR: [ProductVariantPriceWhereInput!]
  NOT: [ProductVariantPriceWhereInput!]
}

input ProductVariantPriceWhereUniqueInput {
  id: ID
}

input ProductVariantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sku: String
  sku_not: String
  sku_in: [String!]
  sku_not_in: [String!]
  sku_lt: String
  sku_lte: String
  sku_gt: String
  sku_gte: String
  sku_contains: String
  sku_not_contains: String
  sku_starts_with: String
  sku_not_starts_with: String
  sku_ends_with: String
  sku_not_ends_with: String
  displayShort: String
  displayShort_not: String
  displayShort_in: [String!]
  displayShort_not_in: [String!]
  displayShort_lt: String
  displayShort_lte: String
  displayShort_gt: String
  displayShort_gte: String
  displayShort_contains: String
  displayShort_not_contains: String
  displayShort_starts_with: String
  displayShort_not_starts_with: String
  displayShort_ends_with: String
  displayShort_not_ends_with: String
  weight: Float
  weight_not: Float
  weight_in: [Float!]
  weight_not_in: [Float!]
  weight_lt: Float
  weight_lte: Float
  weight_gt: Float
  weight_gte: Float
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  productID: String
  productID_not: String
  productID_in: [String!]
  productID_not_in: [String!]
  productID_lt: String
  productID_lte: String
  productID_gt: String
  productID_gte: String
  productID_contains: String
  productID_not_contains: String
  productID_starts_with: String
  productID_not_starts_with: String
  productID_ends_with: String
  productID_not_ends_with: String
  retailPrice: Float
  retailPrice_not: Float
  retailPrice_in: [Float!]
  retailPrice_not_in: [Float!]
  retailPrice_lt: Float
  retailPrice_lte: Float
  retailPrice_gt: Float
  retailPrice_gte: Float
  total: Int
  total_not: Int
  total_in: [Int!]
  total_not_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  reservable: Int
  reservable_not: Int
  reservable_in: [Int!]
  reservable_not_in: [Int!]
  reservable_lt: Int
  reservable_lte: Int
  reservable_gt: Int
  reservable_gte: Int
  reserved: Int
  reserved_not: Int
  reserved_in: [Int!]
  reserved_not_in: [Int!]
  reserved_lt: Int
  reserved_lte: Int
  reserved_gt: Int
  reserved_gte: Int
  nonReservable: Int
  nonReservable_not: Int
  nonReservable_in: [Int!]
  nonReservable_not_in: [Int!]
  nonReservable_lt: Int
  nonReservable_lte: Int
  nonReservable_gt: Int
  nonReservable_gte: Int
  offloaded: Int
  offloaded_not: Int
  offloaded_in: [Int!]
  offloaded_not_in: [Int!]
  offloaded_lt: Int
  offloaded_lte: Int
  offloaded_gt: Int
  offloaded_gte: Int
  stored: Int
  stored_not: Int
  stored_in: [Int!]
  stored_not_in: [Int!]
  stored_lt: Int
  stored_lte: Int
  stored_gt: Int
  stored_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductVariantScalarWhereInput!]
  OR: [ProductVariantScalarWhereInput!]
  NOT: [ProductVariantScalarWhereInput!]
}

type ProductVariantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariant
  updatedFields: [String!]
  previousValues: ProductVariantPreviousValues
}

input ProductVariantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductVariantWhereInput
  AND: [ProductVariantSubscriptionWhereInput!]
  OR: [ProductVariantSubscriptionWhereInput!]
  NOT: [ProductVariantSubscriptionWhereInput!]
}

input ProductVariantUpdateDataInput {
  sku: String
  displayShort: String
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  weight: Float
  height: Float
  productID: String
  product: ProductUpdateOneRequiredWithoutVariantsInput
  retailPrice: Float
  price: ProductVariantPriceUpdateOneInput
  shopifyProductVariant: ShopifyProductVariantUpdateOneWithoutProductVariantInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateInput {
  sku: String
  displayShort: String
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  weight: Float
  height: Float
  productID: String
  product: ProductUpdateOneRequiredWithoutVariantsInput
  retailPrice: Float
  price: ProductVariantPriceUpdateOneInput
  shopifyProductVariant: ShopifyProductVariantUpdateOneWithoutProductVariantInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateManyDataInput {
  sku: String
  displayShort: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateManyMutationInput {
  sku: String
  displayShort: String
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateManyWithoutColorInput {
  create: [ProductVariantCreateWithoutColorInput!]
  delete: [ProductVariantWhereUniqueInput!]
  connect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutColorInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutColorInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
}

input ProductVariantUpdateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  delete: [ProductVariantWhereUniqueInput!]
  connect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
}

input ProductVariantUpdateManyWithWhereNestedInput {
  where: ProductVariantScalarWhereInput!
  data: ProductVariantUpdateManyDataInput!
}

input ProductVariantUpdateOneInput {
  create: ProductVariantCreateInput
  update: ProductVariantUpdateDataInput
  upsert: ProductVariantUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantUpdateOneRequiredInput {
  create: ProductVariantCreateInput
  update: ProductVariantUpdateDataInput
  upsert: ProductVariantUpsertNestedInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantUpdateOneRequiredWithoutPhysicalProductsInput {
  create: ProductVariantCreateWithoutPhysicalProductsInput
  update: ProductVariantUpdateWithoutPhysicalProductsDataInput
  upsert: ProductVariantUpsertWithoutPhysicalProductsInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantUpdateOneWithoutShopifyProductVariantInput {
  create: ProductVariantCreateWithoutShopifyProductVariantInput
  update: ProductVariantUpdateWithoutShopifyProductVariantDataInput
  upsert: ProductVariantUpsertWithoutShopifyProductVariantInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantUpdateWithoutColorDataInput {
  sku: String
  displayShort: String
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  weight: Float
  height: Float
  productID: String
  product: ProductUpdateOneRequiredWithoutVariantsInput
  retailPrice: Float
  price: ProductVariantPriceUpdateOneInput
  shopifyProductVariant: ShopifyProductVariantUpdateOneWithoutProductVariantInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateWithoutPhysicalProductsDataInput {
  sku: String
  displayShort: String
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  weight: Float
  height: Float
  productID: String
  product: ProductUpdateOneRequiredWithoutVariantsInput
  retailPrice: Float
  price: ProductVariantPriceUpdateOneInput
  shopifyProductVariant: ShopifyProductVariantUpdateOneWithoutProductVariantInput
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateWithoutProductDataInput {
  sku: String
  displayShort: String
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  weight: Float
  height: Float
  productID: String
  retailPrice: Float
  price: ProductVariantPriceUpdateOneInput
  shopifyProductVariant: ShopifyProductVariantUpdateOneWithoutProductVariantInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateWithoutShopifyProductVariantDataInput {
  sku: String
  displayShort: String
  color: ColorUpdateOneRequiredWithoutProductVariantsInput
  internalSize: SizeUpdateOneInput
  manufacturerSizes: SizeUpdateManyInput
  weight: Float
  height: Float
  productID: String
  product: ProductUpdateOneRequiredWithoutVariantsInput
  retailPrice: Float
  price: ProductVariantPriceUpdateOneInput
  physicalProducts: PhysicalProductUpdateManyWithoutProductVariantInput
  total: Int
  reservable: Int
  reserved: Int
  nonReservable: Int
  offloaded: Int
  stored: Int
}

input ProductVariantUpdateWithWhereUniqueWithoutColorInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutColorDataInput!
}

input ProductVariantUpdateWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutProductDataInput!
}

input ProductVariantUpsertNestedInput {
  update: ProductVariantUpdateDataInput!
  create: ProductVariantCreateInput!
}

input ProductVariantUpsertWithoutPhysicalProductsInput {
  update: ProductVariantUpdateWithoutPhysicalProductsDataInput!
  create: ProductVariantCreateWithoutPhysicalProductsInput!
}

input ProductVariantUpsertWithoutShopifyProductVariantInput {
  update: ProductVariantUpdateWithoutShopifyProductVariantDataInput!
  create: ProductVariantCreateWithoutShopifyProductVariantInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutColorInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutColorDataInput!
  create: ProductVariantCreateWithoutColorInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutProductDataInput!
  create: ProductVariantCreateWithoutProductInput!
}

type ProductVariantWant {
  id: ID!
  productVariant: ProductVariant!
  user: User!
  isFulfilled: Boolean!
}

type ProductVariantWantConnection {
  pageInfo: PageInfo!
  edges: [ProductVariantWantEdge]!
  aggregate: AggregateProductVariantWant!
}

input ProductVariantWantCreateInput {
  id: ID
  productVariant: ProductVariantCreateOneInput!
  user: UserCreateOneInput!
  isFulfilled: Boolean!
}

type ProductVariantWantEdge {
  node: ProductVariantWant!
  cursor: String!
}

enum ProductVariantWantOrderByInput {
  id_ASC
  id_DESC
  isFulfilled_ASC
  isFulfilled_DESC
}

type ProductVariantWantPreviousValues {
  id: ID!
  isFulfilled: Boolean!
}

type ProductVariantWantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariantWant
  updatedFields: [String!]
  previousValues: ProductVariantWantPreviousValues
}

input ProductVariantWantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductVariantWantWhereInput
  AND: [ProductVariantWantSubscriptionWhereInput!]
  OR: [ProductVariantWantSubscriptionWhereInput!]
  NOT: [ProductVariantWantSubscriptionWhereInput!]
}

input ProductVariantWantUpdateInput {
  productVariant: ProductVariantUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  isFulfilled: Boolean
}

input ProductVariantWantUpdateManyMutationInput {
  isFulfilled: Boolean
}

input ProductVariantWantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  productVariant: ProductVariantWhereInput
  user: UserWhereInput
  isFulfilled: Boolean
  isFulfilled_not: Boolean
  AND: [ProductVariantWantWhereInput!]
  OR: [ProductVariantWantWhereInput!]
  NOT: [ProductVariantWantWhereInput!]
}

input ProductVariantWantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sku: String
  sku_not: String
  sku_in: [String!]
  sku_not_in: [String!]
  sku_lt: String
  sku_lte: String
  sku_gt: String
  sku_gte: String
  sku_contains: String
  sku_not_contains: String
  sku_starts_with: String
  sku_not_starts_with: String
  sku_ends_with: String
  sku_not_ends_with: String
  displayShort: String
  displayShort_not: String
  displayShort_in: [String!]
  displayShort_not_in: [String!]
  displayShort_lt: String
  displayShort_lte: String
  displayShort_gt: String
  displayShort_gte: String
  displayShort_contains: String
  displayShort_not_contains: String
  displayShort_starts_with: String
  displayShort_not_starts_with: String
  displayShort_ends_with: String
  displayShort_not_ends_with: String
  color: ColorWhereInput
  internalSize: SizeWhereInput
  manufacturerSizes_every: SizeWhereInput
  manufacturerSizes_some: SizeWhereInput
  manufacturerSizes_none: SizeWhereInput
  weight: Float
  weight_not: Float
  weight_in: [Float!]
  weight_not_in: [Float!]
  weight_lt: Float
  weight_lte: Float
  weight_gt: Float
  weight_gte: Float
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  productID: String
  productID_not: String
  productID_in: [String!]
  productID_not_in: [String!]
  productID_lt: String
  productID_lte: String
  productID_gt: String
  productID_gte: String
  productID_contains: String
  productID_not_contains: String
  productID_starts_with: String
  productID_not_starts_with: String
  productID_ends_with: String
  productID_not_ends_with: String
  product: ProductWhereInput
  retailPrice: Float
  retailPrice_not: Float
  retailPrice_in: [Float!]
  retailPrice_not_in: [Float!]
  retailPrice_lt: Float
  retailPrice_lte: Float
  retailPrice_gt: Float
  retailPrice_gte: Float
  price: ProductVariantPriceWhereInput
  shopifyProductVariant: ShopifyProductVariantWhereInput
  physicalProducts_every: PhysicalProductWhereInput
  physicalProducts_some: PhysicalProductWhereInput
  physicalProducts_none: PhysicalProductWhereInput
  total: Int
  total_not: Int
  total_in: [Int!]
  total_not_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  reservable: Int
  reservable_not: Int
  reservable_in: [Int!]
  reservable_not_in: [Int!]
  reservable_lt: Int
  reservable_lte: Int
  reservable_gt: Int
  reservable_gte: Int
  reserved: Int
  reserved_not: Int
  reserved_in: [Int!]
  reserved_not_in: [Int!]
  reserved_lt: Int
  reserved_lte: Int
  reserved_gt: Int
  reserved_gte: Int
  nonReservable: Int
  nonReservable_not: Int
  nonReservable_in: [Int!]
  nonReservable_not_in: [Int!]
  nonReservable_lt: Int
  nonReservable_lte: Int
  nonReservable_gt: Int
  nonReservable_gte: Int
  offloaded: Int
  offloaded_not: Int
  offloaded_in: [Int!]
  offloaded_not_in: [Int!]
  offloaded_lt: Int
  offloaded_lte: Int
  offloaded_gt: Int
  offloaded_gte: Int
  stored: Int
  stored_not: Int
  stored_in: [Int!]
  stored_not_in: [Int!]
  stored_lt: Int
  stored_lte: Int
  stored_gt: Int
  stored_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
}

input ProductVariantWhereUniqueInput {
  id: ID
  sku: String
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  architecture: ProductArchitecture
  architecture_not: ProductArchitecture
  architecture_in: [ProductArchitecture!]
  architecture_not_in: [ProductArchitecture!]
  brand: BrandWhereInput
  category: CategoryWhereInput
  color: ColorWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  externalURL: String
  externalURL_not: String
  externalURL_in: [String!]
  externalURL_not_in: [String!]
  externalURL_lt: String
  externalURL_lte: String
  externalURL_gt: String
  externalURL_gte: String
  externalURL_contains: String
  externalURL_not_contains: String
  externalURL_starts_with: String
  externalURL_not_starts_with: String
  externalURL_ends_with: String
  externalURL_not_ends_with: String
  functions_every: ProductFunctionWhereInput
  functions_some: ProductFunctionWhereInput
  functions_none: ProductFunctionWhereInput
  buyNewEnabled: Boolean
  buyNewEnabled_not: Boolean
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
  materialCategory: ProductMaterialCategoryWhereInput
  model: ProductModelWhereInput
  modelSize: SizeWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  photographyStatus: PhotographyStatus
  photographyStatus_not: PhotographyStatus
  photographyStatus_in: [PhotographyStatus!]
  photographyStatus_not_in: [PhotographyStatus!]
  productFit: ProductFit
  productFit_not: ProductFit
  productFit_in: [ProductFit!]
  productFit_not_in: [ProductFit!]
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  retailPrice: Int
  retailPrice_not: Int
  retailPrice_in: [Int!]
  retailPrice_not_in: [Int!]
  retailPrice_lt: Int
  retailPrice_lte: Int
  retailPrice_gt: Int
  retailPrice_gte: Int
  season: ProductSeasonWhereInput
  secondaryColor: ColorWhereInput
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  status: ProductStatus
  status_not: ProductStatus
  status_in: [ProductStatus!]
  status_not_in: [ProductStatus!]
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  tier: ProductTierWhereInput
  type: ProductType
  type_not: ProductType
  type_in: [ProductType!]
  type_not_in: [ProductType!]
  variants_every: ProductVariantWhereInput
  variants_some: ProductVariantWhereInput
  variants_none: ProductVariantWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

type PushNotificationReceipt {
  id: ID!
  route: String
  screen: String
  uri: String
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PushNotificationReceiptConnection {
  pageInfo: PageInfo!
  edges: [PushNotificationReceiptEdge]!
  aggregate: AggregatePushNotificationReceipt!
}

input PushNotificationReceiptCreateInput {
  id: ID
  route: String
  screen: String
  uri: String
  users: UserCreateManyWithoutPushNotificationsInput
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime!
}

input PushNotificationReceiptCreateManyInput {
  create: [PushNotificationReceiptCreateInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
}

input PushNotificationReceiptCreateManyWithoutUsersInput {
  create: [PushNotificationReceiptCreateWithoutUsersInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
}

input PushNotificationReceiptCreateWithoutUsersInput {
  id: ID
  route: String
  screen: String
  uri: String
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime!
}

type PushNotificationReceiptEdge {
  node: PushNotificationReceipt!
  cursor: String!
}

enum PushNotificationReceiptOrderByInput {
  id_ASC
  id_DESC
  route_ASC
  route_DESC
  screen_ASC
  screen_DESC
  uri_ASC
  uri_DESC
  interest_ASC
  interest_DESC
  body_ASC
  body_DESC
  title_ASC
  title_DESC
  recordID_ASC
  recordID_DESC
  recordSlug_ASC
  recordSlug_DESC
  notificationKey_ASC
  notificationKey_DESC
  sentAt_ASC
  sentAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PushNotificationReceiptPreviousValues {
  id: ID!
  route: String
  screen: String
  uri: String
  interest: String
  body: String!
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PushNotificationReceiptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  route: String
  route_not: String
  route_in: [String!]
  route_not_in: [String!]
  route_lt: String
  route_lte: String
  route_gt: String
  route_gte: String
  route_contains: String
  route_not_contains: String
  route_starts_with: String
  route_not_starts_with: String
  route_ends_with: String
  route_not_ends_with: String
  screen: String
  screen_not: String
  screen_in: [String!]
  screen_not_in: [String!]
  screen_lt: String
  screen_lte: String
  screen_gt: String
  screen_gte: String
  screen_contains: String
  screen_not_contains: String
  screen_starts_with: String
  screen_not_starts_with: String
  screen_ends_with: String
  screen_not_ends_with: String
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  interest: String
  interest_not: String
  interest_in: [String!]
  interest_not_in: [String!]
  interest_lt: String
  interest_lte: String
  interest_gt: String
  interest_gte: String
  interest_contains: String
  interest_not_contains: String
  interest_starts_with: String
  interest_not_starts_with: String
  interest_ends_with: String
  interest_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  recordID: String
  recordID_not: String
  recordID_in: [String!]
  recordID_not_in: [String!]
  recordID_lt: String
  recordID_lte: String
  recordID_gt: String
  recordID_gte: String
  recordID_contains: String
  recordID_not_contains: String
  recordID_starts_with: String
  recordID_not_starts_with: String
  recordID_ends_with: String
  recordID_not_ends_with: String
  recordSlug: String
  recordSlug_not: String
  recordSlug_in: [String!]
  recordSlug_not_in: [String!]
  recordSlug_lt: String
  recordSlug_lte: String
  recordSlug_gt: String
  recordSlug_gte: String
  recordSlug_contains: String
  recordSlug_not_contains: String
  recordSlug_starts_with: String
  recordSlug_not_starts_with: String
  recordSlug_ends_with: String
  recordSlug_not_ends_with: String
  notificationKey: String
  notificationKey_not: String
  notificationKey_in: [String!]
  notificationKey_not_in: [String!]
  notificationKey_lt: String
  notificationKey_lte: String
  notificationKey_gt: String
  notificationKey_gte: String
  notificationKey_contains: String
  notificationKey_not_contains: String
  notificationKey_starts_with: String
  notificationKey_not_starts_with: String
  notificationKey_ends_with: String
  notificationKey_not_ends_with: String
  sentAt: DateTime
  sentAt_not: DateTime
  sentAt_in: [DateTime!]
  sentAt_not_in: [DateTime!]
  sentAt_lt: DateTime
  sentAt_lte: DateTime
  sentAt_gt: DateTime
  sentAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PushNotificationReceiptScalarWhereInput!]
  OR: [PushNotificationReceiptScalarWhereInput!]
  NOT: [PushNotificationReceiptScalarWhereInput!]
}

type PushNotificationReceiptSubscriptionPayload {
  mutation: MutationType!
  node: PushNotificationReceipt
  updatedFields: [String!]
  previousValues: PushNotificationReceiptPreviousValues
}

input PushNotificationReceiptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PushNotificationReceiptWhereInput
  AND: [PushNotificationReceiptSubscriptionWhereInput!]
  OR: [PushNotificationReceiptSubscriptionWhereInput!]
  NOT: [PushNotificationReceiptSubscriptionWhereInput!]
}

input PushNotificationReceiptUpdateDataInput {
  route: String
  screen: String
  uri: String
  users: UserUpdateManyWithoutPushNotificationsInput
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateInput {
  route: String
  screen: String
  uri: String
  users: UserUpdateManyWithoutPushNotificationsInput
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateManyDataInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateManyInput {
  create: [PushNotificationReceiptCreateInput!]
  update: [PushNotificationReceiptUpdateWithWhereUniqueNestedInput!]
  upsert: [PushNotificationReceiptUpsertWithWhereUniqueNestedInput!]
  delete: [PushNotificationReceiptWhereUniqueInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
  set: [PushNotificationReceiptWhereUniqueInput!]
  disconnect: [PushNotificationReceiptWhereUniqueInput!]
  deleteMany: [PushNotificationReceiptScalarWhereInput!]
  updateMany: [PushNotificationReceiptUpdateManyWithWhereNestedInput!]
}

input PushNotificationReceiptUpdateManyMutationInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateManyWithoutUsersInput {
  create: [PushNotificationReceiptCreateWithoutUsersInput!]
  delete: [PushNotificationReceiptWhereUniqueInput!]
  connect: [PushNotificationReceiptWhereUniqueInput!]
  set: [PushNotificationReceiptWhereUniqueInput!]
  disconnect: [PushNotificationReceiptWhereUniqueInput!]
  update: [PushNotificationReceiptUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [PushNotificationReceiptUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [PushNotificationReceiptScalarWhereInput!]
  updateMany: [PushNotificationReceiptUpdateManyWithWhereNestedInput!]
}

input PushNotificationReceiptUpdateManyWithWhereNestedInput {
  where: PushNotificationReceiptScalarWhereInput!
  data: PushNotificationReceiptUpdateManyDataInput!
}

input PushNotificationReceiptUpdateWithoutUsersDataInput {
  route: String
  screen: String
  uri: String
  interest: String
  body: String
  title: String
  recordID: String
  recordSlug: String
  notificationKey: String
  sentAt: DateTime
}

input PushNotificationReceiptUpdateWithWhereUniqueNestedInput {
  where: PushNotificationReceiptWhereUniqueInput!
  data: PushNotificationReceiptUpdateDataInput!
}

input PushNotificationReceiptUpdateWithWhereUniqueWithoutUsersInput {
  where: PushNotificationReceiptWhereUniqueInput!
  data: PushNotificationReceiptUpdateWithoutUsersDataInput!
}

input PushNotificationReceiptUpsertWithWhereUniqueNestedInput {
  where: PushNotificationReceiptWhereUniqueInput!
  update: PushNotificationReceiptUpdateDataInput!
  create: PushNotificationReceiptCreateInput!
}

input PushNotificationReceiptUpsertWithWhereUniqueWithoutUsersInput {
  where: PushNotificationReceiptWhereUniqueInput!
  update: PushNotificationReceiptUpdateWithoutUsersDataInput!
  create: PushNotificationReceiptCreateWithoutUsersInput!
}

input PushNotificationReceiptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  route: String
  route_not: String
  route_in: [String!]
  route_not_in: [String!]
  route_lt: String
  route_lte: String
  route_gt: String
  route_gte: String
  route_contains: String
  route_not_contains: String
  route_starts_with: String
  route_not_starts_with: String
  route_ends_with: String
  route_not_ends_with: String
  screen: String
  screen_not: String
  screen_in: [String!]
  screen_not_in: [String!]
  screen_lt: String
  screen_lte: String
  screen_gt: String
  screen_gte: String
  screen_contains: String
  screen_not_contains: String
  screen_starts_with: String
  screen_not_starts_with: String
  screen_ends_with: String
  screen_not_ends_with: String
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  interest: String
  interest_not: String
  interest_in: [String!]
  interest_not_in: [String!]
  interest_lt: String
  interest_lte: String
  interest_gt: String
  interest_gte: String
  interest_contains: String
  interest_not_contains: String
  interest_starts_with: String
  interest_not_starts_with: String
  interest_ends_with: String
  interest_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  recordID: String
  recordID_not: String
  recordID_in: [String!]
  recordID_not_in: [String!]
  recordID_lt: String
  recordID_lte: String
  recordID_gt: String
  recordID_gte: String
  recordID_contains: String
  recordID_not_contains: String
  recordID_starts_with: String
  recordID_not_starts_with: String
  recordID_ends_with: String
  recordID_not_ends_with: String
  recordSlug: String
  recordSlug_not: String
  recordSlug_in: [String!]
  recordSlug_not_in: [String!]
  recordSlug_lt: String
  recordSlug_lte: String
  recordSlug_gt: String
  recordSlug_gte: String
  recordSlug_contains: String
  recordSlug_not_contains: String
  recordSlug_starts_with: String
  recordSlug_not_starts_with: String
  recordSlug_ends_with: String
  recordSlug_not_ends_with: String
  notificationKey: String
  notificationKey_not: String
  notificationKey_in: [String!]
  notificationKey_not_in: [String!]
  notificationKey_lt: String
  notificationKey_lte: String
  notificationKey_gt: String
  notificationKey_gte: String
  notificationKey_contains: String
  notificationKey_not_contains: String
  notificationKey_starts_with: String
  notificationKey_not_starts_with: String
  notificationKey_ends_with: String
  notificationKey_not_ends_with: String
  sentAt: DateTime
  sentAt_not: DateTime
  sentAt_in: [DateTime!]
  sentAt_not_in: [DateTime!]
  sentAt_lt: DateTime
  sentAt_lte: DateTime
  sentAt_gt: DateTime
  sentAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PushNotificationReceiptWhereInput!]
  OR: [PushNotificationReceiptWhereInput!]
  NOT: [PushNotificationReceiptWhereInput!]
}

input PushNotificationReceiptWhereUniqueInput {
  id: ID
}

enum PushNotificationStatus {
  Blocked
  Granted
  Denied
}

type Query {
  activeAdminUser(where: ActiveAdminUserWhereUniqueInput!): ActiveAdminUser
  activeAdminUsers(where: ActiveAdminUserWhereInput, orderBy: ActiveAdminUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActiveAdminUser]!
  activeAdminUsersConnection(where: ActiveAdminUserWhereInput, orderBy: ActiveAdminUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActiveAdminUserConnection!
  adminActionLog(where: AdminActionLogWhereUniqueInput!): AdminActionLog
  adminActionLogs(where: AdminActionLogWhereInput, orderBy: AdminActionLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminActionLog]!
  adminActionLogsConnection(where: AdminActionLogWhereInput, orderBy: AdminActionLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminActionLogConnection!
  adminActionLogInterpretation(where: AdminActionLogInterpretationWhereUniqueInput!): AdminActionLogInterpretation
  adminActionLogInterpretations(where: AdminActionLogInterpretationWhereInput, orderBy: AdminActionLogInterpretationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminActionLogInterpretation]!
  adminActionLogInterpretationsConnection(where: AdminActionLogInterpretationWhereInput, orderBy: AdminActionLogInterpretationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminActionLogInterpretationConnection!
  bagItem(where: BagItemWhereUniqueInput!): BagItem
  bagItems(where: BagItemWhereInput, orderBy: BagItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BagItem]!
  bagItemsConnection(where: BagItemWhereInput, orderBy: BagItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BagItemConnection!
  billingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  billingInfoes(where: BillingInfoWhereInput, orderBy: BillingInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BillingInfo]!
  billingInfoesConnection(where: BillingInfoWhereInput, orderBy: BillingInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BillingInfoConnection!
  blogPost(where: BlogPostWhereUniqueInput!): BlogPost
  blogPosts(where: BlogPostWhereInput, orderBy: BlogPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlogPost]!
  blogPostsConnection(where: BlogPostWhereInput, orderBy: BlogPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlogPostConnection!
  bottomSize(where: BottomSizeWhereUniqueInput!): BottomSize
  bottomSizes(where: BottomSizeWhereInput, orderBy: BottomSizeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BottomSize]!
  bottomSizesConnection(where: BottomSizeWhereInput, orderBy: BottomSizeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BottomSizeConnection!
  brand(where: BrandWhereUniqueInput!): Brand
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  collection(where: CollectionWhereUniqueInput!): Collection
  collections(where: CollectionWhereInput, orderBy: CollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Collection]!
  collectionsConnection(where: CollectionWhereInput, orderBy: CollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CollectionConnection!
  color(where: ColorWhereUniqueInput!): Color
  colors(where: ColorWhereInput, orderBy: ColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Color]!
  colorsConnection(where: ColorWhereInput, orderBy: ColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ColorConnection!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  customerAdmissionsData(where: CustomerAdmissionsDataWhereUniqueInput!): CustomerAdmissionsData
  customerAdmissionsDatas(where: CustomerAdmissionsDataWhereInput, orderBy: CustomerAdmissionsDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerAdmissionsData]!
  customerAdmissionsDatasConnection(where: CustomerAdmissionsDataWhereInput, orderBy: CustomerAdmissionsDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerAdmissionsDataConnection!
  customerDetail(where: CustomerDetailWhereUniqueInput!): CustomerDetail
  customerDetails(where: CustomerDetailWhereInput, orderBy: CustomerDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerDetail]!
  customerDetailsConnection(where: CustomerDetailWhereInput, orderBy: CustomerDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerDetailConnection!
  customerMembership(where: CustomerMembershipWhereUniqueInput!): CustomerMembership
  customerMemberships(where: CustomerMembershipWhereInput, orderBy: CustomerMembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerMembership]!
  customerMembershipsConnection(where: CustomerMembershipWhereInput, orderBy: CustomerMembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerMembershipConnection!
  customerMembershipSubscriptionData(where: CustomerMembershipSubscriptionDataWhereUniqueInput!): CustomerMembershipSubscriptionData
  customerMembershipSubscriptionDatas(where: CustomerMembershipSubscriptionDataWhereInput, orderBy: CustomerMembershipSubscriptionDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerMembershipSubscriptionData]!
  customerMembershipSubscriptionDatasConnection(where: CustomerMembershipSubscriptionDataWhereInput, orderBy: CustomerMembershipSubscriptionDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerMembershipSubscriptionDataConnection!
  customerNotificationBarReceipt(where: CustomerNotificationBarReceiptWhereUniqueInput!): CustomerNotificationBarReceipt
  customerNotificationBarReceipts(where: CustomerNotificationBarReceiptWhereInput, orderBy: CustomerNotificationBarReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerNotificationBarReceipt]!
  customerNotificationBarReceiptsConnection(where: CustomerNotificationBarReceiptWhereInput, orderBy: CustomerNotificationBarReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerNotificationBarReceiptConnection!
  emailReceipt(where: EmailReceiptWhereUniqueInput!): EmailReceipt
  emailReceipts(where: EmailReceiptWhereInput, orderBy: EmailReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmailReceipt]!
  emailReceiptsConnection(where: EmailReceiptWhereInput, orderBy: EmailReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmailReceiptConnection!
  fitPic(where: FitPicWhereUniqueInput!): FitPic
  fitPics(where: FitPicWhereInput, orderBy: FitPicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FitPic]!
  fitPicsConnection(where: FitPicWhereInput, orderBy: FitPicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FitPicConnection!
  fitPicReport(where: FitPicReportWhereUniqueInput!): FitPicReport
  fitPicReports(where: FitPicReportWhereInput, orderBy: FitPicReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FitPicReport]!
  fitPicReportsConnection(where: FitPicReportWhereInput, orderBy: FitPicReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FitPicReportConnection!
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  interestedUser(where: InterestedUserWhereUniqueInput!): InterestedUser
  interestedUsers(where: InterestedUserWhereInput, orderBy: InterestedUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InterestedUser]!
  interestedUsersConnection(where: InterestedUserWhereInput, orderBy: InterestedUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterestedUserConnection!
  label(where: LabelWhereUniqueInput!): Label
  labels(where: LabelWhereInput, orderBy: LabelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Label]!
  labelsConnection(where: LabelWhereInput, orderBy: LabelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LabelConnection!
  launch(where: LaunchWhereUniqueInput!): Launch
  launches(where: LaunchWhereInput, orderBy: LaunchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Launch]!
  launchesConnection(where: LaunchWhereInput, orderBy: LaunchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LaunchConnection!
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderLineItem(where: OrderLineItemWhereUniqueInput!): OrderLineItem
  orderLineItems(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLineItem]!
  orderLineItemsConnection(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderLineItemConnection!
  package(where: PackageWhereUniqueInput!): Package
  packages(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Package]!
  packagesConnection(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PackageConnection!
  packageTransitEvent(where: PackageTransitEventWhereUniqueInput!): PackageTransitEvent
  packageTransitEvents(where: PackageTransitEventWhereInput, orderBy: PackageTransitEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PackageTransitEvent]!
  packageTransitEventsConnection(where: PackageTransitEventWhereInput, orderBy: PackageTransitEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PackageTransitEventConnection!
  pauseRequest(where: PauseRequestWhereUniqueInput!): PauseRequest
  pauseRequests(where: PauseRequestWhereInput, orderBy: PauseRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PauseRequest]!
  pauseRequestsConnection(where: PauseRequestWhereInput, orderBy: PauseRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PauseRequestConnection!
  paymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  paymentPlans(where: PaymentPlanWhereInput, orderBy: PaymentPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentPlan]!
  paymentPlansConnection(where: PaymentPlanWhereInput, orderBy: PaymentPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentPlanConnection!
  physicalProduct(where: PhysicalProductWhereUniqueInput!): PhysicalProduct
  physicalProducts(where: PhysicalProductWhereInput, orderBy: PhysicalProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProduct]!
  physicalProductsConnection(where: PhysicalProductWhereInput, orderBy: PhysicalProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhysicalProductConnection!
  physicalProductPrice(where: PhysicalProductPriceWhereUniqueInput!): PhysicalProductPrice
  physicalProductPrices(where: PhysicalProductPriceWhereInput, orderBy: PhysicalProductPriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProductPrice]!
  physicalProductPricesConnection(where: PhysicalProductPriceWhereInput, orderBy: PhysicalProductPriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhysicalProductPriceConnection!
  physicalProductQualityReport(where: PhysicalProductQualityReportWhereUniqueInput!): PhysicalProductQualityReport
  physicalProductQualityReports(where: PhysicalProductQualityReportWhereInput, orderBy: PhysicalProductQualityReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProductQualityReport]!
  physicalProductQualityReportsConnection(where: PhysicalProductQualityReportWhereInput, orderBy: PhysicalProductQualityReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhysicalProductQualityReportConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productFunction(where: ProductFunctionWhereUniqueInput!): ProductFunction
  productFunctions(where: ProductFunctionWhereInput, orderBy: ProductFunctionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductFunction]!
  productFunctionsConnection(where: ProductFunctionWhereInput, orderBy: ProductFunctionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductFunctionConnection!
  productMaterialCategory(where: ProductMaterialCategoryWhereUniqueInput!): ProductMaterialCategory
  productMaterialCategories(where: ProductMaterialCategoryWhereInput, orderBy: ProductMaterialCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductMaterialCategory]!
  productMaterialCategoriesConnection(where: ProductMaterialCategoryWhereInput, orderBy: ProductMaterialCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductMaterialCategoryConnection!
  productModel(where: ProductModelWhereUniqueInput!): ProductModel
  productModels(where: ProductModelWhereInput, orderBy: ProductModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductModel]!
  productModelsConnection(where: ProductModelWhereInput, orderBy: ProductModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductModelConnection!
  productNotification(where: ProductNotificationWhereUniqueInput!): ProductNotification
  productNotifications(where: ProductNotificationWhereInput, orderBy: ProductNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductNotification]!
  productNotificationsConnection(where: ProductNotificationWhereInput, orderBy: ProductNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductNotificationConnection!
  productRequest(where: ProductRequestWhereUniqueInput!): ProductRequest
  productRequests(where: ProductRequestWhereInput, orderBy: ProductRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductRequest]!
  productRequestsConnection(where: ProductRequestWhereInput, orderBy: ProductRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductRequestConnection!
  productSeason(where: ProductSeasonWhereUniqueInput!): ProductSeason
  productSeasons(where: ProductSeasonWhereInput, orderBy: ProductSeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductSeason]!
  productSeasonsConnection(where: ProductSeasonWhereInput, orderBy: ProductSeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductSeasonConnection!
  productTier(where: ProductTierWhereUniqueInput!): ProductTier
  productTiers(where: ProductTierWhereInput, orderBy: ProductTierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTier]!
  productTiersConnection(where: ProductTierWhereInput, orderBy: ProductTierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductTierConnection!
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant]!
  productVariantsConnection(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductVariantConnection!
  productVariantFeedback(where: ProductVariantFeedbackWhereUniqueInput!): ProductVariantFeedback
  productVariantFeedbacks(where: ProductVariantFeedbackWhereInput, orderBy: ProductVariantFeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariantFeedback]!
  productVariantFeedbacksConnection(where: ProductVariantFeedbackWhereInput, orderBy: ProductVariantFeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductVariantFeedbackConnection!
  productVariantFeedbackQuestion(where: ProductVariantFeedbackQuestionWhereUniqueInput!): ProductVariantFeedbackQuestion
  productVariantFeedbackQuestions(where: ProductVariantFeedbackQuestionWhereInput, orderBy: ProductVariantFeedbackQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariantFeedbackQuestion]!
  productVariantFeedbackQuestionsConnection(where: ProductVariantFeedbackQuestionWhereInput, orderBy: ProductVariantFeedbackQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductVariantFeedbackQuestionConnection!
  productVariantPrice(where: ProductVariantPriceWhereUniqueInput!): ProductVariantPrice
  productVariantPrices(where: ProductVariantPriceWhereInput, orderBy: ProductVariantPriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariantPrice]!
  productVariantPricesConnection(where: ProductVariantPriceWhereInput, orderBy: ProductVariantPriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductVariantPriceConnection!
  productVariantWant(where: ProductVariantWantWhereUniqueInput!): ProductVariantWant
  productVariantWants(where: ProductVariantWantWhereInput, orderBy: ProductVariantWantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariantWant]!
  productVariantWantsConnection(where: ProductVariantWantWhereInput, orderBy: ProductVariantWantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductVariantWantConnection!
  pushNotificationReceipt(where: PushNotificationReceiptWhereUniqueInput!): PushNotificationReceipt
  pushNotificationReceipts(where: PushNotificationReceiptWhereInput, orderBy: PushNotificationReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PushNotificationReceipt]!
  pushNotificationReceiptsConnection(where: PushNotificationReceiptWhereInput, orderBy: PushNotificationReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PushNotificationReceiptConnection!
  recentlyViewedProduct(where: RecentlyViewedProductWhereUniqueInput!): RecentlyViewedProduct
  recentlyViewedProducts(where: RecentlyViewedProductWhereInput, orderBy: RecentlyViewedProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecentlyViewedProduct]!
  recentlyViewedProductsConnection(where: RecentlyViewedProductWhereInput, orderBy: RecentlyViewedProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecentlyViewedProductConnection!
  reservation(where: ReservationWhereUniqueInput!): Reservation
  reservations(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reservation]!
  reservationsConnection(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReservationConnection!
  reservationFeedback(where: ReservationFeedbackWhereUniqueInput!): ReservationFeedback
  reservationFeedbacks(where: ReservationFeedbackWhereInput, orderBy: ReservationFeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReservationFeedback]!
  reservationFeedbacksConnection(where: ReservationFeedbackWhereInput, orderBy: ReservationFeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReservationFeedbackConnection!
  reservationReceipt(where: ReservationReceiptWhereUniqueInput!): ReservationReceipt
  reservationReceipts(where: ReservationReceiptWhereInput, orderBy: ReservationReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReservationReceipt]!
  reservationReceiptsConnection(where: ReservationReceiptWhereInput, orderBy: ReservationReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReservationReceiptConnection!
  reservationReceiptItem(where: ReservationReceiptItemWhereUniqueInput!): ReservationReceiptItem
  reservationReceiptItems(where: ReservationReceiptItemWhereInput, orderBy: ReservationReceiptItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReservationReceiptItem]!
  reservationReceiptItemsConnection(where: ReservationReceiptItemWhereInput, orderBy: ReservationReceiptItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReservationReceiptItemConnection!
  season(where: SeasonWhereUniqueInput!): Season
  seasons(where: SeasonWhereInput, orderBy: SeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Season]!
  seasonsConnection(where: SeasonWhereInput, orderBy: SeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SeasonConnection!
  shippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  shippingMethods(where: ShippingMethodWhereInput, orderBy: ShippingMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShippingMethod]!
  shippingMethodsConnection(where: ShippingMethodWhereInput, orderBy: ShippingMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShippingMethodConnection!
  shippingOption(where: ShippingOptionWhereUniqueInput!): ShippingOption
  shippingOptions(where: ShippingOptionWhereInput, orderBy: ShippingOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShippingOption]!
  shippingOptionsConnection(where: ShippingOptionWhereInput, orderBy: ShippingOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShippingOptionConnection!
  shopifyProductVariant(where: ShopifyProductVariantWhereUniqueInput!): ShopifyProductVariant
  shopifyProductVariants(where: ShopifyProductVariantWhereInput, orderBy: ShopifyProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShopifyProductVariant]!
  shopifyProductVariantsConnection(where: ShopifyProductVariantWhereInput, orderBy: ShopifyProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopifyProductVariantConnection!
  shopifyProductVariantSelectedOption(where: ShopifyProductVariantSelectedOptionWhereUniqueInput!): ShopifyProductVariantSelectedOption
  shopifyProductVariantSelectedOptions(where: ShopifyProductVariantSelectedOptionWhereInput, orderBy: ShopifyProductVariantSelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShopifyProductVariantSelectedOption]!
  shopifyProductVariantSelectedOptionsConnection(where: ShopifyProductVariantSelectedOptionWhereInput, orderBy: ShopifyProductVariantSelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopifyProductVariantSelectedOptionConnection!
  shopifyShop(where: ShopifyShopWhereUniqueInput!): ShopifyShop
  shopifyShops(where: ShopifyShopWhereInput, orderBy: ShopifyShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShopifyShop]!
  shopifyShopsConnection(where: ShopifyShopWhereInput, orderBy: ShopifyShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopifyShopConnection!
  size(where: SizeWhereUniqueInput!): Size
  sizes(where: SizeWhereInput, orderBy: SizeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Size]!
  sizesConnection(where: SizeWhereInput, orderBy: SizeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SizeConnection!
  smsReceipt(where: SmsReceiptWhereUniqueInput!): SmsReceipt
  smsReceipts(where: SmsReceiptWhereInput, orderBy: SmsReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SmsReceipt]!
  smsReceiptsConnection(where: SmsReceiptWhereInput, orderBy: SmsReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SmsReceiptConnection!
  stylePreferences(where: StylePreferencesWhereUniqueInput!): StylePreferences
  stylePreferenceses(where: StylePreferencesWhereInput, orderBy: StylePreferencesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StylePreferences]!
  stylePreferencesesConnection(where: StylePreferencesWhereInput, orderBy: StylePreferencesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StylePreferencesConnection!
  syncTiming(where: SyncTimingWhereUniqueInput!): SyncTiming
  syncTimings(where: SyncTimingWhereInput, orderBy: SyncTimingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SyncTiming]!
  syncTimingsConnection(where: SyncTimingWhereInput, orderBy: SyncTimingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SyncTimingConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  topSize(where: TopSizeWhereUniqueInput!): TopSize
  topSizes(where: TopSizeWhereInput, orderBy: TopSizeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TopSize]!
  topSizesConnection(where: TopSizeWhereInput, orderBy: TopSizeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopSizeConnection!
  uTMData(where: UTMDataWhereUniqueInput!): UTMData
  uTMDatas(where: UTMDataWhereInput, orderBy: UTMDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UTMData]!
  uTMDatasConnection(where: UTMDataWhereInput, orderBy: UTMDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UTMDataConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userDeviceData(where: UserDeviceDataWhereUniqueInput!): UserDeviceData
  userDeviceDatas(where: UserDeviceDataWhereInput, orderBy: UserDeviceDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserDeviceData]!
  userDeviceDatasConnection(where: UserDeviceDataWhereInput, orderBy: UserDeviceDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserDeviceDataConnection!
  userPushNotification(where: UserPushNotificationWhereUniqueInput!): UserPushNotification
  userPushNotifications(where: UserPushNotificationWhereInput, orderBy: UserPushNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPushNotification]!
  userPushNotificationsConnection(where: UserPushNotificationWhereInput, orderBy: UserPushNotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserPushNotificationConnection!
  userPushNotificationInterest(where: UserPushNotificationInterestWhereUniqueInput!): UserPushNotificationInterest
  userPushNotificationInterests(where: UserPushNotificationInterestWhereInput, orderBy: UserPushNotificationInterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPushNotificationInterest]!
  userPushNotificationInterestsConnection(where: UserPushNotificationInterestWhereInput, orderBy: UserPushNotificationInterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserPushNotificationInterestConnection!
  warehouseLocation(where: WarehouseLocationWhereUniqueInput!): WarehouseLocation
  warehouseLocations(where: WarehouseLocationWhereInput, orderBy: WarehouseLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WarehouseLocation]!
  warehouseLocationsConnection(where: WarehouseLocationWhereInput, orderBy: WarehouseLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WarehouseLocationConnection!
  warehouseLocationConstraint(where: WarehouseLocationConstraintWhereUniqueInput!): WarehouseLocationConstraint
  warehouseLocationConstraints(where: WarehouseLocationConstraintWhereInput, orderBy: WarehouseLocationConstraintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WarehouseLocationConstraint]!
  warehouseLocationConstraintsConnection(where: WarehouseLocationConstraintWhereInput, orderBy: WarehouseLocationConstraintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WarehouseLocationConstraintConnection!
  node(id: ID!): Node
}

enum QuestionType {
  MultipleChoice
  FreeResponse
}

enum Rating {
  Disliked
  Ok
  Loved
}

type RecentlyViewedProduct {
  id: ID!
  product: Product!
  customer: Customer!
  viewCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RecentlyViewedProductConnection {
  pageInfo: PageInfo!
  edges: [RecentlyViewedProductEdge]!
  aggregate: AggregateRecentlyViewedProduct!
}

input RecentlyViewedProductCreateInput {
  id: ID
  product: ProductCreateOneInput!
  customer: CustomerCreateOneInput!
  viewCount: Int
}

type RecentlyViewedProductEdge {
  node: RecentlyViewedProduct!
  cursor: String!
}

enum RecentlyViewedProductOrderByInput {
  id_ASC
  id_DESC
  viewCount_ASC
  viewCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecentlyViewedProductPreviousValues {
  id: ID!
  viewCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RecentlyViewedProductSubscriptionPayload {
  mutation: MutationType!
  node: RecentlyViewedProduct
  updatedFields: [String!]
  previousValues: RecentlyViewedProductPreviousValues
}

input RecentlyViewedProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecentlyViewedProductWhereInput
  AND: [RecentlyViewedProductSubscriptionWhereInput!]
  OR: [RecentlyViewedProductSubscriptionWhereInput!]
  NOT: [RecentlyViewedProductSubscriptionWhereInput!]
}

input RecentlyViewedProductUpdateInput {
  product: ProductUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredInput
  viewCount: Int
}

input RecentlyViewedProductUpdateManyMutationInput {
  viewCount: Int
}

input RecentlyViewedProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  product: ProductWhereInput
  customer: CustomerWhereInput
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RecentlyViewedProductWhereInput!]
  OR: [RecentlyViewedProductWhereInput!]
  NOT: [RecentlyViewedProductWhereInput!]
}

input RecentlyViewedProductWhereUniqueInput {
  id: ID
}

type Reservation {
  id: ID!
  user: User!
  customer: Customer!
  sentPackage: Package
  returnedPackage: Package
  products(where: PhysicalProductWhereInput, orderBy: PhysicalProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProduct!]
  newProducts(where: PhysicalProductWhereInput, orderBy: PhysicalProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProduct!]
  packageEvents(where: PackageTransitEventWhereInput, orderBy: PackageTransitEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PackageTransitEvent!]
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  receipt: ReservationReceipt
  lastLocation: Location
  createdAt: DateTime!
  updatedAt: DateTime!
  shippingOption: ShippingOption
}

type ReservationConnection {
  pageInfo: PageInfo!
  edges: [ReservationEdge]!
  aggregate: AggregateReservation!
}

input ReservationCreateInput {
  id: ID
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  newProducts: PhysicalProductCreateManyInput
  packageEvents: PackageTransitEventCreateManyWithoutReservationInput
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
  shippingOption: ShippingOptionCreateOneInput
}

input ReservationCreateManyWithoutCustomerInput {
  create: [ReservationCreateWithoutCustomerInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReservationCreateOneInput {
  create: ReservationCreateInput
  connect: ReservationWhereUniqueInput
}

input ReservationCreateOneWithoutPackageEventsInput {
  create: ReservationCreateWithoutPackageEventsInput
  connect: ReservationWhereUniqueInput
}

input ReservationCreateOneWithoutReceiptInput {
  create: ReservationCreateWithoutReceiptInput
  connect: ReservationWhereUniqueInput
}

input ReservationCreateWithoutCustomerInput {
  id: ID
  user: UserCreateOneInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  newProducts: PhysicalProductCreateManyInput
  packageEvents: PackageTransitEventCreateManyWithoutReservationInput
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
  shippingOption: ShippingOptionCreateOneInput
}

input ReservationCreateWithoutPackageEventsInput {
  id: ID
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  newProducts: PhysicalProductCreateManyInput
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  receipt: ReservationReceiptCreateOneWithoutReservationInput
  lastLocation: LocationCreateOneInput
  shippingOption: ShippingOptionCreateOneInput
}

input ReservationCreateWithoutReceiptInput {
  id: ID
  user: UserCreateOneInput!
  customer: CustomerCreateOneWithoutReservationsInput!
  sentPackage: PackageCreateOneInput
  returnedPackage: PackageCreateOneInput
  products: PhysicalProductCreateManyInput
  newProducts: PhysicalProductCreateManyInput
  packageEvents: PackageTransitEventCreateManyWithoutReservationInput
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  lastLocation: LocationCreateOneInput
  shippingOption: ShippingOptionCreateOneInput
}

type ReservationEdge {
  node: Reservation!
  cursor: String!
}

type ReservationFeedback {
  id: ID!
  comment: String
  feedbacks(where: ProductVariantFeedbackWhereInput, orderBy: ProductVariantFeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariantFeedback!]
  rating: Rating
  user: User!
  reservation: Reservation!
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
}

type ReservationFeedbackConnection {
  pageInfo: PageInfo!
  edges: [ReservationFeedbackEdge]!
  aggregate: AggregateReservationFeedback!
}

input ReservationFeedbackCreateInput {
  id: ID
  comment: String
  feedbacks: ProductVariantFeedbackCreateManyWithoutReservationFeedbackInput
  rating: Rating
  user: UserCreateOneInput!
  reservation: ReservationCreateOneInput!
  respondedAt: DateTime
}

input ReservationFeedbackCreateOneWithoutFeedbacksInput {
  create: ReservationFeedbackCreateWithoutFeedbacksInput
  connect: ReservationFeedbackWhereUniqueInput
}

input ReservationFeedbackCreateWithoutFeedbacksInput {
  id: ID
  comment: String
  rating: Rating
  user: UserCreateOneInput!
  reservation: ReservationCreateOneInput!
  respondedAt: DateTime
}

type ReservationFeedbackEdge {
  node: ReservationFeedback!
  cursor: String!
}

enum ReservationFeedbackOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  respondedAt_ASC
  respondedAt_DESC
}

type ReservationFeedbackPreviousValues {
  id: ID!
  comment: String
  rating: Rating
  createdAt: DateTime!
  updatedAt: DateTime!
  respondedAt: DateTime
}

type ReservationFeedbackSubscriptionPayload {
  mutation: MutationType!
  node: ReservationFeedback
  updatedFields: [String!]
  previousValues: ReservationFeedbackPreviousValues
}

input ReservationFeedbackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReservationFeedbackWhereInput
  AND: [ReservationFeedbackSubscriptionWhereInput!]
  OR: [ReservationFeedbackSubscriptionWhereInput!]
  NOT: [ReservationFeedbackSubscriptionWhereInput!]
}

input ReservationFeedbackUpdateInput {
  comment: String
  feedbacks: ProductVariantFeedbackUpdateManyWithoutReservationFeedbackInput
  rating: Rating
  user: UserUpdateOneRequiredInput
  reservation: ReservationUpdateOneRequiredInput
  respondedAt: DateTime
}

input ReservationFeedbackUpdateManyMutationInput {
  comment: String
  rating: Rating
  respondedAt: DateTime
}

input ReservationFeedbackUpdateOneRequiredWithoutFeedbacksInput {
  create: ReservationFeedbackCreateWithoutFeedbacksInput
  update: ReservationFeedbackUpdateWithoutFeedbacksDataInput
  upsert: ReservationFeedbackUpsertWithoutFeedbacksInput
  connect: ReservationFeedbackWhereUniqueInput
}

input ReservationFeedbackUpdateWithoutFeedbacksDataInput {
  comment: String
  rating: Rating
  user: UserUpdateOneRequiredInput
  reservation: ReservationUpdateOneRequiredInput
  respondedAt: DateTime
}

input ReservationFeedbackUpsertWithoutFeedbacksInput {
  update: ReservationFeedbackUpdateWithoutFeedbacksDataInput!
  create: ReservationFeedbackCreateWithoutFeedbacksInput!
}

input ReservationFeedbackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  feedbacks_every: ProductVariantFeedbackWhereInput
  feedbacks_some: ProductVariantFeedbackWhereInput
  feedbacks_none: ProductVariantFeedbackWhereInput
  rating: Rating
  rating_not: Rating
  rating_in: [Rating!]
  rating_not_in: [Rating!]
  user: UserWhereInput
  reservation: ReservationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  respondedAt: DateTime
  respondedAt_not: DateTime
  respondedAt_in: [DateTime!]
  respondedAt_not_in: [DateTime!]
  respondedAt_lt: DateTime
  respondedAt_lte: DateTime
  respondedAt_gt: DateTime
  respondedAt_gte: DateTime
  AND: [ReservationFeedbackWhereInput!]
  OR: [ReservationFeedbackWhereInput!]
  NOT: [ReservationFeedbackWhereInput!]
}

input ReservationFeedbackWhereUniqueInput {
  id: ID
}

enum ReservationOrderByInput {
  id_ASC
  id_DESC
  reservationNumber_ASC
  reservationNumber_DESC
  phase_ASC
  phase_DESC
  shipped_ASC
  shipped_DESC
  status_ASC
  status_DESC
  shippedAt_ASC
  shippedAt_DESC
  receivedAt_ASC
  receivedAt_DESC
  reminderSentAt_ASC
  reminderSentAt_DESC
  statusUpdatedAt_ASC
  statusUpdatedAt_DESC
  completedAt_ASC
  completedAt_DESC
  cancelledAt_ASC
  cancelledAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum ReservationPhase {
  BusinessToCustomer
  CustomerToBusiness
}

type ReservationPreviousValues {
  id: ID!
  reservationNumber: Int!
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReservationReceipt {
  id: ID!
  reservation: Reservation!
  items(where: ReservationReceiptItemWhereInput, orderBy: ReservationReceiptItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReservationReceiptItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReservationReceiptConnection {
  pageInfo: PageInfo!
  edges: [ReservationReceiptEdge]!
  aggregate: AggregateReservationReceipt!
}

input ReservationReceiptCreateInput {
  id: ID
  reservation: ReservationCreateOneWithoutReceiptInput!
  items: ReservationReceiptItemCreateManyInput
}

input ReservationReceiptCreateOneWithoutReservationInput {
  create: ReservationReceiptCreateWithoutReservationInput
  connect: ReservationReceiptWhereUniqueInput
}

input ReservationReceiptCreateWithoutReservationInput {
  id: ID
  items: ReservationReceiptItemCreateManyInput
}

type ReservationReceiptEdge {
  node: ReservationReceipt!
  cursor: String!
}

type ReservationReceiptItem {
  id: ID!
  product: PhysicalProduct!
  productStatus: PhysicalProductStatus!
  notes: String
}

type ReservationReceiptItemConnection {
  pageInfo: PageInfo!
  edges: [ReservationReceiptItemEdge]!
  aggregate: AggregateReservationReceiptItem!
}

input ReservationReceiptItemCreateInput {
  id: ID
  product: PhysicalProductCreateOneInput!
  productStatus: PhysicalProductStatus!
  notes: String
}

input ReservationReceiptItemCreateManyInput {
  create: [ReservationReceiptItemCreateInput!]
  connect: [ReservationReceiptItemWhereUniqueInput!]
}

type ReservationReceiptItemEdge {
  node: ReservationReceiptItem!
  cursor: String!
}

enum ReservationReceiptItemOrderByInput {
  id_ASC
  id_DESC
  productStatus_ASC
  productStatus_DESC
  notes_ASC
  notes_DESC
}

type ReservationReceiptItemPreviousValues {
  id: ID!
  productStatus: PhysicalProductStatus!
  notes: String
}

input ReservationReceiptItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  productStatus: PhysicalProductStatus
  productStatus_not: PhysicalProductStatus
  productStatus_in: [PhysicalProductStatus!]
  productStatus_not_in: [PhysicalProductStatus!]
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  AND: [ReservationReceiptItemScalarWhereInput!]
  OR: [ReservationReceiptItemScalarWhereInput!]
  NOT: [ReservationReceiptItemScalarWhereInput!]
}

type ReservationReceiptItemSubscriptionPayload {
  mutation: MutationType!
  node: ReservationReceiptItem
  updatedFields: [String!]
  previousValues: ReservationReceiptItemPreviousValues
}

input ReservationReceiptItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReservationReceiptItemWhereInput
  AND: [ReservationReceiptItemSubscriptionWhereInput!]
  OR: [ReservationReceiptItemSubscriptionWhereInput!]
  NOT: [ReservationReceiptItemSubscriptionWhereInput!]
}

input ReservationReceiptItemUpdateDataInput {
  product: PhysicalProductUpdateOneRequiredInput
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateInput {
  product: PhysicalProductUpdateOneRequiredInput
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateManyDataInput {
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateManyInput {
  create: [ReservationReceiptItemCreateInput!]
  update: [ReservationReceiptItemUpdateWithWhereUniqueNestedInput!]
  upsert: [ReservationReceiptItemUpsertWithWhereUniqueNestedInput!]
  delete: [ReservationReceiptItemWhereUniqueInput!]
  connect: [ReservationReceiptItemWhereUniqueInput!]
  set: [ReservationReceiptItemWhereUniqueInput!]
  disconnect: [ReservationReceiptItemWhereUniqueInput!]
  deleteMany: [ReservationReceiptItemScalarWhereInput!]
  updateMany: [ReservationReceiptItemUpdateManyWithWhereNestedInput!]
}

input ReservationReceiptItemUpdateManyMutationInput {
  productStatus: PhysicalProductStatus
  notes: String
}

input ReservationReceiptItemUpdateManyWithWhereNestedInput {
  where: ReservationReceiptItemScalarWhereInput!
  data: ReservationReceiptItemUpdateManyDataInput!
}

input ReservationReceiptItemUpdateWithWhereUniqueNestedInput {
  where: ReservationReceiptItemWhereUniqueInput!
  data: ReservationReceiptItemUpdateDataInput!
}

input ReservationReceiptItemUpsertWithWhereUniqueNestedInput {
  where: ReservationReceiptItemWhereUniqueInput!
  update: ReservationReceiptItemUpdateDataInput!
  create: ReservationReceiptItemCreateInput!
}

input ReservationReceiptItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  product: PhysicalProductWhereInput
  productStatus: PhysicalProductStatus
  productStatus_not: PhysicalProductStatus
  productStatus_in: [PhysicalProductStatus!]
  productStatus_not_in: [PhysicalProductStatus!]
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  AND: [ReservationReceiptItemWhereInput!]
  OR: [ReservationReceiptItemWhereInput!]
  NOT: [ReservationReceiptItemWhereInput!]
}

input ReservationReceiptItemWhereUniqueInput {
  id: ID
}

enum ReservationReceiptOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReservationReceiptPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReservationReceiptSubscriptionPayload {
  mutation: MutationType!
  node: ReservationReceipt
  updatedFields: [String!]
  previousValues: ReservationReceiptPreviousValues
}

input ReservationReceiptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReservationReceiptWhereInput
  AND: [ReservationReceiptSubscriptionWhereInput!]
  OR: [ReservationReceiptSubscriptionWhereInput!]
  NOT: [ReservationReceiptSubscriptionWhereInput!]
}

input ReservationReceiptUpdateInput {
  reservation: ReservationUpdateOneRequiredWithoutReceiptInput
  items: ReservationReceiptItemUpdateManyInput
}

input ReservationReceiptUpdateOneWithoutReservationInput {
  create: ReservationReceiptCreateWithoutReservationInput
  update: ReservationReceiptUpdateWithoutReservationDataInput
  upsert: ReservationReceiptUpsertWithoutReservationInput
  delete: Boolean
  disconnect: Boolean
  connect: ReservationReceiptWhereUniqueInput
}

input ReservationReceiptUpdateWithoutReservationDataInput {
  items: ReservationReceiptItemUpdateManyInput
}

input ReservationReceiptUpsertWithoutReservationInput {
  update: ReservationReceiptUpdateWithoutReservationDataInput!
  create: ReservationReceiptCreateWithoutReservationInput!
}

input ReservationReceiptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  reservation: ReservationWhereInput
  items_every: ReservationReceiptItemWhereInput
  items_some: ReservationReceiptItemWhereInput
  items_none: ReservationReceiptItemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReservationReceiptWhereInput!]
  OR: [ReservationReceiptWhereInput!]
  NOT: [ReservationReceiptWhereInput!]
}

input ReservationReceiptWhereUniqueInput {
  id: ID
}

input ReservationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  reservationNumber: Int
  reservationNumber_not: Int
  reservationNumber_in: [Int!]
  reservationNumber_not_in: [Int!]
  reservationNumber_lt: Int
  reservationNumber_lte: Int
  reservationNumber_gt: Int
  reservationNumber_gte: Int
  phase: ReservationPhase
  phase_not: ReservationPhase
  phase_in: [ReservationPhase!]
  phase_not_in: [ReservationPhase!]
  shipped: Boolean
  shipped_not: Boolean
  status: ReservationStatus
  status_not: ReservationStatus
  status_in: [ReservationStatus!]
  status_not_in: [ReservationStatus!]
  shippedAt: DateTime
  shippedAt_not: DateTime
  shippedAt_in: [DateTime!]
  shippedAt_not_in: [DateTime!]
  shippedAt_lt: DateTime
  shippedAt_lte: DateTime
  shippedAt_gt: DateTime
  shippedAt_gte: DateTime
  receivedAt: DateTime
  receivedAt_not: DateTime
  receivedAt_in: [DateTime!]
  receivedAt_not_in: [DateTime!]
  receivedAt_lt: DateTime
  receivedAt_lte: DateTime
  receivedAt_gt: DateTime
  receivedAt_gte: DateTime
  reminderSentAt: DateTime
  reminderSentAt_not: DateTime
  reminderSentAt_in: [DateTime!]
  reminderSentAt_not_in: [DateTime!]
  reminderSentAt_lt: DateTime
  reminderSentAt_lte: DateTime
  reminderSentAt_gt: DateTime
  reminderSentAt_gte: DateTime
  statusUpdatedAt: DateTime
  statusUpdatedAt_not: DateTime
  statusUpdatedAt_in: [DateTime!]
  statusUpdatedAt_not_in: [DateTime!]
  statusUpdatedAt_lt: DateTime
  statusUpdatedAt_lte: DateTime
  statusUpdatedAt_gt: DateTime
  statusUpdatedAt_gte: DateTime
  completedAt: DateTime
  completedAt_not: DateTime
  completedAt_in: [DateTime!]
  completedAt_not_in: [DateTime!]
  completedAt_lt: DateTime
  completedAt_lte: DateTime
  completedAt_gt: DateTime
  completedAt_gte: DateTime
  cancelledAt: DateTime
  cancelledAt_not: DateTime
  cancelledAt_in: [DateTime!]
  cancelledAt_not_in: [DateTime!]
  cancelledAt_lt: DateTime
  cancelledAt_lte: DateTime
  cancelledAt_gt: DateTime
  cancelledAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReservationScalarWhereInput!]
  OR: [ReservationScalarWhereInput!]
  NOT: [ReservationScalarWhereInput!]
}

enum ReservationStatus {
  Queued
  Picked
  Packed
  Shipped
  Delivered
  Completed
  Cancelled
  Hold
  Blocked
  Unknown
  Received
}

type ReservationSubscriptionPayload {
  mutation: MutationType!
  node: Reservation
  updatedFields: [String!]
  previousValues: ReservationPreviousValues
}

input ReservationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReservationWhereInput
  AND: [ReservationSubscriptionWhereInput!]
  OR: [ReservationSubscriptionWhereInput!]
  NOT: [ReservationSubscriptionWhereInput!]
}

input ReservationUpdateDataInput {
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  newProducts: PhysicalProductUpdateManyInput
  packageEvents: PackageTransitEventUpdateManyWithoutReservationInput
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
  shippingOption: ShippingOptionUpdateOneInput
}

input ReservationUpdateInput {
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  newProducts: PhysicalProductUpdateManyInput
  packageEvents: PackageTransitEventUpdateManyWithoutReservationInput
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
  shippingOption: ShippingOptionUpdateOneInput
}

input ReservationUpdateManyDataInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
}

input ReservationUpdateManyMutationInput {
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
}

input ReservationUpdateManyWithoutCustomerInput {
  create: [ReservationCreateWithoutCustomerInput!]
  delete: [ReservationWhereUniqueInput!]
  connect: [ReservationWhereUniqueInput!]
  set: [ReservationWhereUniqueInput!]
  disconnect: [ReservationWhereUniqueInput!]
  update: [ReservationUpdateWithWhereUniqueWithoutCustomerInput!]
  upsert: [ReservationUpsertWithWhereUniqueWithoutCustomerInput!]
  deleteMany: [ReservationScalarWhereInput!]
  updateMany: [ReservationUpdateManyWithWhereNestedInput!]
}

input ReservationUpdateManyWithWhereNestedInput {
  where: ReservationScalarWhereInput!
  data: ReservationUpdateManyDataInput!
}

input ReservationUpdateOneRequiredInput {
  create: ReservationCreateInput
  update: ReservationUpdateDataInput
  upsert: ReservationUpsertNestedInput
  connect: ReservationWhereUniqueInput
}

input ReservationUpdateOneRequiredWithoutReceiptInput {
  create: ReservationCreateWithoutReceiptInput
  update: ReservationUpdateWithoutReceiptDataInput
  upsert: ReservationUpsertWithoutReceiptInput
  connect: ReservationWhereUniqueInput
}

input ReservationUpdateOneWithoutPackageEventsInput {
  create: ReservationCreateWithoutPackageEventsInput
  update: ReservationUpdateWithoutPackageEventsDataInput
  upsert: ReservationUpsertWithoutPackageEventsInput
  delete: Boolean
  disconnect: Boolean
  connect: ReservationWhereUniqueInput
}

input ReservationUpdateWithoutCustomerDataInput {
  user: UserUpdateOneRequiredInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  newProducts: PhysicalProductUpdateManyInput
  packageEvents: PackageTransitEventUpdateManyWithoutReservationInput
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
  shippingOption: ShippingOptionUpdateOneInput
}

input ReservationUpdateWithoutPackageEventsDataInput {
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  newProducts: PhysicalProductUpdateManyInput
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  receipt: ReservationReceiptUpdateOneWithoutReservationInput
  lastLocation: LocationUpdateOneInput
  shippingOption: ShippingOptionUpdateOneInput
}

input ReservationUpdateWithoutReceiptDataInput {
  user: UserUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutReservationsInput
  sentPackage: PackageUpdateOneInput
  returnedPackage: PackageUpdateOneInput
  products: PhysicalProductUpdateManyInput
  newProducts: PhysicalProductUpdateManyInput
  packageEvents: PackageTransitEventUpdateManyWithoutReservationInput
  reservationNumber: Int
  phase: ReservationPhase
  shipped: Boolean
  status: ReservationStatus
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  completedAt: DateTime
  cancelledAt: DateTime
  lastLocation: LocationUpdateOneInput
  shippingOption: ShippingOptionUpdateOneInput
}

input ReservationUpdateWithWhereUniqueWithoutCustomerInput {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateWithoutCustomerDataInput!
}

input ReservationUpsertNestedInput {
  update: ReservationUpdateDataInput!
  create: ReservationCreateInput!
}

input ReservationUpsertWithoutPackageEventsInput {
  update: ReservationUpdateWithoutPackageEventsDataInput!
  create: ReservationCreateWithoutPackageEventsInput!
}

input ReservationUpsertWithoutReceiptInput {
  update: ReservationUpdateWithoutReceiptDataInput!
  create: ReservationCreateWithoutReceiptInput!
}

input ReservationUpsertWithWhereUniqueWithoutCustomerInput {
  where: ReservationWhereUniqueInput!
  update: ReservationUpdateWithoutCustomerDataInput!
  create: ReservationCreateWithoutCustomerInput!
}

input ReservationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  customer: CustomerWhereInput
  sentPackage: PackageWhereInput
  returnedPackage: PackageWhereInput
  products_every: PhysicalProductWhereInput
  products_some: PhysicalProductWhereInput
  products_none: PhysicalProductWhereInput
  newProducts_every: PhysicalProductWhereInput
  newProducts_some: PhysicalProductWhereInput
  newProducts_none: PhysicalProductWhereInput
  packageEvents_every: PackageTransitEventWhereInput
  packageEvents_some: PackageTransitEventWhereInput
  packageEvents_none: PackageTransitEventWhereInput
  reservationNumber: Int
  reservationNumber_not: Int
  reservationNumber_in: [Int!]
  reservationNumber_not_in: [Int!]
  reservationNumber_lt: Int
  reservationNumber_lte: Int
  reservationNumber_gt: Int
  reservationNumber_gte: Int
  phase: ReservationPhase
  phase_not: ReservationPhase
  phase_in: [ReservationPhase!]
  phase_not_in: [ReservationPhase!]
  shipped: Boolean
  shipped_not: Boolean
  status: ReservationStatus
  status_not: ReservationStatus
  status_in: [ReservationStatus!]
  status_not_in: [ReservationStatus!]
  shippedAt: DateTime
  shippedAt_not: DateTime
  shippedAt_in: [DateTime!]
  shippedAt_not_in: [DateTime!]
  shippedAt_lt: DateTime
  shippedAt_lte: DateTime
  shippedAt_gt: DateTime
  shippedAt_gte: DateTime
  receivedAt: DateTime
  receivedAt_not: DateTime
  receivedAt_in: [DateTime!]
  receivedAt_not_in: [DateTime!]
  receivedAt_lt: DateTime
  receivedAt_lte: DateTime
  receivedAt_gt: DateTime
  receivedAt_gte: DateTime
  reminderSentAt: DateTime
  reminderSentAt_not: DateTime
  reminderSentAt_in: [DateTime!]
  reminderSentAt_not_in: [DateTime!]
  reminderSentAt_lt: DateTime
  reminderSentAt_lte: DateTime
  reminderSentAt_gt: DateTime
  reminderSentAt_gte: DateTime
  statusUpdatedAt: DateTime
  statusUpdatedAt_not: DateTime
  statusUpdatedAt_in: [DateTime!]
  statusUpdatedAt_not_in: [DateTime!]
  statusUpdatedAt_lt: DateTime
  statusUpdatedAt_lte: DateTime
  statusUpdatedAt_gt: DateTime
  statusUpdatedAt_gte: DateTime
  completedAt: DateTime
  completedAt_not: DateTime
  completedAt_in: [DateTime!]
  completedAt_not_in: [DateTime!]
  completedAt_lt: DateTime
  completedAt_lte: DateTime
  completedAt_gt: DateTime
  completedAt_gte: DateTime
  cancelledAt: DateTime
  cancelledAt_not: DateTime
  cancelledAt_in: [DateTime!]
  cancelledAt_not_in: [DateTime!]
  cancelledAt_lt: DateTime
  cancelledAt_lte: DateTime
  cancelledAt_gt: DateTime
  cancelledAt_gte: DateTime
  receipt: ReservationReceiptWhereInput
  lastLocation: LocationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  shippingOption: ShippingOptionWhereInput
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
}

input ReservationWhereUniqueInput {
  id: ID
  reservationNumber: Int
}

type Season {
  id: ID!
  year: Int
  seasonCode: SeasonCode
}

enum SeasonCode {
  FW
  SS
  PS
  PF
  HO
  AW
}

type SeasonConnection {
  pageInfo: PageInfo!
  edges: [SeasonEdge]!
  aggregate: AggregateSeason!
}

input SeasonCreateInput {
  id: ID
  year: Int
  seasonCode: SeasonCode
}

input SeasonCreateOneInput {
  create: SeasonCreateInput
  connect: SeasonWhereUniqueInput
}

type SeasonEdge {
  node: Season!
  cursor: String!
}

enum SeasonOrderByInput {
  id_ASC
  id_DESC
  year_ASC
  year_DESC
  seasonCode_ASC
  seasonCode_DESC
}

type SeasonPreviousValues {
  id: ID!
  year: Int
  seasonCode: SeasonCode
}

enum SeasonString {
  Spring
  Summer
  Winter
  Fall
}

type SeasonSubscriptionPayload {
  mutation: MutationType!
  node: Season
  updatedFields: [String!]
  previousValues: SeasonPreviousValues
}

input SeasonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SeasonWhereInput
  AND: [SeasonSubscriptionWhereInput!]
  OR: [SeasonSubscriptionWhereInput!]
  NOT: [SeasonSubscriptionWhereInput!]
}

input SeasonUpdateDataInput {
  year: Int
  seasonCode: SeasonCode
}

input SeasonUpdateInput {
  year: Int
  seasonCode: SeasonCode
}

input SeasonUpdateManyMutationInput {
  year: Int
  seasonCode: SeasonCode
}

input SeasonUpdateOneInput {
  create: SeasonCreateInput
  update: SeasonUpdateDataInput
  upsert: SeasonUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SeasonWhereUniqueInput
}

input SeasonUpsertNestedInput {
  update: SeasonUpdateDataInput!
  create: SeasonCreateInput!
}

input SeasonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  seasonCode: SeasonCode
  seasonCode_not: SeasonCode
  seasonCode_in: [SeasonCode!]
  seasonCode_not_in: [SeasonCode!]
  AND: [SeasonWhereInput!]
  OR: [SeasonWhereInput!]
  NOT: [SeasonWhereInput!]
}

input SeasonWhereUniqueInput {
  id: ID
}

enum ShippingCode {
  UPSGround
  UPSSelect
}

type ShippingMethod {
  id: ID!
  code: ShippingCode!
  displayText: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShippingMethodConnection {
  pageInfo: PageInfo!
  edges: [ShippingMethodEdge]!
  aggregate: AggregateShippingMethod!
}

input ShippingMethodCreateInput {
  id: ID
  code: ShippingCode!
  displayText: String!
}

input ShippingMethodCreateOneInput {
  create: ShippingMethodCreateInput
  connect: ShippingMethodWhereUniqueInput
}

type ShippingMethodEdge {
  node: ShippingMethod!
  cursor: String!
}

enum ShippingMethodOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  displayText_ASC
  displayText_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShippingMethodPreviousValues {
  id: ID!
  code: ShippingCode!
  displayText: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShippingMethodSubscriptionPayload {
  mutation: MutationType!
  node: ShippingMethod
  updatedFields: [String!]
  previousValues: ShippingMethodPreviousValues
}

input ShippingMethodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShippingMethodWhereInput
  AND: [ShippingMethodSubscriptionWhereInput!]
  OR: [ShippingMethodSubscriptionWhereInput!]
  NOT: [ShippingMethodSubscriptionWhereInput!]
}

input ShippingMethodUpdateDataInput {
  code: ShippingCode
  displayText: String
}

input ShippingMethodUpdateInput {
  code: ShippingCode
  displayText: String
}

input ShippingMethodUpdateManyMutationInput {
  code: ShippingCode
  displayText: String
}

input ShippingMethodUpdateOneInput {
  create: ShippingMethodCreateInput
  update: ShippingMethodUpdateDataInput
  upsert: ShippingMethodUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ShippingMethodWhereUniqueInput
}

input ShippingMethodUpsertNestedInput {
  update: ShippingMethodUpdateDataInput!
  create: ShippingMethodCreateInput!
}

input ShippingMethodWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  code: ShippingCode
  code_not: ShippingCode
  code_in: [ShippingCode!]
  code_not_in: [ShippingCode!]
  displayText: String
  displayText_not: String
  displayText_in: [String!]
  displayText_not_in: [String!]
  displayText_lt: String
  displayText_lte: String
  displayText_gt: String
  displayText_gte: String
  displayText_contains: String
  displayText_not_contains: String
  displayText_starts_with: String
  displayText_not_starts_with: String
  displayText_ends_with: String
  displayText_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShippingMethodWhereInput!]
  OR: [ShippingMethodWhereInput!]
  NOT: [ShippingMethodWhereInput!]
}

input ShippingMethodWhereUniqueInput {
  id: ID
}

type ShippingOption {
  id: ID!
  origin: Location
  destination: Location
  shippingMethod: ShippingMethod
  externalCost: Int
  averageDuration: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShippingOptionConnection {
  pageInfo: PageInfo!
  edges: [ShippingOptionEdge]!
  aggregate: AggregateShippingOption!
}

input ShippingOptionCreateInput {
  id: ID
  origin: LocationCreateOneInput
  destination: LocationCreateOneWithoutShippingOptionsInput
  shippingMethod: ShippingMethodCreateOneInput
  externalCost: Int
  averageDuration: Int
}

input ShippingOptionCreateManyWithoutDestinationInput {
  create: [ShippingOptionCreateWithoutDestinationInput!]
  connect: [ShippingOptionWhereUniqueInput!]
}

input ShippingOptionCreateOneInput {
  create: ShippingOptionCreateInput
  connect: ShippingOptionWhereUniqueInput
}

input ShippingOptionCreateWithoutDestinationInput {
  id: ID
  origin: LocationCreateOneInput
  shippingMethod: ShippingMethodCreateOneInput
  externalCost: Int
  averageDuration: Int
}

type ShippingOptionEdge {
  node: ShippingOption!
  cursor: String!
}

enum ShippingOptionOrderByInput {
  id_ASC
  id_DESC
  externalCost_ASC
  externalCost_DESC
  averageDuration_ASC
  averageDuration_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShippingOptionPreviousValues {
  id: ID!
  externalCost: Int
  averageDuration: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ShippingOptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  externalCost: Int
  externalCost_not: Int
  externalCost_in: [Int!]
  externalCost_not_in: [Int!]
  externalCost_lt: Int
  externalCost_lte: Int
  externalCost_gt: Int
  externalCost_gte: Int
  averageDuration: Int
  averageDuration_not: Int
  averageDuration_in: [Int!]
  averageDuration_not_in: [Int!]
  averageDuration_lt: Int
  averageDuration_lte: Int
  averageDuration_gt: Int
  averageDuration_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShippingOptionScalarWhereInput!]
  OR: [ShippingOptionScalarWhereInput!]
  NOT: [ShippingOptionScalarWhereInput!]
}

type ShippingOptionSubscriptionPayload {
  mutation: MutationType!
  node: ShippingOption
  updatedFields: [String!]
  previousValues: ShippingOptionPreviousValues
}

input ShippingOptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShippingOptionWhereInput
  AND: [ShippingOptionSubscriptionWhereInput!]
  OR: [ShippingOptionSubscriptionWhereInput!]
  NOT: [ShippingOptionSubscriptionWhereInput!]
}

input ShippingOptionUpdateDataInput {
  origin: LocationUpdateOneInput
  destination: LocationUpdateOneWithoutShippingOptionsInput
  shippingMethod: ShippingMethodUpdateOneInput
  externalCost: Int
  averageDuration: Int
}

input ShippingOptionUpdateInput {
  origin: LocationUpdateOneInput
  destination: LocationUpdateOneWithoutShippingOptionsInput
  shippingMethod: ShippingMethodUpdateOneInput
  externalCost: Int
  averageDuration: Int
}

input ShippingOptionUpdateManyDataInput {
  externalCost: Int
  averageDuration: Int
}

input ShippingOptionUpdateManyMutationInput {
  externalCost: Int
  averageDuration: Int
}

input ShippingOptionUpdateManyWithoutDestinationInput {
  create: [ShippingOptionCreateWithoutDestinationInput!]
  delete: [ShippingOptionWhereUniqueInput!]
  connect: [ShippingOptionWhereUniqueInput!]
  set: [ShippingOptionWhereUniqueInput!]
  disconnect: [ShippingOptionWhereUniqueInput!]
  update: [ShippingOptionUpdateWithWhereUniqueWithoutDestinationInput!]
  upsert: [ShippingOptionUpsertWithWhereUniqueWithoutDestinationInput!]
  deleteMany: [ShippingOptionScalarWhereInput!]
  updateMany: [ShippingOptionUpdateManyWithWhereNestedInput!]
}

input ShippingOptionUpdateManyWithWhereNestedInput {
  where: ShippingOptionScalarWhereInput!
  data: ShippingOptionUpdateManyDataInput!
}

input ShippingOptionUpdateOneInput {
  create: ShippingOptionCreateInput
  update: ShippingOptionUpdateDataInput
  upsert: ShippingOptionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ShippingOptionWhereUniqueInput
}

input ShippingOptionUpdateWithoutDestinationDataInput {
  origin: LocationUpdateOneInput
  shippingMethod: ShippingMethodUpdateOneInput
  externalCost: Int
  averageDuration: Int
}

input ShippingOptionUpdateWithWhereUniqueWithoutDestinationInput {
  where: ShippingOptionWhereUniqueInput!
  data: ShippingOptionUpdateWithoutDestinationDataInput!
}

input ShippingOptionUpsertNestedInput {
  update: ShippingOptionUpdateDataInput!
  create: ShippingOptionCreateInput!
}

input ShippingOptionUpsertWithWhereUniqueWithoutDestinationInput {
  where: ShippingOptionWhereUniqueInput!
  update: ShippingOptionUpdateWithoutDestinationDataInput!
  create: ShippingOptionCreateWithoutDestinationInput!
}

input ShippingOptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  origin: LocationWhereInput
  destination: LocationWhereInput
  shippingMethod: ShippingMethodWhereInput
  externalCost: Int
  externalCost_not: Int
  externalCost_in: [Int!]
  externalCost_not_in: [Int!]
  externalCost_lt: Int
  externalCost_lte: Int
  externalCost_gt: Int
  externalCost_gte: Int
  averageDuration: Int
  averageDuration_not: Int
  averageDuration_in: [Int!]
  averageDuration_not_in: [Int!]
  averageDuration_lt: Int
  averageDuration_lte: Int
  averageDuration_gt: Int
  averageDuration_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShippingOptionWhereInput!]
  OR: [ShippingOptionWhereInput!]
  NOT: [ShippingOptionWhereInput!]
}

input ShippingOptionWhereUniqueInput {
  id: ID
}

type ShopifyProductVariant {
  id: ID!
  externalId: String
  displayName: String
  selectedOptions(where: ShopifyProductVariantSelectedOptionWhereInput, orderBy: ShopifyProductVariantSelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShopifyProductVariantSelectedOption!]
  productVariant: ProductVariant
  shop: ShopifyShop
  brand: Brand
  title: String
  image: Image
  cachedPrice: Float
  cachedAvailableForSale: Boolean
  cacheExpiresAt: DateTime
}

type ShopifyProductVariantConnection {
  pageInfo: PageInfo!
  edges: [ShopifyProductVariantEdge]!
  aggregate: AggregateShopifyProductVariant!
}

input ShopifyProductVariantCreateInput {
  id: ID
  externalId: String
  displayName: String
  selectedOptions: ShopifyProductVariantSelectedOptionCreateManyInput
  productVariant: ProductVariantCreateOneWithoutShopifyProductVariantInput
  shop: ShopifyShopCreateOneInput
  brand: BrandCreateOneInput
  title: String
  image: ImageCreateOneInput
  cachedPrice: Float
  cachedAvailableForSale: Boolean
  cacheExpiresAt: DateTime
}

input ShopifyProductVariantCreateOneWithoutProductVariantInput {
  create: ShopifyProductVariantCreateWithoutProductVariantInput
  connect: ShopifyProductVariantWhereUniqueInput
}

input ShopifyProductVariantCreateWithoutProductVariantInput {
  id: ID
  externalId: String
  displayName: String
  selectedOptions: ShopifyProductVariantSelectedOptionCreateManyInput
  shop: ShopifyShopCreateOneInput
  brand: BrandCreateOneInput
  title: String
  image: ImageCreateOneInput
  cachedPrice: Float
  cachedAvailableForSale: Boolean
  cacheExpiresAt: DateTime
}

type ShopifyProductVariantEdge {
  node: ShopifyProductVariant!
  cursor: String!
}

enum ShopifyProductVariantOrderByInput {
  id_ASC
  id_DESC
  externalId_ASC
  externalId_DESC
  displayName_ASC
  displayName_DESC
  title_ASC
  title_DESC
  cachedPrice_ASC
  cachedPrice_DESC
  cachedAvailableForSale_ASC
  cachedAvailableForSale_DESC
  cacheExpiresAt_ASC
  cacheExpiresAt_DESC
}

type ShopifyProductVariantPreviousValues {
  id: ID!
  externalId: String
  displayName: String
  title: String
  cachedPrice: Float
  cachedAvailableForSale: Boolean
  cacheExpiresAt: DateTime
}

type ShopifyProductVariantSelectedOption {
  id: ID!
  name: String!
  value: String!
}

type ShopifyProductVariantSelectedOptionConnection {
  pageInfo: PageInfo!
  edges: [ShopifyProductVariantSelectedOptionEdge]!
  aggregate: AggregateShopifyProductVariantSelectedOption!
}

input ShopifyProductVariantSelectedOptionCreateInput {
  id: ID
  name: String!
  value: String!
}

input ShopifyProductVariantSelectedOptionCreateManyInput {
  create: [ShopifyProductVariantSelectedOptionCreateInput!]
  connect: [ShopifyProductVariantSelectedOptionWhereUniqueInput!]
}

type ShopifyProductVariantSelectedOptionEdge {
  node: ShopifyProductVariantSelectedOption!
  cursor: String!
}

enum ShopifyProductVariantSelectedOptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
}

type ShopifyProductVariantSelectedOptionPreviousValues {
  id: ID!
  name: String!
  value: String!
}

input ShopifyProductVariantSelectedOptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ShopifyProductVariantSelectedOptionScalarWhereInput!]
  OR: [ShopifyProductVariantSelectedOptionScalarWhereInput!]
  NOT: [ShopifyProductVariantSelectedOptionScalarWhereInput!]
}

type ShopifyProductVariantSelectedOptionSubscriptionPayload {
  mutation: MutationType!
  node: ShopifyProductVariantSelectedOption
  updatedFields: [String!]
  previousValues: ShopifyProductVariantSelectedOptionPreviousValues
}

input ShopifyProductVariantSelectedOptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopifyProductVariantSelectedOptionWhereInput
  AND: [ShopifyProductVariantSelectedOptionSubscriptionWhereInput!]
  OR: [ShopifyProductVariantSelectedOptionSubscriptionWhereInput!]
  NOT: [ShopifyProductVariantSelectedOptionSubscriptionWhereInput!]
}

input ShopifyProductVariantSelectedOptionUpdateDataInput {
  name: String
  value: String
}

input ShopifyProductVariantSelectedOptionUpdateInput {
  name: String
  value: String
}

input ShopifyProductVariantSelectedOptionUpdateManyDataInput {
  name: String
  value: String
}

input ShopifyProductVariantSelectedOptionUpdateManyInput {
  create: [ShopifyProductVariantSelectedOptionCreateInput!]
  update: [ShopifyProductVariantSelectedOptionUpdateWithWhereUniqueNestedInput!]
  upsert: [ShopifyProductVariantSelectedOptionUpsertWithWhereUniqueNestedInput!]
  delete: [ShopifyProductVariantSelectedOptionWhereUniqueInput!]
  connect: [ShopifyProductVariantSelectedOptionWhereUniqueInput!]
  set: [ShopifyProductVariantSelectedOptionWhereUniqueInput!]
  disconnect: [ShopifyProductVariantSelectedOptionWhereUniqueInput!]
  deleteMany: [ShopifyProductVariantSelectedOptionScalarWhereInput!]
  updateMany: [ShopifyProductVariantSelectedOptionUpdateManyWithWhereNestedInput!]
}

input ShopifyProductVariantSelectedOptionUpdateManyMutationInput {
  name: String
  value: String
}

input ShopifyProductVariantSelectedOptionUpdateManyWithWhereNestedInput {
  where: ShopifyProductVariantSelectedOptionScalarWhereInput!
  data: ShopifyProductVariantSelectedOptionUpdateManyDataInput!
}

input ShopifyProductVariantSelectedOptionUpdateWithWhereUniqueNestedInput {
  where: ShopifyProductVariantSelectedOptionWhereUniqueInput!
  data: ShopifyProductVariantSelectedOptionUpdateDataInput!
}

input ShopifyProductVariantSelectedOptionUpsertWithWhereUniqueNestedInput {
  where: ShopifyProductVariantSelectedOptionWhereUniqueInput!
  update: ShopifyProductVariantSelectedOptionUpdateDataInput!
  create: ShopifyProductVariantSelectedOptionCreateInput!
}

input ShopifyProductVariantSelectedOptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ShopifyProductVariantSelectedOptionWhereInput!]
  OR: [ShopifyProductVariantSelectedOptionWhereInput!]
  NOT: [ShopifyProductVariantSelectedOptionWhereInput!]
}

input ShopifyProductVariantSelectedOptionWhereUniqueInput {
  id: ID
}

type ShopifyProductVariantSubscriptionPayload {
  mutation: MutationType!
  node: ShopifyProductVariant
  updatedFields: [String!]
  previousValues: ShopifyProductVariantPreviousValues
}

input ShopifyProductVariantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopifyProductVariantWhereInput
  AND: [ShopifyProductVariantSubscriptionWhereInput!]
  OR: [ShopifyProductVariantSubscriptionWhereInput!]
  NOT: [ShopifyProductVariantSubscriptionWhereInput!]
}

input ShopifyProductVariantUpdateInput {
  externalId: String
  displayName: String
  selectedOptions: ShopifyProductVariantSelectedOptionUpdateManyInput
  productVariant: ProductVariantUpdateOneWithoutShopifyProductVariantInput
  shop: ShopifyShopUpdateOneInput
  brand: BrandUpdateOneInput
  title: String
  image: ImageUpdateOneInput
  cachedPrice: Float
  cachedAvailableForSale: Boolean
  cacheExpiresAt: DateTime
}

input ShopifyProductVariantUpdateManyMutationInput {
  externalId: String
  displayName: String
  title: String
  cachedPrice: Float
  cachedAvailableForSale: Boolean
  cacheExpiresAt: DateTime
}

input ShopifyProductVariantUpdateOneWithoutProductVariantInput {
  create: ShopifyProductVariantCreateWithoutProductVariantInput
  update: ShopifyProductVariantUpdateWithoutProductVariantDataInput
  upsert: ShopifyProductVariantUpsertWithoutProductVariantInput
  delete: Boolean
  disconnect: Boolean
  connect: ShopifyProductVariantWhereUniqueInput
}

input ShopifyProductVariantUpdateWithoutProductVariantDataInput {
  externalId: String
  displayName: String
  selectedOptions: ShopifyProductVariantSelectedOptionUpdateManyInput
  shop: ShopifyShopUpdateOneInput
  brand: BrandUpdateOneInput
  title: String
  image: ImageUpdateOneInput
  cachedPrice: Float
  cachedAvailableForSale: Boolean
  cacheExpiresAt: DateTime
}

input ShopifyProductVariantUpsertWithoutProductVariantInput {
  update: ShopifyProductVariantUpdateWithoutProductVariantDataInput!
  create: ShopifyProductVariantCreateWithoutProductVariantInput!
}

input ShopifyProductVariantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  externalId: String
  externalId_not: String
  externalId_in: [String!]
  externalId_not_in: [String!]
  externalId_lt: String
  externalId_lte: String
  externalId_gt: String
  externalId_gte: String
  externalId_contains: String
  externalId_not_contains: String
  externalId_starts_with: String
  externalId_not_starts_with: String
  externalId_ends_with: String
  externalId_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  selectedOptions_every: ShopifyProductVariantSelectedOptionWhereInput
  selectedOptions_some: ShopifyProductVariantSelectedOptionWhereInput
  selectedOptions_none: ShopifyProductVariantSelectedOptionWhereInput
  productVariant: ProductVariantWhereInput
  shop: ShopifyShopWhereInput
  brand: BrandWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  image: ImageWhereInput
  cachedPrice: Float
  cachedPrice_not: Float
  cachedPrice_in: [Float!]
  cachedPrice_not_in: [Float!]
  cachedPrice_lt: Float
  cachedPrice_lte: Float
  cachedPrice_gt: Float
  cachedPrice_gte: Float
  cachedAvailableForSale: Boolean
  cachedAvailableForSale_not: Boolean
  cacheExpiresAt: DateTime
  cacheExpiresAt_not: DateTime
  cacheExpiresAt_in: [DateTime!]
  cacheExpiresAt_not_in: [DateTime!]
  cacheExpiresAt_lt: DateTime
  cacheExpiresAt_lte: DateTime
  cacheExpiresAt_gt: DateTime
  cacheExpiresAt_gte: DateTime
  AND: [ShopifyProductVariantWhereInput!]
  OR: [ShopifyProductVariantWhereInput!]
  NOT: [ShopifyProductVariantWhereInput!]
}

input ShopifyProductVariantWhereUniqueInput {
  id: ID
  externalId: String
}

type ShopifyShop {
  id: ID!
  shopName: String!
  enabled: Boolean!
  accessToken: String
  scope: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShopifyShopConnection {
  pageInfo: PageInfo!
  edges: [ShopifyShopEdge]!
  aggregate: AggregateShopifyShop!
}

input ShopifyShopCreateInput {
  id: ID
  shopName: String!
  enabled: Boolean!
  accessToken: String
  scope: ShopifyShopCreatescopeInput
}

input ShopifyShopCreateOneInput {
  create: ShopifyShopCreateInput
  connect: ShopifyShopWhereUniqueInput
}

input ShopifyShopCreatescopeInput {
  set: [String!]
}

type ShopifyShopEdge {
  node: ShopifyShop!
  cursor: String!
}

enum ShopifyShopOrderByInput {
  id_ASC
  id_DESC
  shopName_ASC
  shopName_DESC
  enabled_ASC
  enabled_DESC
  accessToken_ASC
  accessToken_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShopifyShopPreviousValues {
  id: ID!
  shopName: String!
  enabled: Boolean!
  accessToken: String
  scope: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShopifyShopSubscriptionPayload {
  mutation: MutationType!
  node: ShopifyShop
  updatedFields: [String!]
  previousValues: ShopifyShopPreviousValues
}

input ShopifyShopSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopifyShopWhereInput
  AND: [ShopifyShopSubscriptionWhereInput!]
  OR: [ShopifyShopSubscriptionWhereInput!]
  NOT: [ShopifyShopSubscriptionWhereInput!]
}

input ShopifyShopUpdateDataInput {
  shopName: String
  enabled: Boolean
  accessToken: String
  scope: ShopifyShopUpdatescopeInput
}

input ShopifyShopUpdateInput {
  shopName: String
  enabled: Boolean
  accessToken: String
  scope: ShopifyShopUpdatescopeInput
}

input ShopifyShopUpdateManyMutationInput {
  shopName: String
  enabled: Boolean
  accessToken: String
  scope: ShopifyShopUpdatescopeInput
}

input ShopifyShopUpdateOneInput {
  create: ShopifyShopCreateInput
  update: ShopifyShopUpdateDataInput
  upsert: ShopifyShopUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ShopifyShopWhereUniqueInput
}

input ShopifyShopUpdatescopeInput {
  set: [String!]
}

input ShopifyShopUpsertNestedInput {
  update: ShopifyShopUpdateDataInput!
  create: ShopifyShopCreateInput!
}

input ShopifyShopWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  shopName: String
  shopName_not: String
  shopName_in: [String!]
  shopName_not_in: [String!]
  shopName_lt: String
  shopName_lte: String
  shopName_gt: String
  shopName_gte: String
  shopName_contains: String
  shopName_not_contains: String
  shopName_starts_with: String
  shopName_not_starts_with: String
  shopName_ends_with: String
  shopName_not_ends_with: String
  enabled: Boolean
  enabled_not: Boolean
  accessToken: String
  accessToken_not: String
  accessToken_in: [String!]
  accessToken_not_in: [String!]
  accessToken_lt: String
  accessToken_lte: String
  accessToken_gt: String
  accessToken_gte: String
  accessToken_contains: String
  accessToken_not_contains: String
  accessToken_starts_with: String
  accessToken_not_starts_with: String
  accessToken_ends_with: String
  accessToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShopifyShopWhereInput!]
  OR: [ShopifyShopWhereInput!]
  NOT: [ShopifyShopWhereInput!]
}

input ShopifyShopWhereUniqueInput {
  id: ID
  shopName: String
}

type Size {
  id: ID!
  slug: String!
  productType: ProductType
  top: TopSize
  bottom: BottomSize
  display: String!
  type: SizeType
}

type SizeConnection {
  pageInfo: PageInfo!
  edges: [SizeEdge]!
  aggregate: AggregateSize!
}

input SizeCreateInput {
  id: ID
  slug: String!
  productType: ProductType
  top: TopSizeCreateOneInput
  bottom: BottomSizeCreateOneInput
  display: String!
  type: SizeType
}

input SizeCreateManyInput {
  create: [SizeCreateInput!]
  connect: [SizeWhereUniqueInput!]
}

input SizeCreateOneInput {
  create: SizeCreateInput
  connect: SizeWhereUniqueInput
}

type SizeEdge {
  node: Size!
  cursor: String!
}

enum SizeOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  productType_ASC
  productType_DESC
  display_ASC
  display_DESC
  type_ASC
  type_DESC
}

type SizePreviousValues {
  id: ID!
  slug: String!
  productType: ProductType
  display: String!
  type: SizeType
}

input SizeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  productType: ProductType
  productType_not: ProductType
  productType_in: [ProductType!]
  productType_not_in: [ProductType!]
  display: String
  display_not: String
  display_in: [String!]
  display_not_in: [String!]
  display_lt: String
  display_lte: String
  display_gt: String
  display_gte: String
  display_contains: String
  display_not_contains: String
  display_starts_with: String
  display_not_starts_with: String
  display_ends_with: String
  display_not_ends_with: String
  type: SizeType
  type_not: SizeType
  type_in: [SizeType!]
  type_not_in: [SizeType!]
  AND: [SizeScalarWhereInput!]
  OR: [SizeScalarWhereInput!]
  NOT: [SizeScalarWhereInput!]
}

type SizeSubscriptionPayload {
  mutation: MutationType!
  node: Size
  updatedFields: [String!]
  previousValues: SizePreviousValues
}

input SizeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SizeWhereInput
  AND: [SizeSubscriptionWhereInput!]
  OR: [SizeSubscriptionWhereInput!]
  NOT: [SizeSubscriptionWhereInput!]
}

enum SizeType {
  WxL
  US
  EU
  JP
  Letter
}

input SizeUpdateDataInput {
  slug: String
  productType: ProductType
  top: TopSizeUpdateOneInput
  bottom: BottomSizeUpdateOneInput
  display: String
  type: SizeType
}

input SizeUpdateInput {
  slug: String
  productType: ProductType
  top: TopSizeUpdateOneInput
  bottom: BottomSizeUpdateOneInput
  display: String
  type: SizeType
}

input SizeUpdateManyDataInput {
  slug: String
  productType: ProductType
  display: String
  type: SizeType
}

input SizeUpdateManyInput {
  create: [SizeCreateInput!]
  update: [SizeUpdateWithWhereUniqueNestedInput!]
  upsert: [SizeUpsertWithWhereUniqueNestedInput!]
  delete: [SizeWhereUniqueInput!]
  connect: [SizeWhereUniqueInput!]
  set: [SizeWhereUniqueInput!]
  disconnect: [SizeWhereUniqueInput!]
  deleteMany: [SizeScalarWhereInput!]
  updateMany: [SizeUpdateManyWithWhereNestedInput!]
}

input SizeUpdateManyMutationInput {
  slug: String
  productType: ProductType
  display: String
  type: SizeType
}

input SizeUpdateManyWithWhereNestedInput {
  where: SizeScalarWhereInput!
  data: SizeUpdateManyDataInput!
}

input SizeUpdateOneInput {
  create: SizeCreateInput
  update: SizeUpdateDataInput
  upsert: SizeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SizeWhereUniqueInput
}

input SizeUpdateWithWhereUniqueNestedInput {
  where: SizeWhereUniqueInput!
  data: SizeUpdateDataInput!
}

input SizeUpsertNestedInput {
  update: SizeUpdateDataInput!
  create: SizeCreateInput!
}

input SizeUpsertWithWhereUniqueNestedInput {
  where: SizeWhereUniqueInput!
  update: SizeUpdateDataInput!
  create: SizeCreateInput!
}

input SizeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  productType: ProductType
  productType_not: ProductType
  productType_in: [ProductType!]
  productType_not_in: [ProductType!]
  top: TopSizeWhereInput
  bottom: BottomSizeWhereInput
  display: String
  display_not: String
  display_in: [String!]
  display_not_in: [String!]
  display_lt: String
  display_lte: String
  display_gt: String
  display_gte: String
  display_contains: String
  display_not_contains: String
  display_starts_with: String
  display_not_starts_with: String
  display_ends_with: String
  display_not_ends_with: String
  type: SizeType
  type_not: SizeType
  type_in: [SizeType!]
  type_not_in: [SizeType!]
  AND: [SizeWhereInput!]
  OR: [SizeWhereInput!]
  NOT: [SizeWhereInput!]
}

input SizeWhereUniqueInput {
  id: ID
  slug: String
}

type SmsReceipt {
  id: ID!
  externalId: String
  body: String!
  mediaUrls: [String!]!
  status: SmsStatus!
  smsId: String
  sentAt: DateTime!
  updatedAt: DateTime!
}

type SmsReceiptConnection {
  pageInfo: PageInfo!
  edges: [SmsReceiptEdge]!
  aggregate: AggregateSmsReceipt!
}

input SmsReceiptCreateInput {
  id: ID
  externalId: String
  body: String!
  mediaUrls: SmsReceiptCreatemediaUrlsInput
  status: SmsStatus!
  smsId: String
}

input SmsReceiptCreateManyInput {
  create: [SmsReceiptCreateInput!]
  connect: [SmsReceiptWhereUniqueInput!]
}

input SmsReceiptCreatemediaUrlsInput {
  set: [String!]
}

type SmsReceiptEdge {
  node: SmsReceipt!
  cursor: String!
}

enum SmsReceiptOrderByInput {
  id_ASC
  id_DESC
  externalId_ASC
  externalId_DESC
  body_ASC
  body_DESC
  status_ASC
  status_DESC
  smsId_ASC
  smsId_DESC
  sentAt_ASC
  sentAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SmsReceiptPreviousValues {
  id: ID!
  externalId: String
  body: String!
  mediaUrls: [String!]!
  status: SmsStatus!
  smsId: String
  sentAt: DateTime!
  updatedAt: DateTime!
}

input SmsReceiptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  externalId: String
  externalId_not: String
  externalId_in: [String!]
  externalId_not_in: [String!]
  externalId_lt: String
  externalId_lte: String
  externalId_gt: String
  externalId_gte: String
  externalId_contains: String
  externalId_not_contains: String
  externalId_starts_with: String
  externalId_not_starts_with: String
  externalId_ends_with: String
  externalId_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  status: SmsStatus
  status_not: SmsStatus
  status_in: [SmsStatus!]
  status_not_in: [SmsStatus!]
  smsId: String
  smsId_not: String
  smsId_in: [String!]
  smsId_not_in: [String!]
  smsId_lt: String
  smsId_lte: String
  smsId_gt: String
  smsId_gte: String
  smsId_contains: String
  smsId_not_contains: String
  smsId_starts_with: String
  smsId_not_starts_with: String
  smsId_ends_with: String
  smsId_not_ends_with: String
  sentAt: DateTime
  sentAt_not: DateTime
  sentAt_in: [DateTime!]
  sentAt_not_in: [DateTime!]
  sentAt_lt: DateTime
  sentAt_lte: DateTime
  sentAt_gt: DateTime
  sentAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SmsReceiptScalarWhereInput!]
  OR: [SmsReceiptScalarWhereInput!]
  NOT: [SmsReceiptScalarWhereInput!]
}

type SmsReceiptSubscriptionPayload {
  mutation: MutationType!
  node: SmsReceipt
  updatedFields: [String!]
  previousValues: SmsReceiptPreviousValues
}

input SmsReceiptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SmsReceiptWhereInput
  AND: [SmsReceiptSubscriptionWhereInput!]
  OR: [SmsReceiptSubscriptionWhereInput!]
  NOT: [SmsReceiptSubscriptionWhereInput!]
}

input SmsReceiptUpdateDataInput {
  externalId: String
  body: String
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
  status: SmsStatus
  smsId: String
}

input SmsReceiptUpdateInput {
  externalId: String
  body: String
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
  status: SmsStatus
  smsId: String
}

input SmsReceiptUpdateManyDataInput {
  externalId: String
  body: String
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
  status: SmsStatus
  smsId: String
}

input SmsReceiptUpdateManyInput {
  create: [SmsReceiptCreateInput!]
  update: [SmsReceiptUpdateWithWhereUniqueNestedInput!]
  upsert: [SmsReceiptUpsertWithWhereUniqueNestedInput!]
  delete: [SmsReceiptWhereUniqueInput!]
  connect: [SmsReceiptWhereUniqueInput!]
  set: [SmsReceiptWhereUniqueInput!]
  disconnect: [SmsReceiptWhereUniqueInput!]
  deleteMany: [SmsReceiptScalarWhereInput!]
  updateMany: [SmsReceiptUpdateManyWithWhereNestedInput!]
}

input SmsReceiptUpdateManyMutationInput {
  externalId: String
  body: String
  mediaUrls: SmsReceiptUpdatemediaUrlsInput
  status: SmsStatus
  smsId: String
}

input SmsReceiptUpdateManyWithWhereNestedInput {
  where: SmsReceiptScalarWhereInput!
  data: SmsReceiptUpdateManyDataInput!
}

input SmsReceiptUpdatemediaUrlsInput {
  set: [String!]
}

input SmsReceiptUpdateWithWhereUniqueNestedInput {
  where: SmsReceiptWhereUniqueInput!
  data: SmsReceiptUpdateDataInput!
}

input SmsReceiptUpsertWithWhereUniqueNestedInput {
  where: SmsReceiptWhereUniqueInput!
  update: SmsReceiptUpdateDataInput!
  create: SmsReceiptCreateInput!
}

input SmsReceiptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  externalId: String
  externalId_not: String
  externalId_in: [String!]
  externalId_not_in: [String!]
  externalId_lt: String
  externalId_lte: String
  externalId_gt: String
  externalId_gte: String
  externalId_contains: String
  externalId_not_contains: String
  externalId_starts_with: String
  externalId_not_starts_with: String
  externalId_ends_with: String
  externalId_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  status: SmsStatus
  status_not: SmsStatus
  status_in: [SmsStatus!]
  status_not_in: [SmsStatus!]
  smsId: String
  smsId_not: String
  smsId_in: [String!]
  smsId_not_in: [String!]
  smsId_lt: String
  smsId_lte: String
  smsId_gt: String
  smsId_gte: String
  smsId_contains: String
  smsId_not_contains: String
  smsId_starts_with: String
  smsId_not_starts_with: String
  smsId_ends_with: String
  smsId_not_ends_with: String
  sentAt: DateTime
  sentAt_not: DateTime
  sentAt_in: [DateTime!]
  sentAt_not_in: [DateTime!]
  sentAt_lt: DateTime
  sentAt_lte: DateTime
  sentAt_gt: DateTime
  sentAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SmsReceiptWhereInput!]
  OR: [SmsReceiptWhereInput!]
  NOT: [SmsReceiptWhereInput!]
}

input SmsReceiptWhereUniqueInput {
  id: ID
}

enum SmsStatus {
  Queued
  Sending
  Sent
  Failed
  Delivered
  Undelivered
  Receiving
  Received
  Accepted
  Scheduled
  Read
  PartiallyDelivered
}

type StylePreferences {
  id: ID!
  styles: [String!]!
  patterns: [String!]!
  colors: [String!]!
  brands: [String!]!
}

type StylePreferencesConnection {
  pageInfo: PageInfo!
  edges: [StylePreferencesEdge]!
  aggregate: AggregateStylePreferences!
}

input StylePreferencesCreatebrandsInput {
  set: [String!]
}

input StylePreferencesCreatecolorsInput {
  set: [String!]
}

input StylePreferencesCreateInput {
  id: ID
  styles: StylePreferencesCreatestylesInput
  patterns: StylePreferencesCreatepatternsInput
  colors: StylePreferencesCreatecolorsInput
  brands: StylePreferencesCreatebrandsInput
}

input StylePreferencesCreateOneInput {
  create: StylePreferencesCreateInput
  connect: StylePreferencesWhereUniqueInput
}

input StylePreferencesCreatepatternsInput {
  set: [String!]
}

input StylePreferencesCreatestylesInput {
  set: [String!]
}

type StylePreferencesEdge {
  node: StylePreferences!
  cursor: String!
}

enum StylePreferencesOrderByInput {
  id_ASC
  id_DESC
}

type StylePreferencesPreviousValues {
  id: ID!
  styles: [String!]!
  patterns: [String!]!
  colors: [String!]!
  brands: [String!]!
}

type StylePreferencesSubscriptionPayload {
  mutation: MutationType!
  node: StylePreferences
  updatedFields: [String!]
  previousValues: StylePreferencesPreviousValues
}

input StylePreferencesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StylePreferencesWhereInput
  AND: [StylePreferencesSubscriptionWhereInput!]
  OR: [StylePreferencesSubscriptionWhereInput!]
  NOT: [StylePreferencesSubscriptionWhereInput!]
}

input StylePreferencesUpdatebrandsInput {
  set: [String!]
}

input StylePreferencesUpdatecolorsInput {
  set: [String!]
}

input StylePreferencesUpdateDataInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateManyMutationInput {
  styles: StylePreferencesUpdatestylesInput
  patterns: StylePreferencesUpdatepatternsInput
  colors: StylePreferencesUpdatecolorsInput
  brands: StylePreferencesUpdatebrandsInput
}

input StylePreferencesUpdateOneInput {
  create: StylePreferencesCreateInput
  update: StylePreferencesUpdateDataInput
  upsert: StylePreferencesUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: StylePreferencesWhereUniqueInput
}

input StylePreferencesUpdatepatternsInput {
  set: [String!]
}

input StylePreferencesUpdatestylesInput {
  set: [String!]
}

input StylePreferencesUpsertNestedInput {
  update: StylePreferencesUpdateDataInput!
  create: StylePreferencesCreateInput!
}

input StylePreferencesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [StylePreferencesWhereInput!]
  OR: [StylePreferencesWhereInput!]
  NOT: [StylePreferencesWhereInput!]
}

input StylePreferencesWhereUniqueInput {
  id: ID
}

type Subscription {
  activeAdminUser(where: ActiveAdminUserSubscriptionWhereInput): ActiveAdminUserSubscriptionPayload
  adminActionLog(where: AdminActionLogSubscriptionWhereInput): AdminActionLogSubscriptionPayload
  adminActionLogInterpretation(where: AdminActionLogInterpretationSubscriptionWhereInput): AdminActionLogInterpretationSubscriptionPayload
  bagItem(where: BagItemSubscriptionWhereInput): BagItemSubscriptionPayload
  billingInfo(where: BillingInfoSubscriptionWhereInput): BillingInfoSubscriptionPayload
  blogPost(where: BlogPostSubscriptionWhereInput): BlogPostSubscriptionPayload
  bottomSize(where: BottomSizeSubscriptionWhereInput): BottomSizeSubscriptionPayload
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  collection(where: CollectionSubscriptionWhereInput): CollectionSubscriptionPayload
  color(where: ColorSubscriptionWhereInput): ColorSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  customerAdmissionsData(where: CustomerAdmissionsDataSubscriptionWhereInput): CustomerAdmissionsDataSubscriptionPayload
  customerDetail(where: CustomerDetailSubscriptionWhereInput): CustomerDetailSubscriptionPayload
  customerMembership(where: CustomerMembershipSubscriptionWhereInput): CustomerMembershipSubscriptionPayload
  customerMembershipSubscriptionData(where: CustomerMembershipSubscriptionDataSubscriptionWhereInput): CustomerMembershipSubscriptionDataSubscriptionPayload
  customerNotificationBarReceipt(where: CustomerNotificationBarReceiptSubscriptionWhereInput): CustomerNotificationBarReceiptSubscriptionPayload
  emailReceipt(where: EmailReceiptSubscriptionWhereInput): EmailReceiptSubscriptionPayload
  fitPic(where: FitPicSubscriptionWhereInput): FitPicSubscriptionPayload
  fitPicReport(where: FitPicReportSubscriptionWhereInput): FitPicReportSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  interestedUser(where: InterestedUserSubscriptionWhereInput): InterestedUserSubscriptionPayload
  label(where: LabelSubscriptionWhereInput): LabelSubscriptionPayload
  launch(where: LaunchSubscriptionWhereInput): LaunchSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderLineItem(where: OrderLineItemSubscriptionWhereInput): OrderLineItemSubscriptionPayload
  package(where: PackageSubscriptionWhereInput): PackageSubscriptionPayload
  packageTransitEvent(where: PackageTransitEventSubscriptionWhereInput): PackageTransitEventSubscriptionPayload
  pauseRequest(where: PauseRequestSubscriptionWhereInput): PauseRequestSubscriptionPayload
  paymentPlan(where: PaymentPlanSubscriptionWhereInput): PaymentPlanSubscriptionPayload
  physicalProduct(where: PhysicalProductSubscriptionWhereInput): PhysicalProductSubscriptionPayload
  physicalProductPrice(where: PhysicalProductPriceSubscriptionWhereInput): PhysicalProductPriceSubscriptionPayload
  physicalProductQualityReport(where: PhysicalProductQualityReportSubscriptionWhereInput): PhysicalProductQualityReportSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productFunction(where: ProductFunctionSubscriptionWhereInput): ProductFunctionSubscriptionPayload
  productMaterialCategory(where: ProductMaterialCategorySubscriptionWhereInput): ProductMaterialCategorySubscriptionPayload
  productModel(where: ProductModelSubscriptionWhereInput): ProductModelSubscriptionPayload
  productNotification(where: ProductNotificationSubscriptionWhereInput): ProductNotificationSubscriptionPayload
  productRequest(where: ProductRequestSubscriptionWhereInput): ProductRequestSubscriptionPayload
  productSeason(where: ProductSeasonSubscriptionWhereInput): ProductSeasonSubscriptionPayload
  productTier(where: ProductTierSubscriptionWhereInput): ProductTierSubscriptionPayload
  productVariant(where: ProductVariantSubscriptionWhereInput): ProductVariantSubscriptionPayload
  productVariantFeedback(where: ProductVariantFeedbackSubscriptionWhereInput): ProductVariantFeedbackSubscriptionPayload
  productVariantFeedbackQuestion(where: ProductVariantFeedbackQuestionSubscriptionWhereInput): ProductVariantFeedbackQuestionSubscriptionPayload
  productVariantPrice(where: ProductVariantPriceSubscriptionWhereInput): ProductVariantPriceSubscriptionPayload
  productVariantWant(where: ProductVariantWantSubscriptionWhereInput): ProductVariantWantSubscriptionPayload
  pushNotificationReceipt(where: PushNotificationReceiptSubscriptionWhereInput): PushNotificationReceiptSubscriptionPayload
  recentlyViewedProduct(where: RecentlyViewedProductSubscriptionWhereInput): RecentlyViewedProductSubscriptionPayload
  reservation(where: ReservationSubscriptionWhereInput): ReservationSubscriptionPayload
  reservationFeedback(where: ReservationFeedbackSubscriptionWhereInput): ReservationFeedbackSubscriptionPayload
  reservationReceipt(where: ReservationReceiptSubscriptionWhereInput): ReservationReceiptSubscriptionPayload
  reservationReceiptItem(where: ReservationReceiptItemSubscriptionWhereInput): ReservationReceiptItemSubscriptionPayload
  season(where: SeasonSubscriptionWhereInput): SeasonSubscriptionPayload
  shippingMethod(where: ShippingMethodSubscriptionWhereInput): ShippingMethodSubscriptionPayload
  shippingOption(where: ShippingOptionSubscriptionWhereInput): ShippingOptionSubscriptionPayload
  shopifyProductVariant(where: ShopifyProductVariantSubscriptionWhereInput): ShopifyProductVariantSubscriptionPayload
  shopifyProductVariantSelectedOption(where: ShopifyProductVariantSelectedOptionSubscriptionWhereInput): ShopifyProductVariantSelectedOptionSubscriptionPayload
  shopifyShop(where: ShopifyShopSubscriptionWhereInput): ShopifyShopSubscriptionPayload
  size(where: SizeSubscriptionWhereInput): SizeSubscriptionPayload
  smsReceipt(where: SmsReceiptSubscriptionWhereInput): SmsReceiptSubscriptionPayload
  stylePreferences(where: StylePreferencesSubscriptionWhereInput): StylePreferencesSubscriptionPayload
  syncTiming(where: SyncTimingSubscriptionWhereInput): SyncTimingSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  topSize(where: TopSizeSubscriptionWhereInput): TopSizeSubscriptionPayload
  uTMData(where: UTMDataSubscriptionWhereInput): UTMDataSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userDeviceData(where: UserDeviceDataSubscriptionWhereInput): UserDeviceDataSubscriptionPayload
  userPushNotification(where: UserPushNotificationSubscriptionWhereInput): UserPushNotificationSubscriptionPayload
  userPushNotificationInterest(where: UserPushNotificationInterestSubscriptionWhereInput): UserPushNotificationInterestSubscriptionPayload
  warehouseLocation(where: WarehouseLocationSubscriptionWhereInput): WarehouseLocationSubscriptionPayload
  warehouseLocationConstraint(where: WarehouseLocationConstraintSubscriptionWhereInput): WarehouseLocationConstraintSubscriptionPayload
}

type SyncTiming {
  id: ID!
  type: SyncTimingType!
  syncedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SyncTimingConnection {
  pageInfo: PageInfo!
  edges: [SyncTimingEdge]!
  aggregate: AggregateSyncTiming!
}

input SyncTimingCreateInput {
  id: ID
  type: SyncTimingType!
  syncedAt: DateTime!
}

type SyncTimingEdge {
  node: SyncTiming!
  cursor: String!
}

enum SyncTimingOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  syncedAt_ASC
  syncedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SyncTimingPreviousValues {
  id: ID!
  type: SyncTimingType!
  syncedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SyncTimingSubscriptionPayload {
  mutation: MutationType!
  node: SyncTiming
  updatedFields: [String!]
  previousValues: SyncTimingPreviousValues
}

input SyncTimingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SyncTimingWhereInput
  AND: [SyncTimingSubscriptionWhereInput!]
  OR: [SyncTimingSubscriptionWhereInput!]
  NOT: [SyncTimingSubscriptionWhereInput!]
}

enum SyncTimingType {
  Drip
  Next
}

input SyncTimingUpdateInput {
  type: SyncTimingType
  syncedAt: DateTime
}

input SyncTimingUpdateManyMutationInput {
  type: SyncTimingType
  syncedAt: DateTime
}

input SyncTimingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: SyncTimingType
  type_not: SyncTimingType
  type_in: [SyncTimingType!]
  type_not_in: [SyncTimingType!]
  syncedAt: DateTime
  syncedAt_not: DateTime
  syncedAt_in: [DateTime!]
  syncedAt_not_in: [DateTime!]
  syncedAt_lt: DateTime
  syncedAt_lte: DateTime
  syncedAt_gt: DateTime
  syncedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SyncTimingWhereInput!]
  OR: [SyncTimingWhereInput!]
  NOT: [SyncTimingWhereInput!]
}

input SyncTimingWhereUniqueInput {
  id: ID
}

type Tag {
  id: ID!
  name: String!
  description: String
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
  description: String
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutProductsInput {
  id: ID
  name: String!
  description: String
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  name: String
  description: String
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
  description: String
}

input TagUpdateManyMutationInput {
  name: String
  description: String
}

input TagUpdateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutProductsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutProductsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutProductsDataInput {
  name: String
  description: String
}

input TagUpdateWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutProductsDataInput!
}

input TagUpsertWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutProductsDataInput!
  create: TagCreateWithoutProductsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type TopSize {
  id: ID!
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

type TopSizeConnection {
  pageInfo: PageInfo!
  edges: [TopSizeEdge]!
  aggregate: AggregateTopSize!
}

input TopSizeCreateInput {
  id: ID
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

input TopSizeCreateOneInput {
  create: TopSizeCreateInput
  connect: TopSizeWhereUniqueInput
}

type TopSizeEdge {
  node: TopSize!
  cursor: String!
}

enum TopSizeOrderByInput {
  id_ASC
  id_DESC
  letter_ASC
  letter_DESC
  sleeve_ASC
  sleeve_DESC
  shoulder_ASC
  shoulder_DESC
  chest_ASC
  chest_DESC
  neck_ASC
  neck_DESC
  length_ASC
  length_DESC
}

type TopSizePreviousValues {
  id: ID!
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

type TopSizeSubscriptionPayload {
  mutation: MutationType!
  node: TopSize
  updatedFields: [String!]
  previousValues: TopSizePreviousValues
}

input TopSizeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TopSizeWhereInput
  AND: [TopSizeSubscriptionWhereInput!]
  OR: [TopSizeSubscriptionWhereInput!]
  NOT: [TopSizeSubscriptionWhereInput!]
}

input TopSizeUpdateDataInput {
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

input TopSizeUpdateInput {
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

input TopSizeUpdateManyMutationInput {
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

input TopSizeUpdateOneInput {
  create: TopSizeCreateInput
  update: TopSizeUpdateDataInput
  upsert: TopSizeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TopSizeWhereUniqueInput
}

input TopSizeUpsertNestedInput {
  update: TopSizeUpdateDataInput!
  create: TopSizeCreateInput!
}

input TopSizeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  letter: LetterSize
  letter_not: LetterSize
  letter_in: [LetterSize!]
  letter_not_in: [LetterSize!]
  sleeve: Float
  sleeve_not: Float
  sleeve_in: [Float!]
  sleeve_not_in: [Float!]
  sleeve_lt: Float
  sleeve_lte: Float
  sleeve_gt: Float
  sleeve_gte: Float
  shoulder: Float
  shoulder_not: Float
  shoulder_in: [Float!]
  shoulder_not_in: [Float!]
  shoulder_lt: Float
  shoulder_lte: Float
  shoulder_gt: Float
  shoulder_gte: Float
  chest: Float
  chest_not: Float
  chest_in: [Float!]
  chest_not_in: [Float!]
  chest_lt: Float
  chest_lte: Float
  chest_gt: Float
  chest_gte: Float
  neck: Float
  neck_not: Float
  neck_in: [Float!]
  neck_not_in: [Float!]
  neck_lt: Float
  neck_lte: Float
  neck_gt: Float
  neck_gte: Float
  length: Float
  length_not: Float
  length_in: [Float!]
  length_not_in: [Float!]
  length_lt: Float
  length_lte: Float
  length_gt: Float
  length_gte: Float
  AND: [TopSizeWhereInput!]
  OR: [TopSizeWhereInput!]
  NOT: [TopSizeWhereInput!]
}

input TopSizeWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole!
  roles: [UserRole!]!
  pushNotificationStatus: PushNotificationStatus!
  pushNotifications(where: PushNotificationReceiptWhereInput, orderBy: PushNotificationReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PushNotificationReceipt!]
  emails(where: EmailReceiptWhereInput, orderBy: EmailReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmailReceipt!]
  sendSystemEmails: Boolean!
  pushNotification: UserPushNotification
  verificationStatus: UserVerificationStatus!
  verificationMethod: UserVerificationMethod!
  smsReceipts(where: SmsReceiptWhereInput, orderBy: SmsReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SmsReceipt!]
  fitPics(where: FitPicWhereInput, orderBy: FitPicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FitPic!]
  deviceData: UserDeviceData
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole
  roles: UserCreaterolesInput
  pushNotificationStatus: PushNotificationStatus
  pushNotifications: PushNotificationReceiptCreateManyWithoutUsersInput
  emails: EmailReceiptCreateManyWithoutUserInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationCreateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptCreateManyInput
  fitPics: FitPicCreateManyWithoutUserInput
  deviceData: UserDeviceDataCreateOneInput
}

input UserCreateManyWithoutPushNotificationsInput {
  create: [UserCreateWithoutPushNotificationsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEmailsInput {
  create: UserCreateWithoutEmailsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFitPicsInput {
  create: UserCreateWithoutFitPicsInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [UserRole!]
}

input UserCreateWithoutEmailsInput {
  id: ID
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole
  roles: UserCreaterolesInput
  pushNotificationStatus: PushNotificationStatus
  pushNotifications: PushNotificationReceiptCreateManyWithoutUsersInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationCreateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptCreateManyInput
  fitPics: FitPicCreateManyWithoutUserInput
  deviceData: UserDeviceDataCreateOneInput
}

input UserCreateWithoutFitPicsInput {
  id: ID
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole
  roles: UserCreaterolesInput
  pushNotificationStatus: PushNotificationStatus
  pushNotifications: PushNotificationReceiptCreateManyWithoutUsersInput
  emails: EmailReceiptCreateManyWithoutUserInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationCreateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptCreateManyInput
  deviceData: UserDeviceDataCreateOneInput
}

input UserCreateWithoutPushNotificationsInput {
  id: ID
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole
  roles: UserCreaterolesInput
  pushNotificationStatus: PushNotificationStatus
  emails: EmailReceiptCreateManyWithoutUserInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationCreateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptCreateManyInput
  fitPics: FitPicCreateManyWithoutUserInput
  deviceData: UserDeviceDataCreateOneInput
}

type UserDeviceData {
  id: ID!
  iOSVersion: String
}

type UserDeviceDataConnection {
  pageInfo: PageInfo!
  edges: [UserDeviceDataEdge]!
  aggregate: AggregateUserDeviceData!
}

input UserDeviceDataCreateInput {
  id: ID
  iOSVersion: String
}

input UserDeviceDataCreateOneInput {
  create: UserDeviceDataCreateInput
  connect: UserDeviceDataWhereUniqueInput
}

type UserDeviceDataEdge {
  node: UserDeviceData!
  cursor: String!
}

enum UserDeviceDataOrderByInput {
  id_ASC
  id_DESC
  iOSVersion_ASC
  iOSVersion_DESC
}

type UserDeviceDataPreviousValues {
  id: ID!
  iOSVersion: String
}

type UserDeviceDataSubscriptionPayload {
  mutation: MutationType!
  node: UserDeviceData
  updatedFields: [String!]
  previousValues: UserDeviceDataPreviousValues
}

input UserDeviceDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserDeviceDataWhereInput
  AND: [UserDeviceDataSubscriptionWhereInput!]
  OR: [UserDeviceDataSubscriptionWhereInput!]
  NOT: [UserDeviceDataSubscriptionWhereInput!]
}

input UserDeviceDataUpdateDataInput {
  iOSVersion: String
}

input UserDeviceDataUpdateInput {
  iOSVersion: String
}

input UserDeviceDataUpdateManyMutationInput {
  iOSVersion: String
}

input UserDeviceDataUpdateOneInput {
  create: UserDeviceDataCreateInput
  update: UserDeviceDataUpdateDataInput
  upsert: UserDeviceDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserDeviceDataWhereUniqueInput
}

input UserDeviceDataUpsertNestedInput {
  update: UserDeviceDataUpdateDataInput!
  create: UserDeviceDataCreateInput!
}

input UserDeviceDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  iOSVersion: String
  iOSVersion_not: String
  iOSVersion_in: [String!]
  iOSVersion_not_in: [String!]
  iOSVersion_lt: String
  iOSVersion_lte: String
  iOSVersion_gt: String
  iOSVersion_gte: String
  iOSVersion_contains: String
  iOSVersion_not_contains: String
  iOSVersion_starts_with: String
  iOSVersion_not_starts_with: String
  iOSVersion_ends_with: String
  iOSVersion_not_ends_with: String
  AND: [UserDeviceDataWhereInput!]
  OR: [UserDeviceDataWhereInput!]
  NOT: [UserDeviceDataWhereInput!]
}

input UserDeviceDataWhereUniqueInput {
  id: ID
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  auth0Id_ASC
  auth0Id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  role_ASC
  role_DESC
  pushNotificationStatus_ASC
  pushNotificationStatus_DESC
  sendSystemEmails_ASC
  sendSystemEmails_DESC
  verificationStatus_ASC
  verificationStatus_DESC
  verificationMethod_ASC
  verificationMethod_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  auth0Id: String!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole!
  roles: [UserRole!]!
  pushNotificationStatus: PushNotificationStatus!
  sendSystemEmails: Boolean!
  verificationStatus: UserVerificationStatus!
  verificationMethod: UserVerificationMethod!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserPushNotification {
  id: ID!
  interests(where: UserPushNotificationInterestWhereInput, orderBy: UserPushNotificationInterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPushNotificationInterest!]
  status: Boolean!
  history(where: PushNotificationReceiptWhereInput, orderBy: PushNotificationReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PushNotificationReceipt!]
}

type UserPushNotificationConnection {
  pageInfo: PageInfo!
  edges: [UserPushNotificationEdge]!
  aggregate: AggregateUserPushNotification!
}

input UserPushNotificationCreateInput {
  id: ID
  interests: UserPushNotificationInterestCreateManyInput
  status: Boolean
  history: PushNotificationReceiptCreateManyInput
}

input UserPushNotificationCreateOneInput {
  create: UserPushNotificationCreateInput
  connect: UserPushNotificationWhereUniqueInput
}

type UserPushNotificationEdge {
  node: UserPushNotification!
  cursor: String!
}

type UserPushNotificationInterest {
  id: ID!
  type: UserPushNotificationInterestType!
  value: String!
  user: User!
  status: Boolean!
}

type UserPushNotificationInterestConnection {
  pageInfo: PageInfo!
  edges: [UserPushNotificationInterestEdge]!
  aggregate: AggregateUserPushNotificationInterest!
}

input UserPushNotificationInterestCreateInput {
  id: ID
  type: UserPushNotificationInterestType!
  value: String!
  user: UserCreateOneInput!
  status: Boolean
}

input UserPushNotificationInterestCreateManyInput {
  create: [UserPushNotificationInterestCreateInput!]
  connect: [UserPushNotificationInterestWhereUniqueInput!]
}

type UserPushNotificationInterestEdge {
  node: UserPushNotificationInterest!
  cursor: String!
}

enum UserPushNotificationInterestOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  value_ASC
  value_DESC
  status_ASC
  status_DESC
}

type UserPushNotificationInterestPreviousValues {
  id: ID!
  type: UserPushNotificationInterestType!
  value: String!
  status: Boolean!
}

input UserPushNotificationInterestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: UserPushNotificationInterestType
  type_not: UserPushNotificationInterestType
  type_in: [UserPushNotificationInterestType!]
  type_not_in: [UserPushNotificationInterestType!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  status: Boolean
  status_not: Boolean
  AND: [UserPushNotificationInterestScalarWhereInput!]
  OR: [UserPushNotificationInterestScalarWhereInput!]
  NOT: [UserPushNotificationInterestScalarWhereInput!]
}

type UserPushNotificationInterestSubscriptionPayload {
  mutation: MutationType!
  node: UserPushNotificationInterest
  updatedFields: [String!]
  previousValues: UserPushNotificationInterestPreviousValues
}

input UserPushNotificationInterestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserPushNotificationInterestWhereInput
  AND: [UserPushNotificationInterestSubscriptionWhereInput!]
  OR: [UserPushNotificationInterestSubscriptionWhereInput!]
  NOT: [UserPushNotificationInterestSubscriptionWhereInput!]
}

enum UserPushNotificationInterestType {
  Bag
  Blog
  Brand
  General
  NewProduct
}

input UserPushNotificationInterestUpdateDataInput {
  type: UserPushNotificationInterestType
  value: String
  user: UserUpdateOneRequiredInput
  status: Boolean
}

input UserPushNotificationInterestUpdateInput {
  type: UserPushNotificationInterestType
  value: String
  user: UserUpdateOneRequiredInput
  status: Boolean
}

input UserPushNotificationInterestUpdateManyDataInput {
  type: UserPushNotificationInterestType
  value: String
  status: Boolean
}

input UserPushNotificationInterestUpdateManyInput {
  create: [UserPushNotificationInterestCreateInput!]
  update: [UserPushNotificationInterestUpdateWithWhereUniqueNestedInput!]
  upsert: [UserPushNotificationInterestUpsertWithWhereUniqueNestedInput!]
  delete: [UserPushNotificationInterestWhereUniqueInput!]
  connect: [UserPushNotificationInterestWhereUniqueInput!]
  set: [UserPushNotificationInterestWhereUniqueInput!]
  disconnect: [UserPushNotificationInterestWhereUniqueInput!]
  deleteMany: [UserPushNotificationInterestScalarWhereInput!]
  updateMany: [UserPushNotificationInterestUpdateManyWithWhereNestedInput!]
}

input UserPushNotificationInterestUpdateManyMutationInput {
  type: UserPushNotificationInterestType
  value: String
  status: Boolean
}

input UserPushNotificationInterestUpdateManyWithWhereNestedInput {
  where: UserPushNotificationInterestScalarWhereInput!
  data: UserPushNotificationInterestUpdateManyDataInput!
}

input UserPushNotificationInterestUpdateWithWhereUniqueNestedInput {
  where: UserPushNotificationInterestWhereUniqueInput!
  data: UserPushNotificationInterestUpdateDataInput!
}

input UserPushNotificationInterestUpsertWithWhereUniqueNestedInput {
  where: UserPushNotificationInterestWhereUniqueInput!
  update: UserPushNotificationInterestUpdateDataInput!
  create: UserPushNotificationInterestCreateInput!
}

input UserPushNotificationInterestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: UserPushNotificationInterestType
  type_not: UserPushNotificationInterestType
  type_in: [UserPushNotificationInterestType!]
  type_not_in: [UserPushNotificationInterestType!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  user: UserWhereInput
  status: Boolean
  status_not: Boolean
  AND: [UserPushNotificationInterestWhereInput!]
  OR: [UserPushNotificationInterestWhereInput!]
  NOT: [UserPushNotificationInterestWhereInput!]
}

input UserPushNotificationInterestWhereUniqueInput {
  id: ID
}

enum UserPushNotificationOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
}

type UserPushNotificationPreviousValues {
  id: ID!
  status: Boolean!
}

type UserPushNotificationSubscriptionPayload {
  mutation: MutationType!
  node: UserPushNotification
  updatedFields: [String!]
  previousValues: UserPushNotificationPreviousValues
}

input UserPushNotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserPushNotificationWhereInput
  AND: [UserPushNotificationSubscriptionWhereInput!]
  OR: [UserPushNotificationSubscriptionWhereInput!]
  NOT: [UserPushNotificationSubscriptionWhereInput!]
}

input UserPushNotificationUpdateDataInput {
  interests: UserPushNotificationInterestUpdateManyInput
  status: Boolean
  history: PushNotificationReceiptUpdateManyInput
}

input UserPushNotificationUpdateInput {
  interests: UserPushNotificationInterestUpdateManyInput
  status: Boolean
  history: PushNotificationReceiptUpdateManyInput
}

input UserPushNotificationUpdateManyMutationInput {
  status: Boolean
}

input UserPushNotificationUpdateOneInput {
  create: UserPushNotificationCreateInput
  update: UserPushNotificationUpdateDataInput
  upsert: UserPushNotificationUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserPushNotificationWhereUniqueInput
}

input UserPushNotificationUpsertNestedInput {
  update: UserPushNotificationUpdateDataInput!
  create: UserPushNotificationCreateInput!
}

input UserPushNotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  interests_every: UserPushNotificationInterestWhereInput
  interests_some: UserPushNotificationInterestWhereInput
  interests_none: UserPushNotificationInterestWhereInput
  status: Boolean
  status_not: Boolean
  history_every: PushNotificationReceiptWhereInput
  history_some: PushNotificationReceiptWhereInput
  history_none: PushNotificationReceiptWhereInput
  AND: [UserPushNotificationWhereInput!]
  OR: [UserPushNotificationWhereInput!]
  NOT: [UserPushNotificationWhereInput!]
}

input UserPushNotificationWhereUniqueInput {
  id: ID
}

enum UserRole {
  Admin
  Customer
  Partner
  Marketer
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  auth0Id: String
  auth0Id_not: String
  auth0Id_in: [String!]
  auth0Id_not_in: [String!]
  auth0Id_lt: String
  auth0Id_lte: String
  auth0Id_gt: String
  auth0Id_gte: String
  auth0Id_contains: String
  auth0Id_not_contains: String
  auth0Id_starts_with: String
  auth0Id_not_starts_with: String
  auth0Id_ends_with: String
  auth0Id_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  pushNotificationStatus: PushNotificationStatus
  pushNotificationStatus_not: PushNotificationStatus
  pushNotificationStatus_in: [PushNotificationStatus!]
  pushNotificationStatus_not_in: [PushNotificationStatus!]
  sendSystemEmails: Boolean
  sendSystemEmails_not: Boolean
  verificationStatus: UserVerificationStatus
  verificationStatus_not: UserVerificationStatus
  verificationStatus_in: [UserVerificationStatus!]
  verificationStatus_not_in: [UserVerificationStatus!]
  verificationMethod: UserVerificationMethod
  verificationMethod_not: UserVerificationMethod
  verificationMethod_in: [UserVerificationMethod!]
  verificationMethod_not_in: [UserVerificationMethod!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  roles: UserUpdaterolesInput
  pushNotificationStatus: PushNotificationStatus
  pushNotifications: PushNotificationReceiptUpdateManyWithoutUsersInput
  emails: EmailReceiptUpdateManyWithoutUserInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationUpdateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptUpdateManyInput
  fitPics: FitPicUpdateManyWithoutUserInput
  deviceData: UserDeviceDataUpdateOneInput
}

input UserUpdateInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  roles: UserUpdaterolesInput
  pushNotificationStatus: PushNotificationStatus
  pushNotifications: PushNotificationReceiptUpdateManyWithoutUsersInput
  emails: EmailReceiptUpdateManyWithoutUserInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationUpdateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptUpdateManyInput
  fitPics: FitPicUpdateManyWithoutUserInput
  deviceData: UserDeviceDataUpdateOneInput
}

input UserUpdateManyDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  roles: UserUpdaterolesInput
  pushNotificationStatus: PushNotificationStatus
  sendSystemEmails: Boolean
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
}

input UserUpdateManyMutationInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  roles: UserUpdaterolesInput
  pushNotificationStatus: PushNotificationStatus
  sendSystemEmails: Boolean
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
}

input UserUpdateManyWithoutPushNotificationsInput {
  create: [UserCreateWithoutPushNotificationsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPushNotificationsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPushNotificationsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEmailsInput {
  create: UserCreateWithoutEmailsInput
  update: UserUpdateWithoutEmailsDataInput
  upsert: UserUpsertWithoutEmailsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutFitPicsInput {
  create: UserCreateWithoutFitPicsInput
  update: UserUpdateWithoutFitPicsDataInput
  upsert: UserUpsertWithoutFitPicsInput
  connect: UserWhereUniqueInput
}

input UserUpdaterolesInput {
  set: [UserRole!]
}

input UserUpdateWithoutEmailsDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  roles: UserUpdaterolesInput
  pushNotificationStatus: PushNotificationStatus
  pushNotifications: PushNotificationReceiptUpdateManyWithoutUsersInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationUpdateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptUpdateManyInput
  fitPics: FitPicUpdateManyWithoutUserInput
  deviceData: UserDeviceDataUpdateOneInput
}

input UserUpdateWithoutFitPicsDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  roles: UserUpdaterolesInput
  pushNotificationStatus: PushNotificationStatus
  pushNotifications: PushNotificationReceiptUpdateManyWithoutUsersInput
  emails: EmailReceiptUpdateManyWithoutUserInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationUpdateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptUpdateManyInput
  deviceData: UserDeviceDataUpdateOneInput
}

input UserUpdateWithoutPushNotificationsDataInput {
  auth0Id: String
  email: String
  firstName: String
  lastName: String
  role: UserRole
  roles: UserUpdaterolesInput
  pushNotificationStatus: PushNotificationStatus
  emails: EmailReceiptUpdateManyWithoutUserInput
  sendSystemEmails: Boolean
  pushNotification: UserPushNotificationUpdateOneInput
  verificationStatus: UserVerificationStatus
  verificationMethod: UserVerificationMethod
  smsReceipts: SmsReceiptUpdateManyInput
  fitPics: FitPicUpdateManyWithoutUserInput
  deviceData: UserDeviceDataUpdateOneInput
}

input UserUpdateWithWhereUniqueWithoutPushNotificationsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPushNotificationsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutEmailsInput {
  update: UserUpdateWithoutEmailsDataInput!
  create: UserCreateWithoutEmailsInput!
}

input UserUpsertWithoutFitPicsInput {
  update: UserUpdateWithoutFitPicsDataInput!
  create: UserCreateWithoutFitPicsInput!
}

input UserUpsertWithWhereUniqueWithoutPushNotificationsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPushNotificationsDataInput!
  create: UserCreateWithoutPushNotificationsInput!
}

enum UserVerificationMethod {
  SMS
  Email
  None
}

enum UserVerificationStatus {
  Approved
  Denied
  Pending
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  auth0Id: String
  auth0Id_not: String
  auth0Id_in: [String!]
  auth0Id_not_in: [String!]
  auth0Id_lt: String
  auth0Id_lte: String
  auth0Id_gt: String
  auth0Id_gte: String
  auth0Id_contains: String
  auth0Id_not_contains: String
  auth0Id_starts_with: String
  auth0Id_not_starts_with: String
  auth0Id_ends_with: String
  auth0Id_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  pushNotificationStatus: PushNotificationStatus
  pushNotificationStatus_not: PushNotificationStatus
  pushNotificationStatus_in: [PushNotificationStatus!]
  pushNotificationStatus_not_in: [PushNotificationStatus!]
  pushNotifications_every: PushNotificationReceiptWhereInput
  pushNotifications_some: PushNotificationReceiptWhereInput
  pushNotifications_none: PushNotificationReceiptWhereInput
  emails_every: EmailReceiptWhereInput
  emails_some: EmailReceiptWhereInput
  emails_none: EmailReceiptWhereInput
  sendSystemEmails: Boolean
  sendSystemEmails_not: Boolean
  pushNotification: UserPushNotificationWhereInput
  verificationStatus: UserVerificationStatus
  verificationStatus_not: UserVerificationStatus
  verificationStatus_in: [UserVerificationStatus!]
  verificationStatus_not_in: [UserVerificationStatus!]
  verificationMethod: UserVerificationMethod
  verificationMethod_not: UserVerificationMethod
  verificationMethod_in: [UserVerificationMethod!]
  verificationMethod_not_in: [UserVerificationMethod!]
  smsReceipts_every: SmsReceiptWhereInput
  smsReceipts_some: SmsReceiptWhereInput
  smsReceipts_none: SmsReceiptWhereInput
  fitPics_every: FitPicWhereInput
  fitPics_some: FitPicWhereInput
  fitPics_none: FitPicWhereInput
  deviceData: UserDeviceDataWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  auth0Id: String
  email: String
}

type UTMData {
  id: ID!
  customer: Customer!
  source: String
  medium: String
  campaign: String
  term: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UTMDataConnection {
  pageInfo: PageInfo!
  edges: [UTMDataEdge]!
  aggregate: AggregateUTMData!
}

input UTMDataCreateInput {
  id: ID
  customer: CustomerCreateOneWithoutUtmInput!
  source: String
  medium: String
  campaign: String
  term: String
  content: String
}

input UTMDataCreateOneWithoutCustomerInput {
  create: UTMDataCreateWithoutCustomerInput
  connect: UTMDataWhereUniqueInput
}

input UTMDataCreateWithoutCustomerInput {
  id: ID
  source: String
  medium: String
  campaign: String
  term: String
  content: String
}

type UTMDataEdge {
  node: UTMData!
  cursor: String!
}

enum UTMDataOrderByInput {
  id_ASC
  id_DESC
  source_ASC
  source_DESC
  medium_ASC
  medium_DESC
  campaign_ASC
  campaign_DESC
  term_ASC
  term_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UTMDataPreviousValues {
  id: ID!
  source: String
  medium: String
  campaign: String
  term: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UTMDataSubscriptionPayload {
  mutation: MutationType!
  node: UTMData
  updatedFields: [String!]
  previousValues: UTMDataPreviousValues
}

input UTMDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UTMDataWhereInput
  AND: [UTMDataSubscriptionWhereInput!]
  OR: [UTMDataSubscriptionWhereInput!]
  NOT: [UTMDataSubscriptionWhereInput!]
}

input UTMDataUpdateInput {
  customer: CustomerUpdateOneRequiredWithoutUtmInput
  source: String
  medium: String
  campaign: String
  term: String
  content: String
}

input UTMDataUpdateManyMutationInput {
  source: String
  medium: String
  campaign: String
  term: String
  content: String
}

input UTMDataUpdateOneWithoutCustomerInput {
  create: UTMDataCreateWithoutCustomerInput
  update: UTMDataUpdateWithoutCustomerDataInput
  upsert: UTMDataUpsertWithoutCustomerInput
  delete: Boolean
  disconnect: Boolean
  connect: UTMDataWhereUniqueInput
}

input UTMDataUpdateWithoutCustomerDataInput {
  source: String
  medium: String
  campaign: String
  term: String
  content: String
}

input UTMDataUpsertWithoutCustomerInput {
  update: UTMDataUpdateWithoutCustomerDataInput!
  create: UTMDataCreateWithoutCustomerInput!
}

input UTMDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  customer: CustomerWhereInput
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  medium: String
  medium_not: String
  medium_in: [String!]
  medium_not_in: [String!]
  medium_lt: String
  medium_lte: String
  medium_gt: String
  medium_gte: String
  medium_contains: String
  medium_not_contains: String
  medium_starts_with: String
  medium_not_starts_with: String
  medium_ends_with: String
  medium_not_ends_with: String
  campaign: String
  campaign_not: String
  campaign_in: [String!]
  campaign_not_in: [String!]
  campaign_lt: String
  campaign_lte: String
  campaign_gt: String
  campaign_gte: String
  campaign_contains: String
  campaign_not_contains: String
  campaign_starts_with: String
  campaign_not_starts_with: String
  campaign_ends_with: String
  campaign_not_ends_with: String
  term: String
  term_not: String
  term_in: [String!]
  term_not_in: [String!]
  term_lt: String
  term_lte: String
  term_gt: String
  term_gte: String
  term_contains: String
  term_not_contains: String
  term_starts_with: String
  term_not_starts_with: String
  term_ends_with: String
  term_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UTMDataWhereInput!]
  OR: [UTMDataWhereInput!]
  NOT: [UTMDataWhereInput!]
}

input UTMDataWhereUniqueInput {
  id: ID
}

type WarehouseLocation {
  id: ID!
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  physicalProducts(where: PhysicalProductWhereInput, orderBy: PhysicalProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalProduct!]
  constraints(where: WarehouseLocationConstraintWhereInput, orderBy: WarehouseLocationConstraintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WarehouseLocationConstraint!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WarehouseLocationConnection {
  pageInfo: PageInfo!
  edges: [WarehouseLocationEdge]!
  aggregate: AggregateWarehouseLocation!
}

type WarehouseLocationConstraint {
  id: ID!
  category: Category!
  limit: Int!
  locations(where: WarehouseLocationWhereInput, orderBy: WarehouseLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WarehouseLocation!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WarehouseLocationConstraintConnection {
  pageInfo: PageInfo!
  edges: [WarehouseLocationConstraintEdge]!
  aggregate: AggregateWarehouseLocationConstraint!
}

input WarehouseLocationConstraintCreateInput {
  id: ID
  category: CategoryCreateOneInput!
  limit: Int!
  locations: WarehouseLocationCreateManyWithoutConstraintsInput
}

input WarehouseLocationConstraintCreateManyWithoutLocationsInput {
  create: [WarehouseLocationConstraintCreateWithoutLocationsInput!]
  connect: [WarehouseLocationConstraintWhereUniqueInput!]
}

input WarehouseLocationConstraintCreateWithoutLocationsInput {
  id: ID
  category: CategoryCreateOneInput!
  limit: Int!
}

type WarehouseLocationConstraintEdge {
  node: WarehouseLocationConstraint!
  cursor: String!
}

enum WarehouseLocationConstraintOrderByInput {
  id_ASC
  id_DESC
  limit_ASC
  limit_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WarehouseLocationConstraintPreviousValues {
  id: ID!
  limit: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WarehouseLocationConstraintScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  limit: Int
  limit_not: Int
  limit_in: [Int!]
  limit_not_in: [Int!]
  limit_lt: Int
  limit_lte: Int
  limit_gt: Int
  limit_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WarehouseLocationConstraintScalarWhereInput!]
  OR: [WarehouseLocationConstraintScalarWhereInput!]
  NOT: [WarehouseLocationConstraintScalarWhereInput!]
}

type WarehouseLocationConstraintSubscriptionPayload {
  mutation: MutationType!
  node: WarehouseLocationConstraint
  updatedFields: [String!]
  previousValues: WarehouseLocationConstraintPreviousValues
}

input WarehouseLocationConstraintSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WarehouseLocationConstraintWhereInput
  AND: [WarehouseLocationConstraintSubscriptionWhereInput!]
  OR: [WarehouseLocationConstraintSubscriptionWhereInput!]
  NOT: [WarehouseLocationConstraintSubscriptionWhereInput!]
}

input WarehouseLocationConstraintUpdateInput {
  category: CategoryUpdateOneRequiredInput
  limit: Int
  locations: WarehouseLocationUpdateManyWithoutConstraintsInput
}

input WarehouseLocationConstraintUpdateManyDataInput {
  limit: Int
}

input WarehouseLocationConstraintUpdateManyMutationInput {
  limit: Int
}

input WarehouseLocationConstraintUpdateManyWithoutLocationsInput {
  create: [WarehouseLocationConstraintCreateWithoutLocationsInput!]
  delete: [WarehouseLocationConstraintWhereUniqueInput!]
  connect: [WarehouseLocationConstraintWhereUniqueInput!]
  set: [WarehouseLocationConstraintWhereUniqueInput!]
  disconnect: [WarehouseLocationConstraintWhereUniqueInput!]
  update: [WarehouseLocationConstraintUpdateWithWhereUniqueWithoutLocationsInput!]
  upsert: [WarehouseLocationConstraintUpsertWithWhereUniqueWithoutLocationsInput!]
  deleteMany: [WarehouseLocationConstraintScalarWhereInput!]
  updateMany: [WarehouseLocationConstraintUpdateManyWithWhereNestedInput!]
}

input WarehouseLocationConstraintUpdateManyWithWhereNestedInput {
  where: WarehouseLocationConstraintScalarWhereInput!
  data: WarehouseLocationConstraintUpdateManyDataInput!
}

input WarehouseLocationConstraintUpdateWithoutLocationsDataInput {
  category: CategoryUpdateOneRequiredInput
  limit: Int
}

input WarehouseLocationConstraintUpdateWithWhereUniqueWithoutLocationsInput {
  where: WarehouseLocationConstraintWhereUniqueInput!
  data: WarehouseLocationConstraintUpdateWithoutLocationsDataInput!
}

input WarehouseLocationConstraintUpsertWithWhereUniqueWithoutLocationsInput {
  where: WarehouseLocationConstraintWhereUniqueInput!
  update: WarehouseLocationConstraintUpdateWithoutLocationsDataInput!
  create: WarehouseLocationConstraintCreateWithoutLocationsInput!
}

input WarehouseLocationConstraintWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  category: CategoryWhereInput
  limit: Int
  limit_not: Int
  limit_in: [Int!]
  limit_not_in: [Int!]
  limit_lt: Int
  limit_lte: Int
  limit_gt: Int
  limit_gte: Int
  locations_every: WarehouseLocationWhereInput
  locations_some: WarehouseLocationWhereInput
  locations_none: WarehouseLocationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WarehouseLocationConstraintWhereInput!]
  OR: [WarehouseLocationConstraintWhereInput!]
  NOT: [WarehouseLocationConstraintWhereInput!]
}

input WarehouseLocationConstraintWhereUniqueInput {
  id: ID
}

input WarehouseLocationCreateInput {
  id: ID
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  physicalProducts: PhysicalProductCreateManyWithoutWarehouseLocationInput
  constraints: WarehouseLocationConstraintCreateManyWithoutLocationsInput
}

input WarehouseLocationCreateManyWithoutConstraintsInput {
  create: [WarehouseLocationCreateWithoutConstraintsInput!]
  connect: [WarehouseLocationWhereUniqueInput!]
}

input WarehouseLocationCreateOneWithoutPhysicalProductsInput {
  create: WarehouseLocationCreateWithoutPhysicalProductsInput
  connect: WarehouseLocationWhereUniqueInput
}

input WarehouseLocationCreateWithoutConstraintsInput {
  id: ID
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  physicalProducts: PhysicalProductCreateManyWithoutWarehouseLocationInput
}

input WarehouseLocationCreateWithoutPhysicalProductsInput {
  id: ID
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  constraints: WarehouseLocationConstraintCreateManyWithoutLocationsInput
}

type WarehouseLocationEdge {
  node: WarehouseLocation!
  cursor: String!
}

enum WarehouseLocationOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  barcode_ASC
  barcode_DESC
  locationCode_ASC
  locationCode_DESC
  itemCode_ASC
  itemCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WarehouseLocationPreviousValues {
  id: ID!
  type: WarehouseLocationType!
  barcode: String!
  locationCode: String!
  itemCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WarehouseLocationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: WarehouseLocationType
  type_not: WarehouseLocationType
  type_in: [WarehouseLocationType!]
  type_not_in: [WarehouseLocationType!]
  barcode: String
  barcode_not: String
  barcode_in: [String!]
  barcode_not_in: [String!]
  barcode_lt: String
  barcode_lte: String
  barcode_gt: String
  barcode_gte: String
  barcode_contains: String
  barcode_not_contains: String
  barcode_starts_with: String
  barcode_not_starts_with: String
  barcode_ends_with: String
  barcode_not_ends_with: String
  locationCode: String
  locationCode_not: String
  locationCode_in: [String!]
  locationCode_not_in: [String!]
  locationCode_lt: String
  locationCode_lte: String
  locationCode_gt: String
  locationCode_gte: String
  locationCode_contains: String
  locationCode_not_contains: String
  locationCode_starts_with: String
  locationCode_not_starts_with: String
  locationCode_ends_with: String
  locationCode_not_ends_with: String
  itemCode: String
  itemCode_not: String
  itemCode_in: [String!]
  itemCode_not_in: [String!]
  itemCode_lt: String
  itemCode_lte: String
  itemCode_gt: String
  itemCode_gte: String
  itemCode_contains: String
  itemCode_not_contains: String
  itemCode_starts_with: String
  itemCode_not_starts_with: String
  itemCode_ends_with: String
  itemCode_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WarehouseLocationScalarWhereInput!]
  OR: [WarehouseLocationScalarWhereInput!]
  NOT: [WarehouseLocationScalarWhereInput!]
}

type WarehouseLocationSubscriptionPayload {
  mutation: MutationType!
  node: WarehouseLocation
  updatedFields: [String!]
  previousValues: WarehouseLocationPreviousValues
}

input WarehouseLocationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WarehouseLocationWhereInput
  AND: [WarehouseLocationSubscriptionWhereInput!]
  OR: [WarehouseLocationSubscriptionWhereInput!]
  NOT: [WarehouseLocationSubscriptionWhereInput!]
}

enum WarehouseLocationType {
  Conveyor
  Rail
  Bin
}

input WarehouseLocationUpdateInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
  physicalProducts: PhysicalProductUpdateManyWithoutWarehouseLocationInput
  constraints: WarehouseLocationConstraintUpdateManyWithoutLocationsInput
}

input WarehouseLocationUpdateManyDataInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
}

input WarehouseLocationUpdateManyMutationInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
}

input WarehouseLocationUpdateManyWithoutConstraintsInput {
  create: [WarehouseLocationCreateWithoutConstraintsInput!]
  delete: [WarehouseLocationWhereUniqueInput!]
  connect: [WarehouseLocationWhereUniqueInput!]
  set: [WarehouseLocationWhereUniqueInput!]
  disconnect: [WarehouseLocationWhereUniqueInput!]
  update: [WarehouseLocationUpdateWithWhereUniqueWithoutConstraintsInput!]
  upsert: [WarehouseLocationUpsertWithWhereUniqueWithoutConstraintsInput!]
  deleteMany: [WarehouseLocationScalarWhereInput!]
  updateMany: [WarehouseLocationUpdateManyWithWhereNestedInput!]
}

input WarehouseLocationUpdateManyWithWhereNestedInput {
  where: WarehouseLocationScalarWhereInput!
  data: WarehouseLocationUpdateManyDataInput!
}

input WarehouseLocationUpdateOneWithoutPhysicalProductsInput {
  create: WarehouseLocationCreateWithoutPhysicalProductsInput
  update: WarehouseLocationUpdateWithoutPhysicalProductsDataInput
  upsert: WarehouseLocationUpsertWithoutPhysicalProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: WarehouseLocationWhereUniqueInput
}

input WarehouseLocationUpdateWithoutConstraintsDataInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
  physicalProducts: PhysicalProductUpdateManyWithoutWarehouseLocationInput
}

input WarehouseLocationUpdateWithoutPhysicalProductsDataInput {
  type: WarehouseLocationType
  barcode: String
  locationCode: String
  itemCode: String
  constraints: WarehouseLocationConstraintUpdateManyWithoutLocationsInput
}

input WarehouseLocationUpdateWithWhereUniqueWithoutConstraintsInput {
  where: WarehouseLocationWhereUniqueInput!
  data: WarehouseLocationUpdateWithoutConstraintsDataInput!
}

input WarehouseLocationUpsertWithoutPhysicalProductsInput {
  update: WarehouseLocationUpdateWithoutPhysicalProductsDataInput!
  create: WarehouseLocationCreateWithoutPhysicalProductsInput!
}

input WarehouseLocationUpsertWithWhereUniqueWithoutConstraintsInput {
  where: WarehouseLocationWhereUniqueInput!
  update: WarehouseLocationUpdateWithoutConstraintsDataInput!
  create: WarehouseLocationCreateWithoutConstraintsInput!
}

input WarehouseLocationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: WarehouseLocationType
  type_not: WarehouseLocationType
  type_in: [WarehouseLocationType!]
  type_not_in: [WarehouseLocationType!]
  barcode: String
  barcode_not: String
  barcode_in: [String!]
  barcode_not_in: [String!]
  barcode_lt: String
  barcode_lte: String
  barcode_gt: String
  barcode_gte: String
  barcode_contains: String
  barcode_not_contains: String
  barcode_starts_with: String
  barcode_not_starts_with: String
  barcode_ends_with: String
  barcode_not_ends_with: String
  locationCode: String
  locationCode_not: String
  locationCode_in: [String!]
  locationCode_not_in: [String!]
  locationCode_lt: String
  locationCode_lte: String
  locationCode_gt: String
  locationCode_gte: String
  locationCode_contains: String
  locationCode_not_contains: String
  locationCode_starts_with: String
  locationCode_not_starts_with: String
  locationCode_ends_with: String
  locationCode_not_ends_with: String
  itemCode: String
  itemCode_not: String
  itemCode_in: [String!]
  itemCode_not_in: [String!]
  itemCode_lt: String
  itemCode_lte: String
  itemCode_gt: String
  itemCode_gte: String
  itemCode_contains: String
  itemCode_not_contains: String
  itemCode_starts_with: String
  itemCode_not_starts_with: String
  itemCode_ends_with: String
  itemCode_not_ends_with: String
  physicalProducts_every: PhysicalProductWhereInput
  physicalProducts_some: PhysicalProductWhereInput
  physicalProducts_none: PhysicalProductWhereInput
  constraints_every: WarehouseLocationConstraintWhereInput
  constraints_some: WarehouseLocationConstraintWhereInput
  constraints_none: WarehouseLocationConstraintWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WarehouseLocationWhereInput!]
  OR: [WarehouseLocationWhereInput!]
  NOT: [WarehouseLocationWhereInput!]
}

input WarehouseLocationWhereUniqueInput {
  id: ID
  barcode: String
}
`