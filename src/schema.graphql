# import Category, User, Bag, Collection, CustomerDetail, ProductFunction from "./prisma/prisma.graphql"

directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD_DEFINITION
directive @isOwner(type: String) on FIELD_DEFINITION
directive @isOwnerOrHasRole(type: String, roles: [String]) on FIELD_DEFINITION

type Query {
  me: Me @isAuthenticated
  products(
    category: String
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product]!
  collectionGroups(
    where: CollectionGroupWhereInput
    orderBy: CollectionGroupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CollectionGroup]!
  collectionGroup(where: CollectionGroupWhereUniqueInput!): CollectionGroup
  collections(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Collection]!
  collection(where: CollectionWhereUniqueInput!): Collection
  product(where: ProductWhereUniqueInput!): Product
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!
  productFunctions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction]!
  homepage: Homepage
  chargebeeCheckout(planID: PlanID): ChargebeeCheckout
}

type ChargebeeCheckout {
  created_at: Int!
  embed: Boolean!
  expires_at: Int!
  id: String!
  object: String!
  resource_version: Int!
  state: String!
  type: String!
  updated_at: Int!
  url: String!
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    details: CustomerDetailCreateInput
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  addCustomerDetails(details: CustomerDetailCreateInput): Customer!
    @hasRole(roles: ["Customer"])
  checkItemsAvailability(items: [ID!]!): Boolean!
  reserveItems(items: [ID!]!, options: ReserveItemsOptions): Reservation
  saveCustomerBillingInfo: BillingInfoPlayoad
}

type BillingInfoPlayoad {
  billingInfo: BillingInfo
  plan: Plan
}

input ReserveItemsOptions {
  dryRun: Boolean
}

type AuthPayload {
  token: String!
  refreshToken: String!
  expiresIn: Int!
  user: User!
}

type Image {
  href: String
  height: Int
  width: Int
  imageURL: String
  originalHeight: Int
  originalWidth: Int
  resized(width: Int, height: Int, version: [String]): ResizedImageUrl
}

type ResizedImageUrl {
  factor: Float
  width: Int
  height: Int
  url: String
}

type Homepage {
  sections: [HomepageSection!]!
}

type HomepageSection {
  type: HomePageSectionType!
  results: [HomepageResult!]!
  title: String
}

type Me {
  user: User!
  customer: Customer!
  activeReservation: Reservation
}

union HomepageResult = Category | Product | Brand | Collection

enum HomePageSectionType {
  CollectionGroups
  Categories
  Products
  Brands
}

enum PlanID {
  AllAccess
  Essential
}
