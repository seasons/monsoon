# import Category, User, Bag, CustomerDetail, ProductFunction from "./prisma/prisma.graphql"

directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD_DEFINITION
directive @isOwner(type: String) on FIELD_DEFINITION
directive @isOwnerOrHasRole(type: String, roles: [String]) on FIELD_DEFINITION

type Query {
  me: Me @isAuthenticated
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product]!
  product(where: ProductWhereUniqueInput!): Product
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!
  productFunctions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction]!
  homepage: Homepage
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    details: CustomerDetailCreateInput
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  addCustomerDetails(details: CustomerDetailCreateInput): Customer!
    @hasRole(roles: ["Customer"])
  reserveItems(items: [ID!]!): Order
  setCreditCard(creditCard: CreditCardCreateInput): CreditCard
}

type AuthPayload {
  token: String!
  user: User!
}

type Image {
  href: String
  height: Int
  width: Int
  imageURL: String
  originalHeight: Int
  originalWidth: Int
  resized(width: Int, height: Int, version: [String]): ResizedImageUrl
}

type ResizedImageUrl {
  factor: Float
  width: Int
  height: Int
  url: String
}

type Homepage {
  sections: [HomepageSection!]!
}

type HomepageSection {
  type: HomePageSectionType!
  results: [HomepageResult!]!
  title: String
}

type Hero {
  id: ID!
  heroImageURL: String!
}

type CreditCard {
  # A type-specific ID likely used as a database ID.
  id: ID!

  # Brand of credit card
  brand: String!

  # Name on the credit card
  name: String

  # Last four digits on the credit card
  last_digits: String!

  # Credit card's expiration month
  expiration_month: Int!

  # Credit card's expiration year
  expiration_year: Int!

  # Billing address street1
  street1: String

  # Billing address street2
  street2: String

  # Billing address city
  city: String

  # Billing address state
  state: String

  # Billing address country code
  country: String

  # Billing address postal code
  postal_code: String
}

input CreditCardCreateInput {
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}

type Me {
  user: User!
  customer: Customer!
}

union HomepageResult = Category | Product | Brand | Hero

enum HomePageSectionType {
  Hero
  Categories
  Products
  Brands
}
