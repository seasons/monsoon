# import Category, User, Bag, CustomerDetail, ProductFunction from "./prisma/prisma.graphql"

directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD_DEFINITION
directive @isOwner(type: String) on FIELD_DEFINITION
directive @isOwnerOrHasRole(type: String, roles: [String]) on FIELD_DEFINITION

type Query {
  me: User @isAuthenticated
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product]!
  product(where: ProductWhereUniqueInput!): Product
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!
  productFunctions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction]!
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    details: CustomerDetailCreateInput
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  addCustomerDetails(details: CustomerDetailCreateInput): Customer!
    @hasRole(roles: ["Customer"])
  reserveItems(items: [ID!]!): Order
}

type AuthPayload {
  token: String!
  user: User!
}

type Image {
  href: String
  height: Int
  width: Int
  imageURL: String
  originalHeight: Int
  originalWidth: Int
  resized(width: Int, height: Int, version: [String]): ResizedImageUrl
}

type ResizedImageUrl {
  factor: Float
  width: Int
  height: Int
  url: String
}
