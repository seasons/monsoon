# import Category, User, Bag, Collection, CustomerDetail, ProductFunction, SavedProduct from "./prisma/prisma.graphql"

directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD_DEFINITION
directive @isOwner(type: String) on FIELD_DEFINITION
directive @isOwnerOrHasRole(type: String, roles: [String]) on FIELD_DEFINITION

type Product {
  id: ID!
  slug: String!
  name: String!
  brand: Brand!
  category: Category!
  type: ProductType
  description: String
  externalURL: String
  images: Json!
  modelHeight: Int
  modelSize: Size
  retailPrice: Int
  color: Color!
  secondaryColor: Color
  tags: Json
  functions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction!]
  innerMaterials: [Material!]!
  outerMaterials: [Material!]!
  variants(
    where: ProductVariantWhereInput
    orderBy: ProductVariantOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductVariant!]
  status: ProductStatus
  isSaved: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductVariant {
  id: ID!
  sku: String
  color: Color!
  size: String
  internalSize: Size
  manufacturerSizes(
    where: SizeWhereInput
    orderBy: SizeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Size!]
  weight: Float
  height: Float
  productID: String!
  product: Product!
  retailPrice: Float
  physicalProducts(
    where: PhysicalProductWhereInput
    orderBy: PhysicalProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PhysicalProduct!]
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  isSaved: Boolean!
  isWanted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  me: Me @isAuthenticated
  brand(where: BrandWhereUniqueInput!): Brand
  brands(
    where: BrandWhereInput
    orderBy: BrandOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Brand]!
  products(
    category: String
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    sizes: [String!]
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Product]!
  productsConnection(
    sizes: [String!]
    category: String
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection!
  collectionGroups(
    where: CollectionGroupWhereInput
    orderBy: CollectionGroupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CollectionGroup]!
  collectionGroup(where: CollectionGroupWhereUniqueInput!): CollectionGroup
  collections(
    where: CollectionWhereInput
    orderBy: CollectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Collection]!
  collection(where: CollectionWhereUniqueInput!): Collection
  faq: Faq
  homepage: Homepage
  chargebeeCheckout(
    planID: PlanID!
    userIDHash: String!
  ): ChargebeeHostedPagePayload
  chargebeeUpdatePaymentPage: ChargebeeHostedPagePayload
  homepageProductRail(
    where: HomepageProductRailWhereUniqueInput!
  ): HomepageProductRail
  homepageProductRails(
    where: HomepageProductRailWhereInput
    orderBy: HomepageProductRailOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [HomepageProductRail]!
  product(where: ProductWhereUniqueInput!): Product
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant!
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!
  productFunctions(
    where: ProductFunctionWhereInput
    orderBy: ProductFunctionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductFunction]!
  productRequests(
    where: ProductRequestWhereInput
    orderBy: ProductRequestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ProductRequest]!
  search(query: String!, options: SearchOptions): [SearchResult]!
}

type ChargebeeHostedPagePayload {
  created_at: DateTime!
  embed: Boolean!
  expires_at: Int!
  id: String!
  object: String!
  resource_version: DateTime!
  state: String!
  type: String!
  updated_at: DateTime!
  url: String!
}

type Mutation {
  beamsData: BeamsData!
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    details: CustomerDetailCreateInput
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  resetPassword(email: String!): ResetPasswordPayload!
  addCustomerDetails(
    details: CustomerDetailCreateInput!
    status: CustomerStatus
    event: Event
  ): Customer! @hasRole(roles: ["Customer"])
  checkItemsAvailability(items: [ID!]!): Boolean!
  reserveItems(items: [ID!]!, options: ReserveItemsOptions): Reservation
  addToBag(item: ID!): BagItem!
  removeFromBag(item: ID!, saved: Boolean): BagItem!
  saveProduct(item: ID!, save: Boolean!): BagItem
  addViewedProduct(item: ID!): RecentlyViewedProduct!
  acknowledgeCompletedChargebeeHostedCheckout(
    hostedPageID: String!
  ): BillingInfoPayload
  addProductRequest(reason: String!, url: String!): ProductRequest!
  deleteProductRequest(requestID: ID!): ProductRequest!
  validateAddress(input: ValidateAddressInput!): ValidationPayload!
  addProductVariantWant(variantID: ID!): ProductVariantWant!
  updateUserPushNotifications(pushNotificationsStatus: String!): User!
  updatePaymentAndShipping(
    billingAddress: AddressInput!
    shippingAddress: AddressInput!
    phoneNumber: String!
  ): Boolean
}

input AddressInput {
  city: String!
  postalCode: String!
  state: String!
  street1: String!
  street2: String
}

input ReserveItemsOptions {
  dryRun: Boolean
}

type BeamsData {
  email: String!
  beamsToken: String!
}

type BillingInfoPayload {
  billingInfo: BillingInfo
  plan: Plan
}

type AuthPayload {
  token: String!
  refreshToken: String!
  expiresIn: Int!
  user: User!
  beamsToken: String!
}

type ResetPasswordPayload {
  message: String!
}

input ValidateAddressInput {
  location: LocationCreateInput!
  email: String!
}

type ValidationPayload {
  isValid: Boolean!
  code: String
  text: String
}

input SearchOptions {
  includeTypes: [String]
}

union SearchResultType = Product | Brand

type SearchResult {
  data: SearchResultType!
  score: Float
}

type Image {
  href: String
  height: Int
  width: Int
  imageURL: String
  originalHeight: Int
  originalWidth: Int
  resized(width: Int, height: Int, version: [String]): ResizedImageUrl
}

type ResizedImageUrl {
  factor: Float
  width: Int
  height: Int
  url: String
}

type Homepage {
  sections: [HomepageSection!]!
}

type HomepageSection {
  type: HomePageSectionType!
  results: [HomepageResult!]!
  title: String
}

type Me {
  user: User!
  customer: Customer!
  activeReservation: Reservation
  bag: [BagItem!]!
  savedItems: [BagItem!]!
}

union HomepageResult = Product | Collection | Brand

enum HomePageSectionType {
  CollectionGroups
  Products
  HomepageProductRails
  Brands
}

enum PlanID {
  AllAccess
  Essential
}

enum Event {
  CompletedWaitlistForm
}

type Faq {
  sections: [FaqSection!]!
}

type FaqSection {
  title: String!
  subsections: [FaqSubsection!]!
}

type FaqSubsection {
  title: String!
  text: String!
}

type Reservation {
  id: ID!
  user: User!
  customer: Customer!
  sentPackage: Package
  returnedPackage: Package
  location: Location
  products: [PhysicalProduct!]!
  reservationNumber: Int!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  returnDateDisplay: DateTime
}
