directive @external on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

scalar _Any

"""A union of all federated types (those that use the @key directive)."""
union _Entity = Brand | Product | Category | Color | ProductVariant | ProductVariantInventoryLevel | Image | Location

"""
Used to represent a set of fields. Grammatically, a field set is a
selection set minus the braces.
"""
scalar _FieldSet

"""Describes our federated service."""
type _Service {
  """
  The GraphQL Schema Language definiton of our endpoint including the
  Apollo Federation directives (but not their definitions or the special
  Apollo Federation fields).
  """
  sdl: String @deprecated(reason: "Only Apollo Federation should use this")
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

type Brand implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  airtableId: String!
  slug: String!
  name: String!
  tier: BrandTier!
  websiteUrl: String
  logo: JSON
  description: String
  since: Date
  isPrimaryBrand: Boolean
  brandCode: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Product`."""
  products(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter
  ): ProductsConnection!
}

"""
A condition to be used against `Brand` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BrandCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `airtableId` field."""
  airtableId: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `tier` field."""
  tier: BrandTier

  """Checks for equality with the object’s `websiteUrl` field."""
  websiteUrl: String

  """Checks for equality with the object’s `logo` field."""
  logo: JSON

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `since` field."""
  since: Date

  """Checks for equality with the object’s `isPrimaryBrand` field."""
  isPrimaryBrand: Boolean

  """Checks for equality with the object’s `brandCode` field."""
  brandCode: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Brand` object types. All fields are combined with a logical ‘and.’
"""
input BrandFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `airtableId` field."""
  airtableId: StringFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `tier` field."""
  tier: BrandTierFilter

  """Filter by the object’s `websiteUrl` field."""
  websiteUrl: StringFilter

  """Filter by the object’s `logo` field."""
  logo: JSONFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `since` field."""
  since: DateFilter

  """Filter by the object’s `isPrimaryBrand` field."""
  isPrimaryBrand: BooleanFilter

  """Filter by the object’s `brandCode` field."""
  brandCode: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [BrandFilter!]

  """Checks for any expressions in this list."""
  or: [BrandFilter!]

  """Negates the expression."""
  not: BrandFilter
}

"""An input for mutations affecting `Brand`"""
input BrandInput {
  id: Int
  airtableId: String!
  slug: String!
  name: String!
  tier: BrandTier!
  websiteUrl: String
  logo: JSON
  description: String
  since: Date
  isPrimaryBrand: Boolean
  brandCode: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Brand`. Fields that are set will be updated.
"""
input BrandPatch {
  id: Int
  airtableId: String
  slug: String
  name: String
  tier: BrandTier
  websiteUrl: String
  logo: JSON
  description: String
  since: Date
  isPrimaryBrand: Boolean
  brandCode: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Brand` values."""
type BrandsConnection {
  """A list of `Brand` objects."""
  nodes: [Brand]!

  """
  A list of edges which contains the `Brand` and cursor to aid in pagination.
  """
  edges: [BrandsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Brand` you could get from the connection."""
  totalCount: Int!
}

"""A `Brand` edge in the connection."""
type BrandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Brand` at the end of the edge."""
  node: Brand
}

"""Methods to use when ordering `Brand`."""
enum BrandsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AIRTABLE_ID_ASC
  AIRTABLE_ID_DESC
  SLUG_ASC
  SLUG_DESC
  NAME_ASC
  NAME_DESC
  TIER_ASC
  TIER_DESC
  WEBSITE_URL_ASC
  WEBSITE_URL_DESC
  LOGO_ASC
  LOGO_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  SINCE_ASC
  SINCE_DESC
  IS_PRIMARY_BRAND_ASC
  IS_PRIMARY_BRAND_DESC
  BRAND_CODE_ASC
  BRAND_CODE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum BrandTier {
  TIER_0
  TIER_1
  TIER_2
  NICHE
  UPCOMING
  RETRO
  BOUTIQUE
}

"""
A filter to be used against BrandTier fields. All fields are combined with a logical ‘and.’
"""
input BrandTierFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BrandTier

  """Not equal to the specified value."""
  notEqualTo: BrandTier

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BrandTier

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BrandTier

  """Included in the specified list."""
  in: [BrandTier!]

  """Not included in the specified list."""
  notIn: [BrandTier!]

  """Less than the specified value."""
  lessThan: BrandTier

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BrandTier

  """Greater than the specified value."""
  greaterThan: BrandTier

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BrandTier
}

"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """A list of `Category` objects."""
  nodes: [Category]!

  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AIRTABLE_ID_ASC
  AIRTABLE_ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Category implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  airtableId: String!
  name: String!
  description: String

  """Reads and enables pagination through a set of `Product`."""
  products(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter
  ): ProductsConnection!
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `airtableId` field."""
  airtableId: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A filter to be used against `Category` object types. All fields are combined with a logical ‘and.’
"""
input CategoryFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `airtableId` field."""
  airtableId: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Checks for all expressions in this list."""
  and: [CategoryFilter!]

  """Checks for any expressions in this list."""
  or: [CategoryFilter!]

  """Negates the expression."""
  not: CategoryFilter
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  id: Int
  airtableId: String!
  name: String!
  description: String
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  id: Int
  airtableId: String
  name: String
  description: String
}

type Color implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  name: String
  hexCode: String!

  """Reads and enables pagination through a set of `ProductVariant`."""
  productVariants(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProductVariant`."""
    orderBy: [ProductVariantsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductVariantCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductVariantFilter
  ): ProductVariantsConnection!
}

"""
A condition to be used against `Color` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ColorCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `hexCode` field."""
  hexCode: String
}

"""
A filter to be used against `Color` object types. All fields are combined with a logical ‘and.’
"""
input ColorFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `hexCode` field."""
  hexCode: StringFilter

  """Checks for all expressions in this list."""
  and: [ColorFilter!]

  """Checks for any expressions in this list."""
  or: [ColorFilter!]

  """Negates the expression."""
  not: ColorFilter
}

"""An input for mutations affecting `Color`"""
input ColorInput {
  id: String!
  name: String
  hexCode: String!
}

"""
Represents an update to a `Color`. Fields that are set will be updated.
"""
input ColorPatch {
  id: String
  name: String
  hexCode: String
}

"""A connection to a list of `Color` values."""
type ColorsConnection {
  """A list of `Color` objects."""
  nodes: [Color]!

  """
  A list of edges which contains the `Color` and cursor to aid in pagination.
  """
  edges: [ColorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Color` you could get from the connection."""
  totalCount: Int!
}

"""A `Color` edge in the connection."""
type ColorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Color` at the end of the edge."""
  node: Color
}

"""Methods to use when ordering `Color`."""
enum ColorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  HEX_CODE_ASC
  HEX_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Brand` mutation."""
input CreateBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Brand` to be created by this mutation."""
  brand: BrandInput!
}

"""The output of our create `Brand` mutation."""
type CreateBrandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Brand` that was created by this mutation."""
  brand: Brand

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Category` to be created by this mutation."""
  category: CategoryInput!
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was created by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the create `Color` mutation."""
input CreateColorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Color` to be created by this mutation."""
  color: ColorInput!
}

"""The output of our create `Color` mutation."""
type CreateColorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Color` that was created by this mutation."""
  color: Color

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Color`. May be used by Relay 1."""
  colorEdge(
    """The method to use when ordering `Color`."""
    orderBy: [ColorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColorsEdge
}

"""All input for the create `Image` mutation."""
input CreateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Image` to be created by this mutation."""
  image: ImageInput!
}

"""The output of our create `Image` mutation."""
type CreateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was created by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge
}

"""All input for the create `Location` mutation."""
input CreateLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Location` to be created by this mutation."""
  location: LocationInput!
}

"""The output of our create `Location` mutation."""
type CreateLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was created by this mutation."""
  location: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand

  """Reads a single `Category` that is related to this `Product`."""
  category: Category

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the create `ProductVariant` mutation."""
input CreateProductVariantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProductVariant` to be created by this mutation."""
  productVariant: ProductVariantInput!
}

"""All input for the create `ProductVariantInventoryLevel` mutation."""
input CreateProductVariantInventoryLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProductVariantInventoryLevel` to be created by this mutation."""
  productVariantInventoryLevel: ProductVariantInventoryLevelInput!
}

"""The output of our create `ProductVariantInventoryLevel` mutation."""
type CreateProductVariantInventoryLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariantInventoryLevel` that was created by this mutation."""
  productVariantInventoryLevel: ProductVariantInventoryLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProductVariant` that is related to this `ProductVariantInventoryLevel`.
  """
  productVariant: ProductVariant

  """
  An edge for our `ProductVariantInventoryLevel`. May be used by Relay 1.
  """
  productVariantInventoryLevelEdge(
    """The method to use when ordering `ProductVariantInventoryLevel`."""
    orderBy: [ProductVariantInventoryLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariantInventoryLevelsEdge
}

"""The output of our create `ProductVariant` mutation."""
type CreateProductVariantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariant` that was created by this mutation."""
  productVariant: ProductVariant

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Color` that is related to this `ProductVariant`."""
  color: Color

  """An edge for our `ProductVariant`. May be used by Relay 1."""
  productVariantEdge(
    """The method to use when ordering `ProductVariant`."""
    orderBy: [ProductVariantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariantsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""All input for the `deleteBrandByAirtableId` mutation."""
input DeleteBrandByAirtableIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  airtableId: String!
}

"""All input for the `deleteBrandByNodeId` mutation."""
input DeleteBrandByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Brand` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBrandBySlug` mutation."""
input DeleteBrandBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""All input for the `deleteBrand` mutation."""
input DeleteBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Brand` mutation."""
type DeleteBrandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Brand` that was deleted by this mutation."""
  brand: Brand
  deletedBrandNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge
}

"""All input for the `deleteCategoryByNodeId` mutation."""
input DeleteCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was deleted by this mutation."""
  category: Category
  deletedCategoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `deleteColorByNodeId` mutation."""
input DeleteColorByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Color` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteColor` mutation."""
input DeleteColorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Color` mutation."""
type DeleteColorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Color` that was deleted by this mutation."""
  color: Color
  deletedColorNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Color`. May be used by Relay 1."""
  colorEdge(
    """The method to use when ordering `Color`."""
    orderBy: [ColorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColorsEdge
}

"""All input for the `deleteImageByNodeId` mutation."""
input DeleteImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteImage` mutation."""
input DeleteImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Image` mutation."""
type DeleteImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was deleted by this mutation."""
  image: Image
  deletedImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge
}

"""All input for the `deleteLocationByNodeId` mutation."""
input DeleteLocationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Location` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLocation` mutation."""
input DeleteLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Location` mutation."""
type DeleteLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was deleted by this mutation."""
  location: Location
  deletedLocationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge
}

"""All input for the `deleteProductByName` mutation."""
input DeleteProductByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteProductByNodeId` mutation."""
input DeleteProductByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was deleted by this mutation."""
  product: Product
  deletedProductNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand

  """Reads a single `Category` that is related to this `Product`."""
  category: Category

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `deleteProductVariantByNodeId` mutation."""
input DeleteProductVariantByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductVariant` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProductVariant` mutation."""
input DeleteProductVariantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteProductVariantInventoryLevelByNodeId` mutation.
"""
input DeleteProductVariantInventoryLevelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductVariantInventoryLevel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProductVariantInventoryLevel` mutation."""
input DeleteProductVariantInventoryLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ProductVariantInventoryLevel` mutation."""
type DeleteProductVariantInventoryLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariantInventoryLevel` that was deleted by this mutation."""
  productVariantInventoryLevel: ProductVariantInventoryLevel
  deletedProductVariantInventoryLevelNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProductVariant` that is related to this `ProductVariantInventoryLevel`.
  """
  productVariant: ProductVariant

  """
  An edge for our `ProductVariantInventoryLevel`. May be used by Relay 1.
  """
  productVariantInventoryLevelEdge(
    """The method to use when ordering `ProductVariantInventoryLevel`."""
    orderBy: [ProductVariantInventoryLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariantInventoryLevelsEdge
}

"""The output of our delete `ProductVariant` mutation."""
type DeleteProductVariantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariant` that was deleted by this mutation."""
  productVariant: ProductVariant
  deletedProductVariantNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Color` that is related to this `ProductVariant`."""
  color: Color

  """An edge for our `ProductVariant`. May be used by Relay 1."""
  productVariantEdge(
    """The method to use when ordering `ProductVariant`."""
    orderBy: [ProductVariantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariantsEdge
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

type Image implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String
  caption: String
  originalUrl: String!
  resizedUrl: String!
  originalHeight: Int
  originalWidth: Int
  createdAt: Datetime!
  updatedAt: Datetime!
}

"""
A condition to be used against `Image` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ImageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `caption` field."""
  caption: String

  """Checks for equality with the object’s `originalUrl` field."""
  originalUrl: String

  """Checks for equality with the object’s `resizedUrl` field."""
  resizedUrl: String

  """Checks for equality with the object’s `originalHeight` field."""
  originalHeight: Int

  """Checks for equality with the object’s `originalWidth` field."""
  originalWidth: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Image` object types. All fields are combined with a logical ‘and.’
"""
input ImageFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `caption` field."""
  caption: StringFilter

  """Filter by the object’s `originalUrl` field."""
  originalUrl: StringFilter

  """Filter by the object’s `resizedUrl` field."""
  resizedUrl: StringFilter

  """Filter by the object’s `originalHeight` field."""
  originalHeight: IntFilter

  """Filter by the object’s `originalWidth` field."""
  originalWidth: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ImageFilter!]

  """Checks for any expressions in this list."""
  or: [ImageFilter!]

  """Negates the expression."""
  not: ImageFilter
}

"""An input for mutations affecting `Image`"""
input ImageInput {
  id: Int
  title: String
  caption: String
  originalUrl: String!
  resizedUrl: String!
  originalHeight: Int
  originalWidth: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Image`. Fields that are set will be updated.
"""
input ImagePatch {
  id: Int
  title: String
  caption: String
  originalUrl: String
  resizedUrl: String
  originalHeight: Int
  originalWidth: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Image` values."""
type ImagesConnection {
  """A list of `Image` objects."""
  nodes: [Image]!

  """
  A list of edges which contains the `Image` and cursor to aid in pagination.
  """
  edges: [ImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Image` you could get from the connection."""
  totalCount: Int!
}

"""A `Image` edge in the connection."""
type ImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Image` at the end of the edge."""
  node: Image
}

"""Methods to use when ordering `Image`."""
enum ImagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  CAPTION_ASC
  CAPTION_DESC
  ORIGINAL_URL_ASC
  ORIGINAL_URL_DESC
  RESIZED_URL_ASC
  RESIZED_URL_DESC
  ORIGINAL_HEIGHT_ASC
  ORIGINAL_HEIGHT_DESC
  ORIGINAL_WIDTH_ASC
  ORIGINAL_WIDTH_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

type Location implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  locationType: LocationType!
  name: String
  description: String
  address1: String!
  address2: String!
  city: String!
  state: String!
  zip: Int!
  lat: BigFloat
  lng: BigFloat
}

"""
A condition to be used against `Location` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LocationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `locationType` field."""
  locationType: LocationType

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `address1` field."""
  address1: String

  """Checks for equality with the object’s `address2` field."""
  address2: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `zip` field."""
  zip: Int

  """Checks for equality with the object’s `lat` field."""
  lat: BigFloat

  """Checks for equality with the object’s `lng` field."""
  lng: BigFloat
}

"""
A filter to be used against `Location` object types. All fields are combined with a logical ‘and.’
"""
input LocationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `locationType` field."""
  locationType: LocationTypeFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `address1` field."""
  address1: StringFilter

  """Filter by the object’s `address2` field."""
  address2: StringFilter

  """Filter by the object’s `city` field."""
  city: StringFilter

  """Filter by the object’s `state` field."""
  state: StringFilter

  """Filter by the object’s `zip` field."""
  zip: IntFilter

  """Filter by the object’s `lat` field."""
  lat: BigFloatFilter

  """Filter by the object’s `lng` field."""
  lng: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [LocationFilter!]

  """Checks for any expressions in this list."""
  or: [LocationFilter!]

  """Negates the expression."""
  not: LocationFilter
}

"""An input for mutations affecting `Location`"""
input LocationInput {
  id: Int
  locationType: LocationType!
  name: String
  description: String
  address1: String!
  address2: String!
  city: String!
  state: String!
  zip: Int!
  lat: BigFloat
  lng: BigFloat
}

"""
Represents an update to a `Location`. Fields that are set will be updated.
"""
input LocationPatch {
  id: Int
  locationType: LocationType
  name: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  lat: BigFloat
  lng: BigFloat
}

"""A connection to a list of `Location` values."""
type LocationsConnection {
  """A list of `Location` objects."""
  nodes: [Location]!

  """
  A list of edges which contains the `Location` and cursor to aid in pagination.
  """
  edges: [LocationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Location` you could get from the connection."""
  totalCount: Int!
}

"""A `Location` edge in the connection."""
type LocationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Location` at the end of the edge."""
  node: Location
}

"""Methods to use when ordering `Location`."""
enum LocationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LOCATION_TYPE_ASC
  LOCATION_TYPE_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ADDRESS1_ASC
  ADDRESS1_DESC
  ADDRESS2_ASC
  ADDRESS2_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  ZIP_ASC
  ZIP_DESC
  LAT_ASC
  LAT_DESC
  LNG_ASC
  LNG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum LocationType {
  OFFICE
  WAREHOUSE
  CLEANER
  CUSTOMER
}

"""
A filter to be used against LocationType fields. All fields are combined with a logical ‘and.’
"""
input LocationTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: LocationType

  """Not equal to the specified value."""
  notEqualTo: LocationType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: LocationType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: LocationType

  """Included in the specified list."""
  in: [LocationType!]

  """Not included in the specified list."""
  notIn: [LocationType!]

  """Less than the specified value."""
  lessThan: LocationType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: LocationType

  """Greater than the specified value."""
  greaterThan: LocationType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: LocationType
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Brand`."""
  createBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBrandInput!
  ): CreateBrandPayload

  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `Color`."""
  createColor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateColorInput!
  ): CreateColorPayload

  """Creates a single `Image`."""
  createImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImageInput!
  ): CreateImagePayload

  """Creates a single `Location`."""
  createLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLocationInput!
  ): CreateLocationPayload

  """Creates a single `ProductVariantInventoryLevel`."""
  createProductVariantInventoryLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductVariantInventoryLevelInput!
  ): CreateProductVariantInventoryLevelPayload

  """Creates a single `ProductVariant`."""
  createProductVariant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductVariantInput!
  ): CreateProductVariantPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Updates a single `Brand` using its globally unique id and a patch."""
  updateBrandByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandByNodeIdInput!
  ): UpdateBrandPayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandInput!
  ): UpdateBrandPayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrandByAirtableId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandByAirtableIdInput!
  ): UpdateBrandPayload

  """Updates a single `Brand` using a unique key and a patch."""
  updateBrandBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBrandBySlugInput!
  ): UpdateBrandPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByNodeIdInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Color` using its globally unique id and a patch."""
  updateColorByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateColorByNodeIdInput!
  ): UpdateColorPayload

  """Updates a single `Color` using a unique key and a patch."""
  updateColor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateColorInput!
  ): UpdateColorPayload

  """Updates a single `Image` using its globally unique id and a patch."""
  updateImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageByNodeIdInput!
  ): UpdateImagePayload

  """Updates a single `Image` using a unique key and a patch."""
  updateImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageInput!
  ): UpdateImagePayload

  """Updates a single `Location` using its globally unique id and a patch."""
  updateLocationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLocationByNodeIdInput!
  ): UpdateLocationPayload

  """Updates a single `Location` using a unique key and a patch."""
  updateLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLocationInput!
  ): UpdateLocationPayload

  """
  Updates a single `ProductVariantInventoryLevel` using its globally unique id and a patch.
  """
  updateProductVariantInventoryLevelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductVariantInventoryLevelByNodeIdInput!
  ): UpdateProductVariantInventoryLevelPayload

  """
  Updates a single `ProductVariantInventoryLevel` using a unique key and a patch.
  """
  updateProductVariantInventoryLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductVariantInventoryLevelInput!
  ): UpdateProductVariantInventoryLevelPayload

  """
  Updates a single `ProductVariant` using its globally unique id and a patch.
  """
  updateProductVariantByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductVariantByNodeIdInput!
  ): UpdateProductVariantPayload

  """Updates a single `ProductVariant` using a unique key and a patch."""
  updateProductVariant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductVariantInput!
  ): UpdateProductVariantPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProductByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByNodeIdInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByNameInput!
  ): UpdateProductPayload

  """Deletes a single `Brand` using its globally unique id."""
  deleteBrandByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandByNodeIdInput!
  ): DeleteBrandPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandInput!
  ): DeleteBrandPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrandByAirtableId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandByAirtableIdInput!
  ): DeleteBrandPayload

  """Deletes a single `Brand` using a unique key."""
  deleteBrandBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBrandBySlugInput!
  ): DeleteBrandPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByNodeIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Color` using its globally unique id."""
  deleteColorByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteColorByNodeIdInput!
  ): DeleteColorPayload

  """Deletes a single `Color` using a unique key."""
  deleteColor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteColorInput!
  ): DeleteColorPayload

  """Deletes a single `Image` using its globally unique id."""
  deleteImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageByNodeIdInput!
  ): DeleteImagePayload

  """Deletes a single `Image` using a unique key."""
  deleteImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageInput!
  ): DeleteImagePayload

  """Deletes a single `Location` using its globally unique id."""
  deleteLocationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLocationByNodeIdInput!
  ): DeleteLocationPayload

  """Deletes a single `Location` using a unique key."""
  deleteLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLocationInput!
  ): DeleteLocationPayload

  """
  Deletes a single `ProductVariantInventoryLevel` using its globally unique id.
  """
  deleteProductVariantInventoryLevelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductVariantInventoryLevelByNodeIdInput!
  ): DeleteProductVariantInventoryLevelPayload

  """Deletes a single `ProductVariantInventoryLevel` using a unique key."""
  deleteProductVariantInventoryLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductVariantInventoryLevelInput!
  ): DeleteProductVariantInventoryLevelPayload

  """Deletes a single `ProductVariant` using its globally unique id."""
  deleteProductVariantByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductVariantByNodeIdInput!
  ): DeleteProductVariantPayload

  """Deletes a single `ProductVariant` using a unique key."""
  deleteProductVariant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductVariantInput!
  ): DeleteProductVariantPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProductByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByNodeIdInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByNameInput!
  ): DeleteProductPayload

  """Upserts a single `Brand`."""
  upsertBrand(
    where: UpsertBrandWhere!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertBrandInput!
  ): UpsertBrandPayload

  """Upserts a single `Category`."""
  upsertCategory(
    where: UpsertCategoryWhere!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertCategoryInput!
  ): UpsertCategoryPayload

  """Upserts a single `Color`."""
  upsertColor(
    where: UpsertColorWhere!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertColorInput!
  ): UpsertColorPayload

  """Upserts a single `Image`."""
  upsertImage(
    where: UpsertImageWhere!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertImageInput!
  ): UpsertImagePayload

  """Upserts a single `Location`."""
  upsertLocation(
    where: UpsertLocationWhere!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertLocationInput!
  ): UpsertLocationPayload

  """Upserts a single `ProductVariantInventoryLevel`."""
  upsertProductVariantInventoryLevel(
    where: UpsertProductVariantInventoryLevelWhere!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertProductVariantInventoryLevelInput!
  ): UpsertProductVariantInventoryLevelPayload

  """Upserts a single `ProductVariant`."""
  upsertProductVariant(
    where: UpsertProductVariantWhere!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertProductVariantInput!
  ): UpsertProductVariantPayload

  """Upserts a single `Product`."""
  upsertProduct(
    where: UpsertProductWhere!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertProductInput!
  ): UpsertProductPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Product implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  description: String
  brandId: Int!
  images: JSON!
  modelSize: Size
  modelHeight: Int
  externalUrl: String
  tags: JSON
  retailPrice: Float
  categoryId: Int!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand

  """Reads a single `Category` that is related to this `Product`."""
  category: Category
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `brandId` field."""
  brandId: Int

  """Checks for equality with the object’s `images` field."""
  images: JSON

  """Checks for equality with the object’s `modelSize` field."""
  modelSize: Size

  """Checks for equality with the object’s `modelHeight` field."""
  modelHeight: Int

  """Checks for equality with the object’s `externalUrl` field."""
  externalUrl: String

  """Checks for equality with the object’s `tags` field."""
  tags: JSON

  """Checks for equality with the object’s `retailPrice` field."""
  retailPrice: Float

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Product` object types. All fields are combined with a logical ‘and.’
"""
input ProductFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `brandId` field."""
  brandId: IntFilter

  """Filter by the object’s `images` field."""
  images: JSONFilter

  """Filter by the object’s `modelSize` field."""
  modelSize: SizeFilter

  """Filter by the object’s `modelHeight` field."""
  modelHeight: IntFilter

  """Filter by the object’s `externalUrl` field."""
  externalUrl: StringFilter

  """Filter by the object’s `tags` field."""
  tags: JSONFilter

  """Filter by the object’s `retailPrice` field."""
  retailPrice: FloatFilter

  """Filter by the object’s `categoryId` field."""
  categoryId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ProductFilter!]

  """Checks for any expressions in this list."""
  or: [ProductFilter!]

  """Negates the expression."""
  not: ProductFilter
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  id: Int
  name: String!
  description: String
  brandId: Int!
  images: JSON!
  modelSize: Size
  modelHeight: Int
  externalUrl: String
  tags: JSON
  retailPrice: Float
  categoryId: Int!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  id: Int
  name: String
  description: String
  brandId: Int
  images: JSON
  modelSize: Size
  modelHeight: Int
  externalUrl: String
  tags: JSON
  retailPrice: Float
  categoryId: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """A list of `Product` objects."""
  nodes: [Product]!

  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  BRAND_ID_ASC
  BRAND_ID_DESC
  IMAGES_ASC
  IMAGES_DESC
  MODEL_SIZE_ASC
  MODEL_SIZE_DESC
  MODEL_HEIGHT_ASC
  MODEL_HEIGHT_DESC
  EXTERNAL_URL_ASC
  EXTERNAL_URL_DESC
  TAGS_ASC
  TAGS_DESC
  RETAIL_PRICE_ASC
  RETAIL_PRICE_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProductVariant implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  upc: Int
  sku: String
  productId: Int!
  retailPrice: Float
  colorId: String!
  size: Size!
  weight: Int
  height: Int
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Color` that is related to this `ProductVariant`."""
  color: Color

  """
  Reads and enables pagination through a set of `ProductVariantInventoryLevel`.
  """
  productVariantInventoryLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProductVariantInventoryLevel`."""
    orderBy: [ProductVariantInventoryLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductVariantInventoryLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductVariantInventoryLevelFilter
  ): ProductVariantInventoryLevelsConnection!
}

"""
A condition to be used against `ProductVariant` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProductVariantCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `upc` field."""
  upc: Int

  """Checks for equality with the object’s `sku` field."""
  sku: String

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `retailPrice` field."""
  retailPrice: Float

  """Checks for equality with the object’s `colorId` field."""
  colorId: String

  """Checks for equality with the object’s `size` field."""
  size: Size

  """Checks for equality with the object’s `weight` field."""
  weight: Int

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ProductVariant` object types. All fields are combined with a logical ‘and.’
"""
input ProductVariantFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `upc` field."""
  upc: IntFilter

  """Filter by the object’s `sku` field."""
  sku: StringFilter

  """Filter by the object’s `productId` field."""
  productId: IntFilter

  """Filter by the object’s `retailPrice` field."""
  retailPrice: FloatFilter

  """Filter by the object’s `colorId` field."""
  colorId: StringFilter

  """Filter by the object’s `size` field."""
  size: SizeFilter

  """Filter by the object’s `weight` field."""
  weight: IntFilter

  """Filter by the object’s `height` field."""
  height: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ProductVariantFilter!]

  """Checks for any expressions in this list."""
  or: [ProductVariantFilter!]

  """Negates the expression."""
  not: ProductVariantFilter
}

"""An input for mutations affecting `ProductVariant`"""
input ProductVariantInput {
  id: Int
  upc: Int
  sku: String
  productId: Int!
  retailPrice: Float
  colorId: String!
  size: Size!
  weight: Int
  height: Int
  createdAt: Datetime
  updatedAt: Datetime
}

type ProductVariantInventoryLevel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  productId: Int!
  productVariantId: Int!
  nonReservablePhysicalProducts: Int
  reservablePhysicalProducts: Int
  reservedPhysicalProducts: Int

  """
  Reads a single `ProductVariant` that is related to this `ProductVariantInventoryLevel`.
  """
  productVariant: ProductVariant
}

"""
A condition to be used against `ProductVariantInventoryLevel` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ProductVariantInventoryLevelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `productId` field."""
  productId: Int

  """Checks for equality with the object’s `productVariantId` field."""
  productVariantId: Int

  """
  Checks for equality with the object’s `nonReservablePhysicalProducts` field.
  """
  nonReservablePhysicalProducts: Int

  """
  Checks for equality with the object’s `reservablePhysicalProducts` field.
  """
  reservablePhysicalProducts: Int

  """
  Checks for equality with the object’s `reservedPhysicalProducts` field.
  """
  reservedPhysicalProducts: Int
}

"""
A filter to be used against `ProductVariantInventoryLevel` object types. All fields are combined with a logical ‘and.’
"""
input ProductVariantInventoryLevelFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `productId` field."""
  productId: IntFilter

  """Filter by the object’s `productVariantId` field."""
  productVariantId: IntFilter

  """Filter by the object’s `nonReservablePhysicalProducts` field."""
  nonReservablePhysicalProducts: IntFilter

  """Filter by the object’s `reservablePhysicalProducts` field."""
  reservablePhysicalProducts: IntFilter

  """Filter by the object’s `reservedPhysicalProducts` field."""
  reservedPhysicalProducts: IntFilter

  """Checks for all expressions in this list."""
  and: [ProductVariantInventoryLevelFilter!]

  """Checks for any expressions in this list."""
  or: [ProductVariantInventoryLevelFilter!]

  """Negates the expression."""
  not: ProductVariantInventoryLevelFilter
}

"""An input for mutations affecting `ProductVariantInventoryLevel`"""
input ProductVariantInventoryLevelInput {
  id: Int
  productId: Int!
  productVariantId: Int!
  nonReservablePhysicalProducts: Int
  reservablePhysicalProducts: Int
  reservedPhysicalProducts: Int
}

"""
Represents an update to a `ProductVariantInventoryLevel`. Fields that are set will be updated.
"""
input ProductVariantInventoryLevelPatch {
  id: Int
  productId: Int
  productVariantId: Int
  nonReservablePhysicalProducts: Int
  reservablePhysicalProducts: Int
  reservedPhysicalProducts: Int
}

"""A connection to a list of `ProductVariantInventoryLevel` values."""
type ProductVariantInventoryLevelsConnection {
  """A list of `ProductVariantInventoryLevel` objects."""
  nodes: [ProductVariantInventoryLevel]!

  """
  A list of edges which contains the `ProductVariantInventoryLevel` and cursor to aid in pagination.
  """
  edges: [ProductVariantInventoryLevelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProductVariantInventoryLevel` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProductVariantInventoryLevel` edge in the connection."""
type ProductVariantInventoryLevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProductVariantInventoryLevel` at the end of the edge."""
  node: ProductVariantInventoryLevel
}

"""Methods to use when ordering `ProductVariantInventoryLevel`."""
enum ProductVariantInventoryLevelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRODUCT_VARIANT_ID_ASC
  PRODUCT_VARIANT_ID_DESC
  NON_RESERVABLE_PHYSICAL_PRODUCTS_ASC
  NON_RESERVABLE_PHYSICAL_PRODUCTS_DESC
  RESERVABLE_PHYSICAL_PRODUCTS_ASC
  RESERVABLE_PHYSICAL_PRODUCTS_DESC
  RESERVED_PHYSICAL_PRODUCTS_ASC
  RESERVED_PHYSICAL_PRODUCTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `ProductVariant`. Fields that are set will be updated.
"""
input ProductVariantPatch {
  id: Int
  upc: Int
  sku: String
  productId: Int
  retailPrice: Float
  colorId: String
  size: Size
  weight: Int
  height: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `ProductVariant` values."""
type ProductVariantsConnection {
  """A list of `ProductVariant` objects."""
  nodes: [ProductVariant]!

  """
  A list of edges which contains the `ProductVariant` and cursor to aid in pagination.
  """
  edges: [ProductVariantsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProductVariant` you could get from the connection."""
  totalCount: Int!
}

"""A `ProductVariant` edge in the connection."""
type ProductVariantsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProductVariant` at the end of the edge."""
  node: ProductVariant
}

"""Methods to use when ordering `ProductVariant`."""
enum ProductVariantsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UPC_ASC
  UPC_DESC
  SKU_ASC
  SKU_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  RETAIL_PRICE_ASC
  RETAIL_PRICE_DESC
  COLOR_ID_ASC
  COLOR_ID_DESC
  SIZE_ASC
  SIZE_DESC
  WEIGHT_ASC
  WEIGHT_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Brand`."""
  brands(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BrandCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BrandFilter
  ): BrandsConnection

  """Reads and enables pagination through a set of `Category`."""
  categories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CategoryFilter
  ): CategoriesConnection

  """Reads and enables pagination through a set of `Color`."""
  colors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Color`."""
    orderBy: [ColorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ColorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ColorFilter
  ): ColorsConnection

  """Reads and enables pagination through a set of `Image`."""
  images(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter
  ): ImagesConnection

  """Reads and enables pagination through a set of `Location`."""
  locations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LocationFilter
  ): LocationsConnection

  """
  Reads and enables pagination through a set of `ProductVariantInventoryLevel`.
  """
  productVariantInventoryLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProductVariantInventoryLevel`."""
    orderBy: [ProductVariantInventoryLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductVariantInventoryLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductVariantInventoryLevelFilter
  ): ProductVariantInventoryLevelsConnection

  """Reads and enables pagination through a set of `ProductVariant`."""
  productVariants(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProductVariant`."""
    orderBy: [ProductVariantsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductVariantCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductVariantFilter
  ): ProductVariantsConnection

  """Reads and enables pagination through a set of `Product`."""
  products(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductFilter
  ): ProductsConnection
  brand(id: Int!): Brand
  brandByAirtableId(airtableId: String!): Brand
  brandBySlug(slug: String!): Brand
  category(id: Int!): Category
  color(id: String!): Color
  image(id: Int!): Image
  location(id: Int!): Location
  productVariantInventoryLevel(id: Int!): ProductVariantInventoryLevel
  productVariant(id: Int!): ProductVariant
  product(id: Int!): Product
  productByName(name: String!): Product

  """Reads a single `Brand` using its globally unique `ID`."""
  brandByNodeId(
    """The globally unique `ID` to be used in selecting a single `Brand`."""
    nodeId: ID!
  ): Brand

  """Reads a single `Category` using its globally unique `ID`."""
  categoryByNodeId(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category

  """Reads a single `Color` using its globally unique `ID`."""
  colorByNodeId(
    """The globally unique `ID` to be used in selecting a single `Color`."""
    nodeId: ID!
  ): Color

  """Reads a single `Image` using its globally unique `ID`."""
  imageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Image`."""
    nodeId: ID!
  ): Image

  """Reads a single `Location` using its globally unique `ID`."""
  locationByNodeId(
    """The globally unique `ID` to be used in selecting a single `Location`."""
    nodeId: ID!
  ): Location

  """
  Reads a single `ProductVariantInventoryLevel` using its globally unique `ID`.
  """
  productVariantInventoryLevelByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProductVariantInventoryLevel`.
    """
    nodeId: ID!
  ): ProductVariantInventoryLevel

  """Reads a single `ProductVariant` using its globally unique `ID`."""
  productVariantByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProductVariant`.
    """
    nodeId: ID!
  ): ProductVariant

  """Reads a single `Product` using its globally unique `ID`."""
  productByNodeId(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    nodeId: ID!
  ): Product

  """
  Fetches a list of entities using their representations; used for Apollo
  Federation.
  """
  _entities(representations: [_Any!]!): [_Entity]! @deprecated(reason: "Only Apollo Federation should use this")

  """
  Entrypoint for Apollo Federation to determine more information about
  this service.
  """
  _service: _Service! @deprecated(reason: "Only Apollo Federation should use this")
}

enum Size {
  XS
  S
  M
  L
  XL
}

"""
A filter to be used against Size fields. All fields are combined with a logical ‘and.’
"""
input SizeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Size

  """Not equal to the specified value."""
  notEqualTo: Size

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Size

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Size

  """Included in the specified list."""
  in: [Size!]

  """Not included in the specified list."""
  notIn: [Size!]

  """Less than the specified value."""
  lessThan: Size

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Size

  """Greater than the specified value."""
  greaterThan: Size

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Size
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String
}

"""All input for the `updateBrandByAirtableId` mutation."""
input UpdateBrandByAirtableIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
  airtableId: String!
}

"""All input for the `updateBrandByNodeId` mutation."""
input UpdateBrandByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Brand` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
}

"""All input for the `updateBrandBySlug` mutation."""
input UpdateBrandBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
  slug: String!
}

"""All input for the `updateBrand` mutation."""
input UpdateBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Brand` being updated.
  """
  patch: BrandPatch!
  id: Int!
}

"""The output of our update `Brand` mutation."""
type UpdateBrandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Brand` that was updated by this mutation."""
  brand: Brand

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge
}

"""All input for the `updateCategoryByNodeId` mutation."""
input UpdateCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  patch: CategoryPatch!
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  patch: CategoryPatch!
  id: Int!
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was updated by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `updateColorByNodeId` mutation."""
input UpdateColorByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Color` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Color` being updated.
  """
  patch: ColorPatch!
}

"""All input for the `updateColor` mutation."""
input UpdateColorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Color` being updated.
  """
  patch: ColorPatch!
  id: String!
}

"""The output of our update `Color` mutation."""
type UpdateColorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Color` that was updated by this mutation."""
  color: Color

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Color`. May be used by Relay 1."""
  colorEdge(
    """The method to use when ordering `Color`."""
    orderBy: [ColorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColorsEdge
}

"""All input for the `updateImageByNodeId` mutation."""
input UpdateImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  patch: ImagePatch!
}

"""All input for the `updateImage` mutation."""
input UpdateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  patch: ImagePatch!
  id: Int!
}

"""The output of our update `Image` mutation."""
type UpdateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was updated by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge
}

"""All input for the `updateLocationByNodeId` mutation."""
input UpdateLocationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Location` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Location` being updated.
  """
  patch: LocationPatch!
}

"""All input for the `updateLocation` mutation."""
input UpdateLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Location` being updated.
  """
  patch: LocationPatch!
  id: Int!
}

"""The output of our update `Location` mutation."""
type UpdateLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was updated by this mutation."""
  location: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge
}

"""All input for the `updateProductByName` mutation."""
input UpdateProductByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!
  name: String!
}

"""All input for the `updateProductByNodeId` mutation."""
input UpdateProductByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!
  id: Int!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand

  """Reads a single `Category` that is related to this `Product`."""
  category: Category

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `updateProductVariantByNodeId` mutation."""
input UpdateProductVariantByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductVariant` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProductVariant` being updated.
  """
  patch: ProductVariantPatch!
}

"""All input for the `updateProductVariant` mutation."""
input UpdateProductVariantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProductVariant` being updated.
  """
  patch: ProductVariantPatch!
  id: Int!
}

"""
All input for the `updateProductVariantInventoryLevelByNodeId` mutation.
"""
input UpdateProductVariantInventoryLevelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductVariantInventoryLevel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProductVariantInventoryLevel` being updated.
  """
  patch: ProductVariantInventoryLevelPatch!
}

"""All input for the `updateProductVariantInventoryLevel` mutation."""
input UpdateProductVariantInventoryLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProductVariantInventoryLevel` being updated.
  """
  patch: ProductVariantInventoryLevelPatch!
  id: Int!
}

"""The output of our update `ProductVariantInventoryLevel` mutation."""
type UpdateProductVariantInventoryLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariantInventoryLevel` that was updated by this mutation."""
  productVariantInventoryLevel: ProductVariantInventoryLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProductVariant` that is related to this `ProductVariantInventoryLevel`.
  """
  productVariant: ProductVariant

  """
  An edge for our `ProductVariantInventoryLevel`. May be used by Relay 1.
  """
  productVariantInventoryLevelEdge(
    """The method to use when ordering `ProductVariantInventoryLevel`."""
    orderBy: [ProductVariantInventoryLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariantInventoryLevelsEdge
}

"""The output of our update `ProductVariant` mutation."""
type UpdateProductVariantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariant` that was updated by this mutation."""
  productVariant: ProductVariant

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Color` that is related to this `ProductVariant`."""
  color: Color

  """An edge for our `ProductVariant`. May be used by Relay 1."""
  productVariantEdge(
    """The method to use when ordering `ProductVariant`."""
    orderBy: [ProductVariantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariantsEdge
}

"""All input for the upsert `Brand` mutation."""
input UpsertBrandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Brand` to be upserted by this mutation."""
  brand: BrandInput!
}

"""The output of our upsert `Brand` mutation."""
type UpsertBrandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Brand` that was upserted by this mutation."""
  brand: Brand

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Brand`. May be used by Relay 1."""
  brandEdge(
    """The method to use when ordering `Brand`."""
    orderBy: [BrandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BrandsEdge
}

"""Where conditions for the upsert `Brand` mutation."""
input UpsertBrandWhere {
  id: Int
  airtableId: String
  slug: String
}

"""All input for the upsert `Category` mutation."""
input UpsertCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Category` to be upserted by this mutation."""
  category: CategoryInput!
}

"""The output of our upsert `Category` mutation."""
type UpsertCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was upserted by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""Where conditions for the upsert `Category` mutation."""
input UpsertCategoryWhere {
  id: Int
}

"""All input for the upsert `Color` mutation."""
input UpsertColorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Color` to be upserted by this mutation."""
  color: ColorInput!
}

"""The output of our upsert `Color` mutation."""
type UpsertColorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Color` that was upserted by this mutation."""
  color: Color

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Color`. May be used by Relay 1."""
  colorEdge(
    """The method to use when ordering `Color`."""
    orderBy: [ColorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ColorsEdge
}

"""Where conditions for the upsert `Color` mutation."""
input UpsertColorWhere {
  id: String
}

"""All input for the upsert `Image` mutation."""
input UpsertImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Image` to be upserted by this mutation."""
  image: ImageInput!
}

"""The output of our upsert `Image` mutation."""
type UpsertImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was upserted by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge
}

"""Where conditions for the upsert `Image` mutation."""
input UpsertImageWhere {
  id: Int
}

"""All input for the upsert `Location` mutation."""
input UpsertLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Location` to be upserted by this mutation."""
  location: LocationInput!
}

"""The output of our upsert `Location` mutation."""
type UpsertLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was upserted by this mutation."""
  location: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge
}

"""Where conditions for the upsert `Location` mutation."""
input UpsertLocationWhere {
  id: Int
}

"""All input for the upsert `Product` mutation."""
input UpsertProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be upserted by this mutation."""
  product: ProductInput!
}

"""The output of our upsert `Product` mutation."""
type UpsertProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was upserted by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Brand` that is related to this `Product`."""
  brand: Brand

  """Reads a single `Category` that is related to this `Product`."""
  category: Category

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the upsert `ProductVariant` mutation."""
input UpsertProductVariantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProductVariant` to be upserted by this mutation."""
  productVariant: ProductVariantInput!
}

"""All input for the upsert `ProductVariantInventoryLevel` mutation."""
input UpsertProductVariantInventoryLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProductVariantInventoryLevel` to be upserted by this mutation."""
  productVariantInventoryLevel: ProductVariantInventoryLevelInput!
}

"""The output of our upsert `ProductVariantInventoryLevel` mutation."""
type UpsertProductVariantInventoryLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariantInventoryLevel` that was upserted by this mutation."""
  productVariantInventoryLevel: ProductVariantInventoryLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProductVariant` that is related to this `ProductVariantInventoryLevel`.
  """
  productVariant: ProductVariant

  """
  An edge for our `ProductVariantInventoryLevel`. May be used by Relay 1.
  """
  productVariantInventoryLevelEdge(
    """The method to use when ordering `ProductVariantInventoryLevel`."""
    orderBy: [ProductVariantInventoryLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariantInventoryLevelsEdge
}

"""
Where conditions for the upsert `ProductVariantInventoryLevel` mutation.
"""
input UpsertProductVariantInventoryLevelWhere {
  id: Int
}

"""The output of our upsert `ProductVariant` mutation."""
type UpsertProductVariantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariant` that was upserted by this mutation."""
  productVariant: ProductVariant

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Color` that is related to this `ProductVariant`."""
  color: Color

  """An edge for our `ProductVariant`. May be used by Relay 1."""
  productVariantEdge(
    """The method to use when ordering `ProductVariant`."""
    orderBy: [ProductVariantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariantsEdge
}

"""Where conditions for the upsert `ProductVariant` mutation."""
input UpsertProductVariantWhere {
  id: Int
}

"""Where conditions for the upsert `Product` mutation."""
input UpsertProductWhere {
  id: Int
  name: String
}

