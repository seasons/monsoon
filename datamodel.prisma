enum BrandTier {
  Tier0
  Tier1
  Tier2
  Niche
  Upcoming
  Retro
  Boutique
  Local
}

enum Size {
  XS
  S
  M
  L
  XL
}

enum Material {
  Cotton
  Mesh
  Nylon
  Denim
  Leather
  Fur
  Polyamide
  Feather
  Polyester
}

enum Department {
  Clothes
  Bags
  Accessories
  Jewelry
}

enum LocationType {
  Office
  Warehouse
  Cleaner
  Customer
}

enum CustomerStatus {
  Invited
  Waitlisted
  Activated
  Suspended
  Deactivated
}

enum UserRole {
  Admin
  Customer
  Partner
}

enum InventoryStatus {
  NonReservable
  Reservable
  Reserved
}

enum ProductStatus {
  New
  Used
  Damaged
  Clean
}

enum ReservationStatus {
  OnHold
  Shipped
  InTransit
  Received
}

type Brand {
  id: ID! @id
  slug: String! @unique
  brandCode: String! @unique
  description: String
  isPrimaryBrand: Boolean @default(value: false)
  logo: Json
  name: String!
  products: [Product!]!
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Category {
  id: ID! @id
  slug: String! @unique
  name: String! @unique
  description: String
  products: [Product!]!
}

type Color {
  id: ID! @id
  slug: String! @unique
  name: String!
  colorCode: String! @unique
  hexCode: String!
  productVariants: [ProductVariant!]!
}

type Image {
  id: ID! @id
  caption: String
  originalHeight: Int
  originalUrl: String!
  originalWidth: Int
  resizedUrl: String!
  title: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Location {
  id: ID! @id
  slug: String! @unique
  name: String! @unique
  company: String
  description: String
  address1: String!
  address2: String!
  city: String!
  state: String!
  zipCode: String!
  locationType: LocationType
  user: User
  lat: Float
  lng: Float
  physicalProducts: [PhysicalProduct!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Product {
  id: ID! @id
  slug: String! @unique
  name: String!
  brand: Brand!
  category: Category!
  description: String
  externalUrl: String
  images: Json!
  modelHeight: Int
  modelSize: Size
  retailPrice: Int
  tags: Json
  availableSizes: [Size!]! @scalarList(strategy: RELATION)
  innerMaterials: [Material!]! @scalarList(strategy: RELATION)
  outerMaterials: [Material!]! @scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProductVariant {
  id: ID! @id
  sku: String @unique
  color: Color!
  weight: Int
  height: Int
  product: Product!
  retailPrice: Int
  inventoryLevel: InventoryLevel! @relation(link: TABLE)
  physicalProducts: [PhysicalProduct!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type InventoryLevel {
  id: ID! @id
  product: Product!
  productVariant: ProductVariant! @unique
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
}

type PhysicalProduct {
  id: ID! @id
  seasonsUID: String! @unique
  location: Location
  productVariant: ProductVariant!
  inventoryStatus: InventoryStatus!
  productStatus: ProductStatus!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type User {
  id: ID! @id
  auth0Id: String! @unique
  email: String! @unique
  firstName: String!
  lastName: String!
  role: UserRole! @default(value: Customer)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CustomerDetail {
  id: ID! @id
  phoneNumber: String
  birthday: DateTime
  # Height in inches
  height: Int
  bodyType: String
  averageTopSize: String
  averagePantSize: String
  preferredPronouns: String
  profession: String
  # How often do you go out?
  partyFrequency: String
  # Do you travel a lot?
  travelFrequency: String
  # How often do you buy clothes?
  shoppingFrequency: String
  # How much do you spend?
  averageSpend: String
  shippingAddress: Location
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Bag {
  id: ID! @id
  items: [ProductVariant!]!
  customer: Customer! @relation(link: TABLE)
}

type Customer {
  id: ID! @id
  user: User!
  status: CustomerStatus
  detail: CustomerDetail
  bag: Bag!
}

type Order {
  id: ID! @id
}

type Reservation {
  id: ID! @id
  user: User!
  shippingLabel: Label! @relation(name: "ShippingLabelReservation")
  returnLabel: Label @relation(name: "ReturnLabelReservation")
  products: [PhysicalProduct!]!
  shipped: Boolean!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Label {
  id: ID! @id
  name: String
  image: String
}
