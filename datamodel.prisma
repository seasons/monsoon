enum BrandTier {
  Tier0
  Tier1
  Tier2
  Niche
  Upcoming
  Retro
  Boutique
  Local
  Discovery
}

enum Size {
  XS
  S
  M
  L
  XL
}

enum Material {
  Acetate
  Acrylic
  Alpaca
  CalfLeather
  CamelHair
  Camel
  Cashmere
  Cotton
  CowLeather
  Cupro
  DuckFeathers
  Elastane
  Esterlane
  Feather
  FeatherDown
  GooseDown
  LambLeather
  LambSkin
  Leather
  Lyocell
  MerinoWool
  Modacrylic
  Nylon
  OrganicCotton
  Polyamide
  Polyester
  Polyurethane
  PolyurethanicResin
  Rayon
  RecycledWool
  Silk
  Suede
  SheepLeather
  Spandex
  Taffeta
  Tartan
  VirginWool
  Viscose
  Velcro
  WaxCoating
  WhiteDuckDown
  WhiteGooseDown
  Wool
  Mesh
  Wool
  Denim
  Leather
}

enum Department {
  Clothes
  Bags
  Accessories
  Jewelry
}

enum LocationType {
  Office
  Warehouse
  Cleaner
  Customer
}

enum CustomerStatus {
  Invited
  Created
  Waitlisted
  Authorized
  Active
  Suspended
  Paused
  Deactivated
}

enum UserRole {
  Admin
  Customer
  Partner
}

enum InventoryStatus {
  NonReservable
  Reservable
  Reserved
}

enum PhysicalProductStatus {
  New
  Used
  Damaged
  Clean
  Lost
}

enum ProductStatus {
  Available
  NotAvailable
}

enum ReservationStatus {
  New
  InQueue
  OnHold
  Packed
  Shipped
  InTransit
  Received
  Cancelled
  Completed
  Cancelled
}

enum Plan {
  AllAccess
  Essential
}

type Brand {
  id: ID! @id
  slug: String! @unique
  brandCode: String! @unique
  description: String
  isPrimaryBrand: Boolean! @default(value: false)
  logo: Json
  name: String!
  basedIn: String
  products: [Product!]!
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Category {
  id: ID! @id
  slug: String! @unique
  name: String! @unique
  image: Json
  description: String
  visible: Boolean! @default(value: false)
  products: [Product!]!
  children: [Category!]! @relation(name: "CategoryToChildren")
}

type Color {
  id: ID! @id
  slug: String! @unique
  name: String!
  colorCode: String! @unique
  hexCode: String!
  productVariants: [ProductVariant!]!
}

type Collection {
  id: ID! @id
  slug: String! @unique
  images: Json!
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
  products: [Product!]!
}

type CollectionGroup {
  id: ID! @id
  slug: String! @unique
  title: String
  collectionCount: Int
  collections: [Collection!]!
}

type HomepageProductRail {
  id: ID! @id
  slug: String! @unique
  name: String!
  products: [Product!]!
}

type Image {
  id: ID! @id
  caption: String
  originalHeight: Int
  originalUrl: String!
  originalWidth: Int
  resizedUrl: String!
  title: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Location {
  id: ID! @id
  slug: String! @unique
  name: String!
  company: String
  description: String
  address1: String!
  address2: String
  city: String!
  state: String!
  zipCode: String!
  locationType: LocationType
  user: User
  lat: Float
  lng: Float
  physicalProducts: [PhysicalProduct!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Product {
  id: ID! @id
  slug: String! @unique
  name: String!
  brand: Brand!
  category: Category!
  description: String
  externalURL: String
  images: Json!
  modelHeight: Int
  modelSize: Size
  retailPrice: Int
  color: Color! @relation(name: "ProductPrimaryColor")
  secondaryColor: Color @relation(name: "ProductSecondaryColor")
  tags: Json
  functions: [ProductFunction!]!
  availableSizes: [Size!]! @scalarList(strategy: RELATION)
  innerMaterials: [Material!]! @scalarList(strategy: RELATION)
  outerMaterials: [Material!]! @scalarList(strategy: RELATION)
  variants: [ProductVariant!]! @relation(link: TABLE)
  status: ProductStatus @default(value: Available)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProductFunction {
  id: ID! @id
  name: String @unique
}

type ProductVariant {
  id: ID! @id
  sku: String @unique
  color: Color!
  size: Size!
  weight: Float
  height: Float
  productID: String!
  product: Product!
  retailPrice: Float
  physicalProducts: [PhysicalProduct!]! @relation(link: TABLE)
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PhysicalProduct {
  id: ID! @id
  seasonsUID: String! @unique
  location: Location!
  productVariant: ProductVariant!
  inventoryStatus: InventoryStatus!
  productStatus: PhysicalProductStatus!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type User {
  id: ID! @id
  auth0Id: String! @unique
  email: String! @unique
  firstName: String!
  lastName: String!
  role: UserRole! @default(value: Customer)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CustomerDetail {
  id: ID! @id
  phoneNumber: String
  birthday: DateTime
  # Height in inches
  height: Int
  weight: String
  bodyType: String
  averageTopSize: String
  averageWaistSize: String
  averagePantLength: String
  preferredPronouns: String
  profession: String
  # How often do you go out?
  partyFrequency: String
  # Do you travel a lot?
  travelFrequency: String
  # How often do you buy clothes?
  shoppingFrequency: String
  # How much do you spend?
  averageSpend: String
  style: String
  commuteStyle: String
  shippingAddress: Location
  phoneOS: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type BagItem {
  id: ID! @id
  customer: Customer!
  productVariant: ProductVariant!
  position: Int
  saved: Boolean
}

type Customer {
  id: ID! @id
  user: User! @unique
  status: CustomerStatus
  detail: CustomerDetail
  billingInfo: BillingInfo
  plan: Plan
  reservations: [Reservation] @relation(name: "CustomerToReservation")
}

type Order {
  id: ID! @id
}

type Reservation {
  id: ID! @id
  user: User!
  customer: Customer! @relation(name: "CustomerToReservation")
  sentPackage: Package @relation(name: "SeasonsToCustomerPackage")
  returnedPackage: Package @relation(name: "CustomerToSeasonsPackage")
  location: Location
  products: [PhysicalProduct!]!
  reservationNumber: Int! @unique
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Package {
  id: ID! @id
  items: [PhysicalProduct!]
  shippingLabel: Label!
  fromAddress: Location! @relation(name: "SenderAddress")
  toAddress: Location! @relation(name: "RecipientAddress")
  weight: Float
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Label {
  id: ID! @id
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

type BillingInfo {
  id: ID! @id
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
}
