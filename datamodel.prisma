enum BrandTier {
  Tier0
  Tier1
  Tier2
  Niche
  Upcoming
  Retro
  Boutique
  Local
  Discovery
}

enum Department {
  Clothes
  Bags
  Accessories
  Jewelry
}

enum LocationType {
  Office
  Warehouse
  Cleaner
  Customer
}

enum CustomerStatus {
  Invited
  Created
  Waitlisted
  Authorized
  Active
  Suspended
  Paused
  Deactivated
}

enum UserRole {
  Admin
  Customer
  Partner
  Marketer
}

enum InventoryStatus {
  NonReservable
  Reservable
  Reserved
  Stored
  Offloaded
}

enum PhysicalProductStatus {
  New
  Used
  Dirty
  Damaged
  PermanentlyDamaged
  Clean
  Lost
}

enum PhysicalProductOffloadMethod {
  SoldToUser
  SoldToThirdParty
  ReturnedToVendor
  Recycled
  Unknown
}

enum ProductStatus {
  Available
  NotAvailable
  Stored
  Offloaded
}

enum ReservationStatus {
  Queued
  Packed
  Shipped
  Delivered
  Completed
  Cancelled
  Blocked
  Unknown

  Received
}

enum BagItemStatus {
  Added
  Reserved
  Received
}

enum Plan {
  AllAccess
  Essential
}

enum ProductType {
  Top
  Bottom
  Accessory
  Shoe
}

enum BottomSizeType {
  WxL
  US
  EU
  JP
  Letter
}

enum QuestionType {
  MultipleChoice
  FreeResponse
}

enum Rating {
  Disliked
  Ok
  Loved
}

enum LetterSize {
  XS
  S
  M
  L
  XL
  XXL
}

enum ProductArchitecture {
  Fashion
  Showstopper
  Staple
}

enum WarehouseLocationType {
  Conveyor
  Rail
  Bin
}

enum PhotographyStatus {
  Done
  InProgress
  ReadyForEditing
  ReadyToShoot
  Steam
}

enum EmailId {
  ReservationReturnConfirmation
  ReservationConfirmation
  CompleteAccount
  FreeToReserve
  WelcomeToSeasons
  ReturnReminder
  PriorityAccess
}

enum PackageTransitEventStatus {
  PreTransit
  Transit
  Delivered
  Returned
  Failure
  Unknown
}

enum PackageTransitEventSubStatus {
  InformationReceived
  AddressIssue
  ContactCarrier
  Delayed
  DeliveryAttempted
  DeliveryRescheduled
  DeliveryScheduled
  LocationInaccessible
  NoticeLeft
  OutForDelivery
  PackageAccepted
  PackageArrived
  PackageDamaged
  PackageDeparted
  PackageForwarded
  PackageHeld
  PackageProcessed
  PackageProcessing
  PickupAvailable
  RescheduleDelivery
  Delivered
  ReturnToSender
  PackageUnclaimed
  PackageUndeliverable
  PackageDisposed
  PackageLost
  Other
}

enum ReservationPhase {
  BusinessToCustomer
  CustomerToBusiness
}

enum UserPushNotificationInterestType {
  General
  Blog
  Bag
  NewProduct
  Brand
}

type Brand {
  id: ID! @id
  slug: String! @unique
  brandCode: String! @unique
  description: String
  isPrimaryBrand: Boolean! @default(value: false)
  logo: Json
  name: String!
  basedIn: String
  products: [Product!]!
  images: [Image!]
  since: DateTime
  tier: BrandTier!
  websiteUrl: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Category {
  id: ID! @id
  slug: String! @unique
  name: String! @unique
  image: Json
  description: String
  visible: Boolean! @default(value: false)
  products: [Product!]!
  children: [Category!]! @relation(name: "CategoryToChildren")
  updatedAt: DateTime @updatedAt
}

type Color {
  id: ID! @id
  slug: String! @unique
  name: String!
  colorCode: String! @unique
  hexCode: String!
  productVariants: [ProductVariant!]!
}

type Collection {
  id: ID! @id
  slug: String! @unique
  images: Json!
  title: String
  subTitle: String
  descriptionTop: String
  descriptionBottom: String
  products: [Product!]!
}

type CollectionGroup {
  id: ID! @id
  slug: String! @unique
  title: String
  collectionCount: Int
  collections: [Collection!]!
}

type HomepageProductRail {
  id: ID! @id
  slug: String! @unique
  name: String!
  products: [Product!]!
}

type Image {
  id: ID! @id
  caption: String
  url: String! @unique
  height: Int
  width: Int
  title: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Location {
  id: ID! @id
  slug: String @unique
  name: String
  company: String
  description: String
  address1: String
  address2: String
  city: String
  state: String
  zipCode: String!
  locationType: LocationType
  user: User
  lat: Float
  lng: Float
  physicalProducts: [PhysicalProduct!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Tag {
  id: ID! @id
  name: String! @unique
  description: String
  products: [Product!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProductStatusChange {
  id: ID! @id
  old: ProductStatus!
  new: ProductStatus!
  product: Product!
    @relation(name: "ProductToProductStatusChange", onDelete: SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Product {
  id: ID! @id
  slug: String! @unique
  name: String!
  brand: Brand!
  category: Category!
  type: ProductType
  description: String
  externalURL: String
  images: [Image!]
  modelHeight: Int
  retailPrice: Int
  model: ProductModel
  modelSize: Size @relation(name: "ProductModelSize")
  color: Color! @relation(name: "ProductPrimaryColor")
  secondaryColor: Color @relation(name: "ProductSecondaryColor")
  tags: [Tag!]!
  functions: [ProductFunction!]!
  materialCategory: ProductMaterialCategory
  innerMaterials: [String!]! @scalarList(strategy: RELATION)
  outerMaterials: [String!]! @scalarList(strategy: RELATION)
  variants: [ProductVariant!]! @relation(link: TABLE, onDelete: CASCADE)
  status: ProductStatus @default(value: Available)
  statusChanges: [ProductStatusChange!]!
    @relation(
      name: "ProductToProductStatusChange"
      link: TABLE
      onDelete: CASCADE
    )
  season: String
  architecture: ProductArchitecture
  photographyStatus: PhotographyStatus
  publishedAt: DateTime
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProductMaterialCategory {
  id: ID! @id
  slug: String! @unique
  lifeExpectancy: Float!
  category: Category!
  products: [Product!]! @relation(link: TABLE)
}

type ProductModel {
  id: ID! @id
  name: String! @unique
  height: Float!
  products: [Product!]! @relation(link: TABLE)
}

type ProductFunction {
  id: ID! @id
  name: String @unique
}

type ProductVariant {
  id: ID! @id
  sku: String @unique
  color: Color!
  internalSize: Size @relation(name: "ProductVariantSize")
  manufacturerSizes: [Size!] @relation(name: "ProductVariantManufacturerSize")
  weight: Float
  height: Float
  productID: String!
  product: Product! @relation(onDelete: SET_NULL)
  retailPrice: Float
  physicalProducts: [PhysicalProduct!]!
    @relation(link: TABLE, onDelete: CASCADE)
  total: Int!
  reservable: Int!
  reserved: Int!
  nonReservable: Int!
  offloaded: Int!
  stored: Int!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PhysicalProductInventoryStatusChange {
  id: ID! @id
  old: InventoryStatus!
  new: InventoryStatus!
  physicalProduct: PhysicalProduct!
    @relation(
      name: "PhysicalProductToPhysicalProductStatusChange"
      onDelete: SET_NULL
    )
  createdAt: DateTime! @createdAt
  updatedAt: DateTime @updatedAt
}
type PhysicalProduct {
  id: ID! @id
  seasonsUID: String! @unique
  location: Location
  productVariant: ProductVariant! @relation(onDelete: SET_NULL)
  inventoryStatus: InventoryStatus!
  inventoryStatusChanges: [PhysicalProductInventoryStatusChange!]!
    @relation(
      name: "PhysicalProductToPhysicalProductStatusChange"
      link: TABLE
      onDelete: CASCADE
    )
  productStatus: PhysicalProductStatus!
  offloadMethod: PhysicalProductOffloadMethod
  offloadNotes: String
  sequenceNumber: Int!
  warehouseLocation: WarehouseLocation
  barcoded: Boolean @default(value: false)
  dateOrdered: DateTime
  dateReceived: DateTime
  unitCost: Float
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type WarehouseLocationConstraint {
  id: ID! @id
  category: Category!
  limit: Int!
  locations: [WarehouseLocation!]
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type WarehouseLocation {
  id: ID! @id
  type: WarehouseLocationType!
  barcode: String! @unique
  locationCode: String!
  itemCode: String!
  physicalProducts: [PhysicalProduct!]
  constraints: [WarehouseLocationConstraint!]
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PaymentPlan {
  id: ID! @id
  description: String
  planID: String! @unique
  status: String
  name: String
  price: Int
  tagline: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type EmailReceipt {
  id: ID! @id
  emailId: EmailId!
  user: User!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum SmsStatus {
  Queued
  Sending
  Sent
  Failed
  Delivered
  Undelivered
  Receiving
  Received
  Accepted
  Scheduled
  Read
  PartiallyDelivered
}

type SmsReceipt {
  id: ID! @id
  # externalId = external id provided by the SMS service
  externalId: String
  # body = body of the message
  body: String!
  # mediaUrls = image urls attached to message
  mediaUrls: [String!] @scalarList(strategy: RELATION)
  # status = delivery status
  status: SmsStatus!
  sentAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PushNotificationReceipt {
  #id of the notification
  id: ID! @id
  # e.g BagStack, Faq, Webview
  route: String
  # screen on the route
  screen: String
  # uri, e.g https://blog.seasons.nyc/posts/can-the-industry-fix-seasons
  uri: String
  users: [User!] @relation(name: "UserToPushNotificationReceipts")
  # interest = interest we sent it to
  interest: String
  # body = body of the message
  body: String!
  # title = title of the message
  title: String
  # id we pass as a param
  recordID: String
  # slug we pass as a param
  recordSlug: String
  # key/identifier of the notification payload
  notificationKey: String
  sentAt: DateTime!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum UserVerificationMethod {
  SMS
  Email
  None
}

enum UserVerificationStatus {
  Approved
  Denied
  Pending
}

enum PushNotificationStatus {
  Blocked
  Granted
  Denied
}

enum FitPicStatus {
  Submitted
  Published
  Unpublished
}

type FitPic {
  id: ID! @id
  image: Image!
  location: Location
  products: [Product!] @scalarList(strategy: RELATION)
  reports: [FitPicReport!]!
    @relation(name: "FitPicToFitPicReport", onDelete: CASCADE)
  status: FitPicStatus! @default(value: Submitted)
  user: User! @relation(name: "UserToFitPic")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum FitPicReportStatus {
  Pending
  Reviewed
}

type FitPicReport {
  id: ID! @id
  reporter: User!
  reported: FitPic! @relation(name: "FitPicToFitPicReport")
  status: FitPicReportStatus! @default(value: Pending)
  reportedAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type User {
  id: ID! @id
  auth0Id: String! @unique
  email: String! @unique
  firstName: String!
  lastName: String!
  role: UserRole! @default(value: Customer)
  roles: [UserRole!]! @scalarList(strategy: RELATION)
  pushNotificationStatus: PushNotificationStatus! @default(value: Denied)
  pushNotifications: [PushNotificationReceipt!]
    @relation(name: "UserToPushNotificationReceipts", onDelete: CASCADE)
  pushNotification: UserPushNotification
  verificationStatus: UserVerificationStatus! @default(value: Pending)
  verificationMethod: UserVerificationMethod! @default(value: None)
  smsReceipts: [SmsReceipt!]!
    @relation(name: "UserToSmsReceipts", onDelete: CASCADE)
  fitPics: [FitPic!]! @relation(name: "UserToFitPic", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type StylePreferences {
  id: ID! @id
  styles: [String] @scalarList(strategy: RELATION)
  patterns: [String] @scalarList(strategy: RELATION)
  colors: [String] @scalarList(strategy: RELATION)
  brands: [String] @scalarList(strategy: RELATION)
}

type CustomerDetail {
  id: ID! @id
  phoneNumber: String
  birthday: DateTime
  # Height in inches
  height: Int
  # The weight range [min, max], where max = min + 10
  weight: [Int] @scalarList(strategy: RELATION)
  bodyType: String
  averageTopSize: String # to be deprecated in favor of topSizes
  topSizes: [String] @scalarList(strategy: RELATION)
  averageWaistSize: String # to be deprecated in favor of waistSizes
  waistSizes: [Int] @scalarList(strategy: RELATION)
  averagePantLength: String
  preferredPronouns: String
  profession: String
  # How often do you go out?
  partyFrequency: String
  # Do you travel a lot?
  travelFrequency: String
  # How often do you buy clothes?
  shoppingFrequency: String
  # How much do you spend?
  averageSpend: String
  style: String
  commuteStyle: String
  stylePreferences: StylePreferences
  shippingAddress: Location
  phoneOS: String
  insureShipment: Boolean! @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type BagItem {
  id: ID! @id
  customer: Customer! @relation(name: "CustomerToBagItem")
  productVariant: ProductVariant!
  position: Int
  saved: Boolean
  status: BagItemStatus!
}

type Customer {
  id: ID! @id
  user: User! @unique @relation(name: "CustomerToUser", onDelete: CASCADE)
  status: CustomerStatus
  detail: CustomerDetail
    @relation(name: "CustomerToCustomerDetail", onDelete: CASCADE)
  billingInfo: BillingInfo
  plan: Plan
  membership: CustomerMembership
    @relation(name: "CustomerToCustomerMembership", onDelete: CASCADE)
  bagItems: [BagItem] @relation(name: "CustomerToBagItem")
  reservations: [Reservation] @relation(name: "CustomerToReservation")
}

type CustomerMembership {
  id: ID! @id
  subscriptionId: String!
  customer: Customer!
    @relation(
      name: "CustomerToCustomerMembership"
      link: INLINE
      onDelete: SET_NULL
    )
  pauseRequests: [PauseRequest]
    @relation(name: "CustomerMembershipToPauseRequest", onDelete: CASCADE)
}

type PauseRequest {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  pausePending: Boolean!
  pauseDate: DateTime
  resumeDate: DateTime
  notified: Boolean! @default(value: false)
  membership: CustomerMembership!
    @relation(name: "CustomerMembershipToPauseRequest")
}

type RecentlyViewedProduct {
  id: ID! @id
  product: Product!
  customer: Customer!
  viewCount: Int! @default(value: 0)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Reservation {
  id: ID! @id
  user: User!
  customer: Customer! @relation(name: "CustomerToReservation")
  sentPackage: Package
    @relation(link: INLINE, name: "SeasonsToCustomerPackage", onDelete: CASCADE)
  returnedPackage: Package
    @relation(link: INLINE, name: "CustomerToSeasonsPackage", onDelete: CASCADE)
  products: [PhysicalProduct!]!
  packageEvents: [PackageTransitEvent!]
  reservationNumber: Int! @unique
  phase: ReservationPhase!
  shipped: Boolean!
  status: ReservationStatus!
  shippedAt: DateTime
  receivedAt: DateTime
  reminderSentAt: DateTime
  statusUpdatedAt: DateTime
  receipt: ReservationReceipt
    @relation(
      link: INLINE
      name: "ReservationReceiptToReservation"
      onDelete: CASCADE
    )
  lastLocation: Location
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ReservationFeedback {
  id: ID! @id
  comment: String
  feedbacks: [ProductVariantFeedback!]!
    @relation(link: TABLE, onDelete: CASCADE)
  rating: Rating
  user: User!
  reservation: Reservation!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  respondedAt: DateTime
}

type ProductVariantFeedback {
  id: ID! @id
  isCompleted: Boolean!
  questions: [ProductVariantFeedbackQuestion!]! @relation(link: TABLE)
  reservationFeedback: ReservationFeedback!
  variant: ProductVariant!
}

type ProductVariantFeedbackQuestion {
  id: ID! @id
  options: [String!] @scalarList(strategy: RELATION)
  question: String!
  responses: [String!] @scalarList(strategy: RELATION)
  type: QuestionType!
  variantFeedback: ProductVariantFeedback!
}

type ReservationReceipt {
  id: ID! @id
  reservation: Reservation! @relation(name: "ReservationReceiptToReservation")
  items: [ReservationReceiptItem!] @relation(link: TABLE, onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ReservationReceiptItem {
  id: ID! @id
  product: PhysicalProduct!
  productStatus: PhysicalProductStatus!
  notes: String
}

type UserPushNotificationInterest {
  id: ID! @id
  type: UserPushNotificationInterestType!
  value: String! # e.g. CDGS,
  user: User!
  status: Boolean! @default(value: true)
}

type UserPushNotification {
  id: ID! @id
  interests: [UserPushNotificationInterest!]!
  status: Boolean! @default(value: true)
  history: [PushNotificationReceipt!]!
}

type Package {
  id: ID! @id
  items: [PhysicalProduct!]
  transactionID: String!
  shippingLabel: Label!
  fromAddress: Location! @relation(name: "SenderAddress")
  toAddress: Location! @relation(name: "RecipientAddress")
  weight: Float
  events: [PackageTransitEvent!]
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PackageTransitEvent {
  id: ID! @id
  status: PackageTransitEventStatus!
  subStatus: PackageTransitEventSubStatus!
  package: Package!
  reservation: Reservation
  data: Json!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Label {
  id: ID! @id
  name: String
  image: String
  trackingNumber: String
  trackingURL: String
}

type BillingInfo {
  id: ID! @id
  brand: String!
  name: String
  last_digits: String!
  expiration_month: Int!
  expiration_year: Int!
  street1: String
  street2: String
  city: String
  state: String
  country: String
  postal_code: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProductRequest {
  id: ID! @id
  brand: String
  description: String
  images: [String!] @scalarList(strategy: RELATION)
  name: String
  price: Int
  priceCurrency: String
  productID: String
  reason: String!
  sku: String
  url: String!
  user: User!
}

type ProductVariantWant {
  id: ID! @id
  productVariant: ProductVariant!
  user: User!
  isFulfilled: Boolean!
}

type TopSize {
  id: ID! @id
  letter: LetterSize
  sleeve: Float
  shoulder: Float
  chest: Float
  neck: Float
  length: Float
}

type BottomSize {
  id: ID! @id
  type: BottomSizeType
  value: String
  waist: Float
  rise: Float
  hem: Float
  inseam: Float
}

type Size {
  id: ID! @id
  slug: String! @unique
  productType: ProductType
  top: TopSize
  bottom: BottomSize
  display: String!
}

# Helper table for audit logs. Should only ever have 0 or 1 records.
# In the event that it has a record, stores a link to the admin currently making a change
type ActiveAdminUser {
  id: ID! @id
  admin: User!
}

enum AdminAction {
  Insert
  Delete
  Update
  Truncate
}

type AdminActionLog {
  actionId: Int! @id(strategy: AUTO)
  entityId: String!
  tableName: String!
  activeAdminUser: User!
  triggeredAt: DateTime!
  action: AdminAction!
  rowData: Json!
  changedFields: Json
  statementOnly: Boolean!
}
